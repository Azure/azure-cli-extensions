# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddReplicaSets(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddReplicaSets, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'location':
                d['location'] = v[0]
            elif kl == 'subnet-id':
                d['subnet_id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter replica_sets. All possible keys are: '
                               'location, subnet-id'.format(k))
        return d


class AddSettings(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSettings, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'trusted-domain-fqdn':
                d['trusted_domain_fqdn'] = v[0]
            elif kl == 'trust-direction':
                d['trust_direction'] = v[0]
            elif kl == 'friendly-name':
                d['friendly_name'] = v[0]
            elif kl == 'remote-dns-ips':
                d['remote_dns_ips'] = v[0]
            elif kl == 'trust-password':
                d['trust_password'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter settings. All possible keys are: '
                               'trusted-domain-fqdn, trust-direction, friendly-name, remote-dns-ips, trust-password'.
                               format(k))
        return d
