# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .preparers import VirtualNetworkPreparer
from .example_steps import step_ds_create
from .example_steps import step_ds_list
from .example_steps import step_ds_list2
from .example_steps import step_ds_update
from .example_steps import step_ds_show
from .example_steps import step_ds_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg_2, rg):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg_2, rg):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg_2, rg):
    setup_scenario(test, rg_2, rg)
    step_ds_create(test, rg_2, rg, checks=[
        test.check("domainName", "{myDomainService}", case_sensitive=False),
        test.check("replicaSets | length(@)", 1),
        test.check("domainSecuritySettings.ntlmV1", "Enabled", case_sensitive=False),
        test.check("domainSecuritySettings.syncNtlmPasswords", "Enabled", case_sensitive=False),
        test.check("domainSecuritySettings.tlsV1", "Enabled", case_sensitive=False),
        test.check("ldapsSettings.externalAccess", "Disabled", case_sensitive=False),
        test.check("ldapsSettings.ldaps", "Disabled", case_sensitive=False),
        test.check("notificationSettings.notifyDcAdmins", "Enabled", case_sensitive=False),
        test.check("notificationSettings.notifyGlobalAdmins", "Enabled", case_sensitive=False),
        test.check("name", "{myDomainService}", case_sensitive=False),
    ])
    step_ds_list(test, rg_2, rg, checks=[
        test.check("[?name=={myDomainService}]", 1),
    ])
    step_ds_list2(test, rg_2, rg, checks=[
        test.check("[?name=={myDomainService}]", 1),
    ])
    step_ds_update(test, rg_2, rg, checks=[
        test.check("domainName", "{myDomainService}", case_sensitive=False),
        test.check("replicaSets | length(@)", 2),
        test.check("domainSecuritySettings.ntlmV1", "Enabled", case_sensitive=False),
        test.check("domainSecuritySettings.syncNtlmPasswords", "Enabled", case_sensitive=False),
        test.check("domainSecuritySettings.tlsV1", "Disabled", case_sensitive=False),
        test.check("filteredSync", "Disabled", case_sensitive=False),
        test.check("notificationSettings.notifyDcAdmins", "Enabled", case_sensitive=False),
        test.check("notificationSettings.notifyGlobalAdmins", "Enabled", case_sensitive=False),
        test.check("notificationSettings.additionalRecipients | length(@)", 2),
        test.check("name", "{myDomainService}", case_sensitive=False),
    ])
    step_ds_show(test, rg_2, rg, checks=[
        test.check("domainName", "{myDomainService}", case_sensitive=False),
        test.check("replicaSets | length(@)", 2),
        test.check("domainSecuritySettings.ntlmV1", "Enabled", case_sensitive=False),
        test.check("domainSecuritySettings.syncNtlmPasswords", "Enabled", case_sensitive=False),
        test.check("domainSecuritySettings.tlsV1", "Disabled", case_sensitive=False),
        test.check("filteredSync", "Disabled", case_sensitive=False),
        test.check("notificationSettings.notifyDcAdmins", "Enabled", case_sensitive=False),
        test.check("notificationSettings.notifyGlobalAdmins", "Enabled", case_sensitive=False),
        test.check("notificationSettings.additionalRecipients | length(@)", 2),
        test.check("name", "{myDomainService}", case_sensitive=False),
    ])
    step_ds_delete(test, rg_2, rg, checks=[])
    step_ds_list(test, rg_2, rg, checks=[
        test.check("[?name=={myDomainService}]", 0),
    ])
    cleanup_scenario(test, rg_2, rg)


# Test class for Scenario
@try_manual
class AdScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(AdScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myDomainService': 'TestDomainService.com',
        })

    @ResourceGroupPreparer(name_prefix='clitestad_TestNetworkResourceGroup'[:7], key='rg_2', parameter_name='rg_2')
    @ResourceGroupPreparer(name_prefix='clitestad_TestResourceGroup'[:7], key='rg', parameter_name='rg')
    @VirtualNetworkPreparer(name_prefix='clitestad_TestVnetWUS'[:7], key='vn', resource_group_key='rg_2')
    @VirtualNetworkPreparer(name_prefix='clitestad_TestVnetEUS'[:7], key='vn_2', resource_group_key='rg_2')
    def test_ad_Scenario(self, rg_2, rg):
        call_scenario(self, rg_2, rg)
        calc_coverage(__file__)
        raise_if()
