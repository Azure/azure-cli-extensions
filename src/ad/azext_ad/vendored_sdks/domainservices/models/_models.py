# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CloudErrorautogenerated(msrest.serialization.Model):
    """An error response from the Domain Services.

    :param error: An error response from the Domain Services.
    :type error: ~domain_services_resource_provider.models.CloudErrorBodyautogenerated
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CloudErrorBodyautogenerated'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CloudErrorautogenerated, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class CloudErrorBody(msrest.serialization.Model):
    """An error response from the Domain Services.

    :param code: An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically.
    :type code: str
    :param message: A message describing the error, intended to be suitable for display in a user
     interface.
    :type message: str
    :param target: The target of the particular error. For example, the name of the property in
     error.
    :type target: str
    :param details: A list of additional details about the error.
    :type details: list[~domain_services_resource_provider.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)


class CloudErrorBodyautogenerated(msrest.serialization.Model):
    """An error response from the Domain Services.

    :param code: An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically.
    :type code: str
    :param message: A message describing the error, intended to be suitable for display in a user
     interface.
    :type message: str
    :param target: The target of the particular error. For example, the name of the property in
     error.
    :type target: str
    :param details: A list of additional details about the error.
    :type details: list[~domain_services_resource_provider.models.CloudErrorBodyautogenerated]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBodyautogenerated]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CloudErrorBodyautogenerated, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)


class ContainerAccount(msrest.serialization.Model):
    """Container Account Description.

    :param account_name: The account name.
    :type account_name: str
    :param spn: The account spn.
    :type spn: str
    :param password: The account password.
    :type password: str
    """

    _attribute_map = {
        'account_name': {'key': 'accountName', 'type': 'str'},
        'spn': {'key': 'spn', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ContainerAccount, self).__init__(**kwargs)
        self.account_name = kwargs.get('account_name', None)
        self.spn = kwargs.get('spn', None)
        self.password = kwargs.get('password', None)


class DomainSecuritySettings(msrest.serialization.Model):
    """Domain Security Settings.

    :param ntlm_v1: A flag to determine whether or not NtlmV1 is enabled or disabled. Possible
     values include: "Enabled", "Disabled". Default value: "Enabled".
    :type ntlm_v1: str or ~domain_services_resource_provider.models.NtlmV1
    :param tls_v1: A flag to determine whether or not TlsV1 is enabled or disabled. Possible values
     include: "Enabled", "Disabled". Default value: "Enabled".
    :type tls_v1: str or ~domain_services_resource_provider.models.TlsV1
    :param sync_ntlm_passwords: A flag to determine whether or not SyncNtlmPasswords is enabled or
     disabled. Possible values include: "Enabled", "Disabled". Default value: "Enabled".
    :type sync_ntlm_passwords: str or ~domain_services_resource_provider.models.SyncNtlmPasswords
    :param sync_kerberos_passwords: A flag to determine whether or not SyncKerberosPasswords is
     enabled or disabled. Possible values include: "Enabled", "Disabled". Default value: "Enabled".
    :type sync_kerberos_passwords: str or
     ~domain_services_resource_provider.models.SyncKerberosPasswords
    :param sync_on_prem_passwords: A flag to determine whether or not SyncOnPremPasswords is
     enabled or disabled. Possible values include: "Enabled", "Disabled". Default value: "Enabled".
    :type sync_on_prem_passwords: str or
     ~domain_services_resource_provider.models.SyncOnPremPasswords
    """

    _attribute_map = {
        'ntlm_v1': {'key': 'ntlmV1', 'type': 'str'},
        'tls_v1': {'key': 'tlsV1', 'type': 'str'},
        'sync_ntlm_passwords': {'key': 'syncNtlmPasswords', 'type': 'str'},
        'sync_kerberos_passwords': {'key': 'syncKerberosPasswords', 'type': 'str'},
        'sync_on_prem_passwords': {'key': 'syncOnPremPasswords', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DomainSecuritySettings, self).__init__(**kwargs)
        self.ntlm_v1 = kwargs.get('ntlm_v1', "Enabled")
        self.tls_v1 = kwargs.get('tls_v1', "Enabled")
        self.sync_ntlm_passwords = kwargs.get('sync_ntlm_passwords', "Enabled")
        self.sync_kerberos_passwords = kwargs.get('sync_kerberos_passwords', "Enabled")
        self.sync_on_prem_passwords = kwargs.get('sync_on_prem_passwords', "Enabled")


class Resource(msrest.serialization.Model):
    """The Resource model definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param etag: Resource etag.
    :type etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.etag = kwargs.get('etag', None)


class DomainService(Resource):
    """Domain service.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param etag: Resource etag.
    :type etag: str
    :ivar version: Data Model Version.
    :vartype version: int
    :ivar tenant_id: Azure Active Directory Tenant Id.
    :vartype tenant_id: str
    :param domain_name: The name of the Azure domain that the user would like to deploy Domain
     Services to.
    :type domain_name: str
    :ivar deployment_id: Deployment Id.
    :vartype deployment_id: str
    :ivar sync_owner: SyncOwner ReplicaSet Id.
    :vartype sync_owner: str
    :param replica_sets: List of ReplicaSets.
    :type replica_sets: list[~domain_services_resource_provider.models.ReplicaSet]
    :param ldaps_settings: Secure LDAP Settings.
    :type ldaps_settings: ~domain_services_resource_provider.models.LdapsSettings
    :param resource_forest_settings: Resource Forest Settings.
    :type resource_forest_settings:
     ~domain_services_resource_provider.models.ResourceForestSettings
    :param domain_security_settings: DomainSecurity Settings.
    :type domain_security_settings:
     ~domain_services_resource_provider.models.DomainSecuritySettings
    :param domain_configuration_type: Domain Configuration Type. Possible values include:
     "FullySynced", "ResourceTrusting".
    :type domain_configuration_type: str or
     ~domain_services_resource_provider.models.DomainServicePropertiesDomainConfigurationType
    :param sku: Sku Type. Possible values include: "Standard", "Enterprise", "Premium".
    :type sku: str or ~domain_services_resource_provider.models.DomainServicePropertiesSku
    :param filtered_sync: Enabled or Disabled flag to turn on Group-based filtered sync. Possible
     values include: "Enabled", "Disabled".
    :type filtered_sync: str or ~domain_services_resource_provider.models.FilteredSync
    :param notification_settings: Notification Settings.
    :type notification_settings: ~domain_services_resource_provider.models.NotificationSettings
    :ivar migration_properties: Migration Properties.
    :vartype migration_properties: ~domain_services_resource_provider.models.MigrationProperties
    :ivar provisioning_state: the current deployment or provisioning state, which only appears in
     the response.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'version': {'readonly': True},
        'tenant_id': {'readonly': True},
        'deployment_id': {'readonly': True},
        'sync_owner': {'readonly': True},
        'migration_properties': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'version': {'key': 'properties.version', 'type': 'int'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'domain_name': {'key': 'properties.domainName', 'type': 'str'},
        'deployment_id': {'key': 'properties.deploymentId', 'type': 'str'},
        'sync_owner': {'key': 'properties.syncOwner', 'type': 'str'},
        'replica_sets': {'key': 'properties.replicaSets', 'type': '[ReplicaSet]'},
        'ldaps_settings': {'key': 'properties.ldapsSettings', 'type': 'LdapsSettings'},
        'resource_forest_settings': {'key': 'properties.resourceForestSettings', 'type': 'ResourceForestSettings'},
        'domain_security_settings': {'key': 'properties.domainSecuritySettings', 'type': 'DomainSecuritySettings'},
        'domain_configuration_type': {'key': 'properties.domainConfigurationType', 'type': 'str'},
        'sku': {'key': 'properties.sku', 'type': 'str'},
        'filtered_sync': {'key': 'properties.filteredSync', 'type': 'str'},
        'notification_settings': {'key': 'properties.notificationSettings', 'type': 'NotificationSettings'},
        'migration_properties': {'key': 'properties.migrationProperties', 'type': 'MigrationProperties'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DomainService, self).__init__(**kwargs)
        self.version = None
        self.tenant_id = None
        self.domain_name = kwargs.get('domain_name', None)
        self.deployment_id = None
        self.sync_owner = None
        self.replica_sets = kwargs.get('replica_sets', None)
        self.ldaps_settings = kwargs.get('ldaps_settings', None)
        self.resource_forest_settings = kwargs.get('resource_forest_settings', None)
        self.domain_security_settings = kwargs.get('domain_security_settings', None)
        self.domain_configuration_type = kwargs.get('domain_configuration_type', None)
        self.sku = kwargs.get('sku', None)
        self.filtered_sync = kwargs.get('filtered_sync', None)
        self.notification_settings = kwargs.get('notification_settings', None)
        self.migration_properties = None
        self.provisioning_state = None


class DomainServiceListResult(msrest.serialization.Model):
    """The response from the List Domain Services operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: the list of domain services.
    :type value: list[~domain_services_resource_provider.models.DomainService]
    :ivar next_link: The continuation token for the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DomainService]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DomainServiceListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class ForestTrust(msrest.serialization.Model):
    """Forest Trust Setting.

    :param trusted_domain_fqdn: Trusted Domain FQDN.
    :type trusted_domain_fqdn: str
    :param trust_direction: Trust Direction.
    :type trust_direction: str
    :param friendly_name: Friendly Name.
    :type friendly_name: str
    :param remote_dns_ips: Remote Dns ips.
    :type remote_dns_ips: str
    :param trust_password: Trust Password.
    :type trust_password: str
    """

    _attribute_map = {
        'trusted_domain_fqdn': {'key': 'trustedDomainFqdn', 'type': 'str'},
        'trust_direction': {'key': 'trustDirection', 'type': 'str'},
        'friendly_name': {'key': 'friendlyName', 'type': 'str'},
        'remote_dns_ips': {'key': 'remoteDnsIps', 'type': 'str'},
        'trust_password': {'key': 'trustPassword', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ForestTrust, self).__init__(**kwargs)
        self.trusted_domain_fqdn = kwargs.get('trusted_domain_fqdn', None)
        self.trust_direction = kwargs.get('trust_direction', None)
        self.friendly_name = kwargs.get('friendly_name', None)
        self.remote_dns_ips = kwargs.get('remote_dns_ips', None)
        self.trust_password = kwargs.get('trust_password', None)


class HealthAlert(msrest.serialization.Model):
    """Health Alert Description.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Health Alert Id.
    :vartype id: str
    :ivar name: Health Alert Name.
    :vartype name: str
    :ivar issue: Health Alert Issue.
    :vartype issue: str
    :ivar severity: Health Alert Severity.
    :vartype severity: str
    :ivar raised: Health Alert Raised DateTime.
    :vartype raised: ~datetime.datetime
    :ivar last_detected: Health Alert Last Detected DateTime.
    :vartype last_detected: ~datetime.datetime
    :ivar resolution_uri: Health Alert TSG Link.
    :vartype resolution_uri: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'issue': {'readonly': True},
        'severity': {'readonly': True},
        'raised': {'readonly': True},
        'last_detected': {'readonly': True},
        'resolution_uri': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'issue': {'key': 'issue', 'type': 'str'},
        'severity': {'key': 'severity', 'type': 'str'},
        'raised': {'key': 'raised', 'type': 'iso-8601'},
        'last_detected': {'key': 'lastDetected', 'type': 'iso-8601'},
        'resolution_uri': {'key': 'resolutionUri', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HealthAlert, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.issue = None
        self.severity = None
        self.raised = None
        self.last_detected = None
        self.resolution_uri = None


class HealthMonitor(msrest.serialization.Model):
    """Health Monitor Description.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Health Monitor Id.
    :vartype id: str
    :ivar name: Health Monitor Name.
    :vartype name: str
    :ivar details: Health Monitor Details.
    :vartype details: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'details': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'details': {'key': 'details', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HealthMonitor, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.details = None


class LdapsSettings(msrest.serialization.Model):
    """Secure LDAP Settings.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param ldaps: A flag to determine whether or not Secure LDAP is enabled or disabled. Possible
     values include: "Enabled", "Disabled". Default value: "Disabled".
    :type ldaps: str or ~domain_services_resource_provider.models.Ldaps
    :param pfx_certificate: The certificate required to configure Secure LDAP. The parameter passed
     here should be a base64encoded representation of the certificate pfx file.
    :type pfx_certificate: str
    :param pfx_certificate_password: The password to decrypt the provided Secure LDAP certificate
     pfx file.
    :type pfx_certificate_password: str
    :ivar public_certificate: Public certificate used to configure secure ldap.
    :vartype public_certificate: str
    :ivar certificate_thumbprint: Thumbprint of configure ldaps certificate.
    :vartype certificate_thumbprint: str
    :ivar certificate_not_after: NotAfter DateTime of configure ldaps certificate.
    :vartype certificate_not_after: ~datetime.datetime
    :param external_access: A flag to determine whether or not Secure LDAP access over the internet
     is enabled or disabled. Possible values include: "Enabled", "Disabled". Default value:
     "Disabled".
    :type external_access: str or ~domain_services_resource_provider.models.ExternalAccess
    """

    _validation = {
        'public_certificate': {'readonly': True},
        'certificate_thumbprint': {'readonly': True},
        'certificate_not_after': {'readonly': True},
    }

    _attribute_map = {
        'ldaps': {'key': 'ldaps', 'type': 'str'},
        'pfx_certificate': {'key': 'pfxCertificate', 'type': 'str'},
        'pfx_certificate_password': {'key': 'pfxCertificatePassword', 'type': 'str'},
        'public_certificate': {'key': 'publicCertificate', 'type': 'str'},
        'certificate_thumbprint': {'key': 'certificateThumbprint', 'type': 'str'},
        'certificate_not_after': {'key': 'certificateNotAfter', 'type': 'iso-8601'},
        'external_access': {'key': 'externalAccess', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(LdapsSettings, self).__init__(**kwargs)
        self.ldaps = kwargs.get('ldaps', "Disabled")
        self.pfx_certificate = kwargs.get('pfx_certificate', None)
        self.pfx_certificate_password = kwargs.get('pfx_certificate_password', None)
        self.public_certificate = None
        self.certificate_thumbprint = None
        self.certificate_not_after = None
        self.external_access = kwargs.get('external_access', "Disabled")


class MigrationProgress(msrest.serialization.Model):
    """Migration Progress.

    :param completion_percentage: Completion Percentage.
    :type completion_percentage: float
    :param progress_message: Progress Message.
    :type progress_message: str
    """

    _attribute_map = {
        'completion_percentage': {'key': 'completionPercentage', 'type': 'float'},
        'progress_message': {'key': 'progressMessage', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MigrationProgress, self).__init__(**kwargs)
        self.completion_percentage = kwargs.get('completion_percentage', None)
        self.progress_message = kwargs.get('progress_message', None)


class MigrationProperties(msrest.serialization.Model):
    """Migration Properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar old_subnet_id: Old Subnet Id.
    :vartype old_subnet_id: str
    :ivar old_vnet_site_id: Old Vnet Site Id.
    :vartype old_vnet_site_id: str
    :ivar migration_progress: Migration Progress.
    :vartype migration_progress: ~domain_services_resource_provider.models.MigrationProgress
    """

    _validation = {
        'old_subnet_id': {'readonly': True},
        'old_vnet_site_id': {'readonly': True},
        'migration_progress': {'readonly': True},
    }

    _attribute_map = {
        'old_subnet_id': {'key': 'oldSubnetId', 'type': 'str'},
        'old_vnet_site_id': {'key': 'oldVnetSiteId', 'type': 'str'},
        'migration_progress': {'key': 'migrationProgress', 'type': 'MigrationProgress'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MigrationProperties, self).__init__(**kwargs)
        self.old_subnet_id = None
        self.old_vnet_site_id = None
        self.migration_progress = None


class NotificationSettings(msrest.serialization.Model):
    """Settings for notification.

    :param notify_global_admins: Should global admins be notified. Possible values include:
     "Enabled", "Disabled".
    :type notify_global_admins: str or ~domain_services_resource_provider.models.NotifyGlobalAdmins
    :param notify_dc_admins: Should domain controller admins be notified. Possible values include:
     "Enabled", "Disabled".
    :type notify_dc_admins: str or ~domain_services_resource_provider.models.NotifyDcAdmins
    :param additional_recipients: The list of additional recipients.
    :type additional_recipients: list[str]
    """

    _attribute_map = {
        'notify_global_admins': {'key': 'notifyGlobalAdmins', 'type': 'str'},
        'notify_dc_admins': {'key': 'notifyDcAdmins', 'type': 'str'},
        'additional_recipients': {'key': 'additionalRecipients', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(NotificationSettings, self).__init__(**kwargs)
        self.notify_global_admins = kwargs.get('notify_global_admins', None)
        self.notify_dc_admins = kwargs.get('notify_dc_admins', None)
        self.additional_recipients = kwargs.get('additional_recipients', None)


class OperationDisplayInfo(msrest.serialization.Model):
    """The operation supported by Domain Services.

    :param description: The description of the operation.
    :type description: str
    :param operation: The action that users can perform, based on their permission level.
    :type operation: str
    :param provider: Service provider: Domain Services.
    :type provider: str
    :param resource: Resource on which the operation is performed.
    :type resource: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationDisplayInfo, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.operation = kwargs.get('operation', None)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)


class OperationEntity(msrest.serialization.Model):
    """The operation supported by Domain Services.

    :param name: Operation name: {provider}/{resource}/{operation}.
    :type name: str
    :param display: The operation supported by Domain Services.
    :type display: ~domain_services_resource_provider.models.OperationDisplayInfo
    :param origin: The origin of the operation.
    :type origin: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplayInfo'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationEntity, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display = kwargs.get('display', None)
        self.origin = kwargs.get('origin', None)


class OperationEntityListResult(msrest.serialization.Model):
    """The list of domain service operation response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: The list of operations.
    :type value: list[~domain_services_resource_provider.models.OperationEntity]
    :ivar next_link: The continuation token for the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OperationEntity]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationEntityListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class OuContainer(Resource):
    """Resource for OuContainer.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param etag: Resource etag.
    :type etag: str
    :ivar tenant_id: Azure Active Directory tenant id.
    :vartype tenant_id: str
    :ivar domain_name: The domain name of Domain Services.
    :vartype domain_name: str
    :ivar deployment_id: The Deployment id.
    :vartype deployment_id: str
    :ivar container_id: The OuContainer name.
    :vartype container_id: str
    :param accounts: The list of container accounts.
    :type accounts: list[~domain_services_resource_provider.models.ContainerAccount]
    :ivar service_status: Status of OuContainer instance.
    :vartype service_status: str
    :ivar distinguished_name: Distinguished Name of OuContainer instance.
    :vartype distinguished_name: str
    :ivar provisioning_state: The current deployment or provisioning state, which only appears in
     the response.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'tenant_id': {'readonly': True},
        'domain_name': {'readonly': True},
        'deployment_id': {'readonly': True},
        'container_id': {'readonly': True},
        'service_status': {'readonly': True},
        'distinguished_name': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'domain_name': {'key': 'properties.domainName', 'type': 'str'},
        'deployment_id': {'key': 'properties.deploymentId', 'type': 'str'},
        'container_id': {'key': 'properties.containerId', 'type': 'str'},
        'accounts': {'key': 'properties.accounts', 'type': '[ContainerAccount]'},
        'service_status': {'key': 'properties.serviceStatus', 'type': 'str'},
        'distinguished_name': {'key': 'properties.distinguishedName', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OuContainer, self).__init__(**kwargs)
        self.tenant_id = None
        self.domain_name = None
        self.deployment_id = None
        self.container_id = None
        self.accounts = kwargs.get('accounts', None)
        self.service_status = None
        self.distinguished_name = None
        self.provisioning_state = None


class OuContainerListResult(msrest.serialization.Model):
    """The response from the List OuContainer operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: The list of OuContainer.
    :type value: list[~domain_services_resource_provider.models.OuContainer]
    :ivar next_link: The continuation token for the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OuContainer]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OuContainerListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class ReplicaSet(msrest.serialization.Model):
    """Replica Set Definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar replica_set_id: ReplicaSet Id.
    :vartype replica_set_id: str
    :param location: Virtual network location.
    :type location: str
    :ivar vnet_site_id: Virtual network site id.
    :vartype vnet_site_id: str
    :param subnet_id: The name of the virtual network that Domain Services will be deployed on. The
     id of the subnet that Domain Services will be deployed on.
     /virtualNetwork/vnetName/subnets/subnetName.
    :type subnet_id: str
    :ivar domain_controller_ip_address: List of Domain Controller IP Address.
    :vartype domain_controller_ip_address: list[str]
    :ivar external_access_ip_address: External access ip address.
    :vartype external_access_ip_address: str
    :ivar service_status: Status of Domain Service instance.
    :vartype service_status: str
    :ivar health_last_evaluated: Last domain evaluation run DateTime.
    :vartype health_last_evaluated: ~datetime.datetime
    :ivar health_monitors: List of Domain Health Monitors.
    :vartype health_monitors: list[~domain_services_resource_provider.models.HealthMonitor]
    :ivar health_alerts: List of Domain Health Alerts.
    :vartype health_alerts: list[~domain_services_resource_provider.models.HealthAlert]
    """

    _validation = {
        'replica_set_id': {'readonly': True},
        'vnet_site_id': {'readonly': True},
        'domain_controller_ip_address': {'readonly': True},
        'external_access_ip_address': {'readonly': True},
        'service_status': {'readonly': True},
        'health_last_evaluated': {'readonly': True},
        'health_monitors': {'readonly': True},
        'health_alerts': {'readonly': True},
    }

    _attribute_map = {
        'replica_set_id': {'key': 'replicaSetId', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'vnet_site_id': {'key': 'vnetSiteId', 'type': 'str'},
        'subnet_id': {'key': 'subnetId', 'type': 'str'},
        'domain_controller_ip_address': {'key': 'domainControllerIpAddress', 'type': '[str]'},
        'external_access_ip_address': {'key': 'externalAccessIpAddress', 'type': 'str'},
        'service_status': {'key': 'serviceStatus', 'type': 'str'},
        'health_last_evaluated': {'key': 'healthLastEvaluated', 'type': 'rfc-1123'},
        'health_monitors': {'key': 'healthMonitors', 'type': '[HealthMonitor]'},
        'health_alerts': {'key': 'healthAlerts', 'type': '[HealthAlert]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ReplicaSet, self).__init__(**kwargs)
        self.replica_set_id = None
        self.location = kwargs.get('location', None)
        self.vnet_site_id = None
        self.subnet_id = kwargs.get('subnet_id', None)
        self.domain_controller_ip_address = None
        self.external_access_ip_address = None
        self.service_status = None
        self.health_last_evaluated = None
        self.health_monitors = None
        self.health_alerts = None


class ResourceForestSettings(msrest.serialization.Model):
    """Settings for Resource Forest.

    :param settings: List of settings for Resource Forest.
    :type settings: list[~domain_services_resource_provider.models.ForestTrust]
    :param resource_forest: Resource Forest. Possible values include: "Enabled", "Disabled".
    :type resource_forest: str or
     ~domain_services_resource_provider.models.ResourceForestSettingsResourceForest
    """

    _attribute_map = {
        'settings': {'key': 'settings', 'type': '[ForestTrust]'},
        'resource_forest': {'key': 'resourceForest', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ResourceForestSettings, self).__init__(**kwargs)
        self.settings = kwargs.get('settings', None)
        self.resource_forest = kwargs.get('resource_forest', None)
