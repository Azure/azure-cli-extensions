# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class DomainServicePropertiesDomainConfigurationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Domain Configuration Type
    """

    FULLY_SYNCED = "FullySynced"
    RESOURCE_TRUSTING = "ResourceTrusting"

class DomainServicePropertiesSku(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Sku Type
    """

    STANDARD = "Standard"
    ENTERPRISE = "Enterprise"
    PREMIUM = "Premium"

class ExternalAccess(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class FilteredSync(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Enabled or Disabled flag to turn on Group-based filtered sync
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class Ldaps(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A flag to determine whether or not Secure LDAP is enabled or disabled.
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class NotifyDcAdmins(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Should domain controller admins be notified
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class NotifyGlobalAdmins(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Should global admins be notified
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class NtlmV1(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A flag to determine whether or not NtlmV1 is enabled or disabled.
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class ResourceForestSettingsResourceForest(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Resource Forest
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class SyncKerberosPasswords(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A flag to determine whether or not SyncKerberosPasswords is enabled or disabled.
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class SyncNtlmPasswords(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class SyncOnPremPasswords(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class TlsV1(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A flag to determine whether or not TlsV1 is enabled or disabled.
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"
