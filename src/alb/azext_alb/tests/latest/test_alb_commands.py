# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

import os
import unittest
import tempfile

from azure.cli.testsdk import *
from azure.cli.testsdk.scenario_tests import AllowLargeResponse
from knack.util import CLIError
from azure.cli.core.profiles import supported_api_version, ResourceType
from azure.cli.core.commands.client_factory import get_subscription_id
from azure.cli.testsdk import (
    ScenarioTest, LiveScenarioTest, LocalContextScenarioTest, ResourceGroupPreparer, live_only,
    KeyVaultPreparer, record_only)

TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))

class AlbScenario(ScenarioTest):
    def test_alb_resources(self):
        self.kwargs.update({
            'rg': 'cli_record_test_tc_000999990',
            'tc': 'tc1',
            'fe': 'fe1',
            'aso': 'a1',
            'vnet': 'vnet1',
            'subnet': "s1"
        })
        
        #Works with subscription 668f1741-ef48-4132-bf98-28b3a3d3f257
        # Create Resource group.
        self.cmd('group create -n {rg} --location northeurope')

        # Create Traffic Controller
        tcCount1 = len(self.cmd('network alb list -g {rg}').get_output_in_json())
        self.cmd('network alb create -g {rg} -n {tc} --tags foo=doo',
                    checks=self.check('tags.foo', 'doo'))
        tcCount2 = len(self.cmd('network alb list -g {rg}').get_output_in_json())
        self.assertTrue(tcCount2 == tcCount1 + 1)
        self.cmd('network alb show -g {rg} -n {tc}', checks=[
            self.check('name', '{tc}'),
            self.check('resourceGroup', '{rg}'),
            self.check('tags.foo', 'doo')
        ])

        # Create Frontend for traffic controller
        tcFrontendCount1 = len(self.cmd('network alb frontend list -g {rg} --alb-name {tc}').get_output_in_json())
        self.cmd('network alb frontend create -g {rg} -n {fe} --alb-name {tc}')
        tcFrontendCount2 = len(self.cmd('network alb frontend list -g {rg} --alb-name {tc}').get_output_in_json())
        self.assertTrue(tcFrontendCount2 == tcFrontendCount1 + 1)
        self.cmd('network alb frontend show -g {rg} -n {fe} --alb-name {tc}', checks=[
            self.check('name', '{fe}')
        ])

        #Create Association for traffic controller. Currently this tests will only work in subscription db308457-7e8c-44cc-a8a7-c6d7daee414d
        vnet = self.cmd('network vnet create -g {rg} -n {vnet} --subnet-name {subnet}').get_output_in_json()
        subnet = self.cmd('network vnet subnet update -g {rg} -n {subnet} --vnet-name {vnet} --delegations Microsoft.ServiceNetworking/trafficControllers').get_output_in_json()

        associationCount1 = len(self.cmd('network alb association list -g {rg} --alb-name {tc}').get_output_in_json())
        self.cmd('network alb association create -g {rg} -n {aso} --alb-name {tc} --vnet-name {vnet} --subnet {subnet}')
        associationCount2 = len(self.cmd('network alb association list -g {rg} --alb-name {tc}').get_output_in_json())
        self.assertTrue(associationCount2 == associationCount1 + 1)
        self.cmd('network alb association show -g {rg} -n {aso} --alb-name {tc}', checks=[
            self.check('name', '{aso}')
        ])

        #Start Deleting
        self.cmd('network alb association delete -g {rg} -n {aso} --alb-name {tc} -y')
        associationCount3 = len(self.cmd('network alb association list -g {rg} --alb-name {tc}').get_output_in_json())
        self.assertTrue(associationCount3 == associationCount1)

        self.cmd('network alb frontend delete -g {rg} -n {fe} --alb-name {tc} -y')
        tcFrontendCount3 = len(self.cmd('network alb frontend list -g {rg} --alb-name {tc}').get_output_in_json())
        self.assertTrue(tcFrontendCount3 == tcFrontendCount1)

        self.cmd('network alb delete -g {rg} -n {tc} -y')
        tcCount3 = len(self.cmd('network alb list -g {rg}').get_output_in_json())
        self.assertTrue(tcCount3 == tcCount1)

        self.cmd('network vnet delete -g {rg} -n {vnet}')
        self.cmd('group delete -n {rg} -y')