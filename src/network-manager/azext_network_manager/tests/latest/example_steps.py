# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


# # EXAMPLE: /NetworkManagers/put/Put Network Manager
# @try_manual
# def step_manager_create(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager create '
#              '--name "{myNetworkManager2}" '
#              '--description "My Test Network Manager" '
#              '--display-name "{myNetworkManager2}" '
#              '--network-manager-scope-accesses "Security" "Routing" "Connectivity" '
#              '--network-manager-scopes management-groups="/Microsoft.Management/testmg" subscriptions="/subscriptions/{'
#              'subscription_id}" '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /NetworkManagers/get/List Network Manager
# @try_manual
# def step_manager_list(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager list '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /NetworkManagers/get/NetworkManagersGet
# @try_manual
# def step_manager_show(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager show '
#              '--name "{myNetworkManager}" '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /ActiveConfigurations/get/List Active Configurations
# @try_manual
# def step_manager_active_config_list(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager active-config list '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg_3}"',
#              checks=checks)
#
#
# # EXAMPLE: /AdminRules/get/Gets security admin rule
# @try_manual
# def step_manager_admin_rule_show(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager admin-rule show '
#              '--configuration-name "myTestSecurityConfig" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg}" '
#              '--rule-name "SampleAdminRule"',
#              checks=checks)
#
#
# # EXAMPLE: /AdminRules/get/List security admin rules
# @try_manual
# def step_manager_admin_rule_list(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager admin-rule list '
#              '--configuration-name "myTestSecurityConfig" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /AdminRules/delete/Deletes an admin rule.
# @try_manual
# def step_manager_admin_rule_delete(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager admin-rule delete -y '
#              '--configuration-name "myTestSecurityConfig" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg}" '
#              '--rule-name "SampleAdminRule"',
#              checks=checks)
#
#
# # EXAMPLE: /ConnectivityConfigurations/put/ConnectivityConfigurationsPut
# @try_manual
# def step_manager_connect_config_create(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager connect-config create '
#              '--configuration-name "myTestConnectivityConfig" '
#              '--description "Sample Configuration" '
#              '--applies-to-groups group-connectivity="Transitive" is-global=false network-group-id="subscriptions/subsc'
#              'riptionA/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkManagers/testNetworkManager/ne'
#              'tworkManagerGroups/group1" use-hub-gateway=true '
#              '--connectivity-topology "HubAndSpokeTopology" '
#              '--delete-existing-peering true '
#              '--display-name "myTestConnectivityConfig" '
#              '--hub-id "subscriptions/subscriptionA/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualN'
#              'etworks/myTestConnectivityConfig" '
#              '--is-global true '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg_3}"',
#              checks=checks)
#
#
# # EXAMPLE: /ConnectivityConfigurations/get/ConnectivityConfigurationsGet
# @try_manual
# def step_manager_connect_config_show(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager connect-config show '
#              '--configuration-name "myTestConnectivityConfig" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg_3}"',
#              checks=checks)
#
#
# # EXAMPLE: /ConnectivityConfigurations/get/ConnectivityConfigurationsList
# @try_manual
# def step_manager_connect_config_list(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager connect-config list '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg_3}"',
#              checks=checks)
#
#
# # EXAMPLE: /ConnectivityConfigurations/delete/ConnectivityConfigurationsDelete
# @try_manual
# def step_manager_connect_config_delete(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager connect-config delete -y '
#              '--configuration-name "myTestConnectivityConfig" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg_3}"',
#              checks=checks)
#
#
# # EXAMPLE: /EffectiveConfigurations/get/List effective configuration
# @try_manual
# def step_effectiveconfiguration_list(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network effectiveconfiguration list '
#              '--resource-group "{rg_3}" '
#              '--virtual-network-name "{vn}"',
#              checks=checks)
#
#
# # EXAMPLE: /NetworkGroups/put/NetworkGroupsPut
# @try_manual
# def step_manager_group_create(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager group create '
#              '--name "{myNetworkGroup}" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--description "A sample group" '
#              '--conditional-membership "" '
#              '--display-name "My Network Group" '
#              '--group-members resource-id="/subscriptions/{subscription_id}/resourceGroup/{{rg}}/providers/Microsoft.Ne'
#              'twork/virtualnetworks/{vn_2}" '
#              '--member-type "VirtualNetwork" '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /NetworkGroups/get/NetworkGroupsGet
# @try_manual
# def step_manager_group_show(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager group show '
#              '--name "{myNetworkGroup}" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /NetworkGroups/get/NetworkGroupsList
# @try_manual
# def step_manager_group_list(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager group list '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /EffectiveVirtualNetworks/post/List Network Manager
# @try_manual
# def step_manager_effect_vnet_list_by_network_manager(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager effect-vnet list-by-network-manager '
#              '--network-manager-name "{myNetworkManager}" '
#              '--conditional-members "location=\'useast2\'" '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /EffectiveVirtualNetworks/post/NetworkGroupsList
# @try_manual
# def step_manager_effect_vnet_list_by_network_group(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager effect-vnet list-by-network-group '
#              '--network-group-name "{myNetworkGroup}" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /SecurityConfigurations/put/Create network manager security Configuration
# @try_manual
# def step_manager_security_config_create(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager security-config create '
#              '--configuration-name "myTestSecurityConfig" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg}" '
#              '--description "A sample policy" '
#              '--applies-to-groups network-group-id="/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Micr'
#              'osoft.Network/networkManagers/{myNetworkManager}/networkGroups/{myNetworkGroup2}" '
#              '--delete-existing-ns-gs true '
#              '--security-type "UserPolicy"',
#              checks=checks)
#
#
# # EXAMPLE: /SecurityConfigurations/get/Get security configurations
# @try_manual
# def step_manager_security_config_show(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager security-config show '
#              '--configuration-name "myTestSecurityConfig" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /SecurityConfigurations/get/List security configurations in a network manager
# @try_manual
# def step_manager_security_config_list(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager security-config list '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /SecurityConfigurations/post/Evaluate import NSG Rules
# @try_manual
# def step_manager_security_config_evaluate_import(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager security-config evaluate-import '
#              '--configuration-name "myTestConfig" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--admin-security-configuration-uri "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Micros'
#              'oft.Network/networkManagers/{myNetworkManager}/securityConfigurations/{mySecurityConfiguration2}" '
#              '--import-deny-rules-as-admin-rules true '
#              '--network-security-group-imports network-security-group-uri="/subscriptions/{subscription_id}/resourceGro'
#              'ups/{rg}/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1" '
#              '--remove-allow-azure-load-balancer-inbound-rule true '
#              '--remove-allow-internet-outbound-rule true '
#              '--remove-allow-vnet-inbound-rule true '
#              '--remove-allow-vnet-outbound-rule true '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /SecurityConfigurations/post/Import NSG Rules
# @try_manual
# def step_manager_security_config_import(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager security-config import '
#              '--configuration-name "myTestConfig" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--admin-security-configuration-uri "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Micros'
#              'oft.Network/networkManagers/{myNetworkManager}/securityConfigurations/{mySecurityConfiguration2}" '
#              '--import-deny-rules-as-admin-rules true '
#              '--network-security-group-imports network-security-group-uri="/subscriptions/{subscription_id}/resourceGro'
#              'ups/{rg}/providers/Microsoft.Network/networkSecurityGroups/testnsg/securityRules/rule1" '
#              '--remove-allow-azure-load-balancer-inbound-rule true '
#              '--remove-allow-internet-outbound-rule true '
#              '--remove-allow-vnet-inbound-rule true '
#              '--remove-allow-vnet-outbound-rule true '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /NetworkGroups/delete/NetworkGroupsDelete
# @try_manual
# def step_manager_group_delete(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager group delete -y '
#              '--name "{myNetworkGroup}" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /NetworkManagerCommits/post/NetworkManageCommitPost
# @try_manual
# def step_manager_commit_post(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager commit post '
#              '--network-manager-name "{myNetworkManager}" '
#              '--commit-type "AdminPolicy" '
#              '--configuration-ids "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Network/n'
#              'etworkManagers/{myNetworkManager}/securityConfigurations/{mySecurityConfiguration}" '
#              '--target-locations "usest" '
#              '--resource-group "{rg_2}"',
#              checks=checks)
#
#
# # EXAMPLE: /NetworkManagerDeploymentStatus/post/NetworkManagerDeploymentStatusList
# @try_manual
# def step_manager_deploy_status_list(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager deploy-status list '
#              '--network-manager-name "{myNetworkManager}" '
#              '--deployment-types "Connectivity" "AdminPolicy" '
#              '--regions "eastus" "westus" '
#              '--resource-group "{rg_2}"',
#              checks=checks)
#
#
# # EXAMPLE: /SecurityConfigurations/delete/Delete network manager security Configuration
# @try_manual
# def step_manager_security_config_delete(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager security-config delete -y '
#              '--configuration-name "myTestSecurityConfig" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /UserRules/put/Create a user rule
# @try_manual
# def step_manager_user_rule_create(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager user-rule create '
#              '--configuration-name "myTestSecurityConfig" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg}" '
#              '--rule-name "SampleUserRule" '
#              '--description "Sample User Rule" '
#              '--destination address-prefix="*" address-prefix-type="IPPrefix" '
#              '--destination-port-ranges "22" '
#              '--direction "Inbound" '
#              '--source address-prefix="*" address-prefix-type="IPPrefix" '
#              '--source-port-ranges "0-65535" '
#              '--protocol "Tcp"',
#              checks=checks)
#
#
# # EXAMPLE: /UserRules/get/Gets a user rule
# @try_manual
# def step_manager_user_rule_show(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager user-rule show '
#              '--configuration-name "myTestSecurityConfig" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg}" '
#              '--rule-name "SampleUserRule"',
#              checks=checks)
#
#
# # EXAMPLE: /UserRules/get/List security user rules
# @try_manual
# def step_manager_user_rule_list(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager user-rule list '
#              '--configuration-name "myTestConnectivityConfig" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg}"',
#              checks=checks)
#
#
# # EXAMPLE: /UserRules/delete/Delete a user rule.
# @try_manual
# def step_manager_user_rule_delete(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager user-rule delete -y '
#              '--configuration-name "myTestSecurityConfig" '
#              '--network-manager-name "{myNetworkManager}" '
#              '--resource-group "{rg}" '
#              '--rule-name "SampleUserRule"',
#              checks=checks)
#
#
# # EXAMPLE: /NetworkManagers/delete/NetworkManagersDelete
# @try_manual
# def step_manager_delete(test, rg_2, rg, rg_3, checks=None):
#     if checks is None:
#         checks = []
#     test.cmd('az network manager delete -y '
#              '--name "{myNetworkManager}" '
#              '--resource-group "{rg}"',
#              checks=checks)
#
