# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

import msrest.serialization

from ._network_management_client_enums import *


class EffectiveConfiguration(msrest.serialization.Model):
    """The network manager effective configuration.

    :param config_type: Effective configuration. Possible values include: "AdminPolicy",
     "UserPolicy", "Connectivity".
    :type config_type: str or ~azure.mgmt.network.v2021_02_preview.models.ConfigType
    :param connectivity_configuration: Connectivity configuration object.
    :type connectivity_configuration:
     ~azure.mgmt.network.v2021_02_preview.models.ConnectivityConfiguration
    :param security_admin_rule: Security admin rule object.
    :type security_admin_rule: ~azure.mgmt.network.v2021_02_preview.models.AdminRule
    :param security_user_rule: Security user rule object.
    :type security_user_rule: ~azure.mgmt.network.v2021_02_preview.models.UserRule
    :param configuration_groups: Effective configuration groups.
    :type configuration_groups: list[~azure.mgmt.network.v2021_02_preview.models.NetworkGroup]
    """

    _attribute_map = {
        'config_type': {'key': 'configType', 'type': 'str'},
        'connectivity_configuration': {'key': 'connectivityConfiguration', 'type': 'ConnectivityConfiguration'},
        'security_admin_rule': {'key': 'securityAdminRule', 'type': 'AdminRule'},
        'security_user_rule': {'key': 'securityUserRule', 'type': 'UserRule'},
        'configuration_groups': {'key': 'configurationGroups', 'type': '[NetworkGroup]'},
    }

    def __init__(
        self,
        *,
        config_type: Optional[Union[str, "ConfigType"]] = None,
        connectivity_configuration: Optional["ConnectivityConfiguration"] = None,
        security_admin_rule: Optional["AdminRule"] = None,
        security_user_rule: Optional["UserRule"] = None,
        configuration_groups: Optional[List["NetworkGroup"]] = None,
        **kwargs
    ):
        super(EffectiveConfiguration, self).__init__(**kwargs)
        self.config_type = config_type
        self.connectivity_configuration = connectivity_configuration
        self.security_admin_rule = security_admin_rule
        self.security_user_rule = security_user_rule
        self.configuration_groups = configuration_groups


class ActiveConfiguration(EffectiveConfiguration):
    """Active Configuration.

    :param config_type: Effective configuration. Possible values include: "AdminPolicy",
     "UserPolicy", "Connectivity".
    :type config_type: str or ~azure.mgmt.network.v2021_02_preview.models.ConfigType
    :param connectivity_configuration: Connectivity configuration object.
    :type connectivity_configuration:
     ~azure.mgmt.network.v2021_02_preview.models.ConnectivityConfiguration
    :param security_admin_rule: Security admin rule object.
    :type security_admin_rule: ~azure.mgmt.network.v2021_02_preview.models.AdminRule
    :param security_user_rule: Security user rule object.
    :type security_user_rule: ~azure.mgmt.network.v2021_02_preview.models.UserRule
    :param configuration_groups: Effective configuration groups.
    :type configuration_groups: list[~azure.mgmt.network.v2021_02_preview.models.NetworkGroup]
    :param commit_time: Deployment time string.
    :type commit_time: ~datetime.datetime
    :param region: Deployment region.
    :type region: str
    """

    _attribute_map = {
        'config_type': {'key': 'configType', 'type': 'str'},
        'connectivity_configuration': {'key': 'connectivityConfiguration', 'type': 'ConnectivityConfiguration'},
        'security_admin_rule': {'key': 'securityAdminRule', 'type': 'AdminRule'},
        'security_user_rule': {'key': 'securityUserRule', 'type': 'UserRule'},
        'configuration_groups': {'key': 'configurationGroups', 'type': '[NetworkGroup]'},
        'commit_time': {'key': 'commitTime', 'type': 'iso-8601'},
        'region': {'key': 'region', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        config_type: Optional[Union[str, "ConfigType"]] = None,
        connectivity_configuration: Optional["ConnectivityConfiguration"] = None,
        security_admin_rule: Optional["AdminRule"] = None,
        security_user_rule: Optional["UserRule"] = None,
        configuration_groups: Optional[List["NetworkGroup"]] = None,
        commit_time: Optional[datetime.datetime] = None,
        region: Optional[str] = None,
        **kwargs
    ):
        super(ActiveConfiguration, self).__init__(config_type=config_type, connectivity_configuration=connectivity_configuration, security_admin_rule=security_admin_rule, security_user_rule=security_user_rule, configuration_groups=configuration_groups, **kwargs)
        self.commit_time = commit_time
        self.region = region


class ActiveConfigurationListResult(msrest.serialization.Model):
    """Result of the request to list active configurations. It contains a list of active configurations and a URL link to get the next set of results.

    :param value: Gets a page of active configurations.
    :type value: list[~azure.mgmt.network.v2021_02_preview.models.ActiveConfiguration]
    :param next_link: Gets the URL to get the next set of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ActiveConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["ActiveConfiguration"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ActiveConfigurationListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class AddressPrefixItem(msrest.serialization.Model):
    """Address prefix item.

    :param address_prefix: Address prefix.
    :type address_prefix: str
    :param address_prefix_type: Address prefix type. Possible values include: "IPPrefix",
     "ServiceTag".
    :type address_prefix_type: str or ~azure.mgmt.network.v2021_02_preview.models.AddressPrefixType
    """

    _attribute_map = {
        'address_prefix': {'key': 'addressPrefix', 'type': 'str'},
        'address_prefix_type': {'key': 'addressPrefixType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        address_prefix: Optional[str] = None,
        address_prefix_type: Optional[Union[str, "AddressPrefixType"]] = None,
        **kwargs
    ):
        super(AddressPrefixItem, self).__init__(**kwargs)
        self.address_prefix = address_prefix
        self.address_prefix_type = address_prefix_type


class ProxyResource(msrest.serialization.Model):
    """Proxy resource representation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProxyResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.etag = None


class AdminRule(ProxyResource):
    """Network admin rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar system_data: The system metadata related to this resource.
    :vartype system_data: ~azure.mgmt.network.v2021_02_preview.models.SystemData
    :param display_name: A friendly name for the rule.
    :type display_name: str
    :param description: A description for this rule.
    :type description: str
    :param protocol: Network protocol this rule applies to. Possible values include: "Tcp", "Udp",
     "Icmp", "Esp", "Any", "Ah".
    :type protocol: str or
     ~azure.mgmt.network.v2021_02_preview.models.SecurityConfigurationRuleProtocol
    :param source: The CIDR or source IP ranges.
    :type source: list[~azure.mgmt.network.v2021_02_preview.models.AddressPrefixItem]
    :param destination: The destination address prefixes. CIDR or destination IP ranges.
    :type destination: list[~azure.mgmt.network.v2021_02_preview.models.AddressPrefixItem]
    :param source_port_ranges: The source port ranges.
    :type source_port_ranges: list[str]
    :param destination_port_ranges: The destination port ranges.
    :type destination_port_ranges: list[str]
    :param access: Indicates the access allowed for this particular rule. Possible values include:
     "Allow", "Deny", "AlwaysAllow".
    :type access: str or
     ~azure.mgmt.network.v2021_02_preview.models.SecurityConfigurationRuleAccess
    :param priority: The priority of the rule. The value can be between 1 and 4096. The priority
     number must be unique for each rule in the collection. The lower the priority number, the
     higher the priority of the rule.
    :type priority: int
    :param direction: Indicates if the traffic matched against the rule in inbound or outbound.
     Possible values include: "Inbound", "Outbound".
    :type direction: str or
     ~azure.mgmt.network.v2021_02_preview.models.SecurityConfigurationRuleDirection
    :ivar provisioning_state: The provisioning state of the security Configuration resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.network.v2021_02_preview.models.ProvisioningState
    :param applies_to_groups: Groups for configuration.
    :type applies_to_groups:
     list[~azure.mgmt.network.v2021_02_preview.models.NetworkManagerSecurityGroupItem]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'source': {'key': 'properties.source', 'type': '[AddressPrefixItem]'},
        'destination': {'key': 'properties.destination', 'type': '[AddressPrefixItem]'},
        'source_port_ranges': {'key': 'properties.sourcePortRanges', 'type': '[str]'},
        'destination_port_ranges': {'key': 'properties.destinationPortRanges', 'type': '[str]'},
        'access': {'key': 'properties.access', 'type': 'str'},
        'priority': {'key': 'properties.priority', 'type': 'int'},
        'direction': {'key': 'properties.direction', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'applies_to_groups': {'key': 'properties.appliesToGroups', 'type': '[NetworkManagerSecurityGroupItem]'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        protocol: Optional[Union[str, "SecurityConfigurationRuleProtocol"]] = None,
        source: Optional[List["AddressPrefixItem"]] = None,
        destination: Optional[List["AddressPrefixItem"]] = None,
        source_port_ranges: Optional[List[str]] = None,
        destination_port_ranges: Optional[List[str]] = None,
        access: Optional[Union[str, "SecurityConfigurationRuleAccess"]] = None,
        priority: Optional[int] = None,
        direction: Optional[Union[str, "SecurityConfigurationRuleDirection"]] = None,
        applies_to_groups: Optional[List["NetworkManagerSecurityGroupItem"]] = None,
        **kwargs
    ):
        super(AdminRule, self).__init__(**kwargs)
        self.system_data = None
        self.display_name = display_name
        self.description = description
        self.protocol = protocol
        self.source = source
        self.destination = destination
        self.source_port_ranges = source_port_ranges
        self.destination_port_ranges = destination_port_ranges
        self.access = access
        self.priority = priority
        self.direction = direction
        self.provisioning_state = None
        self.applies_to_groups = applies_to_groups


class AdminRuleListResult(msrest.serialization.Model):
    """Security configuration admin rule list result.

    :param value: A list of admin rules.
    :type value: list[~azure.mgmt.network.v2021_02_preview.models.AdminRule]
    :param next_link: Gets the URL to get the next set of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AdminRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["AdminRule"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(AdminRuleListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class AzureAsyncOperationResult(msrest.serialization.Model):
    """The response body contains the status of the specified asynchronous operation, indicating whether it has succeeded, is in progress, or has failed. Note that this status is distinct from the HTTP status code returned for the Get Operation Status operation itself. If the asynchronous operation succeeded, the response body includes the HTTP status code for the successful request. If the asynchronous operation failed, the response body includes the HTTP status code for the failed request and error information regarding the failure.

    :param status: Status of the Azure async operation. Possible values include: "InProgress",
     "Succeeded", "Failed".
    :type status: str or ~azure.mgmt.network.v2021_02_preview.models.NetworkOperationStatus
    :param error: Details of the error occurred during specified asynchronous operation.
    :type error: ~azure.mgmt.network.v2021_02_preview.models.Error
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "NetworkOperationStatus"]] = None,
        error: Optional["Error"] = None,
        **kwargs
    ):
        super(AzureAsyncOperationResult, self).__init__(**kwargs)
        self.status = status
        self.error = error


class CloudErrorBody(msrest.serialization.Model):
    """An error response from the service.

    :param code: An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically.
    :type code: str
    :param message: A message describing the error, intended to be suitable for display in a user
     interface.
    :type message: str
    :param target: The target of the particular error. For example, the name of the property in
     error.
    :type target: str
    :param details: A list of additional details about the error.
    :type details: list[~azure.mgmt.network.v2021_02_preview.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        details: Optional[List["CloudErrorBody"]] = None,
        **kwargs
    ):
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties(msrest.serialization.Model):
    """Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal id of user assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client id of user assigned identity.
    :vartype client_id: str
    """

    _validation = {
        'principal_id': {'readonly': True},
        'client_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties, self).__init__(**kwargs)
        self.principal_id = None
        self.client_id = None


class ConnectivityConfiguration(ProxyResource):
    """The network manager connectivity configuration resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar system_data: The system metadata related to this resource.
    :vartype system_data: ~azure.mgmt.network.v2021_02_preview.models.SystemData
    :param display_name: A friendly name for the resource.
    :type display_name: str
    :param description: A description of the connectivity configuration.
    :type description: str
    :param connectivity_topology: Connectivity topology type. Possible values include:
     "HubAndSpokeTopology", "MeshTopology".
    :type connectivity_topology: str or
     ~azure.mgmt.network.v2021_02_preview.models.ConnectivityTopology
    :param hub_id: The hub vnet Id.
    :type hub_id: str
    :param is_global: Flag if global mesh is supported.
    :type is_global: bool
    :param applies_to_groups: Groups for configuration.
    :type applies_to_groups:
     list[~azure.mgmt.network.v2021_02_preview.models.ConnectivityGroupItem]
    :ivar provisioning_state: The provisioning state of the connectivity configuration resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.network.v2021_02_preview.models.ProvisioningState
    :param delete_existing_peering: Flag if need to remove current existing peerings.
    :type delete_existing_peering: bool
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'connectivity_topology': {'key': 'properties.connectivityTopology', 'type': 'str'},
        'hub_id': {'key': 'properties.hubId', 'type': 'str'},
        'is_global': {'key': 'properties.isGlobal', 'type': 'bool'},
        'applies_to_groups': {'key': 'properties.appliesToGroups', 'type': '[ConnectivityGroupItem]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'delete_existing_peering': {'key': 'properties.deleteExistingPeering', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        connectivity_topology: Optional[Union[str, "ConnectivityTopology"]] = None,
        hub_id: Optional[str] = None,
        is_global: Optional[bool] = None,
        applies_to_groups: Optional[List["ConnectivityGroupItem"]] = None,
        delete_existing_peering: Optional[bool] = None,
        **kwargs
    ):
        super(ConnectivityConfiguration, self).__init__(**kwargs)
        self.system_data = None
        self.display_name = display_name
        self.description = description
        self.connectivity_topology = connectivity_topology
        self.hub_id = hub_id
        self.is_global = is_global
        self.applies_to_groups = applies_to_groups
        self.provisioning_state = None
        self.delete_existing_peering = delete_existing_peering


class ConnectivityConfigurationListResult(msrest.serialization.Model):
    """Result of the request to list network manager connectivity configurations. It contains a list of configurations and a link to get the next set of results.

    :param value: Gets a page of Connectivity Configurations.
    :type value: list[~azure.mgmt.network.v2021_02_preview.models.ConnectivityConfiguration]
    :param next_link: Gets the URL to get the next page of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ConnectivityConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["ConnectivityConfiguration"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ConnectivityConfigurationListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ConnectivityGroupItem(msrest.serialization.Model):
    """ConnectivityGroupItem.

    :param network_group_id: Network group Id.
    :type network_group_id: str
    :param use_hub_gateway: Flag if need to use hub gateway.
    :type use_hub_gateway: bool
    :param is_global: Flag if global is supported.
    :type is_global: bool
    :param group_connectivity: Group connectivity type. Possible values include: "None",
     "DirectlyConnected".
    :type group_connectivity: str or ~azure.mgmt.network.v2021_02_preview.models.GroupConnectivity
    """

    _attribute_map = {
        'network_group_id': {'key': 'networkGroupId', 'type': 'str'},
        'use_hub_gateway': {'key': 'useHubGateway', 'type': 'bool'},
        'is_global': {'key': 'isGlobal', 'type': 'bool'},
        'group_connectivity': {'key': 'groupConnectivity', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        network_group_id: Optional[str] = None,
        use_hub_gateway: Optional[bool] = None,
        is_global: Optional[bool] = None,
        group_connectivity: Optional[Union[str, "GroupConnectivity"]] = None,
        **kwargs
    ):
        super(ConnectivityGroupItem, self).__init__(**kwargs)
        self.network_group_id = network_group_id
        self.use_hub_gateway = use_hub_gateway
        self.is_global = is_global
        self.group_connectivity = group_connectivity


class EffectiveVirtualNetwork(msrest.serialization.Model):
    """Effective Virtual Network.

    :param id: Effective vnet Id.
    :type id: str
    :param location: Location of vnet.
    :type location: str
    :param membership_type: Membership Type. Possible values include: "Static", "Dynamic".
    :type membership_type: str or ~azure.mgmt.network.v2021_02_preview.models.MembershipType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'membership_type': {'key': 'membershipType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        location: Optional[str] = None,
        membership_type: Optional[Union[str, "MembershipType"]] = None,
        **kwargs
    ):
        super(EffectiveVirtualNetwork, self).__init__(**kwargs)
        self.id = id
        self.location = location
        self.membership_type = membership_type


class EffectiveVirtualNetworksListResult(msrest.serialization.Model):
    """Result of the request to list Effective Virtual Network. It contains a list of groups and a URL link to get the next set of results.

    :param value: Gets a page of EffectiveVirtualNetwork.
    :type value: list[~azure.mgmt.network.v2021_02_preview.models.EffectiveVirtualNetwork]
    :param total_records: Total Records.
    :type total_records: int
    :param first_index: First Index.
    :type first_index: int
    :param page_size: Page Size.
    :type page_size: int
    :param next_link: Gets the URL to get the next set of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[EffectiveVirtualNetwork]'},
        'total_records': {'key': 'totalRecords', 'type': 'int'},
        'first_index': {'key': 'firstIndex', 'type': 'int'},
        'page_size': {'key': 'pageSize', 'type': 'int'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["EffectiveVirtualNetwork"]] = None,
        total_records: Optional[int] = None,
        first_index: Optional[int] = None,
        page_size: Optional[int] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(EffectiveVirtualNetworksListResult, self).__init__(**kwargs)
        self.value = value
        self.total_records = total_records
        self.first_index = first_index
        self.page_size = page_size
        self.next_link = next_link


class EffectiveVirtualNetworksParameter(msrest.serialization.Model):
    """Effective Virtual Networks Parameter.

    :param conditional_members: Conditional Members.
    :type conditional_members: str
    """

    _attribute_map = {
        'conditional_members': {'key': 'conditionalMembers', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        conditional_members: Optional[str] = None,
        **kwargs
    ):
        super(EffectiveVirtualNetworksParameter, self).__init__(**kwargs)
        self.conditional_members = conditional_members


class Error(msrest.serialization.Model):
    """Common error representation.

    :param code: Error code.
    :type code: str
    :param message: Error message.
    :type message: str
    :param target: Error target.
    :type target: str
    :param details: Error details.
    :type details: list[~azure.mgmt.network.v2021_02_preview.models.ErrorDetails]
    :param inner_error: Inner error message.
    :type inner_error: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetails]'},
        'inner_error': {'key': 'innerError', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        details: Optional[List["ErrorDetails"]] = None,
        inner_error: Optional[str] = None,
        **kwargs
    ):
        super(Error, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.inner_error = inner_error


class ErrorDetails(msrest.serialization.Model):
    """Common error details representation.

    :param code: Error code.
    :type code: str
    :param target: Error target.
    :type target: str
    :param message: Error message.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        target: Optional[str] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(ErrorDetails, self).__init__(**kwargs)
        self.code = code
        self.target = target
        self.message = message


class ExtendedLocation(msrest.serialization.Model):
    """ExtendedLocation complex type.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the extended location.
    :type name: str
    :param type: Required. The type of the extended location. Possible values include: "EdgeZone".
    :type type: str or ~azure.mgmt.network.v2021_02_preview.models.ExtendedLocationTypes
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        type: Union[str, "ExtendedLocationTypes"],
        **kwargs
    ):
        super(ExtendedLocation, self).__init__(**kwargs)
        self.name = name
        self.type = type


class FailedImport(msrest.serialization.Model):
    """Failed imports object.

    :param failure_code: Failure code.
    :type failure_code: str
    :param failure_reason: Failure reason.
    :type failure_reason: str
    """

    _attribute_map = {
        'failure_code': {'key': 'failureCode', 'type': 'str'},
        'failure_reason': {'key': 'failureReason', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        failure_code: Optional[str] = None,
        failure_reason: Optional[str] = None,
        **kwargs
    ):
        super(FailedImport, self).__init__(**kwargs)
        self.failure_code = failure_code
        self.failure_reason = failure_reason


class GroupMembersItem(msrest.serialization.Model):
    """GroupMembers Item.

    :param resource_id: Resource Id.
    :type resource_id: str
    """

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        resource_id: Optional[str] = None,
        **kwargs
    ):
        super(GroupMembersItem, self).__init__(**kwargs)
        self.resource_id = resource_id


class ManagedServiceIdentity(msrest.serialization.Model):
    """Identity for the resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal id of the system assigned identity. This property will only
     be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant id of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :param type: The type of identity used for the resource. The type 'SystemAssigned,
     UserAssigned' includes both an implicitly created identity and a set of user assigned
     identities. The type 'None' will remove any identities from the virtual machine. Possible
     values include: "SystemAssigned", "UserAssigned", "SystemAssigned, UserAssigned", "None".
    :type type: str or ~azure.mgmt.network.v2021_02_preview.models.ResourceIdentityType
    :param user_assigned_identities: The list of user identities associated with resource. The user
     identity dictionary key references will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
    :type user_assigned_identities: dict[str,
     ~azure.mgmt.network.v2021_02_preview.models.Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties]
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'user_assigned_identities': {'key': 'userAssignedIdentities', 'type': '{Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties}'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "ResourceIdentityType"]] = None,
        user_assigned_identities: Optional[Dict[str, "Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties"]] = None,
        **kwargs
    ):
        super(ManagedServiceIdentity, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class NetworkGroup(ProxyResource):
    """The network group resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar system_data: The system metadata related to this resource.
    :vartype system_data: ~azure.mgmt.network.v2021_02_preview.models.SystemData
    :param display_name: A friendly name for the network group.
    :type display_name: str
    :param description: A description of the network group.
    :type description: str
    :param member_type: Group member type. Possible values include: "VirtualNetwork", "Subnet".
    :type member_type: str or ~azure.mgmt.network.v2021_02_preview.models.MemberType
    :param group_members: Group members of network group.
    :type group_members: list[~azure.mgmt.network.v2021_02_preview.models.GroupMembersItem]
    :param conditional_membership: Network group conditional filter.
    :type conditional_membership: str
    :ivar provisioning_state: The provisioning state of the scope assignment resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.network.v2021_02_preview.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'member_type': {'key': 'properties.memberType', 'type': 'str'},
        'group_members': {'key': 'properties.groupMembers', 'type': '[GroupMembersItem]'},
        'conditional_membership': {'key': 'properties.conditionalMembership', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        member_type: Optional[Union[str, "MemberType"]] = None,
        group_members: Optional[List["GroupMembersItem"]] = None,
        conditional_membership: Optional[str] = None,
        **kwargs
    ):
        super(NetworkGroup, self).__init__(**kwargs)
        self.system_data = None
        self.display_name = display_name
        self.description = description
        self.member_type = member_type
        self.group_members = group_members
        self.conditional_membership = conditional_membership
        self.provisioning_state = None


class NetworkGroupListResult(msrest.serialization.Model):
    """Result of the request to list NetworkGroup. It contains a list of groups and a URL link to get the next set of results.

    :param value: Gets a page of NetworkGroup.
    :type value: list[~azure.mgmt.network.v2021_02_preview.models.NetworkGroup]
    :param next_link: Gets the URL to get the next set of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkGroup]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["NetworkGroup"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(NetworkGroupListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Resource(msrest.serialization.Model):
    """Common resource representation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = id
        self.name = None
        self.type = None
        self.location = location
        self.tags = tags


class NetworkManager(Resource):
    """The Managed Network resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Resource ID.
    :type id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar system_data: The system metadata related to this resource.
    :vartype system_data: ~azure.mgmt.network.v2021_02_preview.models.SystemData
    :param display_name: A friendly name for the network manager.
    :type display_name: str
    :param description: A description of the network manager.
    :type description: str
    :param network_manager_scopes: Scope of Network Manager.
    :type network_manager_scopes:
     ~azure.mgmt.network.v2021_02_preview.models.NetworkManagerPropertiesNetworkManagerScopes
    :param network_manager_scope_accesses: Scope Access.
    :type network_manager_scope_accesses: list[str or
     ~azure.mgmt.network.v2021_02_preview.models.ScopeAccesses]
    :ivar provisioning_state: The provisioning state of the scope assignment resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.network.v2021_02_preview.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'network_manager_scopes': {'key': 'properties.networkManagerScopes', 'type': 'NetworkManagerPropertiesNetworkManagerScopes'},
        'network_manager_scope_accesses': {'key': 'properties.networkManagerScopeAccesses', 'type': '[str]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        network_manager_scopes: Optional["NetworkManagerPropertiesNetworkManagerScopes"] = None,
        network_manager_scope_accesses: Optional[List[Union[str, "ScopeAccesses"]]] = None,
        **kwargs
    ):
        super(NetworkManager, self).__init__(id=id, location=location, tags=tags, **kwargs)
        self.etag = None
        self.system_data = None
        self.display_name = display_name
        self.description = description
        self.network_manager_scopes = network_manager_scopes
        self.network_manager_scope_accesses = network_manager_scope_accesses
        self.provisioning_state = None


class NetworkManagerCommit(msrest.serialization.Model):
    """Network Manager Commit.

    :param target_locations: List of target locations.
    :type target_locations: list[str]
    :param configuration_ids: List of configuration ids.
    :type configuration_ids: list[str]
    :param commit_type: Commit Type. Possible values include: "AdminPolicy", "UserPolicy",
     "Routing", "Connectivity".
    :type commit_type: str or ~azure.mgmt.network.v2021_02_preview.models.CommitType
    """

    _attribute_map = {
        'target_locations': {'key': 'targetLocations', 'type': '[str]'},
        'configuration_ids': {'key': 'configurationIds', 'type': '[str]'},
        'commit_type': {'key': 'commitType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        target_locations: Optional[List[str]] = None,
        configuration_ids: Optional[List[str]] = None,
        commit_type: Optional[Union[str, "CommitType"]] = None,
        **kwargs
    ):
        super(NetworkManagerCommit, self).__init__(**kwargs)
        self.target_locations = target_locations
        self.configuration_ids = configuration_ids
        self.commit_type = commit_type


class NetworkManagerDeploymentStatus(msrest.serialization.Model):
    """Network Manager Deployment Status.

    :param commit_time: Commit Time.
    :type commit_time: ~datetime.datetime
    :param region: Region Name.
    :type region: str
    :param deployment_status: Deployment Status. Possible values include: "NotStarted",
     "Deploying", "Deployed", "Failed".
    :type deployment_status: str or ~azure.mgmt.network.v2021_02_preview.models.DeploymentStatus
    :param configuration_ids: List of configuration ids.
    :type configuration_ids: list[str]
    :param deployment_type: Configuration Deployment Type. Possible values include: "AdminPolicy",
     "UserPolicy", "Routing", "Connectivity".
    :type deployment_type: str or ~azure.mgmt.network.v2021_02_preview.models.DeploymentType
    :param error_message: Error Message.
    :type error_message: str
    """

    _attribute_map = {
        'commit_time': {'key': 'commitTime', 'type': 'iso-8601'},
        'region': {'key': 'region', 'type': 'str'},
        'deployment_status': {'key': 'deploymentStatus', 'type': 'str'},
        'configuration_ids': {'key': 'configurationIds', 'type': '[str]'},
        'deployment_type': {'key': 'deploymentType', 'type': 'str'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        commit_time: Optional[datetime.datetime] = None,
        region: Optional[str] = None,
        deployment_status: Optional[Union[str, "DeploymentStatus"]] = None,
        configuration_ids: Optional[List[str]] = None,
        deployment_type: Optional[Union[str, "DeploymentType"]] = None,
        error_message: Optional[str] = None,
        **kwargs
    ):
        super(NetworkManagerDeploymentStatus, self).__init__(**kwargs)
        self.commit_time = commit_time
        self.region = region
        self.deployment_status = deployment_status
        self.configuration_ids = configuration_ids
        self.deployment_type = deployment_type
        self.error_message = error_message


class NetworkManagerDeploymentStatusListResult(msrest.serialization.Model):
    """A list of Network Manager Deployment Status.

    :param value: Gets a page of Network Manager Deployment Status.
    :type value: list[~azure.mgmt.network.v2021_02_preview.models.NetworkManagerDeploymentStatus]
    :param next_link: Gets the URL to get the next page of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkManagerDeploymentStatus]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["NetworkManagerDeploymentStatus"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(NetworkManagerDeploymentStatusListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class NetworkManagerDeploymentStatusParameter(msrest.serialization.Model):
    """Network Manager Deployment Status Parameter.

    :param regions: List of locations.
    :type regions: list[str]
    :param deployment_types: List of configurations' deployment types.
    :type deployment_types: list[str or ~azure.mgmt.network.v2021_02_preview.models.DeploymentType]
    """

    _attribute_map = {
        'regions': {'key': 'regions', 'type': '[str]'},
        'deployment_types': {'key': 'deploymentTypes', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        regions: Optional[List[str]] = None,
        deployment_types: Optional[List[Union[str, "DeploymentType"]]] = None,
        **kwargs
    ):
        super(NetworkManagerDeploymentStatusParameter, self).__init__(**kwargs)
        self.regions = regions
        self.deployment_types = deployment_types


class NetworkManagerEffectiveConfigurationListResult(msrest.serialization.Model):
    """Result of the request to list networkManagerEffectiveConfiguration. It contains a list of groups and a URL link to get the next set of results.

    :param value: Gets a page of NetworkManagerEffectiveConfiguration.
    :type value: list[~azure.mgmt.network.v2021_02_preview.models.EffectiveConfiguration]
    :param next_link: Gets the URL to get the next set of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[EffectiveConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["EffectiveConfiguration"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(NetworkManagerEffectiveConfigurationListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class NetworkManagerListResult(msrest.serialization.Model):
    """Result of the request to list NetworkManager. It contains a list of network managers and a URL link to get the next set of results.

    :param value: Gets a page of NetworkManager.
    :type value: list[~azure.mgmt.network.v2021_02_preview.models.NetworkManager]
    :param next_link: Gets the URL to get the next page of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkManager]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["NetworkManager"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(NetworkManagerListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class NetworkManagerPropertiesNetworkManagerScopes(msrest.serialization.Model):
    """Scope of Network Manager.

    :param management_groups: List of management groups.
    :type management_groups: list[str]
    :param subscriptions: List of subscriptions.
    :type subscriptions: list[str]
    """

    _attribute_map = {
        'management_groups': {'key': 'managementGroups', 'type': '[str]'},
        'subscriptions': {'key': 'subscriptions', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        management_groups: Optional[List[str]] = None,
        subscriptions: Optional[List[str]] = None,
        **kwargs
    ):
        super(NetworkManagerPropertiesNetworkManagerScopes, self).__init__(**kwargs)
        self.management_groups = management_groups
        self.subscriptions = subscriptions


class NetworkManagerSecurityConfigurationImport(msrest.serialization.Model):
    """Network manager security configuration import parameters.

    :param network_security_group_imports: List of nsg uris.
    :type network_security_group_imports:
     list[~azure.mgmt.network.v2021_02_preview.models.NetworkSecurityGroupImport]
    :param import_deny_rules_as_admin_rules: Flag if import deny rules as admin rules.
    :type import_deny_rules_as_admin_rules: bool
    :param admin_security_configuration_uri: Admin security configuration Uri.
    :type admin_security_configuration_uri: str
    :param remove_allow_vnet_inbound_rule: Flag if need to remove allow vnet inbound rule.
    :type remove_allow_vnet_inbound_rule: bool
    :param remove_allow_azure_load_balancer_inbound_rule: Flag if need to remove allow azure load
     balancer inbound rule.
    :type remove_allow_azure_load_balancer_inbound_rule: bool
    :param remove_allow_vnet_outbound_rule: Flag if need to remove allow vnet outbound rule.
    :type remove_allow_vnet_outbound_rule: bool
    :param remove_allow_internet_outbound_rule: Flag if need to remove allow Internet outbound
     rule.
    :type remove_allow_internet_outbound_rule: bool
    """

    _attribute_map = {
        'network_security_group_imports': {'key': 'networkSecurityGroupImports', 'type': '[NetworkSecurityGroupImport]'},
        'import_deny_rules_as_admin_rules': {'key': 'importDenyRulesAsAdminRules', 'type': 'bool'},
        'admin_security_configuration_uri': {'key': 'adminSecurityConfigurationUri', 'type': 'str'},
        'remove_allow_vnet_inbound_rule': {'key': 'removeAllowVnetInboundRule', 'type': 'bool'},
        'remove_allow_azure_load_balancer_inbound_rule': {'key': 'removeAllowAzureLoadBalancerInboundRule', 'type': 'bool'},
        'remove_allow_vnet_outbound_rule': {'key': 'removeAllowVnetOutboundRule', 'type': 'bool'},
        'remove_allow_internet_outbound_rule': {'key': 'removeAllowInternetOutboundRule', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        network_security_group_imports: Optional[List["NetworkSecurityGroupImport"]] = None,
        import_deny_rules_as_admin_rules: Optional[bool] = None,
        admin_security_configuration_uri: Optional[str] = None,
        remove_allow_vnet_inbound_rule: Optional[bool] = None,
        remove_allow_azure_load_balancer_inbound_rule: Optional[bool] = None,
        remove_allow_vnet_outbound_rule: Optional[bool] = None,
        remove_allow_internet_outbound_rule: Optional[bool] = None,
        **kwargs
    ):
        super(NetworkManagerSecurityConfigurationImport, self).__init__(**kwargs)
        self.network_security_group_imports = network_security_group_imports
        self.import_deny_rules_as_admin_rules = import_deny_rules_as_admin_rules
        self.admin_security_configuration_uri = admin_security_configuration_uri
        self.remove_allow_vnet_inbound_rule = remove_allow_vnet_inbound_rule
        self.remove_allow_azure_load_balancer_inbound_rule = remove_allow_azure_load_balancer_inbound_rule
        self.remove_allow_vnet_outbound_rule = remove_allow_vnet_outbound_rule
        self.remove_allow_internet_outbound_rule = remove_allow_internet_outbound_rule


class NetworkManagerSecurityGroupItem(msrest.serialization.Model):
    """Network manager security group item.

    :param network_group_id: Network manager group Id.
    :type network_group_id: str
    """

    _attribute_map = {
        'network_group_id': {'key': 'networkGroupId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        network_group_id: Optional[str] = None,
        **kwargs
    ):
        super(NetworkManagerSecurityGroupItem, self).__init__(**kwargs)
        self.network_group_id = network_group_id


class NetworkSecurityGroupImport(msrest.serialization.Model):
    """Network Security Group Import.

    :param network_security_group_uri: Network Security Group Uri.
    :type network_security_group_uri: str
    """

    _attribute_map = {
        'network_security_group_uri': {'key': 'networkSecurityGroupUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        network_security_group_uri: Optional[str] = None,
        **kwargs
    ):
        super(NetworkSecurityGroupImport, self).__init__(**kwargs)
        self.network_security_group_uri = network_security_group_uri


class SecurityConfiguration(ProxyResource):
    """Defines the security Configuration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar system_data: The system metadata related to this resource.
    :vartype system_data: ~azure.mgmt.network.v2021_02_preview.models.SystemData
    :param display_name: A display name of the security Configuration.
    :type display_name: str
    :param description: A description of the security Configuration.
    :type description: str
    :param security_type: Security Type. Possible values include: "AdminPolicy", "UserPolicy".
    :type security_type: str or ~azure.mgmt.network.v2021_02_preview.models.SecurityType
    :param delete_existing_ns_gs: Flag if need to delete existing network security groups.
    :type delete_existing_ns_gs: bool
    :param applies_to_groups: Groups for configuration.
    :type applies_to_groups:
     list[~azure.mgmt.network.v2021_02_preview.models.NetworkManagerSecurityGroupItem]
    :ivar provisioning_state: The provisioning state of the scope assignment resource. Possible
     values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.network.v2021_02_preview.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'security_type': {'key': 'properties.securityType', 'type': 'str'},
        'delete_existing_ns_gs': {'key': 'properties.deleteExistingNSGs', 'type': 'bool'},
        'applies_to_groups': {'key': 'properties.appliesToGroups', 'type': '[NetworkManagerSecurityGroupItem]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        security_type: Optional[Union[str, "SecurityType"]] = None,
        delete_existing_ns_gs: Optional[bool] = None,
        applies_to_groups: Optional[List["NetworkManagerSecurityGroupItem"]] = None,
        **kwargs
    ):
        super(SecurityConfiguration, self).__init__(**kwargs)
        self.system_data = None
        self.display_name = display_name
        self.description = description
        self.security_type = security_type
        self.delete_existing_ns_gs = delete_existing_ns_gs
        self.applies_to_groups = applies_to_groups
        self.provisioning_state = None


class SecurityConfigurationImportResult(msrest.serialization.Model):
    """Security configuration import Result.

    :param user_security_configuration: User security configuration Id.
    :type user_security_configuration: str
    :param admin_security_configuration: Admin security configuration Id.
    :type admin_security_configuration: str
    :param failed_import: failed imports code and reason.
    :type failed_import: ~azure.mgmt.network.v2021_02_preview.models.FailedImport
    """

    _attribute_map = {
        'user_security_configuration': {'key': 'userSecurityConfiguration', 'type': 'str'},
        'admin_security_configuration': {'key': 'adminSecurityConfiguration', 'type': 'str'},
        'failed_import': {'key': 'failedImport', 'type': 'FailedImport'},
    }

    def __init__(
        self,
        *,
        user_security_configuration: Optional[str] = None,
        admin_security_configuration: Optional[str] = None,
        failed_import: Optional["FailedImport"] = None,
        **kwargs
    ):
        super(SecurityConfigurationImportResult, self).__init__(**kwargs)
        self.user_security_configuration = user_security_configuration
        self.admin_security_configuration = admin_security_configuration
        self.failed_import = failed_import


class SecurityConfigurationListResult(msrest.serialization.Model):
    """A list of managed network security configurations.

    :param value: Gets a page of security configurations.
    :type value: list[~azure.mgmt.network.v2021_02_preview.models.SecurityConfiguration]
    :param next_link: Gets the URL to get the next page of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SecurityConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["SecurityConfiguration"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(SecurityConfigurationListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class SecurityConfigurationRule(msrest.serialization.Model):
    """General security configuration Rule.

    :param security_type: Commit Type. Possible values include: "AdminPolicy", "UserPolicy".
    :type security_type: str or ~azure.mgmt.network.v2021_02_preview.models.SecurityType
    :param security_admin_rule: Security admin rule.
    :type security_admin_rule: ~azure.mgmt.network.v2021_02_preview.models.AdminRule
    :param security_user_rule: Security user rule.
    :type security_user_rule: ~azure.mgmt.network.v2021_02_preview.models.UserRule
    """

    _attribute_map = {
        'security_type': {'key': 'securityType', 'type': 'str'},
        'security_admin_rule': {'key': 'securityAdminRule', 'type': 'AdminRule'},
        'security_user_rule': {'key': 'securityUserRule', 'type': 'UserRule'},
    }

    def __init__(
        self,
        *,
        security_type: Optional[Union[str, "SecurityType"]] = None,
        security_admin_rule: Optional["AdminRule"] = None,
        security_user_rule: Optional["UserRule"] = None,
        **kwargs
    ):
        super(SecurityConfigurationRule, self).__init__(**kwargs)
        self.security_type = security_type
        self.security_admin_rule = security_admin_rule
        self.security_user_rule = security_user_rule


class SecurityConfigurationRuleListResult(msrest.serialization.Model):
    """Security configuration rule list result.

    :param value: A list of network manager security configuration rules.
    :type value: list[~azure.mgmt.network.v2021_02_preview.models.SecurityConfigurationRule]
    :param failed_import: Failed Imports.
    :type failed_import: ~azure.mgmt.network.v2021_02_preview.models.FailedImport
    :param next_link: Gets the URL to get the next set of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SecurityConfigurationRule]'},
        'failed_import': {'key': 'failedImport', 'type': 'FailedImport'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["SecurityConfigurationRule"]] = None,
        failed_import: Optional["FailedImport"] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(SecurityConfigurationRuleListResult, self).__init__(**kwargs)
        self.value = value
        self.failed_import = failed_import
        self.next_link = next_link


class SubResource(msrest.serialization.Model):
    """Reference to another subresource.

    :param id: Resource ID.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        super(SubResource, self).__init__(**kwargs)
        self.id = id


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :param created_by: The identity that created the resource.
    :type created_by: str
    :param created_by_type: The type of identity that created the resource. Possible values
     include: "User", "Application", "ManagedIdentity", "Key".
    :type created_by_type: str or ~azure.mgmt.network.v2021_02_preview.models.CreatedByType
    :param created_at: The timestamp of resource creation (UTC).
    :type created_at: ~datetime.datetime
    :param last_modified_by: The identity that last modified the resource.
    :type last_modified_by: str
    :param last_modified_by_type: The type of identity that last modified the resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :type last_modified_by_type: str or ~azure.mgmt.network.v2021_02_preview.models.CreatedByType
    :param last_modified_at: The type of identity that last modified the resource.
    :type last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(SystemData, self).__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class TagsObject(msrest.serialization.Model):
    """Tags object for patch operations.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(TagsObject, self).__init__(**kwargs)
        self.tags = tags


class UserRule(ProxyResource):
    """Network security admin rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar etag: A unique read-only string that changes whenever the resource is updated.
    :vartype etag: str
    :ivar system_data: The system metadata related to this resource.
    :vartype system_data: ~azure.mgmt.network.v2021_02_preview.models.SystemData
    :param display_name: A friendly name for the rule.
    :type display_name: str
    :param description: A description for this rule. Restricted to 140 chars.
    :type description: str
    :param protocol: Network protocol this rule applies to. Possible values include: "Tcp", "Udp",
     "Icmp", "Esp", "Any", "Ah".
    :type protocol: str or
     ~azure.mgmt.network.v2021_02_preview.models.SecurityConfigurationRuleProtocol
    :param source: The CIDR or source IP ranges.
    :type source: list[~azure.mgmt.network.v2021_02_preview.models.AddressPrefixItem]
    :param destination: The destination address prefixes. CIDR or destination IP ranges.
    :type destination: list[~azure.mgmt.network.v2021_02_preview.models.AddressPrefixItem]
    :param source_port_ranges: The source port ranges.
    :type source_port_ranges: list[str]
    :param destination_port_ranges: The destination port ranges.
    :type destination_port_ranges: list[str]
    :param direction: Indicates if the traffic matched against the rule in inbound or outbound.
     Possible values include: "Inbound", "Outbound".
    :type direction: str or
     ~azure.mgmt.network.v2021_02_preview.models.SecurityConfigurationRuleDirection
    :ivar provisioning_state: The provisioning state of the security Configuration resource.
     Possible values include: "Succeeded", "Updating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.network.v2021_02_preview.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'protocol': {'key': 'properties.protocol', 'type': 'str'},
        'source': {'key': 'properties.source', 'type': '[AddressPrefixItem]'},
        'destination': {'key': 'properties.destination', 'type': '[AddressPrefixItem]'},
        'source_port_ranges': {'key': 'properties.sourcePortRanges', 'type': '[str]'},
        'destination_port_ranges': {'key': 'properties.destinationPortRanges', 'type': '[str]'},
        'direction': {'key': 'properties.direction', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        protocol: Optional[Union[str, "SecurityConfigurationRuleProtocol"]] = None,
        source: Optional[List["AddressPrefixItem"]] = None,
        destination: Optional[List["AddressPrefixItem"]] = None,
        source_port_ranges: Optional[List[str]] = None,
        destination_port_ranges: Optional[List[str]] = None,
        direction: Optional[Union[str, "SecurityConfigurationRuleDirection"]] = None,
        **kwargs
    ):
        super(UserRule, self).__init__(**kwargs)
        self.system_data = None
        self.display_name = display_name
        self.description = description
        self.protocol = protocol
        self.source = source
        self.destination = destination
        self.source_port_ranges = source_port_ranges
        self.destination_port_ranges = destination_port_ranges
        self.direction = direction
        self.provisioning_state = None


class UserRuleListResult(msrest.serialization.Model):
    """Security configuration user rule list result.

    :param value: A list of user rules.
    :type value: list[~azure.mgmt.network.v2021_02_preview.models.UserRule]
    :param next_link: Gets the URL to get the next set of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[UserRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["UserRule"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(UserRuleListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link
