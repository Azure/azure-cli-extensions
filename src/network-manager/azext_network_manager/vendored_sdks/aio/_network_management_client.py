# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Awaitable, Optional, TYPE_CHECKING

from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

from .. import models
from ._configuration import NetworkManagementClientConfiguration
from .operations import AdminRuleCollectionsOperations, AdminRulesOperations, ConnectivityConfigurationsOperations, EffectiveVirtualNetworksOperations, ListEffectiveVirtualNetworksOperations, ManagementGroupNetworkManagerConnectionsOperations, NetworkGroupsOperations, NetworkManagementClientOperationsMixin, NetworkManagerCommitsOperations, NetworkManagerDeploymentStatusOperations, NetworkManagersOperations, ScopeConnectionsOperations, SecurityAdminConfigurationsOperations, SecurityUserConfigurationsOperations, StaticMembersOperations, SubscriptionNetworkManagerConnectionsOperations, UserRuleCollectionsOperations, UserRulesOperations

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

class NetworkManagementClient(NetworkManagementClientOperationsMixin):
    """Network Client.

    :ivar network_managers: NetworkManagersOperations operations
    :vartype network_managers:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.NetworkManagersOperations
    :ivar network_manager_commits: NetworkManagerCommitsOperations operations
    :vartype network_manager_commits:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.NetworkManagerCommitsOperations
    :ivar network_manager_deployment_status: NetworkManagerDeploymentStatusOperations operations
    :vartype network_manager_deployment_status:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.NetworkManagerDeploymentStatusOperations
    :ivar effective_virtual_networks: EffectiveVirtualNetworksOperations operations
    :vartype effective_virtual_networks:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.EffectiveVirtualNetworksOperations
    :ivar connectivity_configurations: ConnectivityConfigurationsOperations operations
    :vartype connectivity_configurations:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.ConnectivityConfigurationsOperations
    :ivar network_groups: NetworkGroupsOperations operations
    :vartype network_groups:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.NetworkGroupsOperations
    :ivar list_effective_virtual_networks: ListEffectiveVirtualNetworksOperations operations
    :vartype list_effective_virtual_networks:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.ListEffectiveVirtualNetworksOperations
    :ivar static_members: StaticMembersOperations operations
    :vartype static_members:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.StaticMembersOperations
    :ivar security_user_configurations: SecurityUserConfigurationsOperations operations
    :vartype security_user_configurations:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.SecurityUserConfigurationsOperations
    :ivar user_rule_collections: UserRuleCollectionsOperations operations
    :vartype user_rule_collections:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.UserRuleCollectionsOperations
    :ivar user_rules: UserRulesOperations operations
    :vartype user_rules: azure.mgmt.network.v2021_05_01_preview.aio.operations.UserRulesOperations
    :ivar security_admin_configurations: SecurityAdminConfigurationsOperations operations
    :vartype security_admin_configurations:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.SecurityAdminConfigurationsOperations
    :ivar admin_rule_collections: AdminRuleCollectionsOperations operations
    :vartype admin_rule_collections:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.AdminRuleCollectionsOperations
    :ivar admin_rules: AdminRulesOperations operations
    :vartype admin_rules:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.AdminRulesOperations
    :ivar subscription_network_manager_connections: SubscriptionNetworkManagerConnectionsOperations
     operations
    :vartype subscription_network_manager_connections:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.SubscriptionNetworkManagerConnectionsOperations
    :ivar management_group_network_manager_connections:
     ManagementGroupNetworkManagerConnectionsOperations operations
    :vartype management_group_network_manager_connections:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.ManagementGroupNetworkManagerConnectionsOperations
    :ivar scope_connections: ScopeConnectionsOperations operations
    :vartype scope_connections:
     azure.mgmt.network.v2021_05_01_preview.aio.operations.ScopeConnectionsOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param subscription_id: The subscription credentials which uniquely identify the Microsoft
     Azure subscription. The subscription ID forms part of the URI for every service call.
    :type subscription_id: str
    :param base_url: Service URL. Default value is 'https://management.azure.com'.
    :type base_url: str
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        subscription_id: str,
        base_url: str = "https://management.azure.com",
        **kwargs: Any
    ) -> None:
        self._config = NetworkManagementClientConfiguration(credential=credential, subscription_id=subscription_id, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)
        self._serialize.client_side_validation = False
        self.network_managers = NetworkManagersOperations(self._client, self._config, self._serialize, self._deserialize)
        self.network_manager_commits = NetworkManagerCommitsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.network_manager_deployment_status = NetworkManagerDeploymentStatusOperations(self._client, self._config, self._serialize, self._deserialize)
        self.effective_virtual_networks = EffectiveVirtualNetworksOperations(self._client, self._config, self._serialize, self._deserialize)
        self.connectivity_configurations = ConnectivityConfigurationsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.network_groups = NetworkGroupsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.list_effective_virtual_networks = ListEffectiveVirtualNetworksOperations(self._client, self._config, self._serialize, self._deserialize)
        self.static_members = StaticMembersOperations(self._client, self._config, self._serialize, self._deserialize)
        self.security_user_configurations = SecurityUserConfigurationsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.user_rule_collections = UserRuleCollectionsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.user_rules = UserRulesOperations(self._client, self._config, self._serialize, self._deserialize)
        self.security_admin_configurations = SecurityAdminConfigurationsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.admin_rule_collections = AdminRuleCollectionsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.admin_rules = AdminRulesOperations(self._client, self._config, self._serialize, self._deserialize)
        self.subscription_network_manager_connections = SubscriptionNetworkManagerConnectionsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.management_group_network_manager_connections = ManagementGroupNetworkManagerConnectionsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.scope_connections = ScopeConnectionsOperations(self._client, self._config, self._serialize, self._deserialize)


    def _send_request(
        self,
        request: HttpRequest,
        **kwargs: Any
    ) -> Awaitable[AsyncHttpResponse]:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = await client._send_request(request)
        <AsyncHttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/python/protocol/quickstart

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """

        request_copy = deepcopy(request)
        request_copy.url = self._client.format_url(request_copy.url)
        return self._client.send_request(request_copy, **kwargs)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "NetworkManagementClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
