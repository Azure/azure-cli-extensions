# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network manager create",
)
class Create(AAZCommand):
    """Create a Network Manager.

    :example: Create/Update Azure Virtual Network Manager
        az network manager create --name "TestNetworkManager" -l eastus2euap --description "My Test Network Manager" --scope-accesses "SecurityAdmin" "Connectivity" --network-manager-scopes management-groups="/providers/Microsoft.Management/testmg" subscriptions="/subscriptions/00000000-0000-0000-0000-000000000000" --resource-group "rg1"
    """

    _aaz_info = {
        "version": "2022-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkmanagers/{}", "2022-01-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.network_manager_name = AAZStrArg(
            options=["-n", "--name", "--network-manager-name"],
            help="The name of the network manager.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.id = AAZResourceIdArg(
            options=["--id"],
            arg_group="Parameters",
            help="Resource ID.",
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/networkManagers/{}",
            ),
        )
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Parameters",
            help="Resource location.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="A description of the network manager.",
        )
        _args_schema.network_manager_scope_accesses = AAZListArg(
            options=["--network-manager-scope-accesses"],
            arg_group="Properties",
            help="Scope Access. Available value: SecurityAdmin, Connectivity.",
        )
        _args_schema.network_manager_scopes = AAZObjectArg(
            options=["--network-manager-scopes"],
            arg_group="Properties",
            help="Scope of Network Manager.",
        )

        network_manager_scope_accesses = cls._args_schema.network_manager_scope_accesses
        network_manager_scope_accesses.Element = AAZStrArg(
            enum={"Connectivity": "Connectivity", "SecurityAdmin": "SecurityAdmin"},
        )

        network_manager_scopes = cls._args_schema.network_manager_scopes
        network_manager_scopes.management_groups = AAZListArg(
            options=["management-groups"],
            help="List of management groups.",
        )
        network_manager_scopes.subscriptions = AAZListArg(
            options=["subscriptions"],
            help="List of subscriptions.",
        )

        management_groups = cls._args_schema.network_manager_scopes.management_groups
        management_groups.Element = AAZStrArg()

        subscriptions = cls._args_schema.network_manager_scopes.subscriptions
        subscriptions.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkManagersCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NetworkManagersCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkManagerName", self.ctx.args.network_manager_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("id", AAZStrType, ".id")
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("networkManagerScopeAccesses", AAZListType, ".network_manager_scope_accesses", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("networkManagerScopes", AAZObjectType, ".network_manager_scopes", typ_kwargs={"flags": {"required": True}})

            network_manager_scope_accesses = _builder.get(".properties.networkManagerScopeAccesses")
            if network_manager_scope_accesses is not None:
                network_manager_scope_accesses.set_elements(AAZStrType, ".")

            network_manager_scopes = _builder.get(".properties.networkManagerScopes")
            if network_manager_scopes is not None:
                network_manager_scopes.set_prop("managementGroups", AAZListType, ".management_groups")
                network_manager_scopes.set_prop("subscriptions", AAZListType, ".subscriptions")

            management_groups = _builder.get(".properties.networkManagerScopes.managementGroups")
            if management_groups is not None:
                management_groups.set_elements(AAZStrType, ".")

            subscriptions = _builder.get(".properties.networkManagerScopes.subscriptions")
            if subscriptions is not None:
                subscriptions.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.id = AAZStrType()
            _schema_on_200_201.location = AAZStrType()
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.description = AAZStrType()
            properties.network_manager_scope_accesses = AAZListType(
                serialized_name="networkManagerScopeAccesses",
                flags={"required": True},
            )
            properties.network_manager_scopes = AAZObjectType(
                serialized_name="networkManagerScopes",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            network_manager_scope_accesses = cls._schema_on_200_201.properties.network_manager_scope_accesses
            network_manager_scope_accesses.Element = AAZStrType()

            network_manager_scopes = cls._schema_on_200_201.properties.network_manager_scopes
            network_manager_scopes.cross_tenant_scopes = AAZListType(
                serialized_name="crossTenantScopes",
                flags={"read_only": True},
            )
            network_manager_scopes.management_groups = AAZListType(
                serialized_name="managementGroups",
            )
            network_manager_scopes.subscriptions = AAZListType()

            cross_tenant_scopes = cls._schema_on_200_201.properties.network_manager_scopes.cross_tenant_scopes
            cross_tenant_scopes.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.network_manager_scopes.cross_tenant_scopes.Element
            _element.management_groups = AAZListType(
                serialized_name="managementGroups",
                flags={"read_only": True},
            )
            _element.subscriptions = AAZListType(
                flags={"read_only": True},
            )
            _element.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )

            management_groups = cls._schema_on_200_201.properties.network_manager_scopes.cross_tenant_scopes.Element.management_groups
            management_groups.Element = AAZStrType()

            subscriptions = cls._schema_on_200_201.properties.network_manager_scopes.cross_tenant_scopes.Element.subscriptions
            subscriptions.Element = AAZStrType()

            management_groups = cls._schema_on_200_201.properties.network_manager_scopes.management_groups
            management_groups.Element = AAZStrType()

            subscriptions = cls._schema_on_200_201.properties.network_manager_scopes.subscriptions
            subscriptions.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
