# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network manager routing-config rule-collection rule create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create an routing rule.

    :example: Create an routing rule.
        az network manager routing-config rule-collection rule create --config-name TestNetworkManagerConfig --manager-name TestNetworkManager --collection-name TestNetworkManagerCollection --name TestNetworkManagerRule --resource-group "rg1" --destination {"destination_address":"10.0.0.0/16","type":"AddressPrefix"} --next-hop {"next_hop_type":"VirtualNetworkGateway"}
    """

    _aaz_info = {
        "version": "2023-03-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkmanagers/{}/routingconfigurations/{}/rulecollections/{}/rules/{}", "2023-03-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.config_name = AAZStrArg(
            options=["--config-name"],
            help="The name of the network manager Routing Configuration.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9_.-]*$",
            ),
        )
        _args_schema.manager_name = AAZStrArg(
            options=["--manager-name"],
            help="The name of the network manager.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9_.-]*$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.collection_name = AAZStrArg(
            options=["--collection-name"],
            help="The name of the network manager routing Configuration rule collection.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9_.-]*$",
            ),
        )
        _args_schema.rule_name = AAZStrArg(
            options=["-n", "--name", "--rule-name"],
            help="The name of the rule.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9_.-]*$",
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="A description for this rule.",
        )
        _args_schema.destination = AAZObjectArg(
            options=["--destination"],
            arg_group="Properties",
            help="Indicates the destination for this particular rule.",
        )
        _args_schema.next_hop = AAZObjectArg(
            options=["--next-hop"],
            arg_group="Properties",
            help="Indicates the next hop for this particular rule.",
        )

        destination = cls._args_schema.destination
        destination.destination_address = AAZStrArg(
            options=["destination-address"],
            help="Destination address.",
            required=True,
        )
        destination.type = AAZStrArg(
            options=["type"],
            help="Destination type.",
            required=True,
            enum={"AddressPrefix": "AddressPrefix", "ServiceTag": "ServiceTag"},
        )

        next_hop = cls._args_schema.next_hop
        next_hop.next_hop_address = AAZStrArg(
            options=["next-hop-address"],
            help="Next hop address. Only relevant if the next hop type is VirtualAppliance.",
        )
        next_hop.next_hop_type = AAZStrArg(
            options=["next-hop-type"],
            help="Next hop type.",
            required=True,
            enum={"Internet": "Internet", "NoNextNop": "NoNextNop", "VirtualAppliance": "VirtualAppliance", "VirtualNetworkGateway": "VirtualNetworkGateway", "VnetLocal": "VnetLocal"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.RoutingRulesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class RoutingRulesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkManagers/{networkManagerName}/routingConfigurations/{configurationName}/ruleCollections/{ruleCollectionName}/rules/{ruleName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "configurationName", self.ctx.args.config_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "networkManagerName", self.ctx.args.manager_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "ruleCollectionName", self.ctx.args.collection_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "ruleName", self.ctx.args.rule_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-03-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("destination", AAZObjectType, ".destination", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("nextHop", AAZObjectType, ".next_hop", typ_kwargs={"flags": {"required": True}})

            destination = _builder.get(".properties.destination")
            if destination is not None:
                destination.set_prop("destinationAddress", AAZStrType, ".destination_address", typ_kwargs={"flags": {"required": True}})
                destination.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})

            next_hop = _builder.get(".properties.nextHop")
            if next_hop is not None:
                next_hop.set_prop("nextHopAddress", AAZStrType, ".next_hop_address")
                next_hop.set_prop("nextHopType", AAZStrType, ".next_hop_type", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.description = AAZStrType()
            properties.destination = AAZObjectType(
                flags={"required": True},
            )
            properties.next_hop = AAZObjectType(
                serialized_name="nextHop",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.resource_guid = AAZStrType(
                serialized_name="resourceGuid",
                flags={"read_only": True},
            )

            destination = cls._schema_on_200_201.properties.destination
            destination.destination_address = AAZStrType(
                serialized_name="destinationAddress",
                flags={"required": True},
            )
            destination.type = AAZStrType(
                flags={"required": True},
            )

            next_hop = cls._schema_on_200_201.properties.next_hop
            next_hop.next_hop_address = AAZStrType(
                serialized_name="nextHopAddress",
            )
            next_hop.next_hop_type = AAZStrType(
                serialized_name="nextHopType",
                flags={"required": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
