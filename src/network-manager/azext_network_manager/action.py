# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddNetworkManagerScopes(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.network_manager_scopes = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError as exc:
            raise CLIError(f'usage error: {option_string} [KEY=VALUE ...]') from exc
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'management-groups':
                d['management_groups'] = v
            elif kl == 'subscriptions':
                d['subscriptions'] = v
            else:
                raise CLIError(f'Unsupported Key {k} is provided for parameter network_manager_scopes. '
                               f'All possible keys are: management-groups, subscriptions')
        return d


class AddConnectivityconfigurationsAppliesToGroups(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super().__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError as exc:
            raise CLIError(f'usage error: {option_string} [KEY=VALUE ...]') from exc
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'network-group-id':
                d['network_group_id'] = v[0]
            elif kl == 'use-hub-gateway':
                d['use_hub_gateway'] = v[0]
            elif kl == 'is-global':
                d['is_global'] = v[0]
            elif kl == 'group-connectivity':
                d['group_connectivity'] = v[0]
            else:
                raise CLIError(f'Unsupported Key {k} is provided for parameter applies_to_groups. All possible keys '
                               f'are: network-group-id, use-hub-gateway, is-global, group-connectivity')
        return d


class AddGroupMembers(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super().__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError as exc:
            raise CLIError(f'usage error: {option_string} [KEY=VALUE ...]') from exc
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'resource-id':
                d['resource_id'] = v[0]
            elif kl == 'resource-type':
                d['resource_type'] = v[0]
            else:
                raise CLIError(f'Unsupported Key {k} is provided for parameter group_members. All possible keys are: '
                               'resource-id, resource-type')
        return d


class AddSource(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super().__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError as exc:
            raise CLIError(f'usage error: {option_string} [KEY=VALUE ...]') from exc
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'address-prefix':
                d['address_prefix'] = v[0]
            elif kl == 'address-prefix-type':
                d['address_prefix_type'] = v[0]
            else:
                raise CLIError(f'Unsupported Key {k} is provided for parameter source. All possible keys are: '
                               'address-prefix, address-prefix-type')
        return d


class AddDestination(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super().__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError as exc:
            raise CLIError(f'usage error: {option_string} [KEY=VALUE ...]') from exc
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'address-prefix':
                d['address_prefix'] = v[0]
            elif kl == 'address-prefix-type':
                d['address_prefix_type'] = v[0]
            else:
                raise CLIError(f'Unsupported Key {k} is provided for parameter destination. All possible keys are: '
                               'address-prefix, address-prefix-type')
        return d
