# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType
from azext_network_manager._client_factory import (
    cf_networkmanager, cf_networkmanagercommit, cf_networkmanagerdeploymentstatus, cf_effectivevirtualnetwork,
    cf_activeconfiguration, cf_connectivityconfiguration, cf_effectiveconfiguration, cf_networkgroup, cf_userrule,
    cf_adminrule, cf_securityconfiguration)


def load_command_table(self, _):
    network_networkmanager = CliCommandType(
        operations_tmpl='azext_network_manager.vendored_sdks.operations._network_managers_operations#NetworkManagersOperations.{}',
        client_factory=cf_networkmanager
    )

    network_networkmanagercommit = CliCommandType(
        operations_tmpl='azext_network_manager.vendored_sdks.operations._network_manager_commits_operations#NetworkManagercommitsOperations.{}',
        client_factory=cf_networkmanagercommit
    )

    network_networkmanagerdeploymentstatus = CliCommandType(
        operations_tmpl='azext_network_manager.vendored_sdks.operations._network_manager_deployment_status_operations#NetworkManagerDeploymentStatusOperations.{}',
        client_factory=cf_networkmanagerdeploymentstatus
    )

    network_effectivevirtualnetwork = CliCommandType(
        operations_tmpl='azext_network_manager.vendored_sdks.operations._effective_virtual_networks_operations#EffectiveVirtualNetworksOperations.{}',
        client_factory=cf_effectivevirtualnetwork)

    network_activeconfiguration = CliCommandType(
        operations_tmpl='azext_network_manager.vendored_sdks.operations._active_configurations_operations#ActiveConfigurationsOperations.{}',
        client_factory=cf_activeconfiguration
    )

    network_connectivityconfiguration = CliCommandType(
        operations_tmpl='azext_network_manager.vendored_sdks.operations._connectivity_configurations_operations#ConnectivityConfigurationsOperations.{}',
        client_factory=cf_connectivityconfiguration
    )

    network_effectiveconfiguration = CliCommandType(
        operations_tmpl='azext_network_manager.vendored_sdks.operations._effective_configurations_operations#EffectiveConfigurationsOperations.{}',
        client_factory=cf_effectiveconfiguration
    )

    network_networkgroup = CliCommandType(
        operations_tmpl='azext_network_manager.vendored_sdks.operations._network_groups_operations#NetworkGroupsOperations.{}',
        client_factory=cf_networkgroup
    )

    network_securityconfiguration = CliCommandType(
        operations_tmpl='azext_network_manager.vendored_sdks.operations._security_configurations_operations#SecurityConfigurationsOperations.{}',
        client_factory=cf_securityconfiguration
    )

    network_adminrule = CliCommandType(
        operations_tmpl='azext_network_manager.vendored_sdks.operations._admin_rules_operations#AdminRulesOperations.{}',
        client_factory=cf_adminrule
    )

    network_userrule = CliCommandType(
        operations_tmpl='azext_network_manager.vendored_sdks.operations._user_rules_operations#UserRulesOperations.{}',
        client_factory=cf_userrule
    )


    with self.command_group('network manager', network_networkmanager, client_factory=cf_networkmanager) as g:
        g.custom_command('create', 'network_manager_create')
        g.custom_command('list', 'network_manager_list')
        g.custom_show_command('show', 'network_manager_show')
        g.generic_update_command('update', custom_func_name='network_manager_update')
        g.custom_command('delete', 'network_manager_delete', confirmation=True)

    with self.command_group('network manager commit', network_networkmanagercommit, client_factory=cf_networkmanagercommit) as g:
        g.custom_command('post', 'network_manager_commit_post')

    with self.command_group('network manager deploy-status', network_networkmanagerdeploymentstatus, client_factory=cf_networkmanagerdeploymentstatus) as g:
        g.custom_command('list', 'network_manager_deploy_status_list')

    with self.command_group('network manager effect-vnet', network_effectivevirtualnetwork, client_factory=cf_effectivevirtualnetwork) as g:
        g.custom_command('list-by-network-group', 'network_manager_effect_vnet_list_by_network_group')
        g.custom_command('list-by-network-manager', 'network_manager_effect_vnet_list_by_network_manager')

    with self.command_group('network manager active-config', network_activeconfiguration, client_factory=cf_activeconfiguration) as g:
        g.custom_command('list', 'network_manager_active_config_list')

    with self.command_group('network manager connect-config', network_connectivityconfiguration, client_factory=cf_connectivityconfiguration) as g:
        g.custom_command('list', 'network_manager_connect_config_list')
        g.custom_show_command('show', 'network_manager_connect_config_show')
        g.custom_command('create', 'network_manager_connect_config_create')
        g.generic_update_command('update', setter_arg_name='connectivity_configuration', custom_func_name='network_manager_connect_config_update')
        g.custom_command('delete', 'network_manager_connect_config_delete', confirmation=True)

    with self.command_group('network effectiveconfiguration', network_effectiveconfiguration,
                            client_factory=cf_effectiveconfiguration) as g:
        g.custom_command('list', 'network_effectiveconfiguration_list')

    with self.command_group('network manager group', network_networkgroup, client_factory=cf_networkgroup) as g:
        g.custom_command('list', 'network_manager_group_list')
        g.custom_show_command('show', 'network_manager_group_show')
        g.custom_command('create', 'network_manager_group_create')
        g.generic_update_command('update', custom_func_name='network_manager_group_update')
        g.custom_command('delete', 'network_manager_group_delete', confirmation=True)

    with self.command_group('network manager security-config', network_securityconfiguration, client_factory=cf_securityconfiguration) as g:
        g.custom_command('list', 'network_manager_security_config_list')
        g.custom_show_command('show', 'network_manager_security_config_show')
        g.custom_command('create', 'network_manager_security_config_create')
        g.generic_update_command('update', setter_arg_name='security_configuration', custom_func_name='network_manager_security_config_update')
        g.custom_command('delete', 'network_manager_security_config_delete', confirmation=True)
        g.custom_command('evaluate-import', 'network_manager_security_config_evaluate_import')
        g.custom_command('import', 'network_manager_security_config_import')

    with self.command_group('network manager admin-rule', network_adminrule, client_factory=cf_adminrule) as g:
        g.custom_command('list', 'network_manager_admin_rule_list')
        g.custom_show_command('show', 'network_manager_admin_rule_show')
        g.custom_command('delete', 'network_manager_admin_rule_delete', confirmation=True)

    with self.command_group('network manager user-rule', network_userrule, client_factory=cf_userrule) as g:
        g.custom_command('list', 'network_manager_user_rule_list')
        g.custom_show_command('show', 'network_manager_user_rule_show')
        g.custom_command('create', 'network_manager_user_rule_create')
        g.generic_update_command('update', setter_arg_name='user_rule', custom_func_name='network_manager_user_rule_update')
        g.custom_command('delete', 'network_manager_user_rule_delete', confirmation=True)

