# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import ScenarioTest, JMESPathCheck


class PscloudScenario(ScenarioTest):
    
    def test_pscloud_reservation_crud(self):
        self.cmd("az pscloud reservation list", checks=[
                     self.greater_than('length(@)', 0)
                 ])
        self.cmd("az pscloud reservation show --resource-group S1RG1 --reservation-name cliTestReservation", checks=[
            self.check('reservationInternalId', '524469f1-fe39-421a-9398-9e1589b01012')
        ])

    def test_pscloud_storagepool_create(self):
        """Test pscloud storagepool create command"""
        # Create storagepool command with proper JSON quoting for vnet-injection
        create_storagepool_cmd = """az pscloud storagepool create --resource-group S1RG1 --storage-pool-name cliTestStoragePool8 --location "Central US" --availability-zone "1" --vnet-injection '{{"subnet-id":"/subscriptions/3490e0a3-59fd-4ed4-baed-873d4e401b99/resourceGroups/pure-cli-testing-vnet/providers/Microsoft.Network/virtualNetworks/pure-cli-vnet/subnets/delg-subnet","vnet-id":"/subscriptions/3490e0a3-59fd-4ed4-baed-873d4e401b99/resourceGroups/pure-cli-testing-vnet/providers/Microsoft.Network/virtualNetworks/pure-cli-vnet"}}' --provisioned-bandwidth 992 --reservation-id "/subscriptions/3490e0a3-59fd-4ed4-baed-873d4e401b99/resourceGroups/S1RG1/providers/PureStorage.Block/reservations/cliTestReservation" --system-assigned --debug"""
        
        # Execute the create command
        self.cmd(create_storagepool_cmd, checks=[
            self.exists('properties.vnetInjection'),
            self.exists('properties')
        ])

    def test_pscloud_storagepool_get(self):
        """Test storagepool show, list, and get-health-status commands with basic field checks"""

        # 1. Test storagepool show
        self.cmd(
            "az pscloud storagepool show --resource-group S1RG1 --storage-pool-name cliTestStoragePool8",
            checks=[
                self.exists('id'),
                self.exists('name'),
                self.exists('location'),
                self.exists('identity'),
                self.exists('vnetInjection'),
                self.exists('provisionedBandwidthMbPerSec')
            ]
        )

        # 2. Test storagepool list
        self.cmd(
            "az pscloud storagepool list",
            checks=[
                self.greater_than('length(@)', 0)
            ]
        )

    def test_pscloud_storagepool_postAction(self):
        # 3. Test storagepool get-health-status
        self.cmd(
            "az pscloud storagepool get-health-status --resource-group S1RG1 --storage-pool-name cliTestStoragePool8",
            checks=[
                self.exists('health'),
                self.exists('health.bandwidthUsage'),
                self.exists('health.iopsUsage'),
                self.exists('health.space')
            ]
        )    
        self.cmd(
            "az pscloud storagepool get-avs-status --resource-group S1RG1 --storage-pool-name cliTestStoragePool8",
            checks=[
                self.exists('currentConnectionStatus')
            ]
        )

    def test_pscloud_storagepool_update(self):
        """Test pscloud storagepool update command"""
        # Test updating provisioned bandwidth
        self.cmd(
            "az pscloud storagepool update --resource-group S1RG1 --name cliTestStoragePool8 --provisioned-bandwidth 1094",
            checks=[
                self.exists('id'),
                self.exists('name'),
                self.check('name', 'cliTestStoragePool8'),
                self.check('properties.provisionedBandwidthMbPerSec', 1094),
                self.exists('properties')
            ]
        )    