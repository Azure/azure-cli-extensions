# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "pscloud list",
    is_preview=True,
)
class List(AAZCommand):
    """List reservations by Azure subscription ID

    :example: Reservations_ListBySubscription
        az pscloud list
    """

    _aaz_info = {
        "version": "2024-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/purestorage.block/reservations", "2024-11-01"],
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/purestorage.block/reservations", "2024-11-01"],
        ]
    }

    AZ_SUPPORT_PAGINATION = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        condition_0 = has_value(self.ctx.subscription_id) and has_value(self.ctx.args.resource_group) is not True
        condition_1 = has_value(self.ctx.args.resource_group) and has_value(self.ctx.subscription_id)
        if condition_0:
            self.ReservationsListBySubscription(ctx=self.ctx)()
        if condition_1:
            self.ReservationsListByResourceGroup(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class ReservationsListBySubscription(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/PureStorage.Block/reservations",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType(
                flags={"required": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.location = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _element.tags = AAZDictType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.marketplace = AAZObjectType(
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.reservation_internal_id = AAZStrType(
                serialized_name="reservationInternalId",
                flags={"read_only": True},
            )
            properties.user = AAZObjectType(
                flags={"required": True},
            )

            marketplace = cls._schema_on_200.value.Element.properties.marketplace
            marketplace.offer_details = AAZObjectType(
                serialized_name="offerDetails",
                flags={"required": True},
            )
            marketplace.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
                flags={"read_only": True},
            )
            marketplace.subscription_status = AAZStrType(
                serialized_name="subscriptionStatus",
            )

            offer_details = cls._schema_on_200.value.Element.properties.marketplace.offer_details
            offer_details.offer_id = AAZStrType(
                serialized_name="offerId",
                flags={"required": True},
            )
            offer_details.plan_id = AAZStrType(
                serialized_name="planId",
                flags={"required": True},
            )
            offer_details.plan_name = AAZStrType(
                serialized_name="planName",
            )
            offer_details.publisher_id = AAZStrType(
                serialized_name="publisherId",
                flags={"required": True},
            )
            offer_details.term_id = AAZStrType(
                serialized_name="termId",
            )
            offer_details.term_unit = AAZStrType(
                serialized_name="termUnit",
            )

            user = cls._schema_on_200.value.Element.properties.user
            user.company_details = AAZObjectType(
                serialized_name="companyDetails",
            )
            user.email_address = AAZStrType(
                serialized_name="emailAddress",
                flags={"required": True},
            )
            user.first_name = AAZStrType(
                serialized_name="firstName",
                flags={"required": True},
            )
            user.last_name = AAZStrType(
                serialized_name="lastName",
                flags={"required": True},
            )
            user.phone_number = AAZStrType(
                serialized_name="phoneNumber",
            )
            user.upn = AAZStrType()

            company_details = cls._schema_on_200.value.Element.properties.user.company_details
            company_details.address = AAZObjectType()
            company_details.company_name = AAZStrType(
                serialized_name="companyName",
                flags={"required": True},
            )

            address = cls._schema_on_200.value.Element.properties.user.company_details.address
            address.address_line1 = AAZStrType(
                serialized_name="addressLine1",
                flags={"required": True},
            )
            address.address_line2 = AAZStrType(
                serialized_name="addressLine2",
            )
            address.city = AAZStrType(
                flags={"required": True},
            )
            address.country = AAZStrType(
                flags={"required": True},
            )
            address.postal_code = AAZStrType(
                serialized_name="postalCode",
                flags={"required": True},
            )
            address.state = AAZStrType(
                flags={"required": True},
            )

            system_data = cls._schema_on_200.value.Element.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.value.Element.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200

    class ReservationsListByResourceGroup(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/reservations",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType(
                flags={"required": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.location = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _element.tags = AAZDictType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.marketplace = AAZObjectType(
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.reservation_internal_id = AAZStrType(
                serialized_name="reservationInternalId",
                flags={"read_only": True},
            )
            properties.user = AAZObjectType(
                flags={"required": True},
            )

            marketplace = cls._schema_on_200.value.Element.properties.marketplace
            marketplace.offer_details = AAZObjectType(
                serialized_name="offerDetails",
                flags={"required": True},
            )
            marketplace.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
                flags={"read_only": True},
            )
            marketplace.subscription_status = AAZStrType(
                serialized_name="subscriptionStatus",
            )

            offer_details = cls._schema_on_200.value.Element.properties.marketplace.offer_details
            offer_details.offer_id = AAZStrType(
                serialized_name="offerId",
                flags={"required": True},
            )
            offer_details.plan_id = AAZStrType(
                serialized_name="planId",
                flags={"required": True},
            )
            offer_details.plan_name = AAZStrType(
                serialized_name="planName",
            )
            offer_details.publisher_id = AAZStrType(
                serialized_name="publisherId",
                flags={"required": True},
            )
            offer_details.term_id = AAZStrType(
                serialized_name="termId",
            )
            offer_details.term_unit = AAZStrType(
                serialized_name="termUnit",
            )

            user = cls._schema_on_200.value.Element.properties.user
            user.company_details = AAZObjectType(
                serialized_name="companyDetails",
            )
            user.email_address = AAZStrType(
                serialized_name="emailAddress",
                flags={"required": True},
            )
            user.first_name = AAZStrType(
                serialized_name="firstName",
                flags={"required": True},
            )
            user.last_name = AAZStrType(
                serialized_name="lastName",
                flags={"required": True},
            )
            user.phone_number = AAZStrType(
                serialized_name="phoneNumber",
            )
            user.upn = AAZStrType()

            company_details = cls._schema_on_200.value.Element.properties.user.company_details
            company_details.address = AAZObjectType()
            company_details.company_name = AAZStrType(
                serialized_name="companyName",
                flags={"required": True},
            )

            address = cls._schema_on_200.value.Element.properties.user.company_details.address
            address.address_line1 = AAZStrType(
                serialized_name="addressLine1",
                flags={"required": True},
            )
            address.address_line2 = AAZStrType(
                serialized_name="addressLine2",
            )
            address.city = AAZStrType(
                flags={"required": True},
            )
            address.country = AAZStrType(
                flags={"required": True},
            )
            address.postal_code = AAZStrType(
                serialized_name="postalCode",
                flags={"required": True},
            )
            address.state = AAZStrType(
                flags={"required": True},
            )

            system_data = cls._schema_on_200.value.Element.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.value.Element.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""


__all__ = ["List"]
