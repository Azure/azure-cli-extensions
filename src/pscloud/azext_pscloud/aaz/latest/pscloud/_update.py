# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Update(AAZCommand):
    """Update a reservation
    """

    _aaz_info = {
        "version": "2024-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/purestorage.block/reservations/{}", "2024-11-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.reservation_name = AAZStrArg(
            options=["-n", "--name", "--reservation-name"],
            help="Name of the reservation.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9\\-_]{1,127}$",
                max_length=127,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.user = AAZObjectArg(
            options=["--user"],
            arg_group="Properties",
            help="User details",
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Properties",
            help="Resource tags.",
        )

        user = cls._args_schema.user
        user.company_details = AAZObjectArg(
            options=["company-details"],
            help="Company details",
        )
        user.email_address = AAZStrArg(
            options=["email-address"],
            help="Email address",
            fmt=AAZStrArgFormat(
                pattern="^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\\.)+[A-Za-z]{2,}$",
            ),
        )
        user.first_name = AAZStrArg(
            options=["first-name"],
            help="First name",
        )
        user.last_name = AAZStrArg(
            options=["last-name"],
            help="Last name",
        )
        user.phone_number = AAZStrArg(
            options=["phone-number"],
            help="Phone number",
        )
        user.upn = AAZStrArg(
            options=["upn"],
            help="Principal name",
        )

        company_details = cls._args_schema.user.company_details
        company_details.address = AAZObjectArg(
            options=["address"],
            help="Company address",
        )
        company_details.company_name = AAZStrArg(
            options=["company-name"],
            help="Company name",
        )

        address = cls._args_schema.user.company_details.address
        address.address_line1 = AAZStrArg(
            options=["address-line1"],
            help="Address line 1",
        )
        address.address_line2 = AAZStrArg(
            options=["address-line2"],
            help="Address line 2",
        )
        address.city = AAZStrArg(
            options=["city"],
            help="Name of the city",
        )
        address.country = AAZStrArg(
            options=["country"],
            help="Name of the country",
        )
        address.postal_code = AAZStrArg(
            options=["postal-code"],
            help="Postal code",
        )
        address.state = AAZStrArg(
            options=["state"],
            help="State (if any)",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.ReservationsUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ReservationsUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/reservations/{reservationName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "reservationName", self.ctx.args.reservation_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("user", AAZObjectType, ".user")

            user = _builder.get(".properties.user")
            if user is not None:
                user.set_prop("companyDetails", AAZObjectType, ".company_details")
                user.set_prop("emailAddress", AAZStrType, ".email_address")
                user.set_prop("firstName", AAZStrType, ".first_name")
                user.set_prop("lastName", AAZStrType, ".last_name")
                user.set_prop("phoneNumber", AAZStrType, ".phone_number")
                user.set_prop("upn", AAZStrType, ".upn")

            company_details = _builder.get(".properties.user.companyDetails")
            if company_details is not None:
                company_details.set_prop("address", AAZObjectType, ".address")
                company_details.set_prop("companyName", AAZStrType, ".company_name")

            address = _builder.get(".properties.user.companyDetails.address")
            if address is not None:
                address.set_prop("addressLine1", AAZStrType, ".address_line1")
                address.set_prop("addressLine2", AAZStrType, ".address_line2")
                address.set_prop("city", AAZStrType, ".city")
                address.set_prop("country", AAZStrType, ".country")
                address.set_prop("postalCode", AAZStrType, ".postal_code")
                address.set_prop("state", AAZStrType, ".state")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.marketplace = AAZObjectType(
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.reservation_internal_id = AAZStrType(
                serialized_name="reservationInternalId",
                flags={"read_only": True},
            )
            properties.user = AAZObjectType(
                flags={"required": True},
            )

            marketplace = cls._schema_on_200.properties.marketplace
            marketplace.offer_details = AAZObjectType(
                serialized_name="offerDetails",
                flags={"required": True},
            )
            marketplace.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
                flags={"read_only": True},
            )
            marketplace.subscription_status = AAZStrType(
                serialized_name="subscriptionStatus",
            )

            offer_details = cls._schema_on_200.properties.marketplace.offer_details
            offer_details.offer_id = AAZStrType(
                serialized_name="offerId",
                flags={"required": True},
            )
            offer_details.plan_id = AAZStrType(
                serialized_name="planId",
                flags={"required": True},
            )
            offer_details.plan_name = AAZStrType(
                serialized_name="planName",
            )
            offer_details.publisher_id = AAZStrType(
                serialized_name="publisherId",
                flags={"required": True},
            )
            offer_details.term_id = AAZStrType(
                serialized_name="termId",
            )
            offer_details.term_unit = AAZStrType(
                serialized_name="termUnit",
            )

            user = cls._schema_on_200.properties.user
            user.company_details = AAZObjectType(
                serialized_name="companyDetails",
            )
            user.email_address = AAZStrType(
                serialized_name="emailAddress",
                flags={"required": True},
            )
            user.first_name = AAZStrType(
                serialized_name="firstName",
                flags={"required": True},
            )
            user.last_name = AAZStrType(
                serialized_name="lastName",
                flags={"required": True},
            )
            user.phone_number = AAZStrType(
                serialized_name="phoneNumber",
            )
            user.upn = AAZStrType()

            company_details = cls._schema_on_200.properties.user.company_details
            company_details.address = AAZObjectType()
            company_details.company_name = AAZStrType(
                serialized_name="companyName",
                flags={"required": True},
            )

            address = cls._schema_on_200.properties.user.company_details.address
            address.address_line1 = AAZStrType(
                serialized_name="addressLine1",
                flags={"required": True},
            )
            address.address_line2 = AAZStrType(
                serialized_name="addressLine2",
            )
            address.city = AAZStrType(
                flags={"required": True},
            )
            address.country = AAZStrType(
                flags={"required": True},
            )
            address.postal_code = AAZStrType(
                serialized_name="postalCode",
                flags={"required": True},
            )
            address.state = AAZStrType(
                flags={"required": True},
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _UpdateHelper:
    """Helper class for Update"""


__all__ = ["Update"]
