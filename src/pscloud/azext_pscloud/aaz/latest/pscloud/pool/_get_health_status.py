# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "pscloud pool get-health-status",
    is_preview=True,
)
class GetHealthStatus(AAZCommand):
    """Retrieve health metrics of a storage pool

    :example: StoragePools_GetHealthStatus
        az pscloud pool get-health-status --resource-group rgpurestorage --storage-pool-name storagePoolname
    """

    _aaz_info = {
        "version": "2024-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/purestorage.block/storagepools/{}/gethealthstatus", "2024-11-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.storage_pool_name = AAZStrArg(
            options=["--storage-pool-name"],
            help="Name of the storage pool",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9\\-_]{1,127}$",
                max_length=127,
                min_length=1,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.StoragePoolsGetHealthStatus(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class StoragePoolsGetHealthStatus(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}/getHealthStatus",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "storagePoolName", self.ctx.args.storage_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.alerts = AAZListType(
                flags={"required": True},
            )
            _schema_on_200.health = AAZObjectType(
                flags={"required": True},
            )

            alerts = cls._schema_on_200.alerts
            alerts.Element = AAZObjectType()

            _element = cls._schema_on_200.alerts.Element
            _element.level = AAZStrType(
                flags={"required": True},
            )
            _element.message = AAZStrType(
                flags={"required": True},
            )

            health = cls._schema_on_200.health
            health.bandwidth_usage = AAZObjectType(
                serialized_name="bandwidthUsage",
                flags={"required": True},
            )
            health.data_reduction_ratio = AAZFloatType(
                serialized_name="dataReductionRatio",
                flags={"required": True},
            )
            health.estimated_max_capacity = AAZIntType(
                serialized_name="estimatedMaxCapacity",
                flags={"required": True},
            )
            health.iops_usage = AAZObjectType(
                serialized_name="iopsUsage",
                flags={"required": True},
            )
            health.space = AAZObjectType(
                flags={"required": True},
            )
            health.used_capacity_percentage = AAZFloatType(
                serialized_name="usedCapacityPercentage",
                flags={"required": True},
            )

            bandwidth_usage = cls._schema_on_200.health.bandwidth_usage
            bandwidth_usage.current = AAZFloatType(
                flags={"required": True},
            )
            bandwidth_usage.max = AAZFloatType(
                flags={"required": True},
            )
            bandwidth_usage.provisioned = AAZFloatType(
                flags={"required": True},
            )

            iops_usage = cls._schema_on_200.health.iops_usage
            iops_usage.current = AAZFloatType(
                flags={"required": True},
            )
            iops_usage.max = AAZFloatType(
                flags={"required": True},
            )
            iops_usage.provisioned = AAZFloatType(
                flags={"required": True},
            )

            space = cls._schema_on_200.health.space
            space.shared = AAZIntType(
                flags={"required": True},
            )
            space.snapshots = AAZIntType(
                flags={"required": True},
            )
            space.total_used = AAZIntType(
                serialized_name="totalUsed",
                flags={"required": True},
            )
            space.unique = AAZIntType(
                flags={"required": True},
            )

            return cls._schema_on_200


class _GetHealthStatusHelper:
    """Helper class for GetHealthStatus"""


__all__ = ["GetHealthStatus"]
