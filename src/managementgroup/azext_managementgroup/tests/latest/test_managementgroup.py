# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from azure.cli.testsdk import ScenarioTest

class ManagementGroupTests(ScenarioTest):
    '''def test_list_managementgroup(self):
        managementgroups_list = self.cmd(
            'az managementgroup management-group list').get_output_in_json()
        self.assertIsNotNone(managementgroups_list)
        self.assertTrue(len(managementgroups_list) > 0)
        self.assertIsNotNone(managementgroups_list[0]["displayName"])
        self.assertTrue(managementgroups_list[0]["id"].startswith(
            "/providers/Microsoft.Management/managementGroups/"))
        self.assertIsNotNone(managementgroups_list[0]["name"])
        self.assertIsNotNone(managementgroups_list[0]["tenantId"])
        self.assertEqual(
            managementgroups_list[0]["type"],
            "Microsoft.Management/managementGroups")'''

    def test_tenant_backfill(self):
        backfill_result = self.cmd('az managementgroup start-tenant-backfill').get_output_in_json()
        self.assertIsNotNone(backfill_result)
        self.assertEqual(backfill_result["status"], "Completed")
        backfill_status = self.cmd('az managementgroup tenant-backfill-status').get_output_in_json()
        self.assertIsNotNone(backfill_status)
        self.assertEqual(backfill_status["status"], "Completed")
        
    def test_show_managementgroup(self):
        self.cmd('az managementgroup management-group create --group-id "thomasSubs"')
        self.cmd('az managementgroup management-group create --group-id "thomasSubs1" --id "/providers/Microsoft.Management/managementGroups/thomasSubs"')
        self.cmd('az managementgroup management-group create --group-id "thomasSubs2" --id "/providers/Microsoft.Management/managementGroups/thomasSubs1"')
        managementgroup_get = self.cmd('az managementgroup management-group show --group-id "thomasSubs1"').get_output_in_json()
        self.assertIsNotNone(managementgroup_get)
        self.assertIsNone(managementgroup_get["children"])
        self.assertIsNotNone(managementgroup_get["details"])
        self.assertEqual(
            managementgroup_get["id"],
            "/providers/Microsoft.Management/managementGroups/thomasSubs1")
        self.assertEqual(managementgroup_get["name"], "thomasSubs1")
        self.assertEqual(
            managementgroup_get["displayName"],
            "thomasSubs1")
        self.assertEqual(
            managementgroup_get["details"]["parent"]["displayName"],
            "thomasSubs")
        self.assertEqual(
            managementgroup_get["details"]["parent"]["id"],
            "/providers/Microsoft.Management/managementGroups/thomasSubs")
        self.assertEqual(
            managementgroup_get["details"]["parent"]["name"],
            "thomasSubs")
        self.assertIsNotNone(managementgroup_get["tenantId"])
        self.assertEqual(
            managementgroup_get["type"],
            "Microsoft.Management/managementGroups")
        #self.cmd('az managementgroup management-group update --group-id "thomasSubs1" --display-name "dolanSubs1"')
        #managementgroup_get = self.cmd('az managementgroup management-group show --group-id "thomasSubs1"').get_output_in_json()
        #self.assertIsNotNone(managementgroup_get)
        #self.assertEqual(managementgroup_get["displayName"], "dolanSubs1")
        self.cmd('az managementgroup management-group delete --group-id "thomasSubs2" --yes')
        self.cmd('az managementgroup management-group delete --group-id "thomasSubs1" --yes')
        self.cmd('az managementgroup management-group delete --group-id "thomasSubs" --yes')




    
