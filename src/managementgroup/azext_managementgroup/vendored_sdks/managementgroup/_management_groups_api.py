# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.mgmt.core import ARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

    from azure.core.credentials import TokenCredential

from ._configuration import ManagementGroupsAPIConfiguration
from .operations import ManagementGroupOperations
from .operations import ManagementGroupSubscriptionOperations
from .operations import HierarchySettingOperations
from .operations import OperationOperations
from .operations import ManagementGroupsAPIOperationsMixin
from .operations import EntityOperations
from . import models


class ManagementGroupsAPI(ManagementGroupsAPIOperationsMixin):
    """The Azure Management Groups API enables consolidation of multiple 
subscriptions/resources into an organizational hierarchy and centrally 
manage access control, policies, alerting and reporting for those resources.

    :ivar management_group: ManagementGroupOperations operations
    :vartype management_group: management_groups_api.operations.ManagementGroupOperations
    :ivar management_group_subscription: ManagementGroupSubscriptionOperations operations
    :vartype management_group_subscription: management_groups_api.operations.ManagementGroupSubscriptionOperations
    :ivar hierarchy_setting: HierarchySettingOperations operations
    :vartype hierarchy_setting: management_groups_api.operations.HierarchySettingOperations
    :ivar operation: OperationOperations operations
    :vartype operation: management_groups_api.operations.OperationOperations
    :ivar entity: EntityOperations operations
    :vartype entity: management_groups_api.operations.EntityOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials.TokenCredential
    :param skip: Number of entities to skip over when retrieving results. Passing this in will override $skipToken.
    :type skip: int
    :param top: Number of elements to return when retrieving results. Passing this in will override $skipToken.
    :type top: int
    :param skiptoken: Page continuation token is only used if a previous operation returned a partial result. 
If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
    :type skiptoken: str
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential,  # type: "TokenCredential"
        skip=None,  # type: Optional[int]
        top=None,  # type: Optional[int]
        skiptoken=None,  # type: Optional[str]
        base_url=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = ManagementGroupsAPIConfiguration(credential, skip, top, skiptoken, **kwargs)
        self._client = ARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.management_group = ManagementGroupOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.management_group_subscription = ManagementGroupSubscriptionOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.hierarchy_setting = HierarchySettingOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.operation = OperationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.entity = EntityOperations(
            self._client, self._config, self._serialize, self._deserialize)

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> ManagementGroupsAPI
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
