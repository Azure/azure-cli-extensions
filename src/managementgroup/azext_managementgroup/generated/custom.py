# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.cli.core.util import sdk_no_wait


def managementgroup_management_group_list(client,
                                          skiptoken=None):
    return client.list(skiptoken=skiptoken)


def managementgroup_management_group_show(client,
                                          group_id,
                                          expand=None,
                                          recurse=None,
                                          filter_=None):
    return client.get(group_id=group_id,
                      expand=expand,
                      recurse=recurse,
                      filter=filter_)


def managementgroup_management_group_create(client,
                                            group_id,
                                            name=None,
                                            display_name=None,
                                            id_=None,
                                            no_wait=False):
    create_management_group_request = {}
    if name is not None:
        create_management_group_request['name'] = name
    if display_name is not None:
        create_management_group_request['display_name'] = display_name
    create_management_group_request['details'] = {}
    create_management_group_request['details']['parent'] = {}
    if id_ is not None:
        create_management_group_request['details']['parent']['id'] = id_
    if len(create_management_group_request['details']['parent']) == 0:
        del create_management_group_request['details']['parent']
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       group_id=group_id,
                       create_management_group_request=create_management_group_request)


def managementgroup_management_group_update(client,
                                            group_id,
                                            display_name=None,
                                            parent_group_id=None):
    patch_group_request = {}
    if display_name is not None:
        patch_group_request['display_name'] = display_name
    if parent_group_id is not None:
        patch_group_request['parent_group_id'] = parent_group_id
    return client.update(group_id=group_id,
                         patch_group_request=patch_group_request)


def managementgroup_management_group_delete(client,
                                            group_id,
                                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       group_id=group_id)


def managementgroup_management_group_show_descendant(client,
                                                     group_id,
                                                     skiptoken=None,
                                                     top=None):
    return client.get_descendants(group_id=group_id,
                                  skiptoken=skiptoken,
                                  top=top)


def managementgroup_management_group_subscription_create(client,
                                                         group_id,
                                                         subscription_id):
    return client.create(group_id=group_id,
                         subscription_id=subscription_id)


def managementgroup_management_group_subscription_delete(client,
                                                         group_id,
                                                         subscription_id):
    return client.delete(group_id=group_id,
                         subscription_id=subscription_id)


def managementgroup_management_group_subscription_show_subscription(client,
                                                                    group_id,
                                                                    subscription_id):
    return client.get_subscription(group_id=group_id,
                                   subscription_id=subscription_id)


def managementgroup_management_group_subscription_show_subscription_under_management_group(client,
                                                                                           group_id,
                                                                                           skiptoken=None):
    return client.get_subscriptions_under_management_group(group_id=group_id,
                                                           skiptoken=skiptoken)


def managementgroup_hierarchy_setting_list(client,
                                           group_id):
    return client.list(group_id=group_id)


def managementgroup_hierarchy_setting_show(client,
                                           group_id):
    return client.get(group_id=group_id)


def managementgroup_hierarchy_setting_create(client,
                                             group_id,
                                             req_auth_for_g=None,
                                             default_mg=None):
    create_tenant_settings_request = {}
    if req_auth_for_g is not None:
        create_tenant_settings_request['req_auth_for_g'] = req_auth_for_g
    if default_mg is not None:
        create_tenant_settings_request['default_mg'] = default_mg
    return client.create_or_update(group_id=group_id,
                                   create_tenant_settings_request=create_tenant_settings_request)


def managementgroup_hierarchy_setting_update(client,
                                             group_id,
                                             req_auth_for_g=None,
                                             default_mg=None):
    create_tenant_settings_request = {}
    if req_auth_for_g is not None:
        create_tenant_settings_request['req_auth_for_g'] = req_auth_for_g
    if default_mg is not None:
        create_tenant_settings_request['default_mg'] = default_mg
    return client.update(group_id=group_id,
                         create_tenant_settings_request=create_tenant_settings_request)


def managementgroup_hierarchy_setting_delete(client,
                                             group_id):
    return client.delete(group_id=group_id)


def managementgroup_start_tenant_backfill(client):
    return client.start_tenant_backfill()


def managementgroup_tenant_backfill_status(client):
    return client.tenant_backfill_status()


def managementgroup_entity_list(client,
                                skiptoken=None,
                                skip=None,
                                top=None,
                                select=None,
                                search=None,
                                filter_=None,
                                view=None,
                                group_name=None):
    return client.list(skiptoken=skiptoken,
                       skip=skip,
                       top=top,
                       select=select,
                       search=search,
                       filter=filter_,
                       view=view,
                       group_name=group_name)
