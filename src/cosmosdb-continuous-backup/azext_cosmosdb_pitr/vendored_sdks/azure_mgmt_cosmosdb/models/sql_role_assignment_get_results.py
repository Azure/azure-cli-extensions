# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .arm_proxy_resource import ARMProxyResource


class SqlRoleAssignmentGetResults(ARMProxyResource):
    """An Azure Cosmos DB Role Assignment.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The unique resource identifier of the database account.
    :vartype id: str
    :ivar name: The name of the database account.
    :vartype name: str
    :ivar type: The type of Azure resource.
    :vartype type: str
    :param role_definition_id: The unique identifier for the associated Role
     Definition.
    :type role_definition_id: str
    :param scope: The data plane resource path for which access is being
     granted through this Role Assignment.
    :type scope: str
    :param principal_id: The unique identifier for the associated AAD
     principal in the AAD graph to which access is being granted through this
     Role Assignment. Tenant ID for the principal is inferred using the tenant
     associated with the subscription.
    :type principal_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'role_definition_id': {'key': 'properties.roleDefinitionId', 'type': 'str'},
        'scope': {'key': 'properties.scope', 'type': 'str'},
        'principal_id': {'key': 'properties.principalId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SqlRoleAssignmentGetResults, self).__init__(**kwargs)
        self.role_definition_id = kwargs.get('role_definition_id', None)
        self.scope = kwargs.get('scope', None)
        self.principal_id = kwargs.get('principal_id', None)
