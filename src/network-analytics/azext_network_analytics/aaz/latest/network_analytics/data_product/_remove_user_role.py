# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network-analytics data-product remove-user-role",
)
class RemoveUserRole(AAZCommand):
    """Remove role from the data product.

    :example: remove user role
        az network-analytics data-product remove-user-role --data-product-name <dpname> --resource-group <rg> --data-type-scope " " --principal-id <userid> --principal-type user --role reader --role-id " " --user-name " " --role-assignment-id " "
    """

    _aaz_info = {
        "version": "2023-11-15",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.networkanalytics/dataproducts/{}/removeuserrole", "2023-11-15"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return None

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.data_product_name = AAZStrArg(
            options=["--data-product-name"],
            help="The data product resource name",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-z][a-z0-9]*$",
                max_length=63,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.data_type_scope = AAZListArg(
            options=["--data-type-scope"],
            arg_group="Body",
            help="Data Type Scope at which the role assignment is created.",
            required=True,
        )
        _args_schema.principal_id = AAZStrArg(
            options=["--principal-id"],
            arg_group="Body",
            help="Object ID of the AAD principal or security-group.",
            required=True,
        )
        _args_schema.principal_type = AAZStrArg(
            options=["--principal-type"],
            arg_group="Body",
            help="Type of the principal Id: User, Group or ServicePrincipal",
            required=True,
        )
        _args_schema.role = AAZStrArg(
            options=["--role"],
            arg_group="Body",
            help="Data Product role to be assigned to a user.",
            required=True,
            enum={"Reader": "Reader", "SensitiveReader": "SensitiveReader"},
        )
        _args_schema.role_assignment_id = AAZStrArg(
            options=["--role-assignment-id"],
            arg_group="Body",
            help="Id of role assignment request",
            required=True,
        )
        _args_schema.role_id = AAZStrArg(
            options=["--role-id"],
            arg_group="Body",
            help="Role Id of the Built-In Role",
            required=True,
        )
        _args_schema.user_name = AAZStrArg(
            options=["--user-name"],
            arg_group="Body",
            help="User name.",
            required=True,
        )

        data_type_scope = cls._args_schema.data_type_scope
        data_type_scope.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.DataProductsRemoveUserRole(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class DataProductsRemoveUserRole(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [204]:
                return self.on_204(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}/removeUserRole",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "dataProductName", self.ctx.args.data_product_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-11-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("dataTypeScope", AAZListType, ".data_type_scope", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("principalId", AAZStrType, ".principal_id", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("principalType", AAZStrType, ".principal_type", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("role", AAZStrType, ".role", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("roleAssignmentId", AAZStrType, ".role_assignment_id", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("roleId", AAZStrType, ".role_id", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("userName", AAZStrType, ".user_name", typ_kwargs={"flags": {"required": True}})

            data_type_scope = _builder.get(".dataTypeScope")
            if data_type_scope is not None:
                data_type_scope.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_204(self, session):
            pass


class _RemoveUserRoleHelper:
    """Helper class for RemoveUserRole"""


__all__ = ["RemoveUserRole"]
