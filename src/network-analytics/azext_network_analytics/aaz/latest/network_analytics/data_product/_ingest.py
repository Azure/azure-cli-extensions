# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

import os
import re
import uuid

from azure.cli.command_modules.keyvault._client_factory import data_plane_azure_keyvault_secret_client
from azure.cli.core.aaz import *
from azure.cli.core.azclierror import InvalidArgumentValueError, UnauthorizedError
from azure.core.exceptions import ClientAuthenticationError
from azure.cli.core.profiles import ResourceType
from azure.cli.core.commands.client_factory import get_mgmt_service_client
from datetime import date
from .profiles import DATA_STORAGE_BLOB_CONTAINER

@register_command(
    "network-analytics data-product ingest",
)
class Ingest(AAZCommand):
    """Ingest sample data file into data product.

    :example: Ingest sample data file with all parameters
        az network-analytics data-product ingest --data-product-name <dpname> --resource-group <rg> --data-type <datatype> --file <filepath> --principal-id <userid> --user-name " "
    """

    _aaz_info = {}

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.data_product_name = AAZStrArg(
            options=["--data-product-name"],
            help="The data product resource name",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-z][a-z0-9]*$",
                max_length=63,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.data_type = AAZListArg(
            options=["--data-type"],
            arg_group="Body",
            help="Data Type.",
            required=True,
        )
        _args_schema.source = AAZStrArg(
            options=["--srcdir"],
            arg_group="Body",
            help="Source directory path.",
            required=True,
        )

        data_type_scope = cls._args_schema.data_type_scope
        data_type_scope.Element = AAZStrArg()
        return cls._args_schema
    
    def _execute_operations(self):
        self.pre_operations()
        self.DataProductsIngest(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result
    
    class DataProductsIngest(object):
        DATA_PRODUCT_ARM_ID = "/subscriptions/{}/resourceGroups/{}/providers/Microsoft.NetworkAnalytics/dataProducts/{}"
        API_VERSION = "2023-11-15"
        KEYVAULT_NAME = "input-storage-sas"
        KEYVAULT_URI = "https://aoi-{}-kv.vault.azure.net/"

        def __init__(self, ctx):
            self.ctx = ctx
            self.subscription_id = ctx.subscription_id
            self.resource_group = ctx.args.resource_group
            self.data_product_name = ctx.args.data_product_name
            self.data_type = ctx.args.data_type
            self.source = ctx.args.source

            self.resources_client = get_mgmt_service_client(self.ctx, ResourceType.MGMT_RESOURCE_RESOURCES, subscription_id=self.subscription_id).resources
            self.container_client = get_mgmt_service_client(self.ctx, DATA_STORAGE_BLOB_CONTAINER)

        def __call__(self, *args, **kwargs):
            data_product = self.get_data_product()
            secret = self.get_key_vault_secret(data_product)
            self.upload_file(secret)

        def get_data_product(self):
            arm_id = self.DATA_PRODUCT_ARM_ID.format(self.subscription_id, self.resource_group, self.data_product_name)
            resource = self.resources_client.get_by_id(arm_id, self.API_VERSION)
            return resource
        
        def get_keyvault_url(self, data_product):
            ingestion_url = data_product.properties.consumptionEndpoints.ingestionUrl
            unique_id = re.search("https://aoiingestion(.*)\.blob\.core\.windows\.net", ingestion_url).group(1)
            vault_base_url = self.KEYVAULT_URI.format(unique_id)
            return vault_base_url
        
        def get_key_vault_secret(self, data_product):
            keyvault_url = self.get_keyvault_url(data_product)
            command_args = {'vault_base_url': keyvault_url}
            keyvault_client  = data_plane_azure_keyvault_secret_client(self.ctx, command_args)
            try:
                secret = keyvault_client.get_secret(name=self.KEYVAULT_NAME)
            except ClientAuthenticationError:
                err_msg = f'You do not have permission to access the key vault of data product {self.data_product_name}'
                raise UnauthorizedError(err_msg)
            return secret.value
        
        def upload_file(self, secret):
            storage_container = self.get_storage_container(secret)
            file_name = os.path.basename(self.source)
            blob_name = "sample_data/{}/{}".format(date.today, file_name)

            try:
                data = open(self.source, "rb")
                storage_container.upload_blob(name=blob_name, data=data, overwrite=True)
            except:
                err_msg = "The source directory provided is invalid or cannot be accessed."
                raise InvalidArgumentValueError(err_msg)

        def get_storage_container(self, secret):
            result = secret.split("?", 1)
            storage_url = result[0]
            sas_token = result[1]
            container_name = self.data_type
            container_url = f'{storage_url}/{container_name}'
            return self.container_client.from_container_url(
                container_url=container_url,
                credential=sas_token
            )

__all__ = ["Ingest"]