# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network-analytics data-product create",
)
class Create(AAZCommand):
    """Create data product resource.

    :example: Create data product with all parameter
        az network-analytics data-product create --name dpname --resource-group rgname --location westcentralus --publisher Microsoft --product MCC --major-version  2.0.0 --owners xyz@email --customer-managed-key-encryption-enabled Enabled --key-encryption-enable Enabled --encryption-key '{"keyVaultUri":"<vaulturi>","keyName":"<keyname>","keyVersion":"<version>"}' --managed-rg '{"location":"westcentralus","name":"<mrgname>"}' --networkacls '{"virtualNetworkRule":[{"id":"<ruleid>","action":"<action>","state":"<state>"}],"ipRules":[{"value":"<value>","action":"<action>"}],"allowedQueryIpRangeList":["1.2.3.4-1.2.3.10"],"defaultAction":"Allow"}' --private-links-enabled Enabled --public-network-access Enabled --purview-account perviewaccount --purview-collection collection --redundancy Enabled --identity '{"type":"userAssigned","userAssignedIdentities":{"/subscriptions/<subid>/resourceGroups/<rgname>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<idname>"}}' --tags '{"key1":"value1","key2":"value2"}'
    """

    _aaz_info = {
        "version": "2023-11-15",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.networkanalytics/dataproducts/{}", "2023-11-15"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.data_product_name = AAZStrArg(
            options=["-n", "--name", "--data-product-name"],
            help="The data product resource name",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-z][a-z0-9]*$",
                max_length=63,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.encryption_key = AAZObjectArg(
            options=["--encryption-key"],
            arg_group="Properties",
            help="Customer managed encryption key details for data product.",
        )
        _args_schema.key_encryption_enable = AAZStrArg(
            options=["--key-encryption-enable"],
            arg_group="Properties",
            help="Flag to enable customer managed key encryption for data product.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.major_version = AAZStrArg(
            options=["--major-version"],
            arg_group="Properties",
            help="Major version of data product.",
        )
        _args_schema.managed_rg = AAZObjectArg(
            options=["--managed-rg"],
            arg_group="Properties",
            help="Managed resource group configuration.",
        )
        _args_schema.networkacls = AAZObjectArg(
            options=["--networkacls"],
            arg_group="Properties",
            help="Network rule set for data product.",
        )
        _args_schema.owners = AAZListArg(
            options=["--owners"],
            arg_group="Properties",
            help="List of name or email associated with data product resource deployment.",
        )
        _args_schema.private_links_enabled = AAZStrArg(
            options=["--private-links-enabled"],
            arg_group="Properties",
            help="Flag to enable or disable private link for data product resource.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.product = AAZStrArg(
            options=["--product"],
            arg_group="Properties",
            help="Product name of data product.",
        )
        _args_schema.public_network_access = AAZStrArg(
            options=["--public-network-access"],
            arg_group="Properties",
            help="Flag to enable or disable public access of data product resource.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.publisher = AAZStrArg(
            options=["--publisher"],
            arg_group="Properties",
            help="Data product publisher name.",
        )
        _args_schema.purview_account = AAZStrArg(
            options=["--purview-account"],
            arg_group="Properties",
            help="Purview account url for data product to connect to.",
        )
        _args_schema.purview_collection = AAZStrArg(
            options=["--purview-collection"],
            arg_group="Properties",
            help="Purview collection url for data product to connect to.",
        )
        _args_schema.redundancy = AAZStrArg(
            options=["--redundancy"],
            arg_group="Properties",
            help="Flag to enable or disable redundancy for data product.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        encryption_key = cls._args_schema.encryption_key
        encryption_key.key_name = AAZStrArg(
            options=["key-name"],
            help="The name of the key vault key.",
            required=True,
        )
        encryption_key.key_vault_uri = AAZStrArg(
            options=["key-vault-uri"],
            help="The Uri of the key vault.",
            required=True,
        )
        encryption_key.key_version = AAZStrArg(
            options=["key-version"],
            help="The version of the key vault key.",
            required=True,
        )

        managed_rg = cls._args_schema.managed_rg
        managed_rg.location = AAZStrArg(
            options=["location"],
            help="Managed Resource Group location",
            required=True,
        )
        managed_rg.name = AAZStrArg(
            options=["name"],
            help="Name of managed resource group",
            required=True,
        )

        networkacls = cls._args_schema.networkacls
        networkacls.allowed_query_ip_range_list = AAZListArg(
            options=["allowed-query-ip-range-list"],
            help="The list of query ips in the format of CIDR allowed to connect to query/visualization endpoint.",
            required=True,
        )
        networkacls.default_action = AAZStrArg(
            options=["default-action"],
            help="Default Action",
            required=True,
            enum={"Allow": "Allow", "Deny": "Deny"},
        )
        networkacls.ip_rules = AAZListArg(
            options=["ip-rules"],
            help="IP rule with specific IP or IP range in CIDR format.",
            required=True,
        )
        networkacls.virtual_network_rule = AAZListArg(
            options=["virtual-network-rule"],
            help="Virtual Network Rule",
            required=True,
        )

        allowed_query_ip_range_list = cls._args_schema.networkacls.allowed_query_ip_range_list
        allowed_query_ip_range_list.Element = AAZStrArg()

        ip_rules = cls._args_schema.networkacls.ip_rules
        ip_rules.Element = AAZObjectArg()

        _element = cls._args_schema.networkacls.ip_rules.Element
        _element.action = AAZStrArg(
            options=["action"],
            help="The action of virtual network rule.",
            required=True,
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="IP Rules Value",
        )

        virtual_network_rule = cls._args_schema.networkacls.virtual_network_rule
        virtual_network_rule.Element = AAZObjectArg()

        _element = cls._args_schema.networkacls.virtual_network_rule.Element
        _element.action = AAZStrArg(
            options=["action"],
            help="The action of virtual network rule.",
        )
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID of a subnet",
            required=True,
        )
        _element.state = AAZStrArg(
            options=["state"],
            help="Gets the state of virtual network rule.",
        )

        owners = cls._args_schema.owners
        owners.Element = AAZStrArg()

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.identity = AAZObjectArg(
            options=["--identity"],
            arg_group="Resource",
            help="The managed service identities assigned to this resource.",
        )
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        identity = cls._args_schema.identity
        identity.type = AAZStrArg(
            options=["type"],
            help="Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
            required=True,
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "SystemAssigned, UserAssigned": "SystemAssigned, UserAssigned", "UserAssigned": "UserAssigned"},
        )
        identity.user_assigned_identities = AAZDictArg(
            options=["user-assigned-identities"],
            help="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
        )

        user_assigned_identities = cls._args_schema.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectArg(
            blank={},
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.DataProductsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class DataProductsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkAnalytics/dataProducts/{dataProductName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "dataProductName", self.ctx.args.data_product_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-11-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("customerEncryptionKey", AAZObjectType, ".encryption_key")
                properties.set_prop("customerManagedKeyEncryptionEnabled", AAZStrType, ".key_encryption_enable")
                properties.set_prop("majorVersion", AAZStrType, ".major_version", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("managedResourceGroupConfiguration", AAZObjectType, ".managed_rg")
                properties.set_prop("networkacls", AAZObjectType, ".networkacls")
                properties.set_prop("owners", AAZListType, ".owners")
                properties.set_prop("privateLinksEnabled", AAZStrType, ".private_links_enabled")
                properties.set_prop("product", AAZStrType, ".product", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("publicNetworkAccess", AAZStrType, ".public_network_access")
                properties.set_prop("publisher", AAZStrType, ".publisher", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("purviewAccount", AAZStrType, ".purview_account")
                properties.set_prop("purviewCollection", AAZStrType, ".purview_collection")
                properties.set_prop("redundancy", AAZStrType, ".redundancy")

            customer_encryption_key = _builder.get(".properties.customerEncryptionKey")
            if customer_encryption_key is not None:
                customer_encryption_key.set_prop("keyName", AAZStrType, ".key_name", typ_kwargs={"flags": {"required": True}})
                customer_encryption_key.set_prop("keyVaultUri", AAZStrType, ".key_vault_uri", typ_kwargs={"flags": {"required": True}})
                customer_encryption_key.set_prop("keyVersion", AAZStrType, ".key_version", typ_kwargs={"flags": {"required": True}})

            managed_resource_group_configuration = _builder.get(".properties.managedResourceGroupConfiguration")
            if managed_resource_group_configuration is not None:
                managed_resource_group_configuration.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
                managed_resource_group_configuration.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})

            networkacls = _builder.get(".properties.networkacls")
            if networkacls is not None:
                networkacls.set_prop("allowedQueryIpRangeList", AAZListType, ".allowed_query_ip_range_list", typ_kwargs={"flags": {"required": True}})
                networkacls.set_prop("defaultAction", AAZStrType, ".default_action", typ_kwargs={"flags": {"required": True}})
                networkacls.set_prop("ipRules", AAZListType, ".ip_rules", typ_kwargs={"flags": {"required": True}})
                networkacls.set_prop("virtualNetworkRule", AAZListType, ".virtual_network_rule", typ_kwargs={"flags": {"required": True}})

            allowed_query_ip_range_list = _builder.get(".properties.networkacls.allowedQueryIpRangeList")
            if allowed_query_ip_range_list is not None:
                allowed_query_ip_range_list.set_elements(AAZStrType, ".")

            ip_rules = _builder.get(".properties.networkacls.ipRules")
            if ip_rules is not None:
                ip_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.networkacls.ipRules[]")
            if _elements is not None:
                _elements.set_prop("action", AAZStrType, ".action", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("value", AAZStrType, ".value")

            virtual_network_rule = _builder.get(".properties.networkacls.virtualNetworkRule")
            if virtual_network_rule is not None:
                virtual_network_rule.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.networkacls.virtualNetworkRule[]")
            if _elements is not None:
                _elements.set_prop("action", AAZStrType, ".action")
                _elements.set_prop("id", AAZStrType, ".id", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("state", AAZStrType, ".state")

            owners = _builder.get(".properties.owners")
            if owners is not None:
                owners.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.identity = AAZObjectType()
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200_201.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200_201.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType()

            _element = cls._schema_on_200_201.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.available_minor_versions = AAZListType(
                serialized_name="availableMinorVersions",
                flags={"read_only": True},
            )
            properties.consumption_endpoints = AAZObjectType(
                serialized_name="consumptionEndpoints",
            )
            properties.current_minor_version = AAZStrType(
                serialized_name="currentMinorVersion",
            )
            properties.customer_encryption_key = AAZObjectType(
                serialized_name="customerEncryptionKey",
            )
            properties.customer_managed_key_encryption_enabled = AAZStrType(
                serialized_name="customerManagedKeyEncryptionEnabled",
            )
            properties.documentation = AAZStrType(
                flags={"read_only": True},
            )
            properties.key_vault_url = AAZStrType(
                serialized_name="keyVaultUrl",
                flags={"read_only": True},
            )
            properties.major_version = AAZStrType(
                serialized_name="majorVersion",
                flags={"required": True},
            )
            properties.networkacls = AAZObjectType()
            properties.owners = AAZListType()
            properties.private_links_enabled = AAZStrType(
                serialized_name="privateLinksEnabled",
            )
            properties.product = AAZStrType(
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )
            properties.public_network_access = AAZStrType(
                serialized_name="publicNetworkAccess",
            )
            properties.publisher = AAZStrType(
                flags={"required": True},
            )
            properties.purview_account = AAZStrType(
                serialized_name="purviewAccount",
            )
            properties.purview_collection = AAZStrType(
                serialized_name="purviewCollection",
            )
            properties.redundancy = AAZStrType()
            properties.resource_guid = AAZStrType(
                serialized_name="resourceGuid",
                flags={"read_only": True},
            )

            available_minor_versions = cls._schema_on_200_201.properties.available_minor_versions
            available_minor_versions.Element = AAZStrType()

            consumption_endpoints = cls._schema_on_200_201.properties.consumption_endpoints
            consumption_endpoints.file_access_resource_id = AAZStrType(
                serialized_name="fileAccessResourceId",
                flags={"read_only": True},
            )
            consumption_endpoints.file_access_url = AAZStrType(
                serialized_name="fileAccessUrl",
                flags={"read_only": True},
            )
            consumption_endpoints.ingestion_resource_id = AAZStrType(
                serialized_name="ingestionResourceId",
                flags={"read_only": True},
            )
            consumption_endpoints.ingestion_url = AAZStrType(
                serialized_name="ingestionUrl",
                flags={"read_only": True},
            )
            consumption_endpoints.query_resource_id = AAZStrType(
                serialized_name="queryResourceId",
                flags={"read_only": True},
            )
            consumption_endpoints.query_url = AAZStrType(
                serialized_name="queryUrl",
                flags={"read_only": True},
            )

            customer_encryption_key = cls._schema_on_200_201.properties.customer_encryption_key
            customer_encryption_key.key_name = AAZStrType(
                serialized_name="keyName",
                flags={"required": True},
            )
            customer_encryption_key.key_vault_uri = AAZStrType(
                serialized_name="keyVaultUri",
                flags={"required": True},
            )
            customer_encryption_key.key_version = AAZStrType(
                serialized_name="keyVersion",
                flags={"required": True},
            )

            networkacls = cls._schema_on_200_201.properties.networkacls
            networkacls.allowed_query_ip_range_list = AAZListType(
                serialized_name="allowedQueryIpRangeList",
                flags={"required": True},
            )
            networkacls.default_action = AAZStrType(
                serialized_name="defaultAction",
                flags={"required": True},
            )
            networkacls.ip_rules = AAZListType(
                serialized_name="ipRules",
                flags={"required": True},
            )
            networkacls.virtual_network_rule = AAZListType(
                serialized_name="virtualNetworkRule",
                flags={"required": True},
            )

            allowed_query_ip_range_list = cls._schema_on_200_201.properties.networkacls.allowed_query_ip_range_list
            allowed_query_ip_range_list.Element = AAZStrType()

            ip_rules = cls._schema_on_200_201.properties.networkacls.ip_rules
            ip_rules.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.networkacls.ip_rules.Element
            _element.action = AAZStrType(
                flags={"required": True},
            )
            _element.value = AAZStrType()

            virtual_network_rule = cls._schema_on_200_201.properties.networkacls.virtual_network_rule
            virtual_network_rule.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.networkacls.virtual_network_rule.Element
            _element.action = AAZStrType()
            _element.id = AAZStrType(
                flags={"required": True},
            )
            _element.state = AAZStrType()

            owners = cls._schema_on_200_201.properties.owners
            owners.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
