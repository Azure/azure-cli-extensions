# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import ScenarioTest, ResourceGroupPreparer, KeyVaultPreparer, JMESPathCheck


class LoadScenario(ScenarioTest):
    location = 'westus2'
    identity_name1 = 'clitestid1'
    identity_name2 = 'clitestid2'
    cmk_key1 = 'testkey1'
    cmk_key2 = 'testkey2'

    @ResourceGroupPreparer(name_prefix='cli_test_azure_load_testing', location=location)
    @KeyVaultPreparer(location=location)
    def test_load_create(self, resource_group, key_vault):
        loadtest_resource_name = self.create_random_name('load-test', 24)
        loadtest_resource_name_cmk = self.create_random_name('load-test', 24)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id(),
            'resource_name': loadtest_resource_name,
            'resource_name_cmk': loadtest_resource_name_cmk,
            'location': self.location,
            'kv': key_vault
        })

        uami1 = self.cmd('identity create -n {identity_name1} -g {rg}').get_output_in_json()
        uami2 = self.cmd('identity create -n {identity_name2} -g {rg}').get_output_in_json()
        
        self.kwargs['uami1ResourceId'] = uami1['id']
        self.kwargs['uami1PrincipalId'] = uami1['principalId']
        self.kwargs['uami1TenantId'] = uami1['tenantId']

        self.kwargs['uami2ResourceId'] = uami2['id']
        self.kwargs['uami2PrincipalId'] = uami2['principalId']
        self.kwargs['uami2TenantId'] = uami2['tenantId']

        checks = [JMESPathCheck('name', loadtest_resource_name),
                    JMESPathCheck('location', self.location_name),
                    JMESPathCheck('resourceGroup', resource_group),
                    JMESPathCheck('provisioningState', 'Succeeded'),
                    JMESPathCheck('type', 'microsoft.loadtestservice/loadtests'),
                    JMESPathCheck('identity.type', 'None')]

        self.cmd('az load create --name {resource_name} --location {location} '
                '--resource-group {rg}',
                checks=checks)

        checks = [JMESPathCheck('name', loadtest_resource_name),
                    JMESPathCheck('location', self.location_name),
                    JMESPathCheck('resourceGroup', resource_group),
                    JMESPathCheck('provisioningState', 'Succeeded'),
                    JMESPathCheck('type', 'microsoft.loadtestservice/loadtests'),
                    JMESPathCheck('identity.type', 'SystemAssigned,UserAssigned')]

        self.cmd('az load create --name {resource_name} --location {location} '
                '--resource-group {rg} --identity-type SystemAssigned,UserAssigned',
                '--user-assigned \"{{uami1ResourceId}}\"'
                checks=checks)

        # self.cmd('az keyvault update -n {kv} -g {rg} --set properties.enableSoftDelete=true')

        # checks = [JMESPathCheck('name', loadtest_resource_name_cmk),
        #             JMESPathCheck('location', self.location_name),
        #             JMESPathCheck('resourceGroup', resource_group),
        #             JMESPathCheck('provisioningState', 'Succeeded'),
        #             JMESPathCheck('type', 'microsoft.loadtestservice/loadtests'),
        #             JMESPathCheck('identity.type', 'SystemAssigned,UserAssigned')]
        
        # self.cmd('az load create --name {resource_name_cmk} --location {location} '
        #         '--resource-group {rg} --identity-type SystemAssigned,UserAssigned',
        #         '--user-assigned "{\'uami1\':{}, \'uami2\':{}}"'
        #         checks=checks)
