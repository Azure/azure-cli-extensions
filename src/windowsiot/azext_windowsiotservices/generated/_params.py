# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group


def load_arguments(self, _):

    with self.argument_context('windowsiotservices service list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('windowsiotservices service show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('device_name', type=str, help='The name of the Windows IoT Device Service.', id_part='name')

    with self.argument_context('windowsiotservices service create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('device_name', type=str, help='The name of the Windows IoT Device Service.')
        c.argument('if_match', type=str, help='ETag of the Windows IoT Device Service. Do not specify for creating a '
                   'new Windows IoT Device Service. Required to update an existing Windows IoT Device Service.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('etag', type=str, help='The Etag field is *not* required. If it is provided in the response body, '
                   'it must also be provided as a header per the normal ETag convention.')
        c.argument('notes', type=str, help='Windows IoT Device Service notes.')
        c.argument('quantity', type=int, help='Windows IoT Device Service device allocation,')
        c.argument('billing_domain_name', type=str, help='Windows IoT Device Service ODM AAD domain')
        c.argument('admin_domain_name', type=str, help='Windows IoT Device Service OEM AAD domain')

    with self.argument_context('windowsiotservices service update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('device_name', type=str, help='The name of the Windows IoT Device Service.', id_part='name')
        c.argument('if_match', type=str, help='ETag of the Windows IoT Device Service. Do not specify for creating a '
                   'brand new Windows IoT Device Service. Required to update an existing Windows IoT Device Service.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('etag', type=str, help='The Etag field is *not* required. If it is provided in the response body, '
                   'it must also be provided as a header per the normal ETag convention.')
        c.argument('notes', type=str, help='Windows IoT Device Service notes.')
        c.argument('quantity', type=int, help='Windows IoT Device Service device allocation,')
        c.argument('billing_domain_name', type=str, help='Windows IoT Device Service ODM AAD domain')
        c.argument('admin_domain_name', type=str, help='Windows IoT Device Service OEM AAD domain')

    with self.argument_context('windowsiotservices service delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('device_name', type=str, help='The name of the Windows IoT Device Service.', id_part='name')

    with self.argument_context('windowsiotservices service check-device-service-name-availability') as c:
        c.argument('name', type=str, help='The name of the Windows IoT Device Service to check.')
