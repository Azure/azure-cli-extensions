# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "data-protection backup-instance restore trigger",
    is_experimental=True,
)
class Trigger(AAZCommand):
    """Triggers restore for a BackupInstance
    """

    _aaz_info = {
        "version": "2022-12-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.dataprotection/backupvaults/{}/backupinstances/{}/restore", "2022-12-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.backup_instance_name = AAZStrArg(
            options=["--backup-instance-name"],
            help="The name of the backup instance.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.vault_name = AAZStrArg(
            options=["--vault-name"],
            help="The name of the backup vault.",
            required=True,
            id_part="name",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.azure_backup_recovery_point_based_restore_request = AAZObjectArg(
            options=["--azure-backup-recovery-point-based-restore-request"],
            arg_group="Properties",
            help="-",
        )
        _args_schema.azure_backup_recovery_time_based_restore_request = AAZObjectArg(
            options=["--azure-backup-recovery-time-based-restore-request"],
            arg_group="Properties",
            help="-",
        )
        _args_schema.azure_backup_restore_with_rehydration_request = AAZObjectArg(
            options=["--azure-backup-restore-with-rehydration-request"],
            arg_group="Properties",
            help="-",
        )
        _args_schema.restore_target_info = AAZObjectArg(
            options=["--restore-target-info"],
            arg_group="Properties",
            help="Gets or sets the restore target information.",
            required=True,
        )
        _args_schema.source_data_store_type = AAZStrArg(
            options=["--source-data-store-type"],
            arg_group="Properties",
            help="Gets or sets the type of the source data store.",
            required=True,
            enum={"ArchiveStore": "ArchiveStore", "OperationalStore": "OperationalStore", "SnapshotStore": "SnapshotStore", "VaultStore": "VaultStore"},
        )
        _args_schema.source_resource_id = AAZStrArg(
            options=["--source-resource-id"],
            arg_group="Properties",
            help="Fully qualified Azure Resource Manager ID of the datasource which is being recovered.",
        )

        azure_backup_recovery_point_based_restore_request = cls._args_schema.azure_backup_recovery_point_based_restore_request
        azure_backup_recovery_point_based_restore_request.recovery_point_id = AAZStrArg(
            options=["recovery-point-id"],
            required=True,
        )

        azure_backup_recovery_time_based_restore_request = cls._args_schema.azure_backup_recovery_time_based_restore_request
        azure_backup_recovery_time_based_restore_request.recovery_point_time = AAZStrArg(
            options=["recovery-point-time"],
            help="The recovery time in ISO 8601 format example - 2020-08-14T17:30:00.0000000Z.",
            required=True,
        )

        azure_backup_restore_with_rehydration_request = cls._args_schema.azure_backup_restore_with_rehydration_request
        azure_backup_restore_with_rehydration_request.recovery_point_id = AAZStrArg(
            options=["recovery-point-id"],
            required=True,
        )
        azure_backup_restore_with_rehydration_request.rehydration_priority = AAZStrArg(
            options=["rehydration-priority"],
            help="Priority to be used for rehydration. Values High or Standard",
            required=True,
            enum={"High": "High", "Invalid": "Invalid", "Standard": "Standard"},
        )
        azure_backup_restore_with_rehydration_request.rehydration_retention_duration = AAZStrArg(
            options=["rehydration-retention-duration"],
            help="Retention duration in ISO 8601 format i.e P10D .",
            required=True,
        )

        restore_target_info = cls._args_schema.restore_target_info
        restore_target_info.item_level_restore_target_info = AAZObjectArg(
            options=["item-level-restore-target-info"],
        )
        restore_target_info.restore_files_target_info = AAZObjectArg(
            options=["restore-files-target-info"],
        )
        restore_target_info.restore_target_info = AAZObjectArg(
            options=["restore-target-info"],
        )
        restore_target_info.recovery_option = AAZStrArg(
            options=["recovery-option"],
            help="Recovery Option",
            required=True,
            enum={"FailIfExists": "FailIfExists"},
        )
        restore_target_info.restore_location = AAZStrArg(
            options=["restore-location"],
            help="Target Restore region",
        )

        item_level_restore_target_info = cls._args_schema.restore_target_info.item_level_restore_target_info
        item_level_restore_target_info.datasource_auth_credentials = AAZObjectArg(
            options=["datasource-auth-credentials"],
            help="Credentials to use to authenticate with data source provider.",
        )
        cls._build_args_auth_credentials_create(item_level_restore_target_info.datasource_auth_credentials)
        item_level_restore_target_info.datasource_info = AAZObjectArg(
            options=["datasource-info"],
            help="Information of target DS",
            required=True,
        )
        cls._build_args_datasource_create(item_level_restore_target_info.datasource_info)
        item_level_restore_target_info.datasource_set_info = AAZObjectArg(
            options=["datasource-set-info"],
            help="Information of target DS Set",
        )
        cls._build_args_datasource_set_create(item_level_restore_target_info.datasource_set_info)
        item_level_restore_target_info.restore_criteria = AAZListArg(
            options=["restore-criteria"],
            help="Restore Criteria",
            required=True,
        )

        restore_criteria = cls._args_schema.restore_target_info.item_level_restore_target_info.restore_criteria
        restore_criteria.Element = AAZObjectArg()

        _element = cls._args_schema.restore_target_info.item_level_restore_target_info.restore_criteria.Element
        _element.kubernetes_pv_restore_criteria = AAZObjectArg(
            options=["kubernetes-pv-restore-criteria"],
        )
        _element.kubernetes_storage_class_restore_criteria = AAZObjectArg(
            options=["kubernetes-storage-class-restore-criteria"],
        )
        _element.range_based_item_level_restore_criteria = AAZObjectArg(
            options=["range-based-item-level-restore-criteria"],
        )

        kubernetes_pv_restore_criteria = cls._args_schema.restore_target_info.item_level_restore_target_info.restore_criteria.Element.kubernetes_pv_restore_criteria
        kubernetes_pv_restore_criteria.name = AAZStrArg(
            options=["name"],
            help="Selected persistent volume claim name",
        )
        kubernetes_pv_restore_criteria.storage_class_name = AAZStrArg(
            options=["storage-class-name"],
            help="Selected storage class name for restore operation",
        )

        kubernetes_storage_class_restore_criteria = cls._args_schema.restore_target_info.item_level_restore_target_info.restore_criteria.Element.kubernetes_storage_class_restore_criteria
        kubernetes_storage_class_restore_criteria.provisioner = AAZStrArg(
            options=["provisioner"],
            help="Provisioner of the storage class",
        )
        kubernetes_storage_class_restore_criteria.selected_storage_class_name = AAZStrArg(
            options=["selected-storage-class-name"],
            help="Selected storage class name",
        )

        range_based_item_level_restore_criteria = cls._args_schema.restore_target_info.item_level_restore_target_info.restore_criteria.Element.range_based_item_level_restore_criteria
        range_based_item_level_restore_criteria.max_matching_value = AAZStrArg(
            options=["max-matching-value"],
            help="maximum value for range prefix match",
        )
        range_based_item_level_restore_criteria.min_matching_value = AAZStrArg(
            options=["min-matching-value"],
            help="minimum value for range prefix match",
        )

        restore_files_target_info = cls._args_schema.restore_target_info.restore_files_target_info
        restore_files_target_info.target_details = AAZObjectArg(
            options=["target-details"],
            help="Destination of RestoreAsFiles operation, when destination is not a datasource",
            required=True,
        )

        target_details = cls._args_schema.restore_target_info.restore_files_target_info.target_details
        target_details.file_prefix = AAZStrArg(
            options=["file-prefix"],
            help="Restore operation may create multiple files inside location pointed by Url Below will be the common prefix for all of them",
            required=True,
        )
        target_details.restore_target_location_type = AAZStrArg(
            options=["restore-target-location-type"],
            help="Denotes the target location where the data will be restored, string value for the enum {Microsoft.Internal.AzureBackup.DataProtection.Common.Interface.RestoreTargetLocationType}",
            required=True,
            enum={"AzureBlobs": "AzureBlobs", "AzureFiles": "AzureFiles", "Invalid": "Invalid"},
        )
        target_details.target_resource_arm_id = AAZStrArg(
            options=["target-resource-arm-id"],
            help="Full ARM Id denoting the restore destination. It is the ARM Id pointing to container / file share This is optional if the target subscription can be identified with the URL field. If not then this is needed if CrossSubscriptionRestore field of BackupVault is in any of the disabled states",
        )
        target_details.url = AAZStrArg(
            options=["url"],
            help="Url denoting the restore destination. It can point to container / file share etc",
            required=True,
        )

        restore_target_info = cls._args_schema.restore_target_info.restore_target_info
        restore_target_info.datasource_auth_credentials = AAZObjectArg(
            options=["datasource-auth-credentials"],
            help="Credentials to use to authenticate with data source provider.",
        )
        cls._build_args_auth_credentials_create(restore_target_info.datasource_auth_credentials)
        restore_target_info.datasource_info = AAZObjectArg(
            options=["datasource-info"],
            help="Information of target DS",
            required=True,
        )
        cls._build_args_datasource_create(restore_target_info.datasource_info)
        restore_target_info.datasource_set_info = AAZObjectArg(
            options=["datasource-set-info"],
            help="Information of target DS Set",
        )
        cls._build_args_datasource_set_create(restore_target_info.datasource_set_info)
        return cls._args_schema

    _args_auth_credentials_create = None

    @classmethod
    def _build_args_auth_credentials_create(cls, _schema):
        if cls._args_auth_credentials_create is not None:
            _schema.secret_store_based_auth_credentials = cls._args_auth_credentials_create.secret_store_based_auth_credentials
            return

        cls._args_auth_credentials_create = AAZObjectArg()

        auth_credentials_create = cls._args_auth_credentials_create
        auth_credentials_create.secret_store_based_auth_credentials = AAZObjectArg(
            options=["secret-store-based-auth-credentials"],
        )

        secret_store_based_auth_credentials = cls._args_auth_credentials_create.secret_store_based_auth_credentials
        secret_store_based_auth_credentials.secret_store_resource = AAZObjectArg(
            options=["secret-store-resource"],
            help="Secret store resource",
        )

        secret_store_resource = cls._args_auth_credentials_create.secret_store_based_auth_credentials.secret_store_resource
        secret_store_resource.secret_store_type = AAZStrArg(
            options=["secret-store-type"],
            help="Gets or sets the type of secret store",
            required=True,
            enum={"AzureKeyVault": "AzureKeyVault", "Invalid": "Invalid"},
        )
        secret_store_resource.uri = AAZStrArg(
            options=["uri"],
            help="Uri to get to the resource",
        )
        secret_store_resource.value = AAZStrArg(
            options=["value"],
            help="Gets or sets value stored in secret store resource",
        )

        _schema.secret_store_based_auth_credentials = cls._args_auth_credentials_create.secret_store_based_auth_credentials

    _args_datasource_set_create = None

    @classmethod
    def _build_args_datasource_set_create(cls, _schema):
        if cls._args_datasource_set_create is not None:
            _schema.datasource_type = cls._args_datasource_set_create.datasource_type
            _schema.object_type = cls._args_datasource_set_create.object_type
            _schema.resource_id = cls._args_datasource_set_create.resource_id
            _schema.resource_location = cls._args_datasource_set_create.resource_location
            _schema.resource_name = cls._args_datasource_set_create.resource_name
            _schema.resource_type = cls._args_datasource_set_create.resource_type
            _schema.resource_uri = cls._args_datasource_set_create.resource_uri
            return

        cls._args_datasource_set_create = AAZObjectArg()

        datasource_set_create = cls._args_datasource_set_create
        datasource_set_create.datasource_type = AAZStrArg(
            options=["datasource-type"],
            help="DatasourceType of the resource.",
        )
        datasource_set_create.object_type = AAZStrArg(
            options=["object-type"],
            help="Type of Datasource object, used to initialize the right inherited type",
        )
        datasource_set_create.resource_id = AAZStrArg(
            options=["resource-id"],
            help="Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID created by backup service via Fabric/Vault.",
            required=True,
        )
        datasource_set_create.resource_location = AAZStrArg(
            options=["resource-location"],
            help="Location of datasource.",
        )
        datasource_set_create.resource_name = AAZStrArg(
            options=["resource-name"],
            help="Unique identifier of the resource in the context of parent.",
        )
        datasource_set_create.resource_type = AAZStrArg(
            options=["resource-type"],
            help="Resource Type of Datasource.",
        )
        datasource_set_create.resource_uri = AAZStrArg(
            options=["resource-uri"],
            help="Uri of the resource.",
        )

        _schema.datasource_type = cls._args_datasource_set_create.datasource_type
        _schema.object_type = cls._args_datasource_set_create.object_type
        _schema.resource_id = cls._args_datasource_set_create.resource_id
        _schema.resource_location = cls._args_datasource_set_create.resource_location
        _schema.resource_name = cls._args_datasource_set_create.resource_name
        _schema.resource_type = cls._args_datasource_set_create.resource_type
        _schema.resource_uri = cls._args_datasource_set_create.resource_uri

    _args_datasource_create = None

    @classmethod
    def _build_args_datasource_create(cls, _schema):
        if cls._args_datasource_create is not None:
            _schema.datasource_type = cls._args_datasource_create.datasource_type
            _schema.object_type = cls._args_datasource_create.object_type
            _schema.resource_id = cls._args_datasource_create.resource_id
            _schema.resource_location = cls._args_datasource_create.resource_location
            _schema.resource_name = cls._args_datasource_create.resource_name
            _schema.resource_type = cls._args_datasource_create.resource_type
            _schema.resource_uri = cls._args_datasource_create.resource_uri
            return

        cls._args_datasource_create = AAZObjectArg()

        datasource_create = cls._args_datasource_create
        datasource_create.datasource_type = AAZStrArg(
            options=["datasource-type"],
            help="DatasourceType of the resource.",
        )
        datasource_create.object_type = AAZStrArg(
            options=["object-type"],
            help="Type of Datasource object, used to initialize the right inherited type",
        )
        datasource_create.resource_id = AAZStrArg(
            options=["resource-id"],
            help="Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID created by backup service via Fabric/Vault.",
            required=True,
        )
        datasource_create.resource_location = AAZStrArg(
            options=["resource-location"],
            help="Location of datasource.",
        )
        datasource_create.resource_name = AAZStrArg(
            options=["resource-name"],
            help="Unique identifier of the resource in the context of parent.",
        )
        datasource_create.resource_type = AAZStrArg(
            options=["resource-type"],
            help="Resource Type of Datasource.",
        )
        datasource_create.resource_uri = AAZStrArg(
            options=["resource-uri"],
            help="Uri of the resource.",
        )

        _schema.datasource_type = cls._args_datasource_create.datasource_type
        _schema.object_type = cls._args_datasource_create.object_type
        _schema.resource_id = cls._args_datasource_create.resource_id
        _schema.resource_location = cls._args_datasource_create.resource_location
        _schema.resource_name = cls._args_datasource_create.resource_name
        _schema.resource_type = cls._args_datasource_create.resource_type
        _schema.resource_uri = cls._args_datasource_create.resource_uri

    def _execute_operations(self):
        self.pre_operations()
        yield self.BackupInstancesTriggerRestore(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class BackupInstancesTriggerRestore(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}/restore",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backupInstanceName", self.ctx.args.backup_instance_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "vaultName", self.ctx.args.vault_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-12-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_const("objectType", "AzureBackupRecoveryPointBasedRestoreRequest", AAZStrType, ".azure_backup_recovery_point_based_restore_request", typ_kwargs={"flags": {"required": True}})
            _builder.set_const("objectType", "AzureBackupRecoveryTimeBasedRestoreRequest", AAZStrType, ".azure_backup_recovery_time_based_restore_request", typ_kwargs={"flags": {"required": True}})
            _builder.set_const("objectType", "AzureBackupRestoreWithRehydrationRequest", AAZStrType, ".azure_backup_restore_with_rehydration_request", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("restoreTargetInfo", AAZObjectType, ".restore_target_info", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("sourceDataStoreType", AAZStrType, ".source_data_store_type", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("sourceResourceId", AAZStrType, ".source_resource_id")
            _builder.discriminate_by("objectType", "AzureBackupRecoveryPointBasedRestoreRequest")
            _builder.discriminate_by("objectType", "AzureBackupRecoveryTimeBasedRestoreRequest")
            _builder.discriminate_by("objectType", "AzureBackupRestoreWithRehydrationRequest")

            restore_target_info = _builder.get(".restoreTargetInfo")
            if restore_target_info is not None:
                restore_target_info.set_const("objectType", "ItemLevelRestoreTargetInfo", AAZStrType, ".item_level_restore_target_info", typ_kwargs={"flags": {"required": True}})
                restore_target_info.set_const("objectType", "RestoreFilesTargetInfo", AAZStrType, ".restore_files_target_info", typ_kwargs={"flags": {"required": True}})
                restore_target_info.set_const("objectType", "RestoreTargetInfo", AAZStrType, ".restore_target_info", typ_kwargs={"flags": {"required": True}})
                restore_target_info.set_prop("recoveryOption", AAZStrType, ".recovery_option", typ_kwargs={"flags": {"required": True}})
                restore_target_info.set_prop("restoreLocation", AAZStrType, ".restore_location")
                restore_target_info.discriminate_by("objectType", "ItemLevelRestoreTargetInfo")
                restore_target_info.discriminate_by("objectType", "RestoreFilesTargetInfo")
                restore_target_info.discriminate_by("objectType", "RestoreTargetInfo")

            disc_item_level_restore_target_info = _builder.get(".restoreTargetInfo{objectType:ItemLevelRestoreTargetInfo}")
            if disc_item_level_restore_target_info is not None:
                _TriggerHelper._build_schema_auth_credentials_create(disc_item_level_restore_target_info.set_prop("datasourceAuthCredentials", AAZObjectType, ".item_level_restore_target_info.datasource_auth_credentials"))
                _TriggerHelper._build_schema_datasource_create(disc_item_level_restore_target_info.set_prop("datasourceInfo", AAZObjectType, ".item_level_restore_target_info.datasource_info", typ_kwargs={"flags": {"required": True}}))
                _TriggerHelper._build_schema_datasource_set_create(disc_item_level_restore_target_info.set_prop("datasourceSetInfo", AAZObjectType, ".item_level_restore_target_info.datasource_set_info"))
                disc_item_level_restore_target_info.set_prop("restoreCriteria", AAZListType, ".item_level_restore_target_info.restore_criteria", typ_kwargs={"flags": {"required": True}})

            restore_criteria = _builder.get(".restoreTargetInfo{objectType:ItemLevelRestoreTargetInfo}.restoreCriteria")
            if restore_criteria is not None:
                restore_criteria.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".restoreTargetInfo{objectType:ItemLevelRestoreTargetInfo}.restoreCriteria[]")
            if _elements is not None:
                _elements.set_const("objectType", "KubernetesPVRestoreCriteria", AAZStrType, ".kubernetes_pv_restore_criteria", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("objectType", "KubernetesStorageClassRestoreCriteria", AAZStrType, ".kubernetes_storage_class_restore_criteria", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("objectType", "RangeBasedItemLevelRestoreCriteria", AAZStrType, ".range_based_item_level_restore_criteria", typ_kwargs={"flags": {"required": True}})
                _elements.discriminate_by("objectType", "KubernetesPVRestoreCriteria")
                _elements.discriminate_by("objectType", "KubernetesStorageClassRestoreCriteria")
                _elements.discriminate_by("objectType", "RangeBasedItemLevelRestoreCriteria")

            disc_kubernetes_pv_restore_criteria = _builder.get(".restoreTargetInfo{objectType:ItemLevelRestoreTargetInfo}.restoreCriteria[]{objectType:KubernetesPVRestoreCriteria}")
            if disc_kubernetes_pv_restore_criteria is not None:
                disc_kubernetes_pv_restore_criteria.set_prop("name", AAZStrType, ".kubernetes_pv_restore_criteria.name")
                disc_kubernetes_pv_restore_criteria.set_prop("storageClassName", AAZStrType, ".kubernetes_pv_restore_criteria.storage_class_name")

            disc_kubernetes_storage_class_restore_criteria = _builder.get(".restoreTargetInfo{objectType:ItemLevelRestoreTargetInfo}.restoreCriteria[]{objectType:KubernetesStorageClassRestoreCriteria}")
            if disc_kubernetes_storage_class_restore_criteria is not None:
                disc_kubernetes_storage_class_restore_criteria.set_prop("provisioner", AAZStrType, ".kubernetes_storage_class_restore_criteria.provisioner")
                disc_kubernetes_storage_class_restore_criteria.set_prop("selectedStorageClassName", AAZStrType, ".kubernetes_storage_class_restore_criteria.selected_storage_class_name")

            disc_range_based_item_level_restore_criteria = _builder.get(".restoreTargetInfo{objectType:ItemLevelRestoreTargetInfo}.restoreCriteria[]{objectType:RangeBasedItemLevelRestoreCriteria}")
            if disc_range_based_item_level_restore_criteria is not None:
                disc_range_based_item_level_restore_criteria.set_prop("maxMatchingValue", AAZStrType, ".range_based_item_level_restore_criteria.max_matching_value")
                disc_range_based_item_level_restore_criteria.set_prop("minMatchingValue", AAZStrType, ".range_based_item_level_restore_criteria.min_matching_value")

            disc_restore_files_target_info = _builder.get(".restoreTargetInfo{objectType:RestoreFilesTargetInfo}")
            if disc_restore_files_target_info is not None:
                disc_restore_files_target_info.set_prop("targetDetails", AAZObjectType, ".restore_files_target_info.target_details", typ_kwargs={"flags": {"required": True}})

            target_details = _builder.get(".restoreTargetInfo{objectType:RestoreFilesTargetInfo}.targetDetails")
            if target_details is not None:
                target_details.set_prop("filePrefix", AAZStrType, ".file_prefix", typ_kwargs={"flags": {"required": True}})
                target_details.set_prop("restoreTargetLocationType", AAZStrType, ".restore_target_location_type", typ_kwargs={"flags": {"required": True}})
                target_details.set_prop("targetResourceArmId", AAZStrType, ".target_resource_arm_id")
                target_details.set_prop("url", AAZStrType, ".url", typ_kwargs={"flags": {"required": True}})

            disc_restore_target_info = _builder.get(".restoreTargetInfo{objectType:RestoreTargetInfo}")
            if disc_restore_target_info is not None:
                _TriggerHelper._build_schema_auth_credentials_create(disc_restore_target_info.set_prop("datasourceAuthCredentials", AAZObjectType, ".restore_target_info.datasource_auth_credentials"))
                _TriggerHelper._build_schema_datasource_create(disc_restore_target_info.set_prop("datasourceInfo", AAZObjectType, ".restore_target_info.datasource_info", typ_kwargs={"flags": {"required": True}}))
                _TriggerHelper._build_schema_datasource_set_create(disc_restore_target_info.set_prop("datasourceSetInfo", AAZObjectType, ".restore_target_info.datasource_set_info"))

            disc_azure_backup_recovery_point_based_restore_request = _builder.get("{objectType:AzureBackupRecoveryPointBasedRestoreRequest}")
            if disc_azure_backup_recovery_point_based_restore_request is not None:
                disc_azure_backup_recovery_point_based_restore_request.set_prop("recoveryPointId", AAZStrType, ".azure_backup_recovery_point_based_restore_request.recovery_point_id", typ_kwargs={"flags": {"required": True}})

            disc_azure_backup_recovery_time_based_restore_request = _builder.get("{objectType:AzureBackupRecoveryTimeBasedRestoreRequest}")
            if disc_azure_backup_recovery_time_based_restore_request is not None:
                disc_azure_backup_recovery_time_based_restore_request.set_prop("recoveryPointTime", AAZStrType, ".azure_backup_recovery_time_based_restore_request.recovery_point_time", typ_kwargs={"flags": {"required": True}})

            disc_azure_backup_restore_with_rehydration_request = _builder.get("{objectType:AzureBackupRestoreWithRehydrationRequest}")
            if disc_azure_backup_restore_with_rehydration_request is not None:
                disc_azure_backup_restore_with_rehydration_request.set_prop("recoveryPointId", AAZStrType, ".azure_backup_restore_with_rehydration_request.recovery_point_id", typ_kwargs={"flags": {"required": True}})
                disc_azure_backup_restore_with_rehydration_request.set_prop("rehydrationPriority", AAZStrType, ".azure_backup_restore_with_rehydration_request.rehydration_priority", typ_kwargs={"flags": {"required": True}})
                disc_azure_backup_restore_with_rehydration_request.set_prop("rehydrationRetentionDuration", AAZStrType, ".azure_backup_restore_with_rehydration_request.rehydration_retention_duration", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.job_id = AAZStrType(
                serialized_name="jobId",
            )
            _schema_on_200.object_type = AAZStrType(
                serialized_name="objectType",
                flags={"required": True},
            )

            return cls._schema_on_200


class _TriggerHelper:
    """Helper class for Trigger"""

    @classmethod
    def _build_schema_auth_credentials_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_const("objectType", "SecretStoreBasedAuthCredentials", AAZStrType, ".secret_store_based_auth_credentials", typ_kwargs={"flags": {"required": True}})
        _builder.discriminate_by("objectType", "SecretStoreBasedAuthCredentials")

        disc_secret_store_based_auth_credentials = _builder.get("{objectType:SecretStoreBasedAuthCredentials}")
        if disc_secret_store_based_auth_credentials is not None:
            disc_secret_store_based_auth_credentials.set_prop("secretStoreResource", AAZObjectType, ".secret_store_based_auth_credentials.secret_store_resource")

        secret_store_resource = _builder.get("{objectType:SecretStoreBasedAuthCredentials}.secretStoreResource")
        if secret_store_resource is not None:
            secret_store_resource.set_prop("secretStoreType", AAZStrType, ".secret_store_type", typ_kwargs={"flags": {"required": True}})
            secret_store_resource.set_prop("uri", AAZStrType, ".uri")
            secret_store_resource.set_prop("value", AAZStrType, ".value")

    @classmethod
    def _build_schema_datasource_set_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("datasourceType", AAZStrType, ".datasource_type")
        _builder.set_prop("objectType", AAZStrType, ".object_type")
        _builder.set_prop("resourceID", AAZStrType, ".resource_id", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("resourceLocation", AAZStrType, ".resource_location")
        _builder.set_prop("resourceName", AAZStrType, ".resource_name")
        _builder.set_prop("resourceType", AAZStrType, ".resource_type")
        _builder.set_prop("resourceUri", AAZStrType, ".resource_uri")

    @classmethod
    def _build_schema_datasource_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("datasourceType", AAZStrType, ".datasource_type")
        _builder.set_prop("objectType", AAZStrType, ".object_type")
        _builder.set_prop("resourceID", AAZStrType, ".resource_id", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("resourceLocation", AAZStrType, ".resource_location")
        _builder.set_prop("resourceName", AAZStrType, ".resource_name")
        _builder.set_prop("resourceType", AAZStrType, ".resource_type")
        _builder.set_prop("resourceUri", AAZStrType, ".resource_uri")


__all__ = ["Trigger"]
