# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "dataprotection backup-instance update",
    is_experimental=True,
)
class Update(AAZCommand):
    """Update a backup instance in a backup vault
    """

    _aaz_info = {
        "version": "2023-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.dataprotection/backupvaults/{}/backupinstances/{}", "2023-05-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.backup_instance_name = AAZStrArg(
            options=["-n", "--name", "--backup-instance-name"],
            help="The name of the backup instance.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.vault_name = AAZStrArg(
            options=["-v", "--vault-name"],
            help="The name of the backup vault.",
            required=True,
            id_part="name",
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Proxy Resource tags.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.data_source_info = AAZObjectArg(
            options=["--data-source-info"],
            arg_group="Properties",
            help="Gets or sets the data source information.",
        )
        _args_schema.data_source_set_info = AAZObjectArg(
            options=["--data-source-set-info"],
            arg_group="Properties",
            help="Gets or sets the data source set information.",
            nullable=True,
        )
        _args_schema.datasource_auth_credentials = AAZObjectArg(
            options=["--datasource-auth-creds", "--datasource-auth-credentials"],
            arg_group="Properties",
            help="Credentials to use to authenticate with data source provider.",
            nullable=True,
        )
        _args_schema.friendly_name = AAZStrArg(
            options=["--friendly-name"],
            arg_group="Properties",
            help="Gets or sets the Backup Instance friendly name.",
            nullable=True,
        )
        _args_schema.identity_details = AAZObjectArg(
            options=["--identity-details"],
            arg_group="Properties",
            help="Contains information of the Identity Details for the BI. If it is null, default will be considered as System Assigned.",
            nullable=True,
        )
        _args_schema.object_type = AAZStrArg(
            options=["--object-type"],
            arg_group="Properties",
            help="Type of Backup or Restore Instance for request body.",
        )
        _args_schema.policy_info = AAZObjectArg(
            options=["--policy-info"],
            arg_group="Properties",
            help="Gets or sets the policy information.",
        )
        _args_schema.validation_type = AAZStrArg(
            options=["--validation-type"],
            arg_group="Properties",
            help="Specifies the type of validation. In case of DeepValidation, all validations from /validateForBackup API will run again.",
            nullable=True,
            enum={"DeepValidation": "DeepValidation", "ShallowValidation": "ShallowValidation"},
        )

        data_source_info = cls._args_schema.data_source_info
        data_source_info.datasource_type = AAZStrArg(
            options=["datasource-type"],
            help="DatasourceType of the resource.",
            nullable=True,
        )
        data_source_info.object_type = AAZStrArg(
            options=["object-type"],
            help="Type of Datasource object, used to initialize the right inherited type",
            nullable=True,
        )
        data_source_info.resource_id = AAZStrArg(
            options=["resource-id"],
            help="Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID created by backup service via Fabric/Vault.",
        )
        data_source_info.resource_location = AAZStrArg(
            options=["resource-location"],
            help="Location of datasource.",
            nullable=True,
        )
        data_source_info.resource_name = AAZStrArg(
            options=["resource-name"],
            help="Unique identifier of the resource in the context of parent.",
            nullable=True,
        )
        data_source_info.resource_properties = AAZObjectArg(
            options=["resource-properties"],
            help="Properties specific to data source",
            nullable=True,
        )
        cls._build_args_base_resource_properties_update(data_source_info.resource_properties)
        data_source_info.resource_type = AAZStrArg(
            options=["resource-type"],
            help="Resource Type of Datasource.",
            nullable=True,
        )
        data_source_info.resource_uri = AAZStrArg(
            options=["resource-uri"],
            help="Uri of the resource.",
            nullable=True,
        )

        data_source_set_info = cls._args_schema.data_source_set_info
        data_source_set_info.datasource_type = AAZStrArg(
            options=["datasource-type"],
            help="DatasourceType of the resource.",
            nullable=True,
        )
        data_source_set_info.object_type = AAZStrArg(
            options=["object-type"],
            help="Type of Datasource object, used to initialize the right inherited type",
            nullable=True,
        )
        data_source_set_info.resource_id = AAZStrArg(
            options=["resource-id"],
            help="Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID created by backup service via Fabric/Vault.",
        )
        data_source_set_info.resource_location = AAZStrArg(
            options=["resource-location"],
            help="Location of datasource.",
            nullable=True,
        )
        data_source_set_info.resource_name = AAZStrArg(
            options=["resource-name"],
            help="Unique identifier of the resource in the context of parent.",
            nullable=True,
        )
        data_source_set_info.resource_properties = AAZObjectArg(
            options=["resource-properties"],
            help="Properties specific to data source set",
            nullable=True,
        )
        cls._build_args_base_resource_properties_update(data_source_set_info.resource_properties)
        data_source_set_info.resource_type = AAZStrArg(
            options=["resource-type"],
            help="Resource Type of Datasource.",
            nullable=True,
        )
        data_source_set_info.resource_uri = AAZStrArg(
            options=["resource-uri"],
            help="Uri of the resource.",
            nullable=True,
        )

        datasource_auth_credentials = cls._args_schema.datasource_auth_credentials
        datasource_auth_credentials.secret_store_based_auth_credentials = AAZObjectArg(
            options=["secret-store-based-auth-credentials"],
        )

        secret_store_based_auth_credentials = cls._args_schema.datasource_auth_credentials.secret_store_based_auth_credentials
        secret_store_based_auth_credentials.secret_store_resource = AAZObjectArg(
            options=["secret-store-resource"],
            help="Secret store resource",
            nullable=True,
        )

        secret_store_resource = cls._args_schema.datasource_auth_credentials.secret_store_based_auth_credentials.secret_store_resource
        secret_store_resource.secret_store_type = AAZStrArg(
            options=["secret-store-type"],
            help="Gets or sets the type of secret store",
            enum={"AzureKeyVault": "AzureKeyVault", "Invalid": "Invalid"},
        )
        secret_store_resource.uri = AAZStrArg(
            options=["uri"],
            help="Uri to get to the resource",
            nullable=True,
        )
        secret_store_resource.value = AAZStrArg(
            options=["value"],
            help="Gets or sets value stored in secret store resource",
            nullable=True,
        )

        identity_details = cls._args_schema.identity_details
        identity_details.use_system_assigned_identity = AAZBoolArg(
            options=["use-system-assigned-identity"],
            help="Specifies if the BI is protected by System Identity.",
            nullable=True,
        )
        identity_details.user_assigned_identity_arm_url = AAZStrArg(
            options=["user-assigned-identity-arm-url"],
            help="ARM URL for User Assigned Identity.",
            nullable=True,
        )

        policy_info = cls._args_schema.policy_info
        policy_info.policy_id = AAZStrArg(
            options=["policy-id"],
        )
        return cls._args_schema

    _args_base_resource_properties_update = None

    @classmethod
    def _build_args_base_resource_properties_update(cls, _schema):
        if cls._args_base_resource_properties_update is not None:
            _schema.object_type = cls._args_base_resource_properties_update.object_type
            return

        cls._args_base_resource_properties_update = AAZObjectArg(
            nullable=True,
        )

        base_resource_properties_update = cls._args_base_resource_properties_update
        base_resource_properties_update.object_type = AAZStrArg(
            options=["object-type"],
            help="Type of the specific object - used for deserializing",
            enum={"DefaultResourceProperties": "DefaultResourceProperties"},
        )

        _schema.object_type = cls._args_base_resource_properties_update.object_type

    def _execute_operations(self):
        self.pre_operations()
        self.BackupInstancesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.BackupInstancesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class BackupInstancesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backupInstanceName", self.ctx.args.backup_instance_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "vaultName", self.ctx.args.vault_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_backup_instance_resource_read(cls._schema_on_200)

            return cls._schema_on_200

    class BackupInstancesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "backupInstanceName", self.ctx.args.backup_instance_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "vaultName", self.ctx.args.vault_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_backup_instance_resource_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("dataSourceInfo", AAZObjectType, ".data_source_info", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("dataSourceSetInfo", AAZObjectType, ".data_source_set_info")
                properties.set_prop("datasourceAuthCredentials", AAZObjectType, ".datasource_auth_credentials")
                properties.set_prop("friendlyName", AAZStrType, ".friendly_name")
                properties.set_prop("identityDetails", AAZObjectType, ".identity_details")
                properties.set_prop("objectType", AAZStrType, ".object_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("policyInfo", AAZObjectType, ".policy_info", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("validationType", AAZStrType, ".validation_type")

            data_source_info = _builder.get(".properties.dataSourceInfo")
            if data_source_info is not None:
                data_source_info.set_prop("datasourceType", AAZStrType, ".datasource_type")
                data_source_info.set_prop("objectType", AAZStrType, ".object_type")
                data_source_info.set_prop("resourceID", AAZStrType, ".resource_id", typ_kwargs={"flags": {"required": True}})
                data_source_info.set_prop("resourceLocation", AAZStrType, ".resource_location")
                data_source_info.set_prop("resourceName", AAZStrType, ".resource_name")
                _UpdateHelper._build_schema_base_resource_properties_update(data_source_info.set_prop("resourceProperties", AAZObjectType, ".resource_properties"))
                data_source_info.set_prop("resourceType", AAZStrType, ".resource_type")
                data_source_info.set_prop("resourceUri", AAZStrType, ".resource_uri")

            data_source_set_info = _builder.get(".properties.dataSourceSetInfo")
            if data_source_set_info is not None:
                data_source_set_info.set_prop("datasourceType", AAZStrType, ".datasource_type")
                data_source_set_info.set_prop("objectType", AAZStrType, ".object_type")
                data_source_set_info.set_prop("resourceID", AAZStrType, ".resource_id", typ_kwargs={"flags": {"required": True}})
                data_source_set_info.set_prop("resourceLocation", AAZStrType, ".resource_location")
                data_source_set_info.set_prop("resourceName", AAZStrType, ".resource_name")
                _UpdateHelper._build_schema_base_resource_properties_update(data_source_set_info.set_prop("resourceProperties", AAZObjectType, ".resource_properties"))
                data_source_set_info.set_prop("resourceType", AAZStrType, ".resource_type")
                data_source_set_info.set_prop("resourceUri", AAZStrType, ".resource_uri")

            datasource_auth_credentials = _builder.get(".properties.datasourceAuthCredentials")
            if datasource_auth_credentials is not None:
                datasource_auth_credentials.set_const("objectType", "SecretStoreBasedAuthCredentials", AAZStrType, ".secret_store_based_auth_credentials", typ_kwargs={"flags": {"required": True}})
                datasource_auth_credentials.discriminate_by("objectType", "SecretStoreBasedAuthCredentials")

            disc_secret_store_based_auth_credentials = _builder.get(".properties.datasourceAuthCredentials{objectType:SecretStoreBasedAuthCredentials}")
            if disc_secret_store_based_auth_credentials is not None:
                disc_secret_store_based_auth_credentials.set_prop("secretStoreResource", AAZObjectType, ".secret_store_based_auth_credentials.secret_store_resource")

            secret_store_resource = _builder.get(".properties.datasourceAuthCredentials{objectType:SecretStoreBasedAuthCredentials}.secretStoreResource")
            if secret_store_resource is not None:
                secret_store_resource.set_prop("secretStoreType", AAZStrType, ".secret_store_type", typ_kwargs={"flags": {"required": True}})
                secret_store_resource.set_prop("uri", AAZStrType, ".uri")
                secret_store_resource.set_prop("value", AAZStrType, ".value")

            identity_details = _builder.get(".properties.identityDetails")
            if identity_details is not None:
                identity_details.set_prop("useSystemAssignedIdentity", AAZBoolType, ".use_system_assigned_identity")
                identity_details.set_prop("userAssignedIdentityArmUrl", AAZStrType, ".user_assigned_identity_arm_url")

            policy_info = _builder.get(".properties.policyInfo")
            if policy_info is not None:
                policy_info.set_prop("policyId", AAZStrType, ".policy_id", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_base_resource_properties_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("objectType", AAZStrType, ".object_type", typ_kwargs={"flags": {"required": True}})

    _schema_backup_instance_resource_read = None

    @classmethod
    def _build_schema_backup_instance_resource_read(cls, _schema):
        if cls._schema_backup_instance_resource_read is not None:
            _schema.id = cls._schema_backup_instance_resource_read.id
            _schema.name = cls._schema_backup_instance_resource_read.name
            _schema.properties = cls._schema_backup_instance_resource_read.properties
            _schema.system_data = cls._schema_backup_instance_resource_read.system_data
            _schema.tags = cls._schema_backup_instance_resource_read.tags
            _schema.type = cls._schema_backup_instance_resource_read.type
            return

        cls._schema_backup_instance_resource_read = _schema_backup_instance_resource_read = AAZObjectType()

        backup_instance_resource_read = _schema_backup_instance_resource_read
        backup_instance_resource_read.id = AAZStrType(
            flags={"read_only": True},
        )
        backup_instance_resource_read.name = AAZStrType(
            flags={"read_only": True},
        )
        backup_instance_resource_read.properties = AAZObjectType()
        backup_instance_resource_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        backup_instance_resource_read.tags = AAZDictType()
        backup_instance_resource_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_backup_instance_resource_read.properties
        properties.current_protection_state = AAZStrType(
            serialized_name="currentProtectionState",
            flags={"read_only": True},
        )
        properties.data_source_info = AAZObjectType(
            serialized_name="dataSourceInfo",
            flags={"required": True},
        )
        properties.data_source_set_info = AAZObjectType(
            serialized_name="dataSourceSetInfo",
        )
        properties.datasource_auth_credentials = AAZObjectType(
            serialized_name="datasourceAuthCredentials",
        )
        properties.friendly_name = AAZStrType(
            serialized_name="friendlyName",
        )
        properties.identity_details = AAZObjectType(
            serialized_name="identityDetails",
        )
        properties.object_type = AAZStrType(
            serialized_name="objectType",
            flags={"required": True},
        )
        properties.policy_info = AAZObjectType(
            serialized_name="policyInfo",
            flags={"required": True},
        )
        properties.protection_error_details = AAZObjectType(
            serialized_name="protectionErrorDetails",
        )
        cls._build_schema_user_facing_error_read(properties.protection_error_details)
        properties.protection_status = AAZObjectType(
            serialized_name="protectionStatus",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.validation_type = AAZStrType(
            serialized_name="validationType",
        )

        data_source_info = _schema_backup_instance_resource_read.properties.data_source_info
        data_source_info.datasource_type = AAZStrType(
            serialized_name="datasourceType",
        )
        data_source_info.object_type = AAZStrType(
            serialized_name="objectType",
        )
        data_source_info.resource_id = AAZStrType(
            serialized_name="resourceID",
            flags={"required": True},
        )
        data_source_info.resource_location = AAZStrType(
            serialized_name="resourceLocation",
        )
        data_source_info.resource_name = AAZStrType(
            serialized_name="resourceName",
        )
        data_source_info.resource_properties = AAZObjectType(
            serialized_name="resourceProperties",
        )
        cls._build_schema_base_resource_properties_read(data_source_info.resource_properties)
        data_source_info.resource_type = AAZStrType(
            serialized_name="resourceType",
        )
        data_source_info.resource_uri = AAZStrType(
            serialized_name="resourceUri",
        )

        data_source_set_info = _schema_backup_instance_resource_read.properties.data_source_set_info
        data_source_set_info.datasource_type = AAZStrType(
            serialized_name="datasourceType",
        )
        data_source_set_info.object_type = AAZStrType(
            serialized_name="objectType",
        )
        data_source_set_info.resource_id = AAZStrType(
            serialized_name="resourceID",
            flags={"required": True},
        )
        data_source_set_info.resource_location = AAZStrType(
            serialized_name="resourceLocation",
        )
        data_source_set_info.resource_name = AAZStrType(
            serialized_name="resourceName",
        )
        data_source_set_info.resource_properties = AAZObjectType(
            serialized_name="resourceProperties",
        )
        cls._build_schema_base_resource_properties_read(data_source_set_info.resource_properties)
        data_source_set_info.resource_type = AAZStrType(
            serialized_name="resourceType",
        )
        data_source_set_info.resource_uri = AAZStrType(
            serialized_name="resourceUri",
        )

        datasource_auth_credentials = _schema_backup_instance_resource_read.properties.datasource_auth_credentials
        datasource_auth_credentials.object_type = AAZStrType(
            serialized_name="objectType",
            flags={"required": True},
        )

        disc_secret_store_based_auth_credentials = _schema_backup_instance_resource_read.properties.datasource_auth_credentials.discriminate_by("object_type", "SecretStoreBasedAuthCredentials")
        disc_secret_store_based_auth_credentials.secret_store_resource = AAZObjectType(
            serialized_name="secretStoreResource",
        )

        secret_store_resource = _schema_backup_instance_resource_read.properties.datasource_auth_credentials.discriminate_by("object_type", "SecretStoreBasedAuthCredentials").secret_store_resource
        secret_store_resource.secret_store_type = AAZStrType(
            serialized_name="secretStoreType",
            flags={"required": True},
        )
        secret_store_resource.uri = AAZStrType()
        secret_store_resource.value = AAZStrType()

        identity_details = _schema_backup_instance_resource_read.properties.identity_details
        identity_details.use_system_assigned_identity = AAZBoolType(
            serialized_name="useSystemAssignedIdentity",
        )
        identity_details.user_assigned_identity_arm_url = AAZStrType(
            serialized_name="userAssignedIdentityArmUrl",
        )

        policy_info = _schema_backup_instance_resource_read.properties.policy_info
        policy_info.policy_id = AAZStrType(
            serialized_name="policyId",
            flags={"required": True},
        )
        policy_info.policy_parameters = AAZObjectType(
            serialized_name="policyParameters",
        )
        policy_info.policy_version = AAZStrType(
            serialized_name="policyVersion",
            flags={"read_only": True},
        )

        policy_parameters = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters
        policy_parameters.backup_datasource_parameters_list = AAZListType(
            serialized_name="backupDatasourceParametersList",
        )
        policy_parameters.data_store_parameters_list = AAZListType(
            serialized_name="dataStoreParametersList",
        )

        backup_datasource_parameters_list = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters.backup_datasource_parameters_list
        backup_datasource_parameters_list.Element = AAZObjectType()

        _element = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters.backup_datasource_parameters_list.Element
        _element.object_type = AAZStrType(
            serialized_name="objectType",
            flags={"required": True},
        )

        disc_blob_backup_datasource_parameters = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters.backup_datasource_parameters_list.Element.discriminate_by("object_type", "BlobBackupDatasourceParameters")
        disc_blob_backup_datasource_parameters.containers_list = AAZListType(
            serialized_name="containersList",
            flags={"required": True},
        )

        containers_list = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters.backup_datasource_parameters_list.Element.discriminate_by("object_type", "BlobBackupDatasourceParameters").containers_list
        containers_list.Element = AAZStrType()

        disc_kubernetes_cluster_backup_datasource_parameters = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters.backup_datasource_parameters_list.Element.discriminate_by("object_type", "KubernetesClusterBackupDatasourceParameters")
        disc_kubernetes_cluster_backup_datasource_parameters.backup_hook_references = AAZListType(
            serialized_name="backupHookReferences",
        )
        disc_kubernetes_cluster_backup_datasource_parameters.excluded_namespaces = AAZListType(
            serialized_name="excludedNamespaces",
        )
        disc_kubernetes_cluster_backup_datasource_parameters.excluded_resource_types = AAZListType(
            serialized_name="excludedResourceTypes",
        )
        disc_kubernetes_cluster_backup_datasource_parameters.include_cluster_scope_resources = AAZBoolType(
            serialized_name="includeClusterScopeResources",
            flags={"required": True},
        )
        disc_kubernetes_cluster_backup_datasource_parameters.included_namespaces = AAZListType(
            serialized_name="includedNamespaces",
        )
        disc_kubernetes_cluster_backup_datasource_parameters.included_resource_types = AAZListType(
            serialized_name="includedResourceTypes",
        )
        disc_kubernetes_cluster_backup_datasource_parameters.label_selectors = AAZListType(
            serialized_name="labelSelectors",
        )
        disc_kubernetes_cluster_backup_datasource_parameters.snapshot_volumes = AAZBoolType(
            serialized_name="snapshotVolumes",
            flags={"required": True},
        )

        backup_hook_references = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters.backup_datasource_parameters_list.Element.discriminate_by("object_type", "KubernetesClusterBackupDatasourceParameters").backup_hook_references
        backup_hook_references.Element = AAZObjectType()

        _element = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters.backup_datasource_parameters_list.Element.discriminate_by("object_type", "KubernetesClusterBackupDatasourceParameters").backup_hook_references.Element
        _element.name = AAZStrType()
        _element.namespace = AAZStrType()

        excluded_namespaces = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters.backup_datasource_parameters_list.Element.discriminate_by("object_type", "KubernetesClusterBackupDatasourceParameters").excluded_namespaces
        excluded_namespaces.Element = AAZStrType()

        excluded_resource_types = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters.backup_datasource_parameters_list.Element.discriminate_by("object_type", "KubernetesClusterBackupDatasourceParameters").excluded_resource_types
        excluded_resource_types.Element = AAZStrType()

        included_namespaces = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters.backup_datasource_parameters_list.Element.discriminate_by("object_type", "KubernetesClusterBackupDatasourceParameters").included_namespaces
        included_namespaces.Element = AAZStrType()

        included_resource_types = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters.backup_datasource_parameters_list.Element.discriminate_by("object_type", "KubernetesClusterBackupDatasourceParameters").included_resource_types
        included_resource_types.Element = AAZStrType()

        label_selectors = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters.backup_datasource_parameters_list.Element.discriminate_by("object_type", "KubernetesClusterBackupDatasourceParameters").label_selectors
        label_selectors.Element = AAZStrType()

        data_store_parameters_list = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters.data_store_parameters_list
        data_store_parameters_list.Element = AAZObjectType()

        _element = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters.data_store_parameters_list.Element
        _element.data_store_type = AAZStrType(
            serialized_name="dataStoreType",
            flags={"required": True},
        )
        _element.object_type = AAZStrType(
            serialized_name="objectType",
            flags={"required": True},
        )

        disc_azure_operational_store_parameters = _schema_backup_instance_resource_read.properties.policy_info.policy_parameters.data_store_parameters_list.Element.discriminate_by("object_type", "AzureOperationalStoreParameters")
        disc_azure_operational_store_parameters.resource_group_id = AAZStrType(
            serialized_name="resourceGroupId",
        )

        protection_status = _schema_backup_instance_resource_read.properties.protection_status
        protection_status.error_details = AAZObjectType(
            serialized_name="errorDetails",
        )
        cls._build_schema_user_facing_error_read(protection_status.error_details)
        protection_status.status = AAZStrType()

        system_data = _schema_backup_instance_resource_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_backup_instance_resource_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_backup_instance_resource_read.id
        _schema.name = cls._schema_backup_instance_resource_read.name
        _schema.properties = cls._schema_backup_instance_resource_read.properties
        _schema.system_data = cls._schema_backup_instance_resource_read.system_data
        _schema.tags = cls._schema_backup_instance_resource_read.tags
        _schema.type = cls._schema_backup_instance_resource_read.type

    _schema_base_resource_properties_read = None

    @classmethod
    def _build_schema_base_resource_properties_read(cls, _schema):
        if cls._schema_base_resource_properties_read is not None:
            _schema.object_type = cls._schema_base_resource_properties_read.object_type
            return

        cls._schema_base_resource_properties_read = _schema_base_resource_properties_read = AAZObjectType()

        base_resource_properties_read = _schema_base_resource_properties_read
        base_resource_properties_read.object_type = AAZStrType(
            serialized_name="objectType",
            flags={"required": True},
        )

        _schema.object_type = cls._schema_base_resource_properties_read.object_type

    _schema_inner_error_read = None

    @classmethod
    def _build_schema_inner_error_read(cls, _schema):
        if cls._schema_inner_error_read is not None:
            _schema.additional_info = cls._schema_inner_error_read.additional_info
            _schema.code = cls._schema_inner_error_read.code
            _schema.embedded_inner_error = cls._schema_inner_error_read.embedded_inner_error
            return

        cls._schema_inner_error_read = _schema_inner_error_read = AAZObjectType()

        inner_error_read = _schema_inner_error_read
        inner_error_read.additional_info = AAZDictType(
            serialized_name="additionalInfo",
        )
        inner_error_read.code = AAZStrType()
        inner_error_read.embedded_inner_error = AAZObjectType(
            serialized_name="embeddedInnerError",
        )
        cls._build_schema_inner_error_read(inner_error_read.embedded_inner_error)

        additional_info = _schema_inner_error_read.additional_info
        additional_info.Element = AAZStrType()

        _schema.additional_info = cls._schema_inner_error_read.additional_info
        _schema.code = cls._schema_inner_error_read.code
        _schema.embedded_inner_error = cls._schema_inner_error_read.embedded_inner_error

    _schema_user_facing_error_read = None

    @classmethod
    def _build_schema_user_facing_error_read(cls, _schema):
        if cls._schema_user_facing_error_read is not None:
            _schema.code = cls._schema_user_facing_error_read.code
            _schema.details = cls._schema_user_facing_error_read.details
            _schema.inner_error = cls._schema_user_facing_error_read.inner_error
            _schema.is_retryable = cls._schema_user_facing_error_read.is_retryable
            _schema.is_user_error = cls._schema_user_facing_error_read.is_user_error
            _schema.message = cls._schema_user_facing_error_read.message
            _schema.properties = cls._schema_user_facing_error_read.properties
            _schema.recommended_action = cls._schema_user_facing_error_read.recommended_action
            _schema.target = cls._schema_user_facing_error_read.target
            return

        cls._schema_user_facing_error_read = _schema_user_facing_error_read = AAZObjectType()

        user_facing_error_read = _schema_user_facing_error_read
        user_facing_error_read.code = AAZStrType()
        user_facing_error_read.details = AAZListType()
        user_facing_error_read.inner_error = AAZObjectType(
            serialized_name="innerError",
        )
        cls._build_schema_inner_error_read(user_facing_error_read.inner_error)
        user_facing_error_read.is_retryable = AAZBoolType(
            serialized_name="isRetryable",
        )
        user_facing_error_read.is_user_error = AAZBoolType(
            serialized_name="isUserError",
        )
        user_facing_error_read.message = AAZStrType()
        user_facing_error_read.properties = AAZDictType()
        user_facing_error_read.recommended_action = AAZListType(
            serialized_name="recommendedAction",
        )
        user_facing_error_read.target = AAZStrType()

        details = _schema_user_facing_error_read.details
        details.Element = AAZObjectType()
        cls._build_schema_user_facing_error_read(details.Element)

        properties = _schema_user_facing_error_read.properties
        properties.Element = AAZStrType()

        recommended_action = _schema_user_facing_error_read.recommended_action
        recommended_action.Element = AAZStrType()

        _schema.code = cls._schema_user_facing_error_read.code
        _schema.details = cls._schema_user_facing_error_read.details
        _schema.inner_error = cls._schema_user_facing_error_read.inner_error
        _schema.is_retryable = cls._schema_user_facing_error_read.is_retryable
        _schema.is_user_error = cls._schema_user_facing_error_read.is_user_error
        _schema.message = cls._schema_user_facing_error_read.message
        _schema.properties = cls._schema_user_facing_error_read.properties
        _schema.recommended_action = cls._schema_user_facing_error_read.recommended_action
        _schema.target = cls._schema_user_facing_error_read.target


__all__ = ["Update"]
