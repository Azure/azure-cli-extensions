# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals
# pylint: disable=bad-continuation
# pylint: disable=line-too-long

from azure.cli.core.commands import CliCommandType
from azext_dataprotection.generated._client_factory import (
    cf_backup_instance,
)


dataprotection_backup_instance = CliCommandType(
    operations_tmpl='azext_dataprotection.vendored_sdks.dataprotection.operations._backup_instances_operations#BackupInstancesOperations.{}',
    client_factory=cf_backup_instance,
)


def load_command_table(self, _):

    with self.command_group(
        'dataprotection backup-instance', dataprotection_backup_instance, client_factory=cf_backup_instance
    ) as g:
        g.custom_command('list', 'dataprotection_backup_instance_list')
        # g.custom_show_command('show', 'dataprotection_backup_instance_show')
        # g.custom_command('create', 'dataprotection_backup_instance_create', supports_no_wait=True)
        # g.custom_command('delete', 'dataprotection_backup_instance_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('adhoc-backup', 'dataprotection_backup_instance_adhoc_backup', supports_no_wait=True)
        # g.custom_command('restore trigger', 'dataprotection_backup_instance_restore_trigger', supports_no_wait=True)
        g.custom_command('resume-protection', 'dataprotection_backup_instance_resume_protection', supports_no_wait=True)
        g.custom_command('stop-protection', 'dataprotection_backup_instance_stop_protection', supports_no_wait=True)
        g.custom_command('suspend-backup', 'dataprotection_backup_instance_suspend_backup', supports_no_wait=True)
        # g.custom_command(
        #     'validate-for-backup', 'dataprotection_backup_instance_validate_for_backup', supports_no_wait=True
        # )
        # g.custom_command(
        #     'validate-for-restore', 'dataprotection_backup_instance_validate_for_restore', supports_no_wait=True
        # )
        g.custom_wait_command('wait', 'dataprotection_backup_instance_show')

    with self.command_group('dataprotection', is_experimental=True):
        pass
