# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import StorageCacheManagementClientConfiguration
from .operations import OperationOperations
from .operations import SkuOperations
from .operations import UsageModelOperations
from .operations import ASCOperationOperations
from .operations import CacheOperations
from .operations import StorageTargetOperations
from .. import models


class StorageCacheManagementClient(object):
    """A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as "Storage Targets"). These operations allow you to manage Caches.

    :ivar operation: OperationOperations operations
    :vartype operation: storage_cache_management_client.aio.operations.OperationOperations
    :ivar sku: SkuOperations operations
    :vartype sku: storage_cache_management_client.aio.operations.SkuOperations
    :ivar usage_model: UsageModelOperations operations
    :vartype usage_model: storage_cache_management_client.aio.operations.UsageModelOperations
    :ivar asc_operation: ASCOperationOperations operations
    :vartype asc_operation: storage_cache_management_client.aio.operations.ASCOperationOperations
    :ivar cache: CacheOperations operations
    :vartype cache: storage_cache_management_client.aio.operations.CacheOperations
    :ivar storage_target: StorageTargetOperations operations
    :vartype storage_target: storage_cache_management_client.aio.operations.StorageTargetOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param subscription_id: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
    :type subscription_id: str
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        subscription_id: str,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = StorageCacheManagementClientConfiguration(credential, subscription_id, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.operation = OperationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.sku = SkuOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.usage_model = UsageModelOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.asc_operation = ASCOperationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.cache = CacheOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.storage_target = StorageTargetOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "StorageCacheManagementClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
