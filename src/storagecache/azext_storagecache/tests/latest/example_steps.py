# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /AscOperations/get/AscOperations_Get
@try_manual
def step_asc_operation_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache asc-operation show '
             '--operation-id "testoperationid" '
             '--location "westus"',
             checks=checks)


# EXAMPLE: /Caches/put/Caches_CreateOrUpdate
@try_manual
def step_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache create '
             '--location "westus" '
             '--cache-size-gb 3072 '
             '--cache-net-bios-name "contosoSmb" '
             '--cache-active-directory-settings-credentials password="<password>" username="consotoAdmin" '
             '--domain-name "contosoAd.contoso.local" '
             '--domain-net-bios-name "contosoAd" '
             '--primary-dns-ip-address "192.0.2.10" '
             '--secondary-dns-ip-address "192.0.2.11" '
             '--credentials bind-dn="cn bind-password="<bindPassword>" '
             '--extended-groups true '
             '--ldap-base-dn "dc=contosoad,dc=contoso,dc=local" '
             '--ldap-server "192.0.2.12" '
             '--username-source "LDAP" '
             '--key-url "https://keyvault-cmk.vault.azure.net/keys/key2047/test" '
             '--id "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.KeyVault/vaults/keyvault-c'
             'mk" '
             '--access-policies name="default" access-rules={{"access":"rw","rootSquash":false,"scope":"default","submo'
             'untAccess":true,"suid":false}} '
             '--subnet "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Network/virtualNetwork'
             's/{vn}/subnets/default" '
             '--name "Standard_2G" '
             '--tags Dept="Contoso" '
             '--cache-name "sc1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Caches/put/Caches_CreateOrUpdate_ldap_only
@try_manual
def step_create2(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache create '
             '--location "westus" '
             '--cache-size-gb 3072 '
             '--credentials bind-dn="cn bind-password="<bindPassword>" '
             '--extended-groups true '
             '--ldap-base-dn "dc=contosoad,dc=contoso,dc=local" '
             '--ldap-server "192.0.2.12" '
             '--username-source "LDAP" '
             '--key-url "https://keyvault-cmk.vault.azure.net/keys/key2048/test" '
             '--id "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.KeyVault/vaults/keyvault-c'
             'mk" '
             '--access-policies name="default" access-rules={{"access":"rw","rootSquash":false,"scope":"default","submo'
             'untAccess":true,"suid":false}} '
             '--subnet "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Network/virtualNetwork'
             's/{vn}/subnets/default" '
             '--name "Standard_2G" '
             '--tags Dept="Contoso" '
             '--cache-name "sc1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Caches/get/Caches_Get
@try_manual
def step_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache show '
             '--cache-name "sc1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Caches/get/Caches_List
@try_manual
def step_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache list '
             '-g ""',
             checks=checks)


# EXAMPLE: /Caches/get/Caches_ListByResourceGroup
@try_manual
def step_list2(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Caches/patch/Caches_Update
@try_manual
def step_update(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache update '
             '--location "westus" '
             '--cache-size-gb 3072 '
             '--cache-net-bios-name "contosoSmb" '
             '--domain-name "contosoAd.contoso.local" '
             '--domain-net-bios-name "contosoAd" '
             '--primary-dns-ip-address "192.0.2.10" '
             '--secondary-dns-ip-address "192.0.2.11" '
             '--extended-groups true '
             '--username-source "AD" '
             '--network-settings dns-search-domain="contoso.com" dns-servers="10.1.22.33" dns-servers="10.1.12.33" '
             'mtu=1500 ntp-server="time.contoso.com" '
             '--access-policies name="default" access-rules={{"access":"rw","rootSquash":false,"scope":"default","submo'
             'untAccess":true,"suid":false}} '
             '--access-policies name="restrictive" access-rules={{"access":"rw","filter":"10.99.3.145","rootSquash":fal'
             'se,"scope":"host","submountAccess":true,"suid":true}} access-rules={{"access":"rw","filter":"10.99.1.0/24'
             '","rootSquash":false,"scope":"network","submountAccess":true,"suid":true}} '
             'access-rules={{"access":"no","anonymousGID":"65534","anonymousUID":"65534","rootSquash":true,"scope":"def'
             'ault","submountAccess":true,"suid":false}} '
             '--subnet "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Network/virtualNetwork'
             's/{vn}/subnets/default" '
             '--name "Standard_2G" '
             '--tags Dept="Contoso" '
             '--cache-name "sc1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Caches/patch/Caches_Update_ldap_only
@try_manual
def step_update2(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache update '
             '--location "westus" '
             '--cache-size-gb 3072 '
             '--credentials bind-dn="cn bind-password="<bindPassword>" '
             '--extended-groups true '
             '--ldap-base-dn "dc=contosoad,dc=contoso,dc=local" '
             '--ldap-server "192.0.2.12" '
             '--username-source "LDAP" '
             '--network-settings dns-search-domain="contoso.com" dns-servers="10.1.22.33" dns-servers="10.1.12.33" '
             'mtu=1500 ntp-server="time.contoso.com" '
             '--access-policies name="default" access-rules={{"access":"rw","rootSquash":false,"scope":"default","submo'
             'untAccess":true,"suid":false}} '
             '--access-policies name="restrictive" access-rules={{"access":"rw","filter":"10.99.3.145","rootSquash":fal'
             'se,"scope":"host","submountAccess":true,"suid":true}} access-rules={{"access":"rw","filter":"10.99.1.0/24'
             '","rootSquash":false,"scope":"network","submountAccess":true,"suid":true}} '
             'access-rules={{"access":"no","anonymousGID":"65534","anonymousUID":"65534","rootSquash":true,"scope":"def'
             'ault","submountAccess":true,"suid":false}} '
             '--subnet "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Network/virtualNetwork'
             's/{vn}/subnets/default" '
             '--name "Standard_2G" '
             '--tags Dept="Contoso" '
             '--cache-name "sc1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Caches/post/Caches_DebugInfo
@try_manual
def step_debug_info(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache debug-info '
             '--cache-name "sc" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Caches/post/Caches_Flush
@try_manual
def step_flush(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache flush '
             '--cache-name "sc" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Caches/post/Caches_Start
@try_manual
def step_start(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache start '
             '--cache-name "sc" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Caches/post/Caches_Stop
@try_manual
def step_stop(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache stop '
             '--cache-name "sc" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Caches/post/Caches_UpgradeFirmware
@try_manual
def step_upgrade_firmware(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache upgrade-firmware '
             '--cache-name "sc1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Caches/delete/Caches_Delete
@try_manual
def step_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache delete -y '
             '--cache-name "sc" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Skus/get/Skus_List
@try_manual
def step_sku_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache sku list',
             checks=checks)


# EXAMPLE: /StorageTargets/put/StorageTargets_CreateOrUpdate
@try_manual
def step_storage_target_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache storage-target create '
             '--cache-name "sc1" '
             '--resource-group "{rg}" '
             '--name "{myStorageTarget}" '
             '--junctions namespace-path="/path/on/cache" nfs-access-policy="default" nfs-export="exp1" '
             'target-path="/path/on/exp1" '
             '--junctions namespace-path="/path2/on/cache" nfs-access-policy="rootSquash" nfs-export="exp2" '
             'target-path="/path2/on/exp2" '
             '--nfs3 target="10.0.44.44" usage-model="READ_HEAVY_INFREQ" '
             '--target-type "nfs3"',
             checks=[])
    test.cmd('az storagecache storage-target wait --created '
             '--resource-group "{rg}" '
             '--name "{myStorageTarget}"',
             checks=checks)


# EXAMPLE: /StorageTargets/put/StorageTargets_CreateOrUpdate_BlobNfs
@try_manual
def step_storage_target_create2(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache storage-target create '
             '--cache-name "sc1" '
             '--resource-group "{rg}" '
             '--name "{myStorageTarget}" '
             '--blob-nfs target="/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Storage/stora'
             'geAccounts/{sa}/blobServices/default/containers/blobnfs" usage-model="WRITE_WORKLOAD_15" '
             '--junctions namespace-path="/blobnfs" '
             '--target-type "blobNfs"',
             checks=[])
    test.cmd('az storagecache storage-target wait --created '
             '--resource-group "{rg}" '
             '--name "{myStorageTarget}"',
             checks=checks)


# EXAMPLE: /StorageTargets/put/StorageTargets_CreateOrUpdate_NoJunctions
@try_manual
def step_storage_target_create3(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache storage-target create '
             '--cache-name "sc1" '
             '--resource-group "{rg}" '
             '--name "{myStorageTarget}" '
             '--nfs3 target="10.0.44.44" usage-model="READ_HEAVY_INFREQ" '
             '--target-type "nfs3"',
             checks=[])
    test.cmd('az storagecache storage-target wait --created '
             '--resource-group "{rg}" '
             '--name "{myStorageTarget}"',
             checks=checks)


# EXAMPLE: /StorageTargets/get/StorageTargets_Get
@try_manual
def step_storage_target_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache storage-target show '
             '--cache-name "sc1" '
             '--resource-group "{rg}" '
             '--name "{myStorageTarget}"',
             checks=checks)


# EXAMPLE: /StorageTargets/get/StorageTargets_List
@try_manual
def step_storage_target_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache storage-target list '
             '--cache-name "sc1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /StorageTargets/post/Caches_DnsRefresh
@try_manual
def step_storage_target_dns_refresh(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache storage-target dns-refresh '
             '--cache-name "sc" '
             '--resource-group "{rg}" '
             '--name "{myStorageTarget}"',
             checks=checks)


# EXAMPLE: /StorageTargets/delete/StorageTargets_Delete
@try_manual
def step_storage_target_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache storage-target delete -y '
             '--cache-name "sc1" '
             '--resource-group "{rg}" '
             '--name "{myStorageTarget}"',
             checks=checks)


# EXAMPLE: /UsageModels/get/UsageModels_List
@try_manual
def step_usage_model_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagecache usage-model list',
             checks=checks)

