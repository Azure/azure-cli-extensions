# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from knack.help_files import helps


helps['storagecache sku'] = """
    type: group
    short-summary: Manage sku with storagecache
"""

helps['storagecache sku list'] = """
    type: command
    short-summary: "Get the list of StorageCache.Cache SKUs available to this subscription."
    examples:
      - name: Skus_List
        text: |-
               az storagecache sku list
"""

helps['storagecache usage-model'] = """
    type: group
    short-summary: Manage usage model with storagecache
"""

helps['storagecache usage-model list'] = """
    type: command
    short-summary: "Get the list of Cache Usage Models available to this subscription."
    examples:
      - name: UsageModels_List
        text: |-
               az storagecache usage-model list
"""

helps['storagecache asc-operation'] = """
    type: group
    short-summary: Manage asc operation with storagecache
"""

helps['storagecache asc-operation show'] = """
    type: command
    short-summary: "Gets the status of an asynchronous operation for the Azure HPC Cache."
    examples:
      - name: AscOperations_Get
        text: |-
               az storagecache asc-operation show --operation-id "testoperationid" --location "westus"
"""

helps['storagecache'] = """
    type: group
    short-summary: Manage cache with storagecache
"""

helps['storagecache list'] = """
    type: command
    short-summary: "Returns all Caches the user has access to under a resource group. And Returns all Caches the user \
has access to under a subscription."
    examples:
      - name: Caches_ListByResourceGroup
        text: |-
               az storagecache list --resource-group "scgroup"
      - name: Caches_List
        text: |-
               az storagecache list
"""

helps['storagecache show'] = """
    type: command
    short-summary: "Returns a Cache."
    examples:
      - name: Caches_Get
        text: |-
               az storagecache show --cache-name "sc1" --resource-group "scgroup"
"""

helps['storagecache create'] = """
    type: command
    short-summary: "Create a Cache."
    parameters:
      - name: --network-settings
        short-summary: "Specifies network settings of the cache."
        long-summary: |
            Usage: --network-settings mtu=XX dns-servers=XX dns-search-domain=XX ntp-server=XX

            mtu: The IPv4 maximum transmission unit configured for the subnet.
            dns-servers: DNS servers for the cache to use.  It will be set from the network configuration if no value \
is provided.
            dns-search-domain: DNS search domain
            ntp-server: NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
      - name: --credentials
        short-summary: "When present, these are the credentials for the secure LDAP connection."
        long-summary: |
            Usage: --credentials bind-dn=XX bind-password=XX

            bind-dn: The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is \
stored encrypted and not returned on response.
            bind-password: The Bind password to be used in the secure LDAP connection. This value is stored encrypted \
and not returned on response.
      - name: --cache-active-directory-settings-credentials
        short-summary: "Active Directory admin credentials used to join the HPC Cache to a domain."
        long-summary: |
            Usage: --cache-active-directory-settings-credentials username=XX password=XX

            username: Required. Username of the Active Directory domain administrator. This value is stored encrypted \
and not returned on response.
            password: Required. Plain text password of the Active Directory domain administrator. This value is stored \
encrypted and not returned on response.
      - name: --access-policies
        short-summary: "NFS access policies defined for this cache."
        long-summary: |
            Usage: --access-policies name=XX access-rules=XX

            name: Required. Name identifying this policy. Access Policy names are not case sensitive.
            access-rules: Required. The set of rules describing client accesses allowed under this policy.

            Multiple actions can be specified by using more than one --access-policies argument.
    examples:
      - name: Caches_CreateOrUpdate
        text: |-
               az storagecache create --location "westus" --cache-size-gb 3072 --cache-net-bios-name "contosoSmb" \
--cache-active-directory-settings-credentials password="<password>" username="consotoAdmin" --domain-name \
"contosoAd.contoso.local" --domain-net-bios-name "contosoAd" --primary-dns-ip-address "192.0.2.10" \
--secondary-dns-ip-address "192.0.2.11" --credentials bind-dn="cn=ldapadmin,dc=contosoad,dc=contoso,dc=local" \
bind-password="<bindPassword>" --extended-groups true --ldap-base-dn "dc=contosoad,dc=contoso,dc=local" --ldap-server \
"192.0.2.12" --username-source "LDAP" --key-url "https://keyvault-cmk.vault.azure.net/keys/key2047/test" --id \
"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.KeyVault/vaults/keyvaul\
t-cmk" --access-policies name="default" access-rules={"access":"rw","rootSquash":false,"scope":"default","submountAcces\
s":true,"suid":false} --subnet "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Mi\
crosoft.Network/virtualNetworks/scvnet/subnets/sub1" --name "Standard_2G" --tags Dept="Contoso" --cache-name "sc1" \
--resource-group "scgroup"
      - name: Caches_CreateOrUpdate_ldap_only
        text: |-
               az storagecache create --location "westus" --cache-size-gb 3072 --credentials \
bind-dn="cn=ldapadmin,dc=contosoad,dc=contoso,dc=local" bind-password="<bindPassword>" --extended-groups true \
--ldap-base-dn "dc=contosoad,dc=contoso,dc=local" --ldap-server "192.0.2.12" --username-source "LDAP" --key-url \
"https://keyvault-cmk.vault.azure.net/keys/key2048/test" --id "/subscriptions/00000000-0000-0000-0000-000000000000/reso\
urceGroups/scgroup/providers/Microsoft.KeyVault/vaults/keyvault-cmk" --access-policies name="default" \
access-rules={"access":"rw","rootSquash":false,"scope":"default","submountAccess":true,"suid":false} --subnet \
"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtualNetworks\
/scvnet/subnets/sub1" --name "Standard_2G" --tags Dept="Contoso" --cache-name "sc1" --resource-group "scgroup"
"""

helps['storagecache update'] = """
    type: command
    short-summary: "Update a Cache instance."
    parameters:
      - name: --network-settings
        short-summary: "Specifies network settings of the cache."
        long-summary: |
            Usage: --network-settings mtu=XX dns-servers=XX dns-search-domain=XX ntp-server=XX

            mtu: The IPv4 maximum transmission unit configured for the subnet.
            dns-servers: DNS servers for the cache to use.  It will be set from the network configuration if no value \
is provided.
            dns-search-domain: DNS search domain
            ntp-server: NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
      - name: --credentials
        short-summary: "When present, these are the credentials for the secure LDAP connection."
        long-summary: |
            Usage: --credentials bind-dn=XX bind-password=XX

            bind-dn: The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is \
stored encrypted and not returned on response.
            bind-password: The Bind password to be used in the secure LDAP connection. This value is stored encrypted \
and not returned on response.
      - name: --cache-active-directory-settings-credentials
        short-summary: "Active Directory admin credentials used to join the HPC Cache to a domain."
        long-summary: |
            Usage: --cache-active-directory-settings-credentials username=XX password=XX

            username: Required. Username of the Active Directory domain administrator. This value is stored encrypted \
and not returned on response.
            password: Required. Plain text password of the Active Directory domain administrator. This value is stored \
encrypted and not returned on response.
      - name: --access-policies
        short-summary: "NFS access policies defined for this cache."
        long-summary: |
            Usage: --access-policies name=XX access-rules=XX

            name: Required. Name identifying this policy. Access Policy names are not case sensitive.
            access-rules: Required. The set of rules describing client accesses allowed under this policy.

            Multiple actions can be specified by using more than one --access-policies argument.
    examples:
      - name: Caches_Update
        text: |-
               az storagecache update --location "westus" --cache-size-gb 3072 --cache-net-bios-name "contosoSmb" \
--domain-name "contosoAd.contoso.local" --domain-net-bios-name "contosoAd" --primary-dns-ip-address "192.0.2.10" \
--secondary-dns-ip-address "192.0.2.11" --extended-groups true --username-source "AD" --network-settings \
dns-search-domain="contoso.com" dns-servers="10.1.22.33" dns-servers="10.1.12.33" mtu=1500 \
ntp-server="time.contoso.com" --access-policies name="default" access-rules={"access":"rw","rootSquash":false,"scope":"\
default","submountAccess":true,"suid":false} --access-policies name="restrictive" access-rules={"access":"rw","filter":\
"10.99.3.145","rootSquash":false,"scope":"host","submountAccess":true,"suid":true} access-rules={"access":"rw","filter"\
:"10.99.1.0/24","rootSquash":false,"scope":"network","submountAccess":true,"suid":true} access-rules={"access":"no","an\
onymousGID":"65534","anonymousUID":"65534","rootSquash":true,"scope":"default","submountAccess":true,"suid":false} \
--subnet "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtua\
lNetworks/scvnet/subnets/sub1" --name "Standard_2G" --tags Dept="Contoso" --cache-name "sc1" --resource-group \
"scgroup"
      - name: Caches_Update_ldap_only
        text: |-
               az storagecache update --location "westus" --cache-size-gb 3072 --credentials \
bind-dn="cn=ldapadmin,dc=contosoad,dc=contoso,dc=local" bind-password="<bindPassword>" --extended-groups true \
--ldap-base-dn "dc=contosoad,dc=contoso,dc=local" --ldap-server "192.0.2.12" --username-source "LDAP" \
--network-settings dns-search-domain="contoso.com" dns-servers="10.1.22.33" dns-servers="10.1.12.33" mtu=1500 \
ntp-server="time.contoso.com" --access-policies name="default" access-rules={"access":"rw","rootSquash":false,"scope":"\
default","submountAccess":true,"suid":false} --access-policies name="restrictive" access-rules={"access":"rw","filter":\
"10.99.3.145","rootSquash":false,"scope":"host","submountAccess":true,"suid":true} access-rules={"access":"rw","filter"\
:"10.99.1.0/24","rootSquash":false,"scope":"network","submountAccess":true,"suid":true} access-rules={"access":"no","an\
onymousGID":"65534","anonymousUID":"65534","rootSquash":true,"scope":"default","submountAccess":true,"suid":false} \
--subnet "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Network/virtua\
lNetworks/scvnet/subnets/sub1" --name "Standard_2G" --tags Dept="Contoso" --cache-name "sc1" --resource-group \
"scgroup"
"""

helps['storagecache delete'] = """
    type: command
    short-summary: "Schedules a Cache for deletion."
    examples:
      - name: Caches_Delete
        text: |-
               az storagecache delete --cache-name "sc" --resource-group "scgroup"
"""

helps['storagecache debug-info'] = """
    type: command
    short-summary: "Tells a Cache to write generate debug info for support to process."
    examples:
      - name: Caches_DebugInfo
        text: |-
               az storagecache debug-info --cache-name "sc" --resource-group "scgroup"
"""

helps['storagecache flush'] = """
    type: command
    short-summary: "Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will see \
errors returned until the flush is complete."
    examples:
      - name: Caches_Flush
        text: |-
               az storagecache flush --cache-name "sc" --resource-group "scgroup"
"""

helps['storagecache start'] = """
    type: command
    short-summary: "Tells a Stopped state Cache to transition to Active state."
    examples:
      - name: Caches_Start
        text: |-
               az storagecache start --cache-name "sc" --resource-group "scgroup"
"""

helps['storagecache stop'] = """
    type: command
    short-summary: "Tells an Active Cache to transition to Stopped state."
    examples:
      - name: Caches_Stop
        text: |-
               az storagecache stop --cache-name "sc" --resource-group "scgroup"
"""

helps['storagecache upgrade-firmware'] = """
    type: command
    short-summary: "Upgrade a Cache's firmware if a new version is available. Otherwise, this operation has no \
effect."
    examples:
      - name: Caches_UpgradeFirmware
        text: |-
               az storagecache upgrade-firmware --cache-name "sc1" --resource-group "scgroup"
"""

helps['storagecache wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the storagecache is met.
    examples:
      - name: Pause executing next line of CLI script until the storagecache is successfully created.
        text: |-
               az storagecache wait --cache-name "sc1" --resource-group "scgroup" --created
      - name: Pause executing next line of CLI script until the storagecache is successfully deleted.
        text: |-
               az storagecache wait --cache-name "sc1" --resource-group "scgroup" --deleted
"""

helps['storagecache storage-target'] = """
    type: group
    short-summary: Manage storage target with storagecache
"""

helps['storagecache storage-target list'] = """
    type: command
    short-summary: "Returns a list of Storage Targets for the specified Cache."
    examples:
      - name: StorageTargets_List
        text: |-
               az storagecache storage-target list --cache-name "sc1" --resource-group "scgroup"
"""

helps['storagecache storage-target show'] = """
    type: command
    short-summary: "Returns a Storage Target from a Cache."
    examples:
      - name: StorageTargets_Get
        text: |-
               az storagecache storage-target show --cache-name "sc1" --resource-group "scgroup" --name "st1"
"""

helps['storagecache storage-target create'] = """
    type: command
    short-summary: "Create a Storage Target. This operation is allowed at any time, but if the Cache is down or \
unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again."
    parameters:
      - name: --junctions
        short-summary: "List of Cache namespace junctions to target for namespace associations."
        long-summary: |
            Usage: --junctions namespace-path=XX target-path=XX nfs-export=XX nfs-access-policy=XX

            namespace-path: Namespace path on a Cache for a Storage Target.
            target-path: Path in Storage Target to which namespacePath points.
            nfs-export: NFS export where targetPath exists.
            nfs-access-policy: Name of the access policy applied to this junction.

            Multiple actions can be specified by using more than one --junctions argument.
      - name: --nfs3
        short-summary: "Properties when targetType is nfs3."
        long-summary: |
            Usage: --nfs3 target=XX usage-model=XX

            target: IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
            usage-model: Identifies the StorageCache usage model to be used for this storage target.
      - name: --blob-nfs
        short-summary: "Properties when targetType is blobNfs."
        long-summary: |
            Usage: --blob-nfs target=XX usage-model=XX

            target: Resource ID of the storage container.
            usage-model: Identifies the StorageCache usage model to be used for this storage target.
    examples:
      - name: StorageTargets_CreateOrUpdate
        text: |-
               az storagecache storage-target create --cache-name "sc1" --resource-group "scgroup" --name "st1" \
--junctions namespace-path="/path/on/cache" nfs-access-policy="default" nfs-export="exp1" target-path="/path/on/exp1" \
--junctions namespace-path="/path2/on/cache" nfs-access-policy="rootSquash" nfs-export="exp2" \
target-path="/path2/on/exp2" --nfs3 target="10.0.44.44" usage-model="READ_HEAVY_INFREQ" --target-type "nfs3"
      - name: StorageTargets_CreateOrUpdate_BlobNfs
        text: |-
               az storagecache storage-target create --cache-name "sc1" --resource-group "scgroup" --name "st1" \
--blob-nfs target="/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.Stora\
ge/storageAccounts/blofnfs/blobServices/default/containers/blobnfs" usage-model="WRITE_WORKLOAD_15" --junctions \
namespace-path="/blobnfs" --target-type "blobNfs"
      - name: StorageTargets_CreateOrUpdate_NoJunctions
        text: |-
               az storagecache storage-target create --cache-name "sc1" --resource-group "scgroup" --name "st1" --nfs3 \
target="10.0.44.44" usage-model="READ_HEAVY_INFREQ" --target-type "nfs3"
"""

helps['storagecache storage-target update'] = """
    type: command
    short-summary: "Update a Storage Target. This operation is allowed at any time, but if the Cache is down or \
unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again."
    parameters:
      - name: --junctions
        short-summary: "List of Cache namespace junctions to target for namespace associations."
        long-summary: |
            Usage: --junctions namespace-path=XX target-path=XX nfs-export=XX nfs-access-policy=XX

            namespace-path: Namespace path on a Cache for a Storage Target.
            target-path: Path in Storage Target to which namespacePath points.
            nfs-export: NFS export where targetPath exists.
            nfs-access-policy: Name of the access policy applied to this junction.

            Multiple actions can be specified by using more than one --junctions argument.
      - name: --nfs3
        short-summary: "Properties when targetType is nfs3."
        long-summary: |
            Usage: --nfs3 target=XX usage-model=XX

            target: IP address or host name of an NFSv3 host (e.g., 10.0.44.44).
            usage-model: Identifies the StorageCache usage model to be used for this storage target.
      - name: --blob-nfs
        short-summary: "Properties when targetType is blobNfs."
        long-summary: |
            Usage: --blob-nfs target=XX usage-model=XX

            target: Resource ID of the storage container.
            usage-model: Identifies the StorageCache usage model to be used for this storage target.
"""

helps['storagecache storage-target delete'] = """
    type: command
    short-summary: "Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache is \
down or unhealthy, the actual removal of the Storage Target may be delayed until the Cache is healthy again. Note that \
if the Cache has data to flush to the Storage Target, the data will be flushed before the Storage Target will be \
deleted."
    examples:
      - name: StorageTargets_Delete
        text: |-
               az storagecache storage-target delete --cache-name "sc1" --resource-group "scgroup" --name "st1"
"""

helps['storagecache storage-target dns-refresh'] = """
    type: command
    short-summary: "Tells a storage target to refresh its DNS information."
    examples:
      - name: Caches_DnsRefresh
        text: |-
               az storagecache storage-target dns-refresh --cache-name "sc" --resource-group "scgroup" --name "st1"
"""

helps['storagecache storage-target wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the storagecache storage-target is met.
    examples:
      - name: Pause executing next line of CLI script until the storagecache storage-target is successfully created.
        text: |-
               az storagecache storage-target wait --cache-name "sc1" --resource-group "scgroup" --name "st1" \
--created
      - name: Pause executing next line of CLI script until the storagecache storage-target is successfully updated.
        text: |-
               az storagecache storage-target wait --cache-name "sc1" --resource-group "scgroup" --name "st1" \
--updated
      - name: Pause executing next line of CLI script until the storagecache storage-target is successfully deleted.
        text: |-
               az storagecache storage-target wait --cache-name "sc1" --resource-group "scgroup" --name "st1" \
--deleted
"""
