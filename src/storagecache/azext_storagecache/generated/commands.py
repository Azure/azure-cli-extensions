# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_storagecache.generated._client_factory import cf_sku
    storagecache_sku = CliCommandType(
        operations_tmpl='azext_storagecache.vendored_sdks.storagecache.operations._skus_operations#SkusOperations.{}',
        client_factory=cf_sku)
    with self.command_group('storagecache sku', storagecache_sku, client_factory=cf_sku) as g:
        g.custom_command('list', 'storagecache_sku_list')

    from azext_storagecache.generated._client_factory import cf_usage_model
    storagecache_usage_model = CliCommandType(
        operations_tmpl='azext_storagecache.vendored_sdks.storagecache.operations._usage_models_operations#UsageModelsO'
        'perations.{}',
        client_factory=cf_usage_model)
    with self.command_group('storagecache usage-model', storagecache_usage_model, client_factory=cf_usage_model) as g:
        g.custom_command('list', 'storagecache_usage_model_list')

    from azext_storagecache.generated._client_factory import cf_ascoperation
    storagecache_ascoperation = CliCommandType(
        operations_tmpl='azext_storagecache.vendored_sdks.storagecache.operations._asc_operations_operations#AscOperati'
        'onsOperations.{}',
        client_factory=cf_ascoperation)
    with self.command_group('storagecache asc-operation', storagecache_ascoperation,
                            client_factory=cf_ascoperation) as g:
        g.custom_show_command('show', 'storagecache_asc_operation_show')

    from azext_storagecache.generated._client_factory import cf_cache
    storagecache_cache = CliCommandType(
        operations_tmpl='azext_storagecache.vendored_sdks.storagecache.operations._caches_operations#CachesOperations.{'
        '}',
        client_factory=cf_cache)
    with self.command_group('storagecache', storagecache_cache, client_factory=cf_cache, is_experimental=True) as g:
        g.custom_command('list', 'storagecache_list')
        g.custom_show_command('show', 'storagecache_show')
        g.custom_command('create', 'storagecache_create', supports_no_wait=True)
        g.custom_command('update', 'storagecache_update')
        g.custom_command('delete', 'storagecache_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('debug-info', 'storagecache_debug_info', supports_no_wait=True)
        g.custom_command('flush', 'storagecache_flush', supports_no_wait=True)
        g.custom_command('start', 'storagecache_start', supports_no_wait=True)
        g.custom_command('stop', 'storagecache_stop', supports_no_wait=True)
        g.custom_command('upgrade-firmware', 'storagecache_upgrade_firmware', supports_no_wait=True)
        g.custom_wait_command('wait', 'storagecache_show')

    from azext_storagecache.generated._client_factory import cf_storage_target
    storagecache_storage_target = CliCommandType(
        operations_tmpl='azext_storagecache.vendored_sdks.storagecache.operations._storage_targets_operations#StorageTa'
        'rgetsOperations.{}',
        client_factory=cf_storage_target)
    with self.command_group('storagecache storage-target', storagecache_storage_target,
                            client_factory=cf_storage_target) as g:
        g.custom_command('list', 'storagecache_storage_target_list')
        g.custom_show_command('show', 'storagecache_storage_target_show')
        g.custom_command('create', 'storagecache_storage_target_create', supports_no_wait=True)
        g.generic_update_command('update', setter_arg_name='storagetarget', setter_name='begin_create_or_update',
                                 custom_func_name='storagecache_storage_target_update', supports_no_wait=True)
        g.custom_command('delete', 'storagecache_storage_target_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('dns-refresh', 'storagecache_storage_target_dns_refresh', supports_no_wait=True)
        g.custom_wait_command('wait', 'storagecache_storage_target_show')
