# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_storagecache.action import (
    AddNetworkSettings,
    AddCredentials,
    AddCacheActiveDirectorySettingsCredentials,
    AddAccessPolicies,
    AddJunctions,
    AddNfs3,
    AddBlobNfs,
    AddAttributes
)


def load_arguments(self, _):

    with self.argument_context('storagecache asc-operation show') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='name')
        c.argument('operation_id', type=str, help='The operation id which uniquely identifies the asynchronous '
                   'operation.', id_part='child_name_1')

    with self.argument_context('storagecache list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('storagecache show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('cache_size_gb', type=int, help='The size of this Cache, in GB.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating',
                                                                 'Deleting', 'Updating']), help='ARM provisioning '
                   'state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisi'
                   'oningstate-property')
        c.argument('subnet', type=str, help='Subnet used for the Cache.')
        c.argument('network_settings', action=AddNetworkSettings, nargs='+', help='Specifies network settings of the '
                   'cache.')
        c.argument('extended_groups', arg_type=get_three_state_flag(), help='Whether or not Extended Groups is '
                   'enabled.', arg_group='Directory Services Settings Username Download')
        c.argument('username_source', arg_type=get_enum_type(['AD', 'LDAP', 'File', 'None']), help='This setting '
                   'determines how the cache gets username and group names for clients.', arg_group='Directory '
                   'Services Settings Username Download')
        c.argument('group_file_uri', type=str, help='The URI of the file containing group information (in /etc/group '
                   'file format). This field must be populated when \'usernameSource\' is set to \'File\'.',
                   arg_group='Directory Services Settings Username Download')
        c.argument('user_file_uri', type=str, help='The URI of the file containing user information (in /etc/passwd '
                   'file format). This field must be populated when \'usernameSource\' is set to \'File\'.',
                   arg_group='Directory Services Settings Username Download')
        c.argument('ldap_server', type=str, help='The fully qualified domain name or IP address of the LDAP server to '
                   'use.', arg_group='Directory Services Settings Username Download')
        c.argument('ldap_base_dn', type=str, help='The base distinguished name for the LDAP domain.',
                   arg_group='Directory Services Settings Username Download')
        c.argument('encrypt_ldap_connection', arg_type=get_three_state_flag(), help='Whether or not the LDAP '
                   'connection should be encrypted.', arg_group='Directory Services Settings Username Download')
        c.argument('require_valid_certificate', arg_type=get_three_state_flag(), help='Determines if the certificates '
                   'must be validated by a certificate authority. When true, caCertificateURI must be provided.',
                   arg_group='Directory Services Settings Username Download')
        c.argument('auto_download_certificate', arg_type=get_three_state_flag(), help='Determines if the certificate '
                   'should be automatically downloaded. This applies to \'caCertificateURI\' only if '
                   '\'requireValidCertificate\' is true.', arg_group='Directory Services Settings Username Download')
        c.argument('ca_certificate_uri', type=str, help='The URI of the CA certificate to validate the LDAP secure '
                   'connection. This field must be populated when \'requireValidCertificate\' is set to true.',
                   arg_group='Directory Services Settings Username Download')
        c.argument('credentials', action=AddCredentials, nargs='+', help='When present, these are the credentials for '
                   'the secure LDAP connection.', arg_group='Directory Services Settings Username Download')
        c.argument('primary_dns_ip_address', type=str, help='Primary DNS IP address used to resolve the Active '
                   'Directory domain controller\'s fully qualified domain name.', arg_group='Directory Services '
                   'Settings Active Directory')
        c.argument('secondary_dns_ip_address', type=str, help='Secondary DNS IP address used to resolve the Active '
                   'Directory domain controller\'s fully qualified domain name.', arg_group='Directory Services '
                   'Settings Active Directory')
        c.argument('domain_name', type=str, help='The fully qualified domain name of the Active Directory domain '
                   'controller.', arg_group='Directory Services Settings Active Directory')
        c.argument('domain_net_bios_name', type=str, help='The Active Directory domain\'s NetBIOS name.',
                   arg_group='Directory Services Settings Active Directory')
        c.argument('cache_net_bios_name', type=str, help='The NetBIOS name to assign to the HPC Cache when it joins '
                   'the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].',
                   arg_group='Directory Services Settings Active Directory')
        c.argument('cache_active_directory_settings_credentials', action=AddCacheActiveDirectorySettingsCredentials,
                   nargs='+', help='Active Directory admin credentials used to join the HPC Cache to a domain.',
                   arg_group='Directory Services Settings Active Directory')
        c.argument('access_policies', action=AddAccessPolicies, nargs='+', help='NFS access policies defined for this '
                   'cache.', arg_group='Security Settings')
        c.argument('key_url', type=str, help='The URL referencing a key encryption key in Key Vault.',
                   arg_group='Encryption Settings Key Encryption Key')
        c.argument('id_', options_list=['--id'], type=str, help='Resource Id.', arg_group='Encryption Settings Key '
                   'Encryption Key Source Vault')
        c.argument('name', type=str, help='SKU name for this Cache.', arg_group='Sku')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'None']), help='The '
                   'type of identity used for the cache', arg_group='Identity')

    with self.argument_context('storagecache update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('cache_size_gb', type=int, help='The size of this Cache, in GB.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating',
                                                                 'Deleting', 'Updating']), help='ARM provisioning '
                   'state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisi'
                   'oningstate-property')
        c.argument('subnet', type=str, help='Subnet used for the Cache.')
        c.argument('network_settings', action=AddNetworkSettings, nargs='+', help='Specifies network settings of the '
                   'cache.')
        c.argument('extended_groups', arg_type=get_three_state_flag(), help='Whether or not Extended Groups is '
                   'enabled.', arg_group='Directory Services Settings Username Download')
        c.argument('username_source', arg_type=get_enum_type(['AD', 'LDAP', 'File', 'None']), help='This setting '
                   'determines how the cache gets username and group names for clients.', arg_group='Directory '
                   'Services Settings Username Download')
        c.argument('group_file_uri', type=str, help='The URI of the file containing group information (in /etc/group '
                   'file format). This field must be populated when \'usernameSource\' is set to \'File\'.',
                   arg_group='Directory Services Settings Username Download')
        c.argument('user_file_uri', type=str, help='The URI of the file containing user information (in /etc/passwd '
                   'file format). This field must be populated when \'usernameSource\' is set to \'File\'.',
                   arg_group='Directory Services Settings Username Download')
        c.argument('ldap_server', type=str, help='The fully qualified domain name or IP address of the LDAP server to '
                   'use.', arg_group='Directory Services Settings Username Download')
        c.argument('ldap_base_dn', type=str, help='The base distinguished name for the LDAP domain.',
                   arg_group='Directory Services Settings Username Download')
        c.argument('encrypt_ldap_connection', arg_type=get_three_state_flag(), help='Whether or not the LDAP '
                   'connection should be encrypted.', arg_group='Directory Services Settings Username Download')
        c.argument('require_valid_certificate', arg_type=get_three_state_flag(), help='Determines if the certificates '
                   'must be validated by a certificate authority. When true, caCertificateURI must be provided.',
                   arg_group='Directory Services Settings Username Download')
        c.argument('auto_download_certificate', arg_type=get_three_state_flag(), help='Determines if the certificate '
                   'should be automatically downloaded. This applies to \'caCertificateURI\' only if '
                   '\'requireValidCertificate\' is true.', arg_group='Directory Services Settings Username Download')
        c.argument('ca_certificate_uri', type=str, help='The URI of the CA certificate to validate the LDAP secure '
                   'connection. This field must be populated when \'requireValidCertificate\' is set to true.',
                   arg_group='Directory Services Settings Username Download')
        c.argument('credentials', action=AddCredentials, nargs='+', help='When present, these are the credentials for '
                   'the secure LDAP connection.', arg_group='Directory Services Settings Username Download')
        c.argument('primary_dns_ip_address', type=str, help='Primary DNS IP address used to resolve the Active '
                   'Directory domain controller\'s fully qualified domain name.', arg_group='Directory Services '
                   'Settings Active Directory')
        c.argument('secondary_dns_ip_address', type=str, help='Secondary DNS IP address used to resolve the Active '
                   'Directory domain controller\'s fully qualified domain name.', arg_group='Directory Services '
                   'Settings Active Directory')
        c.argument('domain_name', type=str, help='The fully qualified domain name of the Active Directory domain '
                   'controller.', arg_group='Directory Services Settings Active Directory')
        c.argument('domain_net_bios_name', type=str, help='The Active Directory domain\'s NetBIOS name.',
                   arg_group='Directory Services Settings Active Directory')
        c.argument('cache_net_bios_name', type=str, help='The NetBIOS name to assign to the HPC Cache when it joins '
                   'the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].',
                   arg_group='Directory Services Settings Active Directory')
        c.argument('cache_active_directory_settings_credentials', action=AddCacheActiveDirectorySettingsCredentials,
                   nargs='+', help='Active Directory admin credentials used to join the HPC Cache to a domain.',
                   arg_group='Directory Services Settings Active Directory')
        c.argument('access_policies', action=AddAccessPolicies, nargs='+', help='NFS access policies defined for this '
                   'cache.', arg_group='Security Settings')
        c.argument('key_url', type=str, help='The URL referencing a key encryption key in Key Vault.',
                   arg_group='Encryption Settings Key Encryption Key')
        c.argument('id_', options_list=['--id'], type=str, help='Resource Id.', arg_group='Encryption Settings Key '
                   'Encryption Key Source Vault')
        c.argument('name', type=str, help='SKU name for this Cache.', arg_group='Sku')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'None']), help='The '
                   'type of identity used for the cache', arg_group='Identity')

    with self.argument_context('storagecache delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache debug-info') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache flush') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache start') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache stop') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache upgrade-firmware') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache storage-target list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache storage-target show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of Storage Target.')

    with self.argument_context('storagecache storage-target create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of Storage Target.')
        c.argument('junctions', action=AddJunctions, nargs='+', help='List of Cache namespace junctions to target for '
                   'namespace associations.')
        c.argument('target_type', arg_type=get_enum_type(['nfs3', 'clfs', 'unknown', 'blobNfs']), help='Type of the '
                   'Storage Target.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating',
                                                                 'Deleting', 'Updating']), help='ARM provisioning '
                   'state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisi'
                   'oningstate-property')
        c.argument('nfs3', action=AddNfs3, nargs='+', help='Properties when targetType is nfs3.')
        c.argument('blob_nfs', action=AddBlobNfs, nargs='+', help='Properties when targetType is blobNfs.')
        c.argument('attributes', action=AddAttributes, nargs='+', help='Dictionary of string->string pairs containing '
                   'information about the Storage Target. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...',
                   arg_group='Unknown')
        c.argument('target', type=str, help='Resource ID of storage container.', arg_group='Clfs')

    with self.argument_context('storagecache storage-target update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of Storage Target.')
        c.argument('junctions', action=AddJunctions, nargs='+', help='List of Cache namespace junctions to target for '
                   'namespace associations.')
        c.argument('target_type', arg_type=get_enum_type(['nfs3', 'clfs', 'unknown', 'blobNfs']), help='Type of the '
                   'Storage Target.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating',
                                                                 'Deleting', 'Updating']), help='ARM provisioning '
                   'state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisi'
                   'oningstate-property')
        c.argument('nfs3', action=AddNfs3, nargs='+', help='Properties when targetType is nfs3.')
        c.argument('blob_nfs', action=AddBlobNfs, nargs='+', help='Properties when targetType is blobNfs.')
        c.argument('attributes', action=AddAttributes, nargs='+', help='Dictionary of string->string pairs containing '
                   'information about the Storage Target. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...',
                   arg_group='Unknown')
        c.argument('target', type=str, help='Resource ID of storage container.', arg_group='Clfs')
        c.ignore('storagetarget')

    with self.argument_context('storagecache storage-target delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of Storage Target.')

    with self.argument_context('storagecache storage-target dns-refresh') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of Storage Target.')

    with self.argument_context('storagecache storage-target wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must not be greater than 80 and chars '
                   'must be from the [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of Storage Target.')
