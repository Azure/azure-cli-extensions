# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from knack.arguments import CLIArgumentType
from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_storagecache.action import (
    AddIdentity,
    AddSku,
    AddUpgradeStatus,
    AddNetworkSettings,
    AddSecuritySettings,
    AddJunctions,
    AddNfs3,
    AddClfs
)


def load_arguments(self, _):

    with self.argument_context('storagecache sku list') as c:
        pass

    with self.argument_context('storagecache usage-model list') as c:
        pass

    with self.argument_context('storagecache asc-operation show') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('operation_id', help='The operation id which uniquely identifies the asynchronous operation.')

    with self.argument_context('storagecache cache list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('storagecache cache show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', help='Name of Cache. Length of name must be not greater than 80 and chars must be in l'
                   'ist of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', help='Name of Cache. Length of name must be not greater than 80 and chars must be in l'
                   'ist of [-0-9a-zA-Z_] char class.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('identity', action=AddIdentity, nargs='+', help='The identity of the cache, if configured. Expect va'
                   'lue: type=xx.')
        c.argument('sku', action=AddSku, nargs='+', help='SKU for the Cache. Expect value: name=xx.')
        c.argument('cache_size_gb', help='The size of this Cache, in GB.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating', 'Delet'
                   'ing', 'Updating']), help='ARM provisioning state, see https://github.com/Azure/azure-resource-manag'
                   'er-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property')
        c.argument('subnet', help='Subnet used for the Cache.')
        c.argument('upgrade_status', action=AddUpgradeStatus, nargs='+', help='Upgrade status of the Cache. Expect valu'
                   'e: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('network_settings', action=AddNetworkSettings, nargs='+', help='Specifies network settings of the ca'
                   'che. Expect value: mtu=xx.')
        c.argument('encryption_settings', arg_type=CLIArgumentType(options_list=['--encryption-settings'], help='Specif'
                   'ies encryption settings of the cache. Expected value: json-string/@json-file.'))
        c.argument('security_settings', action=AddSecuritySettings, nargs='+', help='Specifies security settings of the'
                   ' cache. Expect value: root-squash=xx.')

    with self.argument_context('storagecache cache update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', help='Name of Cache. Length of name must be not greater than 80 and chars must be in l'
                   'ist of [-0-9a-zA-Z_] char class.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('identity', action=AddIdentity, nargs='+', help='The identity of the cache, if configured. Expect va'
                   'lue: type=xx.')
        c.argument('sku', action=AddSku, nargs='+', help='SKU for the Cache. Expect value: name=xx.')
        c.argument('cache_size_gb', help='The size of this Cache, in GB.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating', 'Delet'
                   'ing', 'Updating']), help='ARM provisioning state, see https://github.com/Azure/azure-resource-manag'
                   'er-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property')
        c.argument('subnet', help='Subnet used for the Cache.')
        c.argument('upgrade_status', action=AddUpgradeStatus, nargs='+', help='Upgrade status of the Cache. Expect valu'
                   'e: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('network_settings', action=AddNetworkSettings, nargs='+', help='Specifies network settings of the ca'
                   'che. Expect value: mtu=xx.')
        c.argument('encryption_settings', arg_type=CLIArgumentType(options_list=['--encryption-settings'], help='Specif'
                   'ies encryption settings of the cache. Expected value: json-string/@json-file.'))
        c.argument('security_settings', action=AddSecuritySettings, nargs='+', help='Specifies security settings of the'
                   ' cache. Expect value: root-squash=xx.')

    with self.argument_context('storagecache cache delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', help='Name of Cache. Length of name must be not greater than 80 and chars must be in l'
                   'ist of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache flush') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', help='Name of Cache. Length of name must be not greater than 80 and chars must be in l'
                   'ist of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache start') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', help='Name of Cache. Length of name must be not greater than 80 and chars must be in l'
                   'ist of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache stop') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', help='Name of Cache. Length of name must be not greater than 80 and chars must be in l'
                   'ist of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache upgrade-firmware') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', help='Name of Cache. Length of name must be not greater than 80 and chars must be in l'
                   'ist of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache storage-target list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', help='Name of Cache. Length of name must be not greater than 80 and chars must be in l'
                   'ist of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache storage-target show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', help='Name of Cache. Length of name must be not greater than 80 and chars must be in l'
                   'ist of [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', help='Name of the Storage Target. Length of name must be not greater than 80 '
                   'and chars must be in list of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache storage-target create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', help='Name of Cache. Length of name must be not greater than 80 and chars must be in l'
                   'ist of [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', help='Name of the Storage Target. Length of name must be not greater than 80 '
                   'and chars must be in list of [-0-9a-zA-Z_] char class.')
        c.argument('target_base_type', arg_type=get_enum_type(['nfs3', 'clfs', 'unknown']), help='Type of the Storage T'
                   'arget.')
        c.argument('junctions', action=AddJunctions, nargs='+', help='List of Cache namespace junctions to target for n'
                   'amespace associations. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: namespace-pa'
                   'th, target-path, nfs-export.')
        c.argument('target_type', help='Type of the Storage Target.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating', 'Delet'
                   'ing', 'Updating']), help='ARM provisioning state, see https://github.com/Azure/azure-resource-manag'
                   'er-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property')
        c.argument('nfs3', action=AddNfs3, nargs='+', help='Properties when targetType is nfs3. Expect value: KEY1=VALU'
                   'E1 KEY2=VALUE2 ... , available KEYs are: target, usage-model.')
        c.argument('clfs', action=AddClfs, nargs='+', help='Properties when targetType is clfs. Expect value: target=xx'
                   '.')
        c.argument('unknown', arg_type=CLIArgumentType(options_list=['--unknown'], help='Properties when targetType is '
                   'unknown. Expected value: json-string/@json-file.'))

    with self.argument_context('storagecache storage-target update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', help='Name of Cache. Length of name must be not greater than 80 and chars must be in l'
                   'ist of [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', help='Name of the Storage Target. Length of name must be not greater than 80 '
                   'and chars must be in list of [-0-9a-zA-Z_] char class.')
        c.argument('target_base_type', arg_type=get_enum_type(['nfs3', 'clfs', 'unknown']), help='Type of the Storage T'
                   'arget.')
        c.argument('junctions', action=AddJunctions, nargs='+', help='List of Cache namespace junctions to target for n'
                   'amespace associations. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: namespace-pa'
                   'th, target-path, nfs-export.')
        c.argument('target_type', help='Type of the Storage Target.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating', 'Delet'
                   'ing', 'Updating']), help='ARM provisioning state, see https://github.com/Azure/azure-resource-manag'
                   'er-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property')
        c.argument('nfs3', action=AddNfs3, nargs='+', help='Properties when targetType is nfs3. Expect value: KEY1=VALU'
                   'E1 KEY2=VALUE2 ... , available KEYs are: target, usage-model.')
        c.argument('clfs', action=AddClfs, nargs='+', help='Properties when targetType is clfs. Expect value: target=xx'
                   '.')
        c.argument('unknown', arg_type=CLIArgumentType(options_list=['--unknown'], help='Properties when targetType is '
                   'unknown. Expected value: json-string/@json-file.'))

    with self.argument_context('storagecache storage-target delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', help='Name of Cache. Length of name must be not greater than 80 and chars must be in l'
                   'ist of [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', help='Name of Storage Target.')
