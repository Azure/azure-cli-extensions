# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import (
    get_default_location_from_resource_group,
    validate_file_or_dict
)
from azext_storagecache.action import (
    AddJunctions,
    AddNfs3,
    AddUnknownUnknownMap
)


def load_arguments(self, _):

    with self.argument_context('storagecache asc-operation show') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='name')
        c.argument('operation_id', type=str, help='The operation id which uniquely identifies the asynchronous '
                   'operation.', id_part='child_name_1')

    with self.argument_context('storagecache cache list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('storagecache cache show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must be not greater than 80 and chars '
                   'must be in list of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must be not greater than 80 and chars '
                   'must be in list of [-0-9a-zA-Z_] char class.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('cache_size_gb', type=int, help='The size of this Cache, in GB.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating', ''
                                                                 'Deleting', 'Updating']), help='ARM provisioning '
                   'state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisi'
                   'oningstate-property')
        c.argument('subnet', type=str, help='Subnet used for the Cache.')
        c.argument('security_settings_root_squash', arg_type=get_three_state_flag(), help='root squash of cache '
                   'property.')
        c.argument('encryption_settings_key_encryption_key', type=validate_file_or_dict, help='Specifies the location '
                   'of the key encryption key in Key Vault. Expected value: json-string/@json-file.')
        c.argument('network_settings_mtu', type=int, help='The IPv4 maximum transmission unit configured for the '
                   'subnet.')
        c.argument('sku_name', type=str, help='SKU name for this Cache.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'None']), help='The type of identity '
                   'used for the cache')

    with self.argument_context('storagecache cache update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must be not greater than 80 and chars '
                   'must be in list of [-0-9a-zA-Z_] char class.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('cache_size_gb', type=int, help='The size of this Cache, in GB.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating', ''
                                                                 'Deleting', 'Updating']), help='ARM provisioning '
                   'state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisi'
                   'oningstate-property')
        c.argument('subnet', type=str, help='Subnet used for the Cache.')
        c.argument('security_settings_root_squash', arg_type=get_three_state_flag(), help='root squash of cache '
                   'property.')
        c.argument('encryption_settings_key_encryption_key', type=validate_file_or_dict, help='Specifies the location '
                   'of the key encryption key in Key Vault. Expected value: json-string/@json-file.')
        c.argument('network_settings_mtu', type=int, help='The IPv4 maximum transmission unit configured for the '
                   'subnet.')
        c.argument('sku_name', type=str, help='SKU name for this Cache.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'None']), help='The type of identity '
                   'used for the cache')

    with self.argument_context('storagecache cache delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must be not greater than 80 and chars '
                   'must be in list of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache flush') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must be not greater than 80 and chars '
                   'must be in list of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache start') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must be not greater than 80 and chars '
                   'must be in list of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache stop') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must be not greater than 80 and chars '
                   'must be in list of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache upgrade-firmware') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must be not greater than 80 and chars '
                   'must be in list of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache cache wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must be not greater than 80 and chars '
                   'must be in list of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache storage-target list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must be not greater than 80 and chars '
                   'must be in list of [-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache storage-target show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must be not greater than 80 and chars '
                   'must be in list of [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of the Storage Target. Length of name must be not greater than 80 and chars must be in list of '
                   '[-0-9a-zA-Z_] char class.')

    with self.argument_context('storagecache storage-target create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must be not greater than 80 and chars '
                   'must be in list of [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of the Storage Target. Length of name must be not greater than 80 and chars must be in list of '
                   '[-0-9a-zA-Z_] char class.')
        c.argument('junctions', action=AddJunctions, nargs='*', help='List of Cache namespace junctions to target for '
                   'namespace associations.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating', ''
                                                                 'Deleting', 'Updating']), help='ARM provisioning '
                   'state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisi'
                   'oningstate-property')
        c.argument('nfs3', action=AddNfs3, nargs='*', help='Properties when targetType is nfs3.')
        c.argument('unknown_unknown_map', action=AddUnknownUnknownMap, nargs='*', help='Dictionary of string->string '
                   'pairs containing information about the Storage Target. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('clfs_target', type=str, help='Resource ID of storage container.')

    with self.argument_context('storagecache storage-target update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must be not greater than 80 and chars '
                   'must be in list of [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of the Storage Target. Length of name must be not greater than 80 and chars must be in list of '
                   '[-0-9a-zA-Z_] char class.')
        c.argument('junctions', action=AddJunctions, nargs='*', help='List of Cache namespace junctions to target for '
                   'namespace associations.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Cancelled', 'Creating', ''
                                                                 'Deleting', 'Updating']), help='ARM provisioning '
                   'state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisi'
                   'oningstate-property')
        c.argument('nfs3', action=AddNfs3, nargs='*', help='Properties when targetType is nfs3.')
        c.argument('unknown_unknown_map', action=AddUnknownUnknownMap, nargs='*', help='Dictionary of string->string '
                   'pairs containing information about the Storage Target. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('clfs_target', type=str, help='Resource ID of storage container.')

    with self.argument_context('storagecache storage-target delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must be not greater than 80 and chars '
                   'must be in list of [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of Storage Target.')

    with self.argument_context('storagecache storage-target wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cache_name', type=str, help='Name of Cache. Length of name must be not greater than 80 and chars '
                   'must be in list of [-0-9a-zA-Z_] char class.')
        c.argument('storage_target_name', options_list=['--name', '-n', '--storage-target-name'], type=str, help='Name '
                   'of the Storage Target. Length of name must be not greater than 80 and chars must be in list of '
                   '[-0-9a-zA-Z_] char class.')
