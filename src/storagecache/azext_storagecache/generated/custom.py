# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from azure.cli.core.util import sdk_no_wait


def storagecache_sku_list(client):
    return client.list()


def storagecache_usage_model_list(client):
    return client.list()


def storagecache_asc_operation_show(client,
                                    location,
                                    operation_id):
    return client.get(location=location,
                      operation_id=operation_id)


def storagecache_list(client,
                      resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list()


def storagecache_show(client,
                      resource_group_name,
                      cache_name):
    return client.get(resource_group_name=resource_group_name,
                      cache_name=cache_name)


def storagecache_create(client,
                        resource_group_name,
                        cache_name,
                        tags=None,
                        location=None,
                        cache_size_gb=None,
                        provisioning_state=None,
                        subnet=None,
                        network_settings=None,
                        extended_groups=None,
                        username_source=None,
                        group_file_uri=None,
                        user_file_uri=None,
                        ldap_server=None,
                        ldap_base_dn=None,
                        encrypt_ldap_connection=None,
                        require_valid_certificate=None,
                        auto_download_certificate=None,
                        ca_certificate_uri=None,
                        credentials=None,
                        primary_dns_ip_address=None,
                        secondary_dns_ip_address=None,
                        domain_name=None,
                        domain_net_bios_name=None,
                        cache_net_bios_name=None,
                        cache_active_directory_settings_credentials=None,
                        access_policies=None,
                        key_url=None,
                        id_=None,
                        name=None,
                        type_=None,
                        no_wait=False):
    if username_source is None:
        username_source = "None"
    cache = {}
    cache['tags'] = tags
    cache['location'] = location
    cache['cache_size_gb'] = cache_size_gb
    cache['provisioning_state'] = provisioning_state
    cache['subnet'] = subnet
    cache['network_settings'] = network_settings
    cache['username_download'] = {}
    cache['username_download']['extended_groups'] = extended_groups
    cache['username_download']['username_source'] = "None" if username_source is None else username_source
    cache['username_download']['group_file_uri'] = group_file_uri
    cache['username_download']['user_file_uri'] = user_file_uri
    cache['username_download']['ldap_server'] = ldap_server
    cache['username_download']['ldap_base_dn'] = ldap_base_dn
    cache['username_download']['encrypt_ldap_connection'] = encrypt_ldap_connection
    cache['username_download']['require_valid_certificate'] = require_valid_certificate
    cache['username_download']['auto_download_certificate'] = auto_download_certificate
    cache['username_download']['ca_certificate_uri'] = ca_certificate_uri
    cache['username_download']['credentials'] = credentials
    cache['active_directory'] = {}
    cache['active_directory']['primary_dns_ip_address'] = primary_dns_ip_address
    cache['active_directory']['secondary_dns_ip_address'] = secondary_dns_ip_address
    cache['active_directory']['domain_name'] = domain_name
    cache['active_directory']['domain_net_bios_name'] = domain_net_bios_name
    cache['active_directory']['cache_net_bios_name'] = cache_net_bios_name
    cache['active_directory']['credentials'] = cache_active_directory_settings_credentials
    cache['security_settings'] = {}
    cache['security_settings']['access_policies'] = access_policies
    cache['key_encryption_key'] = {}
    cache['key_encryption_key']['key_url'] = key_url
    cache['sku'] = {}
    cache['sku']['name'] = name
    cache['identity'] = {}
    cache['identity']['type'] = type_
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       cache_name=cache_name,
                       cache=cache)


def storagecache_update(client,
                        resource_group_name,
                        cache_name,
                        tags=None,
                        location=None,
                        cache_size_gb=None,
                        provisioning_state=None,
                        subnet=None,
                        network_settings=None,
                        extended_groups=None,
                        username_source=None,
                        group_file_uri=None,
                        user_file_uri=None,
                        ldap_server=None,
                        ldap_base_dn=None,
                        encrypt_ldap_connection=None,
                        require_valid_certificate=None,
                        auto_download_certificate=None,
                        ca_certificate_uri=None,
                        credentials=None,
                        primary_dns_ip_address=None,
                        secondary_dns_ip_address=None,
                        domain_name=None,
                        domain_net_bios_name=None,
                        cache_net_bios_name=None,
                        cache_active_directory_settings_credentials=None,
                        access_policies=None,
                        key_url=None,
                        id_=None,
                        name=None,
                        type_=None):
    if username_source is None:
        username_source = "None"
    cache = {}
    cache['tags'] = tags
    cache['location'] = location
    cache['cache_size_gb'] = cache_size_gb
    cache['provisioning_state'] = provisioning_state
    cache['subnet'] = subnet
    cache['network_settings'] = network_settings
    cache['username_download'] = {}
    cache['username_download']['extended_groups'] = extended_groups
    cache['username_download']['username_source'] = "None" if username_source is None else username_source
    cache['username_download']['group_file_uri'] = group_file_uri
    cache['username_download']['user_file_uri'] = user_file_uri
    cache['username_download']['ldap_server'] = ldap_server
    cache['username_download']['ldap_base_dn'] = ldap_base_dn
    cache['username_download']['encrypt_ldap_connection'] = encrypt_ldap_connection
    cache['username_download']['require_valid_certificate'] = require_valid_certificate
    cache['username_download']['auto_download_certificate'] = auto_download_certificate
    cache['username_download']['ca_certificate_uri'] = ca_certificate_uri
    cache['username_download']['credentials'] = credentials
    cache['active_directory'] = {}
    cache['active_directory']['primary_dns_ip_address'] = primary_dns_ip_address
    cache['active_directory']['secondary_dns_ip_address'] = secondary_dns_ip_address
    cache['active_directory']['domain_name'] = domain_name
    cache['active_directory']['domain_net_bios_name'] = domain_net_bios_name
    cache['active_directory']['cache_net_bios_name'] = cache_net_bios_name
    cache['active_directory']['credentials'] = cache_active_directory_settings_credentials
    cache['security_settings'] = {}
    cache['security_settings']['access_policies'] = access_policies
    cache['key_encryption_key'] = {}
    cache['key_encryption_key']['key_url'] = key_url
    cache['sku'] = {}
    cache['sku']['name'] = name
    cache['identity'] = {}
    cache['identity']['type'] = type_
    return client.update(resource_group_name=resource_group_name,
                         cache_name=cache_name,
                         cache=cache)


def storagecache_delete(client,
                        resource_group_name,
                        cache_name,
                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cache_name=cache_name)


def storagecache_debug_info(client,
                            resource_group_name,
                            cache_name,
                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_debug_info,
                       resource_group_name=resource_group_name,
                       cache_name=cache_name)


def storagecache_flush(client,
                       resource_group_name,
                       cache_name,
                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_flush,
                       resource_group_name=resource_group_name,
                       cache_name=cache_name)


def storagecache_start(client,
                       resource_group_name,
                       cache_name,
                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_start,
                       resource_group_name=resource_group_name,
                       cache_name=cache_name)


def storagecache_stop(client,
                      resource_group_name,
                      cache_name,
                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_stop,
                       resource_group_name=resource_group_name,
                       cache_name=cache_name)


def storagecache_upgrade_firmware(client,
                                  resource_group_name,
                                  cache_name,
                                  no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_upgrade_firmware,
                       resource_group_name=resource_group_name,
                       cache_name=cache_name)


def storagecache_storage_target_list(client,
                                     resource_group_name,
                                     cache_name):
    return client.list_by_cache(resource_group_name=resource_group_name,
                                cache_name=cache_name)


def storagecache_storage_target_show(client,
                                     resource_group_name,
                                     cache_name,
                                     storage_target_name):
    return client.get(resource_group_name=resource_group_name,
                      cache_name=cache_name,
                      storage_target_name=storage_target_name)


def storagecache_storage_target_create(client,
                                       resource_group_name,
                                       cache_name,
                                       storage_target_name,
                                       junctions=None,
                                       target_type=None,
                                       provisioning_state=None,
                                       nfs3=None,
                                       blob_nfs=None,
                                       attributes=None,
                                       target=None,
                                       no_wait=False):
    storagetarget = {}
    storagetarget['junctions'] = junctions
    storagetarget['target_type'] = target_type
    storagetarget['provisioning_state'] = provisioning_state
    storagetarget['nfs3'] = nfs3
    storagetarget['blob_nfs'] = blob_nfs
    storagetarget['unknown'] = {}
    storagetarget['unknown']['attributes'] = attributes
    storagetarget['clfs'] = {}
    storagetarget['clfs']['target'] = target
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       cache_name=cache_name,
                       storage_target_name=storage_target_name,
                       storagetarget=storagetarget)


def storagecache_storage_target_update(instance,
                                       resource_group_name,
                                       cache_name,
                                       storage_target_name,
                                       junctions=None,
                                       target_type=None,
                                       provisioning_state=None,
                                       nfs3=None,
                                       blob_nfs=None,
                                       attributes=None,
                                       target=None,
                                       no_wait=False):
    if junctions is not None:
        instance.junctions = junctions
    if target_type is not None:
        instance.target_type = target_type
    if provisioning_state is not None:
        instance.provisioning_state = provisioning_state
    if nfs3 is not None:
        instance.nfs3 = nfs3
    if blob_nfs is not None:
        instance.blob_nfs = blob_nfs
    if attributes is not None:
        instance.unknown.attributes = attributes
    if target is not None:
        instance.clfs.target = target
    return instance


def storagecache_storage_target_delete(client,
                                       resource_group_name,
                                       cache_name,
                                       storage_target_name,
                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cache_name=cache_name,
                       storage_target_name=storage_target_name)


def storagecache_storage_target_dns_refresh(client,
                                            resource_group_name,
                                            cache_name,
                                            storage_target_name,
                                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_dns_refresh,
                       resource_group_name=resource_group_name,
                       cache_name=cache_name,
                       storage_target_name=storage_target_name)
