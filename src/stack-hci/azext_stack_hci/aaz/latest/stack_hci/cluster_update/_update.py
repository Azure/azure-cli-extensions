# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "stack-hci cluster-update update",
)
class Update(AAZCommand):
    """Update specified Update

    :example: Update cluster update
        az stack-hci cluster-update update -g {rg} --cluster-name name -n updates-name --description test --package-size-in-mb 10 --additional-properties test --availability-type local --version 1.0.0 --display-name test --publisher clitest
    """

    _aaz_info = {
        "version": "2023-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.azurestackhci/clusters/{}/updates/{}", "2023-03-01"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cluster_name = AAZStrArg(
            options=["--cluster-name"],
            help="The name of the cluster.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.update_name = AAZStrArg(
            options=["-n", "--name", "--update-name"],
            help="The name of the Update",
            required=True,
            id_part="child_name_1",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.additional_properties = AAZStrArg(
            options=["--additional-properties"],
            arg_group="Properties",
            help="Extensible KV pairs serialized as a string. This is currently used to report the stamp OEM family and hardware model information when an update is flagged as Invalid for the stamp based on OEM type.",
            nullable=True,
        )
        _args_schema.availability_type = AAZStrArg(
            options=["--availability-type"],
            arg_group="Properties",
            help="Indicates the way the update content can be downloaded.",
            nullable=True,
            enum={"Local": "Local", "Notify": "Notify", "Online": "Online"},
        )
        _args_schema.component_versions = AAZListArg(
            options=["--component-versions"],
            arg_group="Properties",
            help="An array of component versions for a Solution Bundle update, and an empty array otherwise.  ",
            nullable=True,
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="Description of the update.",
            nullable=True,
        )
        _args_schema.display_name = AAZStrArg(
            options=["--display-name"],
            arg_group="Properties",
            help="Display name of the Update",
            nullable=True,
        )
        _args_schema.health_check_date = AAZDateTimeArg(
            options=["--health-check-date"],
            arg_group="Properties",
            help="Last time the package-specific checks were run.",
            nullable=True,
        )
        _args_schema.health_check_result = AAZListArg(
            options=["--health-check-result"],
            arg_group="Properties",
            help="An array of PrecheckResult objects.",
            nullable=True,
        )
        _args_schema.health_state = AAZStrArg(
            options=["--health-state"],
            arg_group="Properties",
            help="Overall health state for update-specific health checks.",
            nullable=True,
            enum={"Error": "Error", "Failure": "Failure", "InProgress": "InProgress", "Success": "Success", "Unknown": "Unknown", "Warning": "Warning"},
        )
        _args_schema.installed_date = AAZDateTimeArg(
            options=["--installed-date"],
            arg_group="Properties",
            help="Date that the update was installed.",
            nullable=True,
        )
        _args_schema.package_path = AAZStrArg(
            options=["--package-path"],
            arg_group="Properties",
            help="Path where the update package is available.",
            nullable=True,
        )
        _args_schema.package_size_in_mb = AAZFloatArg(
            options=["--package-size-in-mb"],
            arg_group="Properties",
            help="Size of the package. This value is a combination of the size from update metadata and size of the payload that results from the live scan operation for OS update content.",
            nullable=True,
        )
        _args_schema.package_type = AAZStrArg(
            options=["--package-type"],
            arg_group="Properties",
            help="Customer-visible type of the update.",
            nullable=True,
        )
        _args_schema.prerequisites = AAZListArg(
            options=["--prerequisites"],
            arg_group="Properties",
            help="If update State is HasPrerequisite, this property contains an array of objects describing prerequisite updates before installing this update. Otherwise, it is empty.",
            nullable=True,
        )
        _args_schema.publisher = AAZStrArg(
            options=["--publisher"],
            arg_group="Properties",
            help="Publisher of the update package.",
            nullable=True,
        )
        _args_schema.reboot_required = AAZStrArg(
            options=["--reboot-required"],
            arg_group="Properties",
            help="Reboot required",
            nullable=True,
            enum={"False": "False", "True": "True", "Unknown": "Unknown"},
        )
        _args_schema.release_link = AAZStrArg(
            options=["--release-link"],
            arg_group="Properties",
            help="Link to release notes for the update.",
            nullable=True,
        )
        _args_schema.state = AAZStrArg(
            options=["--state"],
            arg_group="Properties",
            help="State of the update as it relates to this stamp.",
            nullable=True,
            enum={"DownloadFailed": "DownloadFailed", "Downloading": "Downloading", "HasPrerequisite": "HasPrerequisite", "HealthCheckFailed": "HealthCheckFailed", "HealthChecking": "HealthChecking", "InstallationFailed": "InstallationFailed", "Installed": "Installed", "Installing": "Installing", "Invalid": "Invalid", "NotApplicableBecauseAnotherUpdateIsInProgress": "NotApplicableBecauseAnotherUpdateIsInProgress", "Obsolete": "Obsolete", "PreparationFailed": "PreparationFailed", "Preparing": "Preparing", "Ready": "Ready", "ReadyToInstall": "ReadyToInstall", "Recalled": "Recalled", "ScanFailed": "ScanFailed", "ScanInProgress": "ScanInProgress"},
        )
        _args_schema.version = AAZStrArg(
            options=["--version"],
            arg_group="Properties",
            help="Version of the update.",
            nullable=True,
        )

        component_versions = cls._args_schema.component_versions
        component_versions.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.component_versions.Element
        _element.last_updated = AAZDateTimeArg(
            options=["last-updated"],
            help="Last time this component was updated.",
            nullable=True,
        )
        _element.package_type = AAZStrArg(
            options=["package-type"],
            help="Package type",
            nullable=True,
        )
        _element.version = AAZStrArg(
            options=["version"],
            help="Package version",
            nullable=True,
        )

        health_check_result = cls._args_schema.health_check_result
        health_check_result.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.health_check_result.Element
        _element.additional_data = AAZStrArg(
            options=["additional-data"],
            help="Property bag of key value pairs for additional information.",
            nullable=True,
        )
        _element.description = AAZStrArg(
            options=["description"],
            help="Detailed overview of the issue and what impact the issue has on the stamp.",
            nullable=True,
        )
        _element.health_check_source = AAZStrArg(
            options=["health-check-source"],
            help="The name of the services called for the HealthCheck (I.E. Test-AzureStack, Test-Cluster).",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the individual test/rule/alert that was executed. Unique, not exposed to the customer.",
            nullable=True,
        )
        _element.remediation = AAZStrArg(
            options=["remediation"],
            help="Set of steps that can be taken to resolve the issue found.",
            nullable=True,
        )
        _element.severity = AAZStrArg(
            options=["severity"],
            help="Severity of the result (Critical, Warning, Informational, Hidden). This answers how important the result is. Critical is the only update-blocking severity.",
            nullable=True,
            enum={"Critical": "Critical", "Hidden": "Hidden", "Informational": "Informational", "Warning": "Warning"},
        )
        _element.status = AAZStrArg(
            options=["status"],
            help="The status of the check running (i.e. Failed, Succeeded, In Progress). This answers whether the check ran, and passed or failed.",
            nullable=True,
            enum={"Failed": "Failed", "InProgress": "InProgress", "Succeeded": "Succeeded"},
        )
        _element.tags = AAZObjectArg(
            options=["tags"],
            help="Key-value pairs that allow grouping/filtering individual tests.",
            nullable=True,
        )
        _element.target_resource_id = AAZStrArg(
            options=["target-resource-id"],
            help="The unique identifier for the affected resource (such as a node or drive).",
            nullable=True,
        )
        _element.target_resource_name = AAZStrArg(
            options=["target-resource-name"],
            help="The name of the affected resource.",
            nullable=True,
        )
        _element.timestamp = AAZDateTimeArg(
            options=["timestamp"],
            help="The Time in which the HealthCheck was called.",
            nullable=True,
        )
        _element.title = AAZStrArg(
            options=["title"],
            help="User-facing name; one or more sentences indicating the direct issue.",
            nullable=True,
        )

        tags = cls._args_schema.health_check_result.Element.tags
        tags.key = AAZStrArg(
            options=["key"],
            help="Key that allow grouping/filtering individual tests.",
            nullable=True,
        )
        tags.value = AAZStrArg(
            options=["value"],
            help="Value of the key that allow grouping/filtering individual tests.",
            nullable=True,
        )

        prerequisites = cls._args_schema.prerequisites
        prerequisites.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.prerequisites.Element
        _element.package_name = AAZStrArg(
            options=["package-name"],
            help="Friendly name of the prerequisite.",
            nullable=True,
        )
        _element.update_type = AAZStrArg(
            options=["update-type"],
            help="Updatable component type.",
            nullable=True,
        )
        _element.version = AAZStrArg(
            options=["version"],
            help="Version of the prerequisite.",
            nullable=True,
        )

        # define Arg Group "UpdateStateProperties"

        _args_schema = cls._args_schema
        _args_schema.notify_message = AAZStrArg(
            options=["--notify-message"],
            arg_group="UpdateStateProperties",
            help="Brief message with instructions for updates of AvailabilityType Notify.",
            nullable=True,
        )
        _args_schema.progress_percentage = AAZFloatArg(
            options=["--progress-percentage"],
            arg_group="UpdateStateProperties",
            help="Progress percentage of ongoing operation. Currently this property is only valid when the update is in the Downloading state, where it maps to how much of the update content has been downloaded.",
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.UpdatesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.UpdatesPut(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class UpdatesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/updates/{updateName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clusterName", self.ctx.args.cluster_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "updateName", self.ctx.args.update_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_update_read(cls._schema_on_200)

            return cls._schema_on_200

    class UpdatesPut(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/updates/{updateName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clusterName", self.ctx.args.cluster_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "updateName", self.ctx.args.update_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_update_read(cls._schema_on_200)

            return cls._schema_on_200

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("additionalProperties", AAZStrType, ".additional_properties")
                properties.set_prop("availabilityType", AAZStrType, ".availability_type")
                properties.set_prop("componentVersions", AAZListType, ".component_versions")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("healthCheckDate", AAZStrType, ".health_check_date")
                properties.set_prop("healthCheckResult", AAZListType, ".health_check_result")
                properties.set_prop("healthState", AAZStrType, ".health_state")
                properties.set_prop("installedDate", AAZStrType, ".installed_date")
                properties.set_prop("packagePath", AAZStrType, ".package_path")
                properties.set_prop("packageSizeInMb", AAZFloatType, ".package_size_in_mb")
                properties.set_prop("packageType", AAZStrType, ".package_type")
                properties.set_prop("prerequisites", AAZListType, ".prerequisites")
                properties.set_prop("publisher", AAZStrType, ".publisher")
                properties.set_prop("rebootRequired", AAZStrType, ".reboot_required")
                properties.set_prop("releaseLink", AAZStrType, ".release_link")
                properties.set_prop("state", AAZStrType, ".state")
                properties.set_prop("updateStateProperties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
                properties.set_prop("version", AAZStrType, ".version")

            component_versions = _builder.get(".properties.componentVersions")
            if component_versions is not None:
                component_versions.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.componentVersions[]")
            if _elements is not None:
                _elements.set_prop("lastUpdated", AAZStrType, ".last_updated")
                _elements.set_prop("packageType", AAZStrType, ".package_type")
                _elements.set_prop("version", AAZStrType, ".version")

            health_check_result = _builder.get(".properties.healthCheckResult")
            if health_check_result is not None:
                health_check_result.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.healthCheckResult[]")
            if _elements is not None:
                _elements.set_prop("additionalData", AAZStrType, ".additional_data")
                _elements.set_prop("description", AAZStrType, ".description")
                _elements.set_prop("healthCheckSource", AAZStrType, ".health_check_source")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("remediation", AAZStrType, ".remediation")
                _elements.set_prop("severity", AAZStrType, ".severity")
                _elements.set_prop("status", AAZStrType, ".status")
                _elements.set_prop("tags", AAZObjectType, ".tags")
                _elements.set_prop("targetResourceID", AAZStrType, ".target_resource_id")
                _elements.set_prop("targetResourceName", AAZStrType, ".target_resource_name")
                _elements.set_prop("timestamp", AAZStrType, ".timestamp")
                _elements.set_prop("title", AAZStrType, ".title")

            tags = _builder.get(".properties.healthCheckResult[].tags")
            if tags is not None:
                tags.set_prop("key", AAZStrType, ".key")
                tags.set_prop("value", AAZStrType, ".value")

            prerequisites = _builder.get(".properties.prerequisites")
            if prerequisites is not None:
                prerequisites.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.prerequisites[]")
            if _elements is not None:
                _elements.set_prop("packageName", AAZStrType, ".package_name")
                _elements.set_prop("updateType", AAZStrType, ".update_type")
                _elements.set_prop("version", AAZStrType, ".version")

            update_state_properties = _builder.get(".properties.updateStateProperties")
            if update_state_properties is not None:
                update_state_properties.set_prop("notifyMessage", AAZStrType, ".notify_message")
                update_state_properties.set_prop("progressPercentage", AAZFloatType, ".progress_percentage")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_update_read = None

    @classmethod
    def _build_schema_update_read(cls, _schema):
        if cls._schema_update_read is not None:
            _schema.id = cls._schema_update_read.id
            _schema.location = cls._schema_update_read.location
            _schema.name = cls._schema_update_read.name
            _schema.properties = cls._schema_update_read.properties
            _schema.system_data = cls._schema_update_read.system_data
            _schema.type = cls._schema_update_read.type
            return

        cls._schema_update_read = _schema_update_read = AAZObjectType()

        update_read = _schema_update_read
        update_read.id = AAZStrType(
            flags={"read_only": True},
        )
        update_read.location = AAZStrType()
        update_read.name = AAZStrType(
            flags={"read_only": True},
        )
        update_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        update_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        update_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_update_read.properties
        properties.additional_properties = AAZStrType(
            serialized_name="additionalProperties",
        )
        properties.availability_type = AAZStrType(
            serialized_name="availabilityType",
        )
        properties.component_versions = AAZListType(
            serialized_name="componentVersions",
        )
        properties.description = AAZStrType()
        properties.display_name = AAZStrType(
            serialized_name="displayName",
        )
        properties.health_check_date = AAZStrType(
            serialized_name="healthCheckDate",
        )
        properties.health_check_result = AAZListType(
            serialized_name="healthCheckResult",
        )
        properties.health_state = AAZStrType(
            serialized_name="healthState",
        )
        properties.installed_date = AAZStrType(
            serialized_name="installedDate",
        )
        properties.package_path = AAZStrType(
            serialized_name="packagePath",
        )
        properties.package_size_in_mb = AAZFloatType(
            serialized_name="packageSizeInMb",
        )
        properties.package_type = AAZStrType(
            serialized_name="packageType",
        )
        properties.prerequisites = AAZListType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.publisher = AAZStrType()
        properties.reboot_required = AAZStrType(
            serialized_name="rebootRequired",
        )
        properties.release_link = AAZStrType(
            serialized_name="releaseLink",
        )
        properties.state = AAZStrType()
        properties.update_state_properties = AAZObjectType(
            serialized_name="updateStateProperties",
            flags={"client_flatten": True},
        )
        properties.version = AAZStrType()

        component_versions = _schema_update_read.properties.component_versions
        component_versions.Element = AAZObjectType()

        _element = _schema_update_read.properties.component_versions.Element
        _element.last_updated = AAZStrType(
            serialized_name="lastUpdated",
        )
        _element.package_type = AAZStrType(
            serialized_name="packageType",
        )
        _element.version = AAZStrType()

        health_check_result = _schema_update_read.properties.health_check_result
        health_check_result.Element = AAZObjectType()

        _element = _schema_update_read.properties.health_check_result.Element
        _element.additional_data = AAZStrType(
            serialized_name="additionalData",
        )
        _element.description = AAZStrType()
        _element.health_check_source = AAZStrType(
            serialized_name="healthCheckSource",
        )
        _element.name = AAZStrType()
        _element.remediation = AAZStrType()
        _element.severity = AAZStrType()
        _element.status = AAZStrType()
        _element.tags = AAZObjectType()
        _element.target_resource_id = AAZStrType(
            serialized_name="targetResourceID",
        )
        _element.target_resource_name = AAZStrType(
            serialized_name="targetResourceName",
        )
        _element.timestamp = AAZStrType()
        _element.title = AAZStrType()

        tags = _schema_update_read.properties.health_check_result.Element.tags
        tags.key = AAZStrType()
        tags.value = AAZStrType()

        prerequisites = _schema_update_read.properties.prerequisites
        prerequisites.Element = AAZObjectType()

        _element = _schema_update_read.properties.prerequisites.Element
        _element.package_name = AAZStrType(
            serialized_name="packageName",
        )
        _element.update_type = AAZStrType(
            serialized_name="updateType",
        )
        _element.version = AAZStrType()

        update_state_properties = _schema_update_read.properties.update_state_properties
        update_state_properties.notify_message = AAZStrType(
            serialized_name="notifyMessage",
        )
        update_state_properties.progress_percentage = AAZFloatType(
            serialized_name="progressPercentage",
        )

        system_data = _schema_update_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        _schema.id = cls._schema_update_read.id
        _schema.location = cls._schema_update_read.location
        _schema.name = cls._schema_update_read.name
        _schema.properties = cls._schema_update_read.properties
        _schema.system_data = cls._schema_update_read.system_data
        _schema.type = cls._schema_update_read.type


__all__ = ["Update"]
