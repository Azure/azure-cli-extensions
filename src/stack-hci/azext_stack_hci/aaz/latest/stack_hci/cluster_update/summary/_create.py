# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "stack-hci cluster-update summary create",
)
class Create(AAZCommand):
    """Create Update summaries under the HCI cluster
    """

    _aaz_info = {
        "version": "2023-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.azurestackhci/clusters/{}/updatesummaries/default", "2023-03-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cluster_name = AAZStrArg(
            options=["--cluster-name"],
            help="The name of the cluster.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.current_version = AAZStrArg(
            options=["--current-version"],
            arg_group="Properties",
            help="Current Solution Bundle version of the stamp.",
        )
        _args_schema.hardware_model = AAZStrArg(
            options=["--hardware-model"],
            arg_group="Properties",
            help="Name of the hardware model.",
        )
        _args_schema.health_check_date = AAZDateTimeArg(
            options=["--health-check-date"],
            arg_group="Properties",
            help="Last time the package-specific checks were run.",
        )
        _args_schema.health_check_result = AAZListArg(
            options=["--health-check-result"],
            arg_group="Properties",
            help="An array of pre-check result objects.",
        )
        _args_schema.health_state = AAZStrArg(
            options=["--health-state"],
            arg_group="Properties",
            help="Overall health state for update-specific health checks.",
            enum={"Error": "Error", "Failure": "Failure", "InProgress": "InProgress", "Success": "Success", "Unknown": "Unknown", "Warning": "Warning"},
        )
        _args_schema.last_checked = AAZDateTimeArg(
            options=["--last-checked"],
            arg_group="Properties",
            help="Last time the update service successfully checked for updates",
        )
        _args_schema.last_updated = AAZDateTimeArg(
            options=["--last-updated"],
            arg_group="Properties",
            help="Last time an update installation completed successfully.",
        )
        _args_schema.oem_family = AAZStrArg(
            options=["--oem-family"],
            arg_group="Properties",
            help="OEM family name.",
        )
        _args_schema.package_versions = AAZListArg(
            options=["--package-versions"],
            arg_group="Properties",
            help="Current version of each updatable component.",
        )
        _args_schema.state = AAZStrArg(
            options=["--state"],
            arg_group="Properties",
            help="Overall update state of the stamp.",
            enum={"AppliedSuccessfully": "AppliedSuccessfully", "NeedsAttention": "NeedsAttention", "PreparationFailed": "PreparationFailed", "PreparationInProgress": "PreparationInProgress", "Unknown": "Unknown", "UpdateAvailable": "UpdateAvailable", "UpdateFailed": "UpdateFailed", "UpdateInProgress": "UpdateInProgress"},
        )

        health_check_result = cls._args_schema.health_check_result
        health_check_result.Element = AAZObjectArg()

        _element = cls._args_schema.health_check_result.Element
        _element.additional_data = AAZStrArg(
            options=["additional-data"],
            help="Property bag of key value pairs for additional information.",
        )
        _element.description = AAZStrArg(
            options=["description"],
            help="Detailed overview of the issue and what impact the issue has on the stamp.",
        )
        _element.health_check_source = AAZStrArg(
            options=["health-check-source"],
            help="The name of the services called for the HealthCheck (I.E. Test-AzureStack, Test-Cluster).",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the individual test/rule/alert that was executed. Unique, not exposed to the customer.",
        )
        _element.remediation = AAZStrArg(
            options=["remediation"],
            help="Set of steps that can be taken to resolve the issue found.",
        )
        _element.severity = AAZStrArg(
            options=["severity"],
            help="Severity of the result (Critical, Warning, Informational, Hidden). This answers how important the result is. Critical is the only update-blocking severity.",
            enum={"Critical": "Critical", "Hidden": "Hidden", "Informational": "Informational", "Warning": "Warning"},
        )
        _element.status = AAZStrArg(
            options=["status"],
            help="The status of the check running (i.e. Failed, Succeeded, In Progress). This answers whether the check ran, and passed or failed.",
            enum={"Failed": "Failed", "InProgress": "InProgress", "Succeeded": "Succeeded"},
        )
        _element.tags = AAZObjectArg(
            options=["tags"],
            help="Key-value pairs that allow grouping/filtering individual tests.",
        )
        _element.target_resource_id = AAZStrArg(
            options=["target-resource-id"],
            help="The unique identifier for the affected resource (such as a node or drive).",
        )
        _element.target_resource_name = AAZStrArg(
            options=["target-resource-name"],
            help="The name of the affected resource.",
        )
        _element.timestamp = AAZDateTimeArg(
            options=["timestamp"],
            help="The Time in which the HealthCheck was called.",
        )
        _element.title = AAZStrArg(
            options=["title"],
            help="User-facing name; one or more sentences indicating the direct issue.",
        )

        tags = cls._args_schema.health_check_result.Element.tags
        tags.key = AAZStrArg(
            options=["key"],
            help="Key that allow grouping/filtering individual tests.",
        )
        tags.value = AAZStrArg(
            options=["value"],
            help="Value of the key that allow grouping/filtering individual tests.",
        )

        package_versions = cls._args_schema.package_versions
        package_versions.Element = AAZObjectArg()

        _element = cls._args_schema.package_versions.Element
        _element.last_updated = AAZDateTimeArg(
            options=["last-updated"],
            help="Last time this component was updated.",
        )
        _element.package_type = AAZStrArg(
            options=["package-type"],
            help="Package type",
        )
        _element.version = AAZStrArg(
            options=["version"],
            help="Package version",
        )

        # define Arg Group "UpdateLocationProperties"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="UpdateLocationProperties",
            help="The geo-location where the resource lives",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.UpdateSummariesPut(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class UpdateSummariesPut(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/updateSummaries/default",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clusterName", self.ctx.args.cluster_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("currentVersion", AAZStrType, ".current_version")
                properties.set_prop("hardwareModel", AAZStrType, ".hardware_model")
                properties.set_prop("healthCheckDate", AAZStrType, ".health_check_date")
                properties.set_prop("healthCheckResult", AAZListType, ".health_check_result")
                properties.set_prop("healthState", AAZStrType, ".health_state")
                properties.set_prop("lastChecked", AAZStrType, ".last_checked")
                properties.set_prop("lastUpdated", AAZStrType, ".last_updated")
                properties.set_prop("oemFamily", AAZStrType, ".oem_family")
                properties.set_prop("packageVersions", AAZListType, ".package_versions")
                properties.set_prop("state", AAZStrType, ".state")

            health_check_result = _builder.get(".properties.healthCheckResult")
            if health_check_result is not None:
                health_check_result.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.healthCheckResult[]")
            if _elements is not None:
                _elements.set_prop("additionalData", AAZStrType, ".additional_data")
                _elements.set_prop("description", AAZStrType, ".description")
                _elements.set_prop("healthCheckSource", AAZStrType, ".health_check_source")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("remediation", AAZStrType, ".remediation")
                _elements.set_prop("severity", AAZStrType, ".severity")
                _elements.set_prop("status", AAZStrType, ".status")
                _elements.set_prop("tags", AAZObjectType, ".tags")
                _elements.set_prop("targetResourceID", AAZStrType, ".target_resource_id")
                _elements.set_prop("targetResourceName", AAZStrType, ".target_resource_name")
                _elements.set_prop("timestamp", AAZStrType, ".timestamp")
                _elements.set_prop("title", AAZStrType, ".title")

            tags = _builder.get(".properties.healthCheckResult[].tags")
            if tags is not None:
                tags.set_prop("key", AAZStrType, ".key")
                tags.set_prop("value", AAZStrType, ".value")

            package_versions = _builder.get(".properties.packageVersions")
            if package_versions is not None:
                package_versions.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.packageVersions[]")
            if _elements is not None:
                _elements.set_prop("lastUpdated", AAZStrType, ".last_updated")
                _elements.set_prop("packageType", AAZStrType, ".package_type")
                _elements.set_prop("version", AAZStrType, ".version")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType()
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.current_version = AAZStrType(
                serialized_name="currentVersion",
            )
            properties.hardware_model = AAZStrType(
                serialized_name="hardwareModel",
            )
            properties.health_check_date = AAZStrType(
                serialized_name="healthCheckDate",
            )
            properties.health_check_result = AAZListType(
                serialized_name="healthCheckResult",
            )
            properties.health_state = AAZStrType(
                serialized_name="healthState",
            )
            properties.last_checked = AAZStrType(
                serialized_name="lastChecked",
            )
            properties.last_updated = AAZStrType(
                serialized_name="lastUpdated",
            )
            properties.oem_family = AAZStrType(
                serialized_name="oemFamily",
            )
            properties.package_versions = AAZListType(
                serialized_name="packageVersions",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.state = AAZStrType()

            health_check_result = cls._schema_on_200.properties.health_check_result
            health_check_result.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.health_check_result.Element
            _element.additional_data = AAZStrType(
                serialized_name="additionalData",
            )
            _element.description = AAZStrType()
            _element.health_check_source = AAZStrType(
                serialized_name="healthCheckSource",
            )
            _element.name = AAZStrType()
            _element.remediation = AAZStrType()
            _element.severity = AAZStrType()
            _element.status = AAZStrType()
            _element.tags = AAZObjectType()
            _element.target_resource_id = AAZStrType(
                serialized_name="targetResourceID",
            )
            _element.target_resource_name = AAZStrType(
                serialized_name="targetResourceName",
            )
            _element.timestamp = AAZStrType()
            _element.title = AAZStrType()

            tags = cls._schema_on_200.properties.health_check_result.Element.tags
            tags.key = AAZStrType()
            tags.value = AAZStrType()

            package_versions = cls._schema_on_200.properties.package_versions
            package_versions.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.package_versions.Element
            _element.last_updated = AAZStrType(
                serialized_name="lastUpdated",
            )
            _element.package_type = AAZStrType(
                serialized_name="packageType",
            )
            _element.version = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
