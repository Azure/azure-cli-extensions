# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "stack-hci cluster-update update-run update",
)
class Update(AAZCommand):
    """Update Update runs for a specified update
    """

    _aaz_info = {
        "version": "2023-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.azurestackhci/clusters/{}/updates/{}/updateruns/{}", "2023-03-01"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cluster_name = AAZStrArg(
            options=["--cluster-name"],
            help="The name of the cluster.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.update_name = AAZStrArg(
            options=["--update-name"],
            help="The name of the Update",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.update_run_name = AAZStrArg(
            options=["-n", "--name", "--update-run-name"],
            help="The name of the Update Run",
            required=True,
            id_part="child_name_2",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.duration = AAZStrArg(
            options=["--duration"],
            arg_group="Properties",
            help="Duration of the update run.",
            nullable=True,
        )
        _args_schema.last_updated_time = AAZDateTimeArg(
            options=["--last-updated-time"],
            arg_group="Properties",
            help="Timestamp of the most recently completed step in the update run.",
            nullable=True,
        )
        _args_schema.progress = AAZObjectArg(
            options=["--progress"],
            arg_group="Properties",
            help="Progress representation of the update run steps.",
            nullable=True,
        )
        cls._build_args_step_update(_args_schema.progress)
        _args_schema.state = AAZStrArg(
            options=["--state"],
            arg_group="Properties",
            help="State of the update run.",
            nullable=True,
            enum={"Failed": "Failed", "InProgress": "InProgress", "Succeeded": "Succeeded", "Unknown": "Unknown"},
        )
        _args_schema.time_started = AAZDateTimeArg(
            options=["--time-started"],
            arg_group="Properties",
            help="Timestamp of the update run was started.",
            nullable=True,
        )
        return cls._args_schema

    _args_step_update = None

    @classmethod
    def _build_args_step_update(cls, _schema):
        if cls._args_step_update is not None:
            _schema.description = cls._args_step_update.description
            _schema.end_time_utc = cls._args_step_update.end_time_utc
            _schema.error_message = cls._args_step_update.error_message
            _schema.last_updated_time_utc = cls._args_step_update.last_updated_time_utc
            _schema.name = cls._args_step_update.name
            _schema.start_time_utc = cls._args_step_update.start_time_utc
            _schema.status = cls._args_step_update.status
            _schema.steps = cls._args_step_update.steps
            return

        cls._args_step_update = AAZObjectArg(
            nullable=True,
        )

        step_update = cls._args_step_update
        step_update.description = AAZStrArg(
            options=["description"],
            help="More detailed description of the step.",
            nullable=True,
        )
        step_update.end_time_utc = AAZDateTimeArg(
            options=["end-time-utc"],
            help="When the step reached a terminal state.",
            nullable=True,
        )
        step_update.error_message = AAZStrArg(
            options=["error-message"],
            help="Error message, specified if the step is in a failed state.",
            nullable=True,
        )
        step_update.last_updated_time_utc = AAZDateTimeArg(
            options=["last-updated-time-utc"],
            help="Completion time of this step or the last completed sub-step.",
            nullable=True,
        )
        step_update.name = AAZStrArg(
            options=["name"],
            help="Name of the step.",
            nullable=True,
        )
        step_update.start_time_utc = AAZDateTimeArg(
            options=["start-time-utc"],
            help="When the step started, or empty if it has not started executing.",
            nullable=True,
        )
        step_update.status = AAZStrArg(
            options=["status"],
            help="Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'.",
            nullable=True,
        )
        step_update.steps = AAZListArg(
            options=["steps"],
            help="Recursive model for child steps of this step.",
            nullable=True,
        )

        steps = cls._args_step_update.steps
        steps.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_step_update(steps.Element)

        _schema.description = cls._args_step_update.description
        _schema.end_time_utc = cls._args_step_update.end_time_utc
        _schema.error_message = cls._args_step_update.error_message
        _schema.last_updated_time_utc = cls._args_step_update.last_updated_time_utc
        _schema.name = cls._args_step_update.name
        _schema.start_time_utc = cls._args_step_update.start_time_utc
        _schema.status = cls._args_step_update.status
        _schema.steps = cls._args_step_update.steps

    def _execute_operations(self):
        self.pre_operations()
        self.UpdateRunsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.UpdateRunsPut(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class UpdateRunsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/updates/{updateName}/updateRuns/{updateRunName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clusterName", self.ctx.args.cluster_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "updateName", self.ctx.args.update_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "updateRunName", self.ctx.args.update_run_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_update_run_read(cls._schema_on_200)

            return cls._schema_on_200

    class UpdateRunsPut(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/updates/{updateName}/updateRuns/{updateRunName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clusterName", self.ctx.args.cluster_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "updateName", self.ctx.args.update_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "updateRunName", self.ctx.args.update_run_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_update_run_read(cls._schema_on_200)

            return cls._schema_on_200

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("duration", AAZStrType, ".duration")
                properties.set_prop("lastUpdatedTime", AAZStrType, ".last_updated_time")
                _UpdateHelper._build_schema_step_update(properties.set_prop("progress", AAZObjectType, ".progress"))
                properties.set_prop("state", AAZStrType, ".state")
                properties.set_prop("timeStarted", AAZStrType, ".time_started")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_step_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("description", AAZStrType, ".description")
        _builder.set_prop("endTimeUtc", AAZStrType, ".end_time_utc")
        _builder.set_prop("errorMessage", AAZStrType, ".error_message")
        _builder.set_prop("lastUpdatedTimeUtc", AAZStrType, ".last_updated_time_utc")
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("startTimeUtc", AAZStrType, ".start_time_utc")
        _builder.set_prop("status", AAZStrType, ".status")
        _builder.set_prop("steps", AAZListType, ".steps")

        steps = _builder.get(".steps")
        if steps is not None:
            cls._build_schema_step_update(steps.set_elements(AAZObjectType, "."))

    _schema_step_read = None

    @classmethod
    def _build_schema_step_read(cls, _schema):
        if cls._schema_step_read is not None:
            _schema.description = cls._schema_step_read.description
            _schema.end_time_utc = cls._schema_step_read.end_time_utc
            _schema.error_message = cls._schema_step_read.error_message
            _schema.last_updated_time_utc = cls._schema_step_read.last_updated_time_utc
            _schema.name = cls._schema_step_read.name
            _schema.start_time_utc = cls._schema_step_read.start_time_utc
            _schema.status = cls._schema_step_read.status
            _schema.steps = cls._schema_step_read.steps
            return

        cls._schema_step_read = _schema_step_read = AAZObjectType()

        step_read = _schema_step_read
        step_read.description = AAZStrType()
        step_read.end_time_utc = AAZStrType(
            serialized_name="endTimeUtc",
        )
        step_read.error_message = AAZStrType(
            serialized_name="errorMessage",
        )
        step_read.last_updated_time_utc = AAZStrType(
            serialized_name="lastUpdatedTimeUtc",
        )
        step_read.name = AAZStrType()
        step_read.start_time_utc = AAZStrType(
            serialized_name="startTimeUtc",
        )
        step_read.status = AAZStrType()
        step_read.steps = AAZListType()

        steps = _schema_step_read.steps
        steps.Element = AAZObjectType()
        cls._build_schema_step_read(steps.Element)

        _schema.description = cls._schema_step_read.description
        _schema.end_time_utc = cls._schema_step_read.end_time_utc
        _schema.error_message = cls._schema_step_read.error_message
        _schema.last_updated_time_utc = cls._schema_step_read.last_updated_time_utc
        _schema.name = cls._schema_step_read.name
        _schema.start_time_utc = cls._schema_step_read.start_time_utc
        _schema.status = cls._schema_step_read.status
        _schema.steps = cls._schema_step_read.steps

    _schema_update_run_read = None

    @classmethod
    def _build_schema_update_run_read(cls, _schema):
        if cls._schema_update_run_read is not None:
            _schema.id = cls._schema_update_run_read.id
            _schema.location = cls._schema_update_run_read.location
            _schema.name = cls._schema_update_run_read.name
            _schema.properties = cls._schema_update_run_read.properties
            _schema.system_data = cls._schema_update_run_read.system_data
            _schema.type = cls._schema_update_run_read.type
            return

        cls._schema_update_run_read = _schema_update_run_read = AAZObjectType()

        update_run_read = _schema_update_run_read
        update_run_read.id = AAZStrType(
            flags={"read_only": True},
        )
        update_run_read.location = AAZStrType()
        update_run_read.name = AAZStrType(
            flags={"read_only": True},
        )
        update_run_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        update_run_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        update_run_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_update_run_read.properties
        properties.duration = AAZStrType()
        properties.last_updated_time = AAZStrType(
            serialized_name="lastUpdatedTime",
        )
        properties.progress = AAZObjectType()
        cls._build_schema_step_read(properties.progress)
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.state = AAZStrType()
        properties.time_started = AAZStrType(
            serialized_name="timeStarted",
        )

        system_data = _schema_update_run_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        _schema.id = cls._schema_update_run_read.id
        _schema.location = cls._schema_update_run_read.location
        _schema.name = cls._schema_update_run_read.name
        _schema.properties = cls._schema_update_run_read.properties
        _schema.system_data = cls._schema_update_run_read.system_data
        _schema.type = cls._schema_update_run_read.type


__all__ = ["Update"]
