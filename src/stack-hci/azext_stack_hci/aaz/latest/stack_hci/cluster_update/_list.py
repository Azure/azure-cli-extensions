# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "stack-hci cluster-update list",
)
class List(AAZCommand):
    """List all Updates

    :example: List cluster update
        az stack-hci cluster-update list -g rg --cluster-name name
    """

    _aaz_info = {
        "version": "2023-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.azurestackhci/clusters/{}/updates", "2023-03-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cluster_name = AAZStrArg(
            options=["--cluster-name"],
            help="The name of the cluster.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.UpdatesList(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class UpdatesList(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/updates",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clusterName", self.ctx.args.cluster_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
                flags={"read_only": True},
            )
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.location = AAZStrType()
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.additional_properties = AAZStrType(
                serialized_name="additionalProperties",
            )
            properties.availability_type = AAZStrType(
                serialized_name="availabilityType",
            )
            properties.component_versions = AAZListType(
                serialized_name="componentVersions",
            )
            properties.description = AAZStrType()
            properties.display_name = AAZStrType(
                serialized_name="displayName",
            )
            properties.health_check_date = AAZStrType(
                serialized_name="healthCheckDate",
            )
            properties.health_check_result = AAZListType(
                serialized_name="healthCheckResult",
            )
            properties.health_state = AAZStrType(
                serialized_name="healthState",
            )
            properties.installed_date = AAZStrType(
                serialized_name="installedDate",
            )
            properties.package_path = AAZStrType(
                serialized_name="packagePath",
            )
            properties.package_size_in_mb = AAZFloatType(
                serialized_name="packageSizeInMb",
            )
            properties.package_type = AAZStrType(
                serialized_name="packageType",
            )
            properties.prerequisites = AAZListType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.publisher = AAZStrType()
            properties.reboot_required = AAZStrType(
                serialized_name="rebootRequired",
            )
            properties.release_link = AAZStrType(
                serialized_name="releaseLink",
            )
            properties.state = AAZStrType()
            properties.update_state_properties = AAZObjectType(
                serialized_name="updateStateProperties",
                flags={"client_flatten": True},
            )
            properties.version = AAZStrType()

            component_versions = cls._schema_on_200.value.Element.properties.component_versions
            component_versions.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.component_versions.Element
            _element.last_updated = AAZStrType(
                serialized_name="lastUpdated",
            )
            _element.package_type = AAZStrType(
                serialized_name="packageType",
            )
            _element.version = AAZStrType()

            health_check_result = cls._schema_on_200.value.Element.properties.health_check_result
            health_check_result.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.health_check_result.Element
            _element.additional_data = AAZStrType(
                serialized_name="additionalData",
            )
            _element.description = AAZStrType()
            _element.health_check_source = AAZStrType(
                serialized_name="healthCheckSource",
            )
            _element.name = AAZStrType()
            _element.remediation = AAZStrType()
            _element.severity = AAZStrType()
            _element.status = AAZStrType()
            _element.tags = AAZObjectType()
            _element.target_resource_id = AAZStrType(
                serialized_name="targetResourceID",
            )
            _element.target_resource_name = AAZStrType(
                serialized_name="targetResourceName",
            )
            _element.timestamp = AAZStrType()
            _element.title = AAZStrType()

            tags = cls._schema_on_200.value.Element.properties.health_check_result.Element.tags
            tags.key = AAZStrType()
            tags.value = AAZStrType()

            prerequisites = cls._schema_on_200.value.Element.properties.prerequisites
            prerequisites.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.prerequisites.Element
            _element.package_name = AAZStrType(
                serialized_name="packageName",
            )
            _element.update_type = AAZStrType(
                serialized_name="updateType",
            )
            _element.version = AAZStrType()

            update_state_properties = cls._schema_on_200.value.Element.properties.update_state_properties
            update_state_properties.notify_message = AAZStrType(
                serialized_name="notifyMessage",
            )
            update_state_properties.progress_percentage = AAZFloatType(
                serialized_name="progressPercentage",
            )

            system_data = cls._schema_on_200.value.Element.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""


__all__ = ["List"]
