# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "stack-hci cluster wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.azurestackhci/clusters/{}", "2023-08-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cluster_name = AAZStrArg(
            options=["-n", "--name", "--cluster-name"],
            help="The name of the cluster.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ClustersGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class ClustersGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clusterName", self.ctx.args.cluster_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.identity = AAZObjectType()
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType()

            _element = cls._schema_on_200.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.aad_application_object_id = AAZStrType(
                serialized_name="aadApplicationObjectId",
            )
            properties.aad_client_id = AAZStrType(
                serialized_name="aadClientId",
            )
            properties.aad_service_principal_object_id = AAZStrType(
                serialized_name="aadServicePrincipalObjectId",
            )
            properties.aad_tenant_id = AAZStrType(
                serialized_name="aadTenantId",
            )
            properties.billing_model = AAZStrType(
                serialized_name="billingModel",
                flags={"read_only": True},
            )
            properties.cloud_id = AAZStrType(
                serialized_name="cloudId",
                flags={"read_only": True},
            )
            properties.cloud_management_endpoint = AAZStrType(
                serialized_name="cloudManagementEndpoint",
            )
            properties.connectivity_status = AAZStrType(
                serialized_name="connectivityStatus",
                flags={"read_only": True},
            )
            properties.desired_properties = AAZObjectType(
                serialized_name="desiredProperties",
            )
            properties.isolated_vm_attestation_configuration = AAZObjectType(
                serialized_name="isolatedVmAttestationConfiguration",
            )
            properties.last_billing_timestamp = AAZStrType(
                serialized_name="lastBillingTimestamp",
                flags={"read_only": True},
            )
            properties.last_sync_timestamp = AAZStrType(
                serialized_name="lastSyncTimestamp",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.registration_timestamp = AAZStrType(
                serialized_name="registrationTimestamp",
                flags={"read_only": True},
            )
            properties.reported_properties = AAZObjectType(
                serialized_name="reportedProperties",
            )
            properties.resource_provider_object_id = AAZStrType(
                serialized_name="resourceProviderObjectId",
                flags={"read_only": True},
            )
            properties.service_endpoint = AAZStrType(
                serialized_name="serviceEndpoint",
                flags={"read_only": True},
            )
            properties.software_assurance_properties = AAZObjectType(
                serialized_name="softwareAssuranceProperties",
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )
            properties.trial_days_remaining = AAZFloatType(
                serialized_name="trialDaysRemaining",
                flags={"read_only": True},
            )

            desired_properties = cls._schema_on_200.properties.desired_properties
            desired_properties.diagnostic_level = AAZStrType(
                serialized_name="diagnosticLevel",
            )
            desired_properties.windows_server_subscription = AAZStrType(
                serialized_name="windowsServerSubscription",
            )

            isolated_vm_attestation_configuration = cls._schema_on_200.properties.isolated_vm_attestation_configuration
            isolated_vm_attestation_configuration.attestation_resource_id = AAZStrType(
                serialized_name="attestationResourceId",
                flags={"read_only": True},
            )
            isolated_vm_attestation_configuration.attestation_service_endpoint = AAZStrType(
                serialized_name="attestationServiceEndpoint",
                flags={"read_only": True},
            )
            isolated_vm_attestation_configuration.relying_party_service_endpoint = AAZStrType(
                serialized_name="relyingPartyServiceEndpoint",
                flags={"read_only": True},
            )

            reported_properties = cls._schema_on_200.properties.reported_properties
            reported_properties.cluster_id = AAZStrType(
                serialized_name="clusterId",
                flags={"read_only": True},
            )
            reported_properties.cluster_name = AAZStrType(
                serialized_name="clusterName",
                flags={"read_only": True},
            )
            reported_properties.cluster_type = AAZStrType(
                serialized_name="clusterType",
                flags={"read_only": True},
            )
            reported_properties.cluster_version = AAZStrType(
                serialized_name="clusterVersion",
                flags={"read_only": True},
            )
            reported_properties.diagnostic_level = AAZStrType(
                serialized_name="diagnosticLevel",
            )
            reported_properties.imds_attestation = AAZStrType(
                serialized_name="imdsAttestation",
                flags={"read_only": True},
            )
            reported_properties.last_updated = AAZStrType(
                serialized_name="lastUpdated",
                flags={"read_only": True},
            )
            reported_properties.manufacturer = AAZStrType(
                flags={"read_only": True},
            )
            reported_properties.nodes = AAZListType(
                flags={"read_only": True},
            )
            reported_properties.oem_activation = AAZStrType(
                serialized_name="oemActivation",
                flags={"read_only": True},
            )
            reported_properties.supported_capabilities = AAZListType(
                serialized_name="supportedCapabilities",
                flags={"read_only": True},
            )

            nodes = cls._schema_on_200.properties.reported_properties.nodes
            nodes.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.reported_properties.nodes.Element
            _element.core_count = AAZFloatType(
                serialized_name="coreCount",
                flags={"read_only": True},
            )
            _element.ehc_resource_id = AAZStrType(
                serialized_name="ehcResourceId",
                flags={"read_only": True},
            )
            _element.id = AAZFloatType(
                flags={"read_only": True},
            )
            _element.last_licensing_timestamp = AAZStrType(
                serialized_name="lastLicensingTimestamp",
                flags={"read_only": True},
            )
            _element.manufacturer = AAZStrType(
                flags={"read_only": True},
            )
            _element.memory_in_gi_b = AAZFloatType(
                serialized_name="memoryInGiB",
                flags={"read_only": True},
            )
            _element.model = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.node_type = AAZStrType(
                serialized_name="nodeType",
                flags={"read_only": True},
            )
            _element.oem_activation = AAZStrType(
                serialized_name="oemActivation",
                flags={"read_only": True},
            )
            _element.os_display_version = AAZStrType(
                serialized_name="osDisplayVersion",
                flags={"read_only": True},
            )
            _element.os_name = AAZStrType(
                serialized_name="osName",
                flags={"read_only": True},
            )
            _element.os_version = AAZStrType(
                serialized_name="osVersion",
                flags={"read_only": True},
            )
            _element.serial_number = AAZStrType(
                serialized_name="serialNumber",
                flags={"read_only": True},
            )
            _element.windows_server_subscription = AAZStrType(
                serialized_name="windowsServerSubscription",
                flags={"read_only": True},
            )

            supported_capabilities = cls._schema_on_200.properties.reported_properties.supported_capabilities
            supported_capabilities.Element = AAZStrType()

            software_assurance_properties = cls._schema_on_200.properties.software_assurance_properties
            software_assurance_properties.last_updated = AAZStrType(
                serialized_name="lastUpdated",
                flags={"read_only": True},
            )
            software_assurance_properties.software_assurance_intent = AAZStrType(
                serialized_name="softwareAssuranceIntent",
            )
            software_assurance_properties.software_assurance_status = AAZStrType(
                serialized_name="softwareAssuranceStatus",
                flags={"read_only": True},
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _WaitHelper:
    """Helper class for Wait"""


__all__ = ["Wait"]
