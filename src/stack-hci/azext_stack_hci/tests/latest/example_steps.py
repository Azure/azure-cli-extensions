# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /Clusters/put/Create cluster
@try_manual
def step_cluster_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az stack-hci cluster create '
             '--location "East US" '
             '--aad-client-id "24a6e53d-04e5-44d2-b7cc-1b732a847dfc" '
             '--aad-tenant-id "7e589cc1-a8b6-4dff-91bd-5ec0fa18db94" '
             '--endpoint "https://98294836-31be-4668-aeae-698667faf99b.waconazure.com" '
             '--name "{myCluster}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Clusters/get/Get cluster
@try_manual
def step_cluster_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az stack-hci cluster show '
             '--name "{myCluster}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Clusters/get/List clusters in a given resource group
@try_manual
def step_cluster_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az stack-hci cluster list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Clusters/get/List clusters in a given subscription
@try_manual
def step_cluster_list2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az stack-hci cluster list '
             '-g ""',
             checks=checks)


# EXAMPLE: /Clusters/patch/Update cluster
@try_manual
def step_cluster_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az stack-hci cluster update '
             '--endpoint "https://98294836-31be-4668-aeae-698667faf99b.waconazure.com" '
             '--desired-properties diagnostic-level="Basic" windows-server-subscription="Enabled" '
             '--tags tag1="value1" tag2="value2" '
             '--name "{myCluster}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /ArcSettings/put/Create ArcSetting
@try_manual
def step_arc_setting_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az stack-hci arc-setting create '
             '--name "{myArcSetting}" '
             '--cluster-name "{myCluster}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /ArcSettings/get/Get ArcSetting
@try_manual
def step_arc_setting_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az stack-hci arc-setting show '
             '--name "{myArcSetting}" '
             '--cluster-name "{myCluster}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /ArcSettings/get/List ArcSetting resources by HCI Cluster
@try_manual
def step_arc_setting_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az stack-hci arc-setting list '
             '--cluster-name "{myCluster}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Extensions/put/Create Arc Extension
@try_manual
def step_extension_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az stack-hci extension create '
             '--arc-setting-name "{myArcSetting}" '
             '--cluster-name "{myCluster}" '
             '--type "{myExtension}" '
             '--protected-settings "{{\\"workspaceKey\\":\\"xx\\"}}" '
             '--publisher "Microsoft.Compute" '
             '--settings "{{\\"workspaceId\\":\\"xx\\"}}" '
             '--type-handler-version "1.10" '
             '--name "{myExtension}" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az stack-hci extension wait --created '
             '--arc-setting-name "{myArcSetting}" '
             '--cluster-name "{myCluster}" '
             '--name "{myExtension}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Extensions/get/Get ArcSettings Extension
@try_manual
def step_extension_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az stack-hci extension show '
             '--arc-setting-name "{myArcSetting}" '
             '--cluster-name "{myCluster}" '
             '--name "{myExtension}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Extensions/get/List Extensions under ArcSetting resource
@try_manual
def step_extension_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az stack-hci extension list '
             '--arc-setting-name "{myArcSetting}" '
             '--cluster-name "{myCluster}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Extensions/patch/Update Arc Extension
@try_manual
def step_extension_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az stack-hci extension update '
             '--arc-setting-name "{myArcSetting}" '
             '--cluster-name "{myCluster}" '
             '--type "{myExtension}" '
             '--publisher "Microsoft.Compute" '
             '--settings "{{\\"workspaceId\\":\\"xx\\"}}" '
             '--type-handler-version "1.10" '
             '--name "{myExtension}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Extensions/delete/Delete Arc Extension
@try_manual
def step_extension_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az stack-hci extension delete -y '
             '--arc-setting-name "{myArcSetting}" '
             '--cluster-name "{myCluster}" '
             '--name "{myExtension}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /ArcSettings/delete/Delete ArcSetting
@try_manual
def step_arc_setting_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az stack-hci arc-setting delete -y '
             '--name "{myArcSetting}" '
             '--cluster-name "{myCluster}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Clusters/delete/Delete cluster
@try_manual
def step_cluster_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az stack-hci cluster delete -y '
             '--name "{myCluster}" '
             '--resource-group "{rg}"',
             checks=checks)
