# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_cluster_create
from .example_steps import step_cluster_show
from .example_steps import step_cluster_list
from .example_steps import step_cluster_list2
from .example_steps import step_cluster_update
from .example_steps import step_arc_setting_create
from .example_steps import step_arc_setting_show
from .example_steps import step_arc_setting_list
from .example_steps import step_extension_create
from .example_steps import step_extension_show
from .example_steps import step_extension_list
from .example_steps import step_extension_update
from .example_steps import step_extension_delete
from .example_steps import step_arc_setting_delete
from .example_steps import step_cluster_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test):
    setup_scenario(test)
    step_cluster_create(test, checks=[
        test.check("location", "East US", case_sensitive=False),
        test.check("aadClientId", "24a6e53d-04e5-44d2-b7cc-1b732a847dfc", case_sensitive=False),
        test.check("aadTenantId", "7e589cc1-a8b6-4dff-91bd-5ec0fa18db94", case_sensitive=False),
        test.check("cloudManagementEndpoint", "https://98294836-31be-4668-aeae-698667faf99b.waconazure.com",
                   case_sensitive=False),
        test.check("name", "{myCluster}", case_sensitive=False),
    ])
    step_cluster_show(test, checks=[
        test.check("location", "East US", case_sensitive=False),
        test.check("aadClientId", "24a6e53d-04e5-44d2-b7cc-1b732a847dfc", case_sensitive=False),
        test.check("aadTenantId", "7e589cc1-a8b6-4dff-91bd-5ec0fa18db94", case_sensitive=False),
        test.check("cloudManagementEndpoint", "https://98294836-31be-4668-aeae-698667faf99b.waconazure.com",
                   case_sensitive=False),
        test.check("name", "{myCluster}", case_sensitive=False),
    ])
    step_cluster_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_cluster_list2(test, checks=[
        test.check('length(@)', 1),
    ])
    step_cluster_update(test, checks=[
        test.check("location", "East US", case_sensitive=False),
        test.check("aadTenantId", "7e589cc1-a8b6-4dff-91bd-5ec0fa18db94", case_sensitive=False),
        test.check("cloudManagementEndpoint", "https://98294836-31be-4668-aeae-698667faf99b.waconazure.com",
                   case_sensitive=False),
        test.check("name", "{myCluster}", case_sensitive=False),
        test.check("desiredProperties.diagnosticLevel", "Basic", case_sensitive=False),
        test.check("desiredProperties.windowsServerSubscription", "Enabled", case_sensitive=False),
        test.check("tags.tag1", "value1", case_sensitive=False),
        test.check("tags.tag2", "value2", case_sensitive=False),
    ])
    step_arc_setting_create(test, checks=[])
    step_arc_setting_show(test, checks=[])
    step_arc_setting_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_extension_create(test, checks=[
        test.check("extensionParameters.publisher", "Microsoft.Compute", case_sensitive=False),
        test.check("extensionParameters.settings.workspaceId", "xx", case_sensitive=False),
        test.check("name", "{myExtension}", case_sensitive=False),
    ])
    step_extension_show(test, checks=[
        test.check("extensionParameters.publisher", "Microsoft.Compute", case_sensitive=False),
        test.check("extensionParameters.settings.workspaceId", "xx", case_sensitive=False),
        test.check("name", "{myExtension}", case_sensitive=False),
    ])
    step_extension_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_extension_update(test, checks=[])
    step_extension_delete(test, checks=[])
    step_arc_setting_delete(test, checks=[])
    step_cluster_delete(test, checks=[])
    cleanup_scenario(test)


# Test class for Scenario
@try_manual
class Stack_hciScenarioTest(ScenarioTest):
    def __init__(self, *args, **kwargs):
        super(Stack_hciScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'myCluster': 'myCluster',
            'myArcSetting': 'default',
            'myExtension': 'MicrosoftMonitoringAgent',
        })

    @ResourceGroupPreparer(name_prefix='cliteststack_hci_test-rg'[:7], key='rg', parameter_name='rg')
    def test_stack_hci_Scenario(self, rg):
        call_scenario(self)
        calc_coverage(__file__)
        raise_if()
