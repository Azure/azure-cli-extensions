# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import (
    get_default_location_from_resource_group,
    validate_file_or_dict
)
from azext_stack_hci.action import AddDesiredProperties


def load_arguments(self, _):

    with self.argument_context('stack-hci arc-setting list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='The name of the cluster.')

    with self.argument_context('stack-hci arc-setting show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='The name of the cluster.', id_part='name')
        c.argument('arc_setting_name', options_list=['--name', '-n', '--arc-setting-name'], type=str, help='The name '
                   'of the proxy resource holding details of HCI ArcSetting information.', id_part='child_name_1')

    with self.argument_context('stack-hci arc-setting create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='The name of the cluster.')
        c.argument('arc_setting_name', options_list=['--name', '-n', '--arc-setting-name'], type=str, help='The name '
                   'of the proxy resource holding details of HCI ArcSetting information.')
        c.argument('arc_instance_resource_group', options_list=['--instance-rg'], type=str, help='The resource group '
                   'that hosts the Arc agents, ie. Hybrid Compute Machine resources.')
        c.argument('created_by', type=str, help='The identity that created the resource.', arg_group='System Data')
        c.argument('created_by_type', arg_type=get_enum_type(['User', 'Application', 'ManagedIdentity', 'Key']),
                   help='The type of identity that created the resource.', arg_group='System Data')
        c.argument('created_at', help='The timestamp of resource creation (UTC).', arg_group='System Data')
        c.argument('last_modified_by', type=str, help='The identity that last modified the resource.',
                   arg_group='System Data')
        c.argument('last_modified_by_type', arg_type=get_enum_type(['User', 'Application', 'ManagedIdentity', 'Key']),
                   help='The type of identity that last modified the resource.', arg_group='System Data')
        c.argument('last_modified_at', help='The timestamp of resource last modification (UTC)', arg_group='System '
                   'Data')

    with self.argument_context('stack-hci arc-setting delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='The name of the cluster.', id_part='name')
        c.argument('arc_setting_name', options_list=['--name', '-n', '--arc-setting-name'], type=str, help='The name '
                   'of the proxy resource holding details of HCI ArcSetting information.', id_part='child_name_1')

    with self.argument_context('stack-hci arc-setting wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='The name of the cluster.', id_part='name')
        c.argument('arc_setting_name', options_list=['--name', '-n', '--arc-setting-name'], type=str, help='The name '
                   'of the proxy resource holding details of HCI ArcSetting information.', id_part='child_name_1')

    with self.argument_context('stack-hci cluster list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('stack-hci cluster show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', options_list=['--name', '-n', '--cluster-name'], type=str, help='The name of the '
                   'cluster.', id_part='name')

    with self.argument_context('stack-hci cluster create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', options_list=['--name', '-n', '--cluster-name'], type=str, help='The name of the '
                   'cluster.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('cloud_management_endpoint', options_list=['--endpoint'], type=str, help='Endpoint configured for '
                   'management from the Azure portal.')
        c.argument('aad_client_id', type=str, help='App id of cluster AAD identity.')
        c.argument('aad_tenant_id', type=str, help='Tenant id of cluster AAD identity.')
        c.argument('desired_properties', action=AddDesiredProperties, nargs='+', help='Desired properties of the '
                   'cluster.')
        c.argument('created_by', type=str, help='The identity that created the resource.', arg_group='System Data')
        c.argument('created_by_type', arg_type=get_enum_type(['User', 'Application', 'ManagedIdentity', 'Key']),
                   help='The type of identity that created the resource.', arg_group='System Data')
        c.argument('created_at', help='The timestamp of resource creation (UTC).', arg_group='System Data')
        c.argument('last_modified_by', type=str, help='The identity that last modified the resource.',
                   arg_group='System Data')
        c.argument('last_modified_by_type', arg_type=get_enum_type(['User', 'Application', 'ManagedIdentity', 'Key']),
                   help='The type of identity that last modified the resource.', arg_group='System Data')
        c.argument('last_modified_at', help='The timestamp of resource last modification (UTC)', arg_group='System '
                   'Data')

    with self.argument_context('stack-hci cluster update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', options_list=['--name', '-n', '--cluster-name'], type=str, help='The name of the '
                   'cluster.', id_part='name')
        c.argument('tags', tags_type)
        c.argument('cloud_management_endpoint', options_list=['--endpoint'], type=str, help='Endpoint configured for '
                   'management from the Azure portal')
        c.argument('aad_client_id', type=str, help='App id of cluster AAD identity.')
        c.argument('aad_tenant_id', type=str, help='Tenant id of cluster AAD identity.')
        c.argument('desired_properties', action=AddDesiredProperties, nargs='+', help='Desired properties of the '
                   'cluster.')

    with self.argument_context('stack-hci cluster delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', options_list=['--name', '-n', '--cluster-name'], type=str, help='The name of the '
                   'cluster.', id_part='name')

    with self.argument_context('stack-hci extension list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='The name of the cluster.')
        c.argument('arc_setting_name', type=str, help='The name of the proxy resource holding details of HCI '
                   'ArcSetting information.')

    with self.argument_context('stack-hci extension show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='The name of the cluster.', id_part='name')
        c.argument('arc_setting_name', type=str, help='The name of the proxy resource holding details of HCI '
                   'ArcSetting information.', id_part='child_name_1')
        c.argument('extension_name', options_list=['--name', '-n', '--extension-name'], type=str, help='The name of '
                   'the machine extension.', id_part='child_name_2')

    with self.argument_context('stack-hci extension create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='The name of the cluster.')
        c.argument('arc_setting_name', type=str, help='The name of the proxy resource holding details of HCI '
                   'ArcSetting information.')
        c.argument('extension_name', options_list=['--name', '-n', '--extension-name'], type=str, help='The name of '
                   'the machine extension.')
        c.argument('force_update_tag', type=str, help='How the extension handler should be forced to update even if '
                   'the extension configuration has not changed.', arg_group='Extension Parameters')
        c.argument('publisher', type=str, help='The name of the extension handler publisher.', arg_group='Extension '
                   'Parameters')
        c.argument('type_properties_extension_parameters_type', options_list=['--type'], type=str, help='Specifies the '
                   'type of the extension; an example is "CustomScriptExtension".', arg_group='Extension Parameters')
        c.argument('type_handler_version', type=str, help='Specifies the version of the script handler.',
                   arg_group='Extension Parameters')
        c.argument('auto_upgrade_minor_version', options_list=['--auto-upgrade'], arg_type=get_three_state_flag(),
                   help='Indicates whether the extension should use a newer minor version if one is available at '
                   'deployment time. Once deployed, however, the extension will not upgrade minor versions unless '
                   'redeployed, even with this property set to true.', arg_group='Extension Parameters')
        c.argument('settings', type=validate_file_or_dict, help='Json formatted public settings for the extension. '
                   'Expected value: json-string/json-file/@json-file.', arg_group='Extension Parameters')
        c.argument('protected_settings', type=validate_file_or_dict, help='Protected settings (may contain secrets). '
                   'Expected value: json-string/json-file/@json-file.', arg_group='Extension Parameters')
        c.argument('created_by', type=str, help='The identity that created the resource.', arg_group='System Data')
        c.argument('created_by_type', arg_type=get_enum_type(['User', 'Application', 'ManagedIdentity', 'Key']),
                   help='The type of identity that created the resource.', arg_group='System Data')
        c.argument('created_at', help='The timestamp of resource creation (UTC).', arg_group='System Data')
        c.argument('last_modified_by', type=str, help='The identity that last modified the resource.',
                   arg_group='System Data')
        c.argument('last_modified_by_type', arg_type=get_enum_type(['User', 'Application', 'ManagedIdentity', 'Key']),
                   help='The type of identity that last modified the resource.', arg_group='System Data')
        c.argument('last_modified_at', help='The timestamp of resource last modification (UTC)', arg_group='System '
                   'Data')

    with self.argument_context('stack-hci extension update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='The name of the cluster.', id_part='name')
        c.argument('arc_setting_name', type=str, help='The name of the proxy resource holding details of HCI '
                   'ArcSetting information.', id_part='child_name_1')
        c.argument('extension_name', options_list=['--name', '-n', '--extension-name'], type=str, help='The name of '
                   'the machine extension.', id_part='child_name_2')
        c.argument('force_update_tag', type=str, help='How the extension handler should be forced to update even if '
                   'the extension configuration has not changed.', arg_group='Extension Parameters')
        c.argument('publisher', type=str, help='The name of the extension handler publisher.', arg_group='Extension '
                   'Parameters')
        c.argument('type_properties_extension_parameters_type', options_list=['--type'], type=str, help='Specifies the '
                   'type of the extension; an example is "CustomScriptExtension".', arg_group='Extension Parameters')
        c.argument('type_handler_version', type=str, help='Specifies the version of the script handler.',
                   arg_group='Extension Parameters')
        c.argument('auto_upgrade_minor_version', options_list=['--auto-upgrade'], arg_type=get_three_state_flag(),
                   help='Indicates whether the extension should use a newer minor version if one is available at '
                   'deployment time. Once deployed, however, the extension will not upgrade minor versions unless '
                   'redeployed, even with this property set to true.', arg_group='Extension Parameters')
        c.argument('settings', type=validate_file_or_dict, help='Json formatted public settings for the extension. '
                   'Expected value: json-string/json-file/@json-file.', arg_group='Extension Parameters')
        c.argument('protected_settings', type=validate_file_or_dict, help='Protected settings (may contain secrets). '
                   'Expected value: json-string/json-file/@json-file.', arg_group='Extension Parameters')
        c.argument('created_by', type=str, help='The identity that created the resource.', arg_group='System Data')
        c.argument('created_by_type', arg_type=get_enum_type(['User', 'Application', 'ManagedIdentity', 'Key']),
                   help='The type of identity that created the resource.', arg_group='System Data')
        c.argument('created_at', help='The timestamp of resource creation (UTC).', arg_group='System Data')
        c.argument('last_modified_by', type=str, help='The identity that last modified the resource.',
                   arg_group='System Data')
        c.argument('last_modified_by_type', arg_type=get_enum_type(['User', 'Application', 'ManagedIdentity', 'Key']),
                   help='The type of identity that last modified the resource.', arg_group='System Data')
        c.argument('last_modified_at', help='The timestamp of resource last modification (UTC)', arg_group='System '
                   'Data')

    with self.argument_context('stack-hci extension delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='The name of the cluster.', id_part='name')
        c.argument('arc_setting_name', type=str, help='The name of the proxy resource holding details of HCI '
                   'ArcSetting information.', id_part='child_name_1')
        c.argument('extension_name', options_list=['--name', '-n', '--extension-name'], type=str, help='The name of '
                   'the machine extension.', id_part='child_name_2')

    with self.argument_context('stack-hci extension wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='The name of the cluster.', id_part='name')
        c.argument('arc_setting_name', type=str, help='The name of the proxy resource holding details of HCI '
                   'ArcSetting information.', id_part='child_name_1')
        c.argument('extension_name', options_list=['--name', '-n', '--extension-name'], type=str, help='The name of '
                   'the machine extension.', id_part='child_name_2')
