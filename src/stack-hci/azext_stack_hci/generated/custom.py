# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.cli.core.util import sdk_no_wait


def stack_hci_arc_setting_list(client,
                               resource_group_name,
                               cluster_name):
    return client.list_by_cluster(resource_group_name=resource_group_name,
                                  cluster_name=cluster_name)


def stack_hci_arc_setting_show(client,
                               resource_group_name,
                               cluster_name,
                               arc_setting_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      arc_setting_name=arc_setting_name)


def stack_hci_arc_setting_create(client,
                                 resource_group_name,
                                 cluster_name,
                                 arc_setting_name,
                                 arc_instance_resource_group=None,
                                 created_by=None,
                                 created_by_type=None,
                                 created_at=None,
                                 last_modified_by=None,
                                 last_modified_by_type=None,
                                 last_modified_at=None):
    arc_setting = {}
    if arc_instance_resource_group is not None:
        arc_setting['arc_instance_resource_group'] = arc_instance_resource_group
    if created_by is not None:
        arc_setting['created_by'] = created_by
    if created_by_type is not None:
        arc_setting['created_by_type'] = created_by_type
    if created_at is not None:
        arc_setting['created_at'] = created_at
    if last_modified_by is not None:
        arc_setting['last_modified_by'] = last_modified_by
    if last_modified_by_type is not None:
        arc_setting['last_modified_by_type'] = last_modified_by_type
    if last_modified_at is not None:
        arc_setting['last_modified_at'] = last_modified_at
    return client.create(resource_group_name=resource_group_name,
                         cluster_name=cluster_name,
                         arc_setting_name=arc_setting_name,
                         arc_setting=arc_setting)


def stack_hci_arc_setting_delete(client,
                                 resource_group_name,
                                 cluster_name,
                                 arc_setting_name,
                                 no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       arc_setting_name=arc_setting_name)


def stack_hci_cluster_list(client,
                           resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def stack_hci_cluster_show(client,
                           resource_group_name,
                           cluster_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name)


def stack_hci_cluster_create(client,
                             resource_group_name,
                             cluster_name,
                             location,
                             tags=None,
                             cloud_management_endpoint=None,
                             aad_client_id=None,
                             aad_tenant_id=None,
                             desired_properties=None,
                             created_by=None,
                             created_by_type=None,
                             created_at=None,
                             last_modified_by=None,
                             last_modified_by_type=None,
                             last_modified_at=None):
    cluster = {}
    if tags is not None:
        cluster['tags'] = tags
    cluster['location'] = location
    if cloud_management_endpoint is not None:
        cluster['cloud_management_endpoint'] = cloud_management_endpoint
    if aad_client_id is not None:
        cluster['aad_client_id'] = aad_client_id
    if aad_tenant_id is not None:
        cluster['aad_tenant_id'] = aad_tenant_id
    if desired_properties is not None:
        cluster['desired_properties'] = desired_properties
    if created_by is not None:
        cluster['created_by'] = created_by
    if created_by_type is not None:
        cluster['created_by_type'] = created_by_type
    if created_at is not None:
        cluster['created_at'] = created_at
    if last_modified_by is not None:
        cluster['last_modified_by'] = last_modified_by
    if last_modified_by_type is not None:
        cluster['last_modified_by_type'] = last_modified_by_type
    if last_modified_at is not None:
        cluster['last_modified_at'] = last_modified_at
    return client.create(resource_group_name=resource_group_name,
                         cluster_name=cluster_name,
                         cluster=cluster)


def stack_hci_cluster_update(client,
                             resource_group_name,
                             cluster_name,
                             tags=None,
                             cloud_management_endpoint=None,
                             aad_client_id=None,
                             aad_tenant_id=None,
                             desired_properties=None):
    cluster = {}
    if tags is not None:
        cluster['tags'] = tags
    if cloud_management_endpoint is not None:
        cluster['cloud_management_endpoint'] = cloud_management_endpoint
    if aad_client_id is not None:
        cluster['aad_client_id'] = aad_client_id
    if aad_tenant_id is not None:
        cluster['aad_tenant_id'] = aad_tenant_id
    if desired_properties is not None:
        cluster['desired_properties'] = desired_properties
    return client.update(resource_group_name=resource_group_name,
                         cluster_name=cluster_name,
                         cluster=cluster)


def stack_hci_cluster_delete(client,
                             resource_group_name,
                             cluster_name):
    return client.delete(resource_group_name=resource_group_name,
                         cluster_name=cluster_name)


def stack_hci_extension_list(client,
                             resource_group_name,
                             cluster_name,
                             arc_setting_name):
    return client.list_by_arc_setting(resource_group_name=resource_group_name,
                                      cluster_name=cluster_name,
                                      arc_setting_name=arc_setting_name)


def stack_hci_extension_show(client,
                             resource_group_name,
                             cluster_name,
                             arc_setting_name,
                             extension_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      arc_setting_name=arc_setting_name,
                      extension_name=extension_name)


def stack_hci_extension_create(client,
                               resource_group_name,
                               cluster_name,
                               arc_setting_name,
                               extension_name,
                               force_update_tag=None,
                               publisher=None,
                               type_properties_extension_parameters_type=None,
                               type_handler_version=None,
                               auto_upgrade_minor_version=None,
                               settings=None,
                               protected_settings=None,
                               created_by=None,
                               created_by_type=None,
                               created_at=None,
                               last_modified_by=None,
                               last_modified_by_type=None,
                               last_modified_at=None,
                               no_wait=False):
    extension = {}
    if force_update_tag is not None:
        extension['force_update_tag'] = force_update_tag
    if publisher is not None:
        extension['publisher'] = publisher
    if type_properties_extension_parameters_type is not None:
        extension['type_properties_extension_parameters_type'] = type_properties_extension_parameters_type
    if type_handler_version is not None:
        extension['type_handler_version'] = type_handler_version
    if auto_upgrade_minor_version is not None:
        extension['auto_upgrade_minor_version'] = auto_upgrade_minor_version
    if settings is not None:
        extension['settings'] = settings
    if protected_settings is not None:
        extension['protected_settings'] = protected_settings
    if created_by is not None:
        extension['created_by'] = created_by
    if created_by_type is not None:
        extension['created_by_type'] = created_by_type
    if created_at is not None:
        extension['created_at'] = created_at
    if last_modified_by is not None:
        extension['last_modified_by'] = last_modified_by
    if last_modified_by_type is not None:
        extension['last_modified_by_type'] = last_modified_by_type
    if last_modified_at is not None:
        extension['last_modified_at'] = last_modified_at
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       arc_setting_name=arc_setting_name,
                       extension_name=extension_name,
                       extension=extension)


def stack_hci_extension_update(client,
                               resource_group_name,
                               cluster_name,
                               arc_setting_name,
                               extension_name,
                               force_update_tag=None,
                               publisher=None,
                               type_properties_extension_parameters_type=None,
                               type_handler_version=None,
                               auto_upgrade_minor_version=None,
                               settings=None,
                               protected_settings=None,
                               created_by=None,
                               created_by_type=None,
                               created_at=None,
                               last_modified_by=None,
                               last_modified_by_type=None,
                               last_modified_at=None,
                               no_wait=False):
    extension = {}
    if force_update_tag is not None:
        extension['force_update_tag'] = force_update_tag
    if publisher is not None:
        extension['publisher'] = publisher
    if type_properties_extension_parameters_type is not None:
        extension['type_properties_extension_parameters_type'] = type_properties_extension_parameters_type
    if type_handler_version is not None:
        extension['type_handler_version'] = type_handler_version
    if auto_upgrade_minor_version is not None:
        extension['auto_upgrade_minor_version'] = auto_upgrade_minor_version
    if settings is not None:
        extension['settings'] = settings
    if protected_settings is not None:
        extension['protected_settings'] = protected_settings
    if created_by is not None:
        extension['created_by'] = created_by
    if created_by_type is not None:
        extension['created_by_type'] = created_by_type
    if created_at is not None:
        extension['created_at'] = created_at
    if last_modified_by is not None:
        extension['last_modified_by'] = last_modified_by
    if last_modified_by_type is not None:
        extension['last_modified_by_type'] = last_modified_by_type
    if last_modified_at is not None:
        extension['last_modified_at'] = last_modified_at
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       arc_setting_name=arc_setting_name,
                       extension_name=extension_name,
                       extension=extension)


def stack_hci_extension_delete(client,
                               resource_group_name,
                               cluster_name,
                               arc_setting_name,
                               extension_name,
                               no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       arc_setting_name=arc_setting_name,
                       extension_name=extension_name)
