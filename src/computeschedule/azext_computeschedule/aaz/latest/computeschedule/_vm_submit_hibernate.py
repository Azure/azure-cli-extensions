# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "computeschedule vm-submit-hibernate",
)
class VmSubmitHibernate(AAZCommand):
    """VirtualMachinesSubmitHibernate: Schedule hibernate operation for a batch of virtual machines at datetime in future.

    :example: VirtualMachinesSubmitHibernate
        az computeschedule vm-submit-hibernate --location eastus2euap --schedule "{deadline:'2024-11-01T17:52:54.215Z',timezone:UTC,deadline-type:InitiateAt}" --execution-parameters "{retry-policy:{retry-count:2,retry-window-in-minutes:27}}" --resources "{ids:[/subscriptions/fe541807-8c68-475d-976d-f453f9db4d81/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/testResource3]}" --correlationid 23480d2f-1dca-4610-afb4-dd25eec1f34r
    """

    _aaz_info = {
        "version": "2024-10-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.computeschedule/locations/{}/virtualmachinessubmithibernate", "2024-10-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.location = AAZStrArg(
            options=["--location"],
            help="The location of the azure resources.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
            blank=AAZPromptInput(
                msg="Please enter location of azure resources:",
            ),
        )

        # define Arg Group "RequestBody"

        _args_schema = cls._args_schema
        _args_schema.correlationid = AAZStrArg(
            options=["--correlationid"],
            arg_group="RequestBody",
            help="CorrelationId item",
            required=True,
        )
        _args_schema.execution_parameters = AAZObjectArg(
            options=["--execution-parameters"],
            arg_group="RequestBody",
            help={"short-summary": "The execution parameters for the request", "long-summary": "Optional parameters for the request including the retry policy"},
            required=True,
        )
        _args_schema.resources = AAZObjectArg(
            options=["--resources"],
            arg_group="RequestBody",
            help="The resources for the request",
            required=True,
        )
        _args_schema.schedule = AAZObjectArg(
            options=["--schedule"],
            arg_group="RequestBody",
            help="The schedule for the request",
            required=True,
        )

        execution_parameters = cls._args_schema.execution_parameters
        execution_parameters.retry_policy = AAZObjectArg(
            options=["retry-policy"],
            help={"short-summary": "Optional retry policy the user can pass", "long-summary": "The retry policy object is an optional parameter the user can pass to control the retry count or retry window in minutes of each request, when either or none of these values are passed, Computeschedule will use default values for this"},
        )

        retry_policy = cls._args_schema.execution_parameters.retry_policy
        retry_policy.retry_count = AAZIntArg(
            options=["retry-count"],
            help="Retry count for user request",
        )
        retry_policy.retry_window_in_minutes = AAZIntArg(
            options=["retry-window-in-minutes"],
            help="Retry window in minutes for user request",
        )

        resources = cls._args_schema.resources
        resources.ids = AAZListArg(
            options=["ids"],
            help="The resource armids used for the request",
            required=True,
        )

        ids = cls._args_schema.resources.ids
        ids.Element = AAZResourceIdArg()

        schedule = cls._args_schema.schedule
        schedule.deadline = AAZDateTimeArg(
            options=["deadline"],
            help="The deadline for the operation",
            blank=AAZPromptInput(
                msg="Please enter a valid deadline:",
            ),
        )
        schedule.deadline_type = AAZStrArg(
            options=["deadline-type"],
            help="The deadlinetype of the operation, this can either be InitiateAt or CompleteBy",
            required=True,
            default="Unknown",
            enum={"CompleteBy": "CompleteBy", "InitiateAt": "InitiateAt", "Unknown": "Unknown"},
        )
        schedule.timezone = AAZStrArg(
            options=["timezone"],
            help={"short-summary": "The timezone for the operation", "long-summary": "Computeschedule only supports UTC timezone presently"},
            blank=AAZPromptInput(
                msg="Please enter timezone value:",
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ScheduledActionsVirtualMachinesSubmitHibernate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ScheduledActionsVirtualMachinesSubmitHibernate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesSubmitHibernate",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "locationparameter", self.ctx.args.location,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-10-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("correlationid", AAZStrType, ".correlationid", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("executionParameters", AAZObjectType, ".execution_parameters", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("resources", AAZObjectType, ".resources", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("schedule", AAZObjectType, ".schedule", typ_kwargs={"flags": {"required": True}})

            execution_parameters = _builder.get(".executionParameters")
            if execution_parameters is not None:
                execution_parameters.set_prop("retryPolicy", AAZObjectType, ".retry_policy")

            retry_policy = _builder.get(".executionParameters.retryPolicy")
            if retry_policy is not None:
                retry_policy.set_prop("retryCount", AAZIntType, ".retry_count")
                retry_policy.set_prop("retryWindowInMinutes", AAZIntType, ".retry_window_in_minutes")

            resources = _builder.get(".resources")
            if resources is not None:
                resources.set_prop("ids", AAZListType, ".ids", typ_kwargs={"flags": {"required": True}})

            ids = _builder.get(".resources.ids")
            if ids is not None:
                ids.set_elements(AAZStrType, ".")

            schedule = _builder.get(".schedule")
            if schedule is not None:
                schedule.set_prop("deadline", AAZStrType, ".deadline")
                schedule.set_prop("deadlineType", AAZStrType, ".deadline_type", typ_kwargs={"flags": {"required": True}})
                schedule.set_prop("timezone", AAZStrType, ".timezone")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.description = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.results = AAZListType()
            _schema_on_200.type = AAZStrType(
                flags={"required": True},
            )

            results = cls._schema_on_200.results
            results.Element = AAZObjectType()

            _element = cls._schema_on_200.results.Element
            _element.error_code = AAZStrType(
                serialized_name="errorCode",
            )
            _element.error_details = AAZStrType(
                serialized_name="errorDetails",
            )
            _element.operation = AAZObjectType()
            _element.resource_id = AAZStrType(
                serialized_name="resourceId",
            )

            operation = cls._schema_on_200.results.Element.operation
            operation.completed_at = AAZStrType(
                serialized_name="completedAt",
            )
            operation.deadline = AAZStrType()
            operation.deadline_type = AAZStrType(
                serialized_name="deadlineType",
            )
            operation.op_type = AAZStrType(
                serialized_name="opType",
            )
            operation.operation_id = AAZStrType(
                serialized_name="operationId",
                flags={"required": True},
            )
            operation.resource_id = AAZStrType(
                serialized_name="resourceId",
            )
            operation.resource_operation_error = AAZObjectType(
                serialized_name="resourceOperationError",
            )
            operation.retry_policy = AAZObjectType(
                serialized_name="retryPolicy",
            )
            operation.state = AAZStrType()
            operation.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
            )
            operation.time_zone = AAZStrType(
                serialized_name="timeZone",
            )
            operation.timezone = AAZStrType()

            resource_operation_error = cls._schema_on_200.results.Element.operation.resource_operation_error
            resource_operation_error.error_code = AAZStrType(
                serialized_name="errorCode",
                flags={"required": True},
            )
            resource_operation_error.error_details = AAZStrType(
                serialized_name="errorDetails",
                flags={"required": True},
            )

            retry_policy = cls._schema_on_200.results.Element.operation.retry_policy
            retry_policy.retry_count = AAZIntType(
                serialized_name="retryCount",
            )
            retry_policy.retry_window_in_minutes = AAZIntType(
                serialized_name="retryWindowInMinutes",
            )

            return cls._schema_on_200


class _VmSubmitHibernateHelper:
    """Helper class for VmSubmitHibernate"""


__all__ = ["VmSubmitHibernate"]
