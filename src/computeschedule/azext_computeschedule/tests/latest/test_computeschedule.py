# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

import json
import uuid
import unittest
import time
from datetime import datetime, timedelta, timezone
from azure.cli.testsdk import *
from azure.cli.testsdk.scenario_tests import AllowLargeResponse


class ComputescheduleScenario(ScenarioTest):
    
    # Execute deallocate test
    @AllowLargeResponse()
    @ResourceGroupPreparer(location="eastus2euap")
    def test_computeschedule_executedeallocate(self):
        # Arrange
        self.kwargs.update({
            "vm_name": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/{rg}/providers/Microsoft.Compute/virtualMachines/SA-CLIEXTVM-0",
            "retry_count": 3,
            "location": "eastus2euap",
            "retry_window_in_minutes": 45,
            "correlationid": str(uuid.uuid4())
        })

        self.kwargs["execution_parameters"] = json.dumps({
            "retry-policy": {
                "retry-count": self.kwargs["retry_count"],
                "retry-window-in-minutes": self.kwargs["retry_window_in_minutes"]
            }
        })

        self.kwargs["resources"] = json.dumps({
            "ids": [self.kwargs["vm_name"]]
        })

        # Act
        execute_deallocate_res = self.cmd(
            'az computeschedule vm-execute-deallocate --location {location} '
            '--execution-parameters \'{execution_parameters}\' '
            '--resources \'{resources}\' '
            '--correlationid {correlationid} ',
            # Assert
            checks=[
                JMESPathCheck('results[0].resourceId', self.kwargs.get('vm_name', '')),
                JMESPathCheck('location', self.kwargs.get('location', ''))
            ]
        ).get_output_in_json()

        # Assert
        assert len(execute_deallocate_res) > 0


    # Execute hibernate test
    @AllowLargeResponse()
    @ResourceGroupPreparer(location="eastus2euap")
    def test_computeschedule_executehibernate(self):
        # Arrange
        self.kwargs.update({
            "vm_name": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/{rg}/providers/Microsoft.Compute/virtualMachines/SA-CLIEXTVM-1",
            "retry_count": 5,
            "location": "eastus2euap",
            "retry_window_in_minutes": 55,
            "correlationid": str(uuid.uuid4())
        })

        self.kwargs["execution_parameters"] = json.dumps({
            "retry-policy": {
                "retry-count": self.kwargs["retry_count"],
                "retry-window-in-minutes": self.kwargs["retry_window_in_minutes"]
            }
        })

        self.kwargs["resources"] = json.dumps({
            "ids": [self.kwargs["vm_name"]]
        })

        # Act
        execute_hibernate_res = self.cmd(
            'az computeschedule vm-execute-hibernate --location {location} '
            '--execution-parameters \'{execution_parameters}\' '
            '--resources \'{resources}\' '
            '--correlationid {correlationid} ',
            # Assert
            checks=[
                JMESPathCheck('results[0].resourceId', self.kwargs.get('vm_name', '')),
                JMESPathCheck('location', self.kwargs.get('location', ''))
            ]
        ).get_output_in_json()

        # Assert
        assert len(execute_hibernate_res) > 0


    # Execute start test
    @AllowLargeResponse()
    @ResourceGroupPreparer(location="eastus2euap")
    def test_computeschedule_executestart(self):
        # Arrange
        self.kwargs.update({
            "vm_name": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/{rg}/providers/Microsoft.Compute/virtualMachines/SA-CLIEXTVM-2",
            "retry_count": 2,
            "location": "eastus2euap",
            "retry_window_in_minutes": 20,
            "correlationid": str(uuid.uuid4())
        })

        self.kwargs["execution_parameters"] = json.dumps({
            "retry-policy": {
                "retry-count": self.kwargs["retry_count"],
                "retry-window-in-minutes": self.kwargs["retry_window_in_minutes"]
            }
        })

        self.kwargs["resources"] = json.dumps({
            "ids": [self.kwargs["vm_name"]]
        })

        # Act
        execute_start_res = self.cmd(
            'az computeschedule vm-execute-start --location {location} '
            '--execution-parameters \'{execution_parameters}\' '
            '--resources \'{resources}\' '
            '--correlationid {correlationid} ',
            # Assert
            checks=[
                JMESPathCheck('results[0].resourceId', self.kwargs.get('vm_name', '')),
                JMESPathCheck('location', self.kwargs.get('location', ''))
            ]
        ).get_output_in_json()

        # Assert
        assert len(execute_start_res) > 0


    # Submit start test
    @AllowLargeResponse()
    @ResourceGroupPreparer(location="eastus2euap")
    def test_computeschedule_submitstart(self):
        # Arrange
        self.kwargs.update({
            "vm_name": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/{rg}/providers/Microsoft.Compute/virtualMachines/SA-CLIEXTVM-3",
            "retry_count": 4,
            "location": "eastus2euap",
            "retry_window_in_minutes": 65,
            "correlationid": str(uuid.uuid4())
        })

        self.kwargs["schedule"] = json.dumps({
            "deadline": (datetime.now() + timedelta(minutes=2)).strftime("%Y-%m-%d %H:%M:%S"),
            "timezone": "UTC",
            "deadline-type": "InitiateAt"
        })

        self.kwargs["execution_parameters"] = json.dumps({
            "retry-policy": {
                "retry-count": self.kwargs["retry_count"],
                "retry-window-in-minutes": self.kwargs["retry_window_in_minutes"]
            }
        })

        self.kwargs["resources"] = json.dumps({
            "ids": [self.kwargs["vm_name"]]
        })

        # Act
        submit_start_res = self.cmd(
            'az computeschedule vm-submit-start --location {location} '
            '--schedule \'{schedule}\' '
            '--execution-parameters \'{execution_parameters}\' '
            '--resources \'{resources}\' '
            '--correlationid {correlationid} ',
            # Assert
            checks=[
                JMESPathCheck('results[0].resourceId', self.kwargs.get('vm_name', '')),
                JMESPathCheck('location', self.kwargs.get('location', ''))
            ]
        ).get_output_in_json()

        # Assert
        assert len(submit_start_res) > 0


    # Submit deallocate test
    @AllowLargeResponse()
    @ResourceGroupPreparer(location="eastus2euap")
    def test_computeschedule_submitdeallocate(self):
        # Arrange
        self.kwargs.update({
            "vm_name": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/{rg}/providers/Microsoft.Compute/virtualMachines/SA-CLIEXTVM-4",
            "retry_count": 4,
            "location": "eastus2euap",
            "retry_window_in_minutes": 65,
            "correlationid": str(uuid.uuid4())
        })

        self.kwargs["schedule"] = json.dumps({
            "deadline": (datetime.now() + timedelta(minutes=2)).strftime("%Y-%m-%d %H:%M:%S"),
            "timezone": "UTC",
            "deadline-type": "InitiateAt"
        })

        self.kwargs["execution_parameters"] = json.dumps({
            "retry-policy": {
                "retry-count": self.kwargs["retry_count"],
                "retry-window-in-minutes": self.kwargs["retry_window_in_minutes"]
            }
        })

        self.kwargs["resources"] = json.dumps({
            "ids": [self.kwargs["vm_name"]]
        })

        # Act
        submit_deallocate_res = self.cmd(
            'az computeschedule vm-submit-deallocate --location {location} '
            '--schedule \'{schedule}\' '
            '--execution-parameters \'{execution_parameters}\' '
            '--resources \'{resources}\' '
            '--correlationid {correlationid} ',
            # Assert
            checks=[
                JMESPathCheck('results[0].resourceId', self.kwargs.get('vm_name', '')),
                JMESPathCheck('location', self.kwargs.get('location', ''))
            ]
        ).get_output_in_json()

        # Assert
        assert len(submit_deallocate_res) > 0


    # Submit hibernate test
    @AllowLargeResponse()
    @ResourceGroupPreparer(location="eastus2euap")
    def test_computeschedule_submithibernate(self):
        # Arrange
        self.kwargs.update({
            "vm_name": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/{rg}/providers/Microsoft.Compute/virtualMachines/SA-CLIEXTVM-5",
            "retry_count": 4,
            "location": "eastus2euap",
            "retry_window_in_minutes": 65,
            "correlationid": str(uuid.uuid4())
        })

        self.kwargs["schedule"] = json.dumps({
            "deadline": (datetime.now() + timedelta(minutes=1)).strftime("%Y-%m-%d %H:%M:%S"),
            "timezone": "UTC",
            "deadline-type": "InitiateAt"
        })

        self.kwargs["execution_parameters"] = json.dumps({
            "retry-policy": {
                "retry-count": self.kwargs["retry_count"],
                "retry-window-in-minutes": self.kwargs["retry_window_in_minutes"]
            }
        })

        self.kwargs["resources"] = json.dumps({
            "ids": [self.kwargs["vm_name"]]
        })

        # Act
        submit_hibernate_res = self.cmd(
            'az computeschedule vm-submit-hibernate --location {location} '
            '--schedule \'{schedule}\' '
            '--execution-parameters \'{execution_parameters}\' '
            '--resources \'{resources}\' '
            '--correlationid {correlationid} ',
            # Assert
            checks=[
                JMESPathCheck('results[0].resourceId', self.kwargs.get('vm_name', '')),
                JMESPathCheck('location', self.kwargs.get('location', ''))
            ]
        ).get_output_in_json()

        # Assert
        assert len(submit_hibernate_res) > 0


    # GetOperationStatus test
    @AllowLargeResponse()
    @ResourceGroupPreparer(location="eastus2euap")
    def test_computeschedule_executestart_getoperationstatus(self):
        # Arrange
        self.kwargs.update({
            "vm_name": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/{rg}/providers/Microsoft.Compute/virtualMachines/SA-CLIEXTVM-6",
            "retry_count": 2,
            "location": "eastus2euap",
            "retry_window_in_minutes": 30,
            "correlationid": str(uuid.uuid4()),
            "get_ops_correlationid": str(uuid.uuid4()),
        })

        self.kwargs["execution_parameters"] = json.dumps({
            "retry-policy": {
                "retry-count": self.kwargs["retry_count"],
                "retry-window-in-minutes": self.kwargs["retry_window_in_minutes"]
            }
        })

        self.kwargs["resources"] = json.dumps({
            "ids": [self.kwargs["vm_name"]]
        })

        # Act
        execute_start_res = self.cmd(
            'az computeschedule vm-execute-start --location {location} '
            '--execution-parameters \'{execution_parameters}\' '
            '--resources \'{resources}\' '
            '--correlationid {correlationid} ',
            # Assert
            checks=[
                JMESPathCheck('results[0].resourceId', self.kwargs.get('vm_name', '')),
                JMESPathCheck('location', self.kwargs.get('location', ''))
            ]
        ).get_output_in_json()

        operation_ids = []

        for result in execute_start_res.get("results", []):
            operationid = result.get("operation", {}).get("operationId")
            if operationid:
                operation_ids.append(operationid)

        self.kwargs.update({"operationIds": json.dumps(operation_ids)})

        time.sleep(3)

        get_operation_status = self.cmd(
            'az computeschedule vm-get-operation-status --location {location} '
            '--operation-ids \'{operationIds}\' '
            '--correlationid {get_ops_correlationid} ',
            # Assert
            checks=[
                JMESPathCheck('results[0].resourceId', self.kwargs.get('vm_name', ''))
            ]
        ).get_output_in_json()
        
        # Assert
        assert len(get_operation_status) > 0


    # Cancel operations test
    @AllowLargeResponse()
    @ResourceGroupPreparer(location="eastus2euap")
    def test_computeschedule_submitdeallocate_canceloperations(self):
        # Arrange
        self.kwargs.update({
            "vm_name": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/{rg}/providers/Microsoft.Compute/virtualMachines/SA-CLIEXTVM-7",
            "retry_count": 3,
            "location": "eastus2euap",
            "retry_window_in_minutes": 75,
            "correlationid": str(uuid.uuid4()),
            "cancel_ops_correlationid": str(uuid.uuid4()),
        })

        self.kwargs["schedule"] = json.dumps({
            "deadline": (datetime.now() + timedelta(minutes=1)).strftime("%Y-%m-%d %H:%M:%S"),
            "timezone": "UTC",
            "deadline-type": "InitiateAt"
        })

        self.kwargs["execution_parameters"] = json.dumps({
            "retry-policy": {
                "retry-count": self.kwargs["retry_count"],
                "retry-window-in-minutes": self.kwargs["retry_window_in_minutes"]
            }
        })

        self.kwargs["resources"] = json.dumps({
            "ids": [self.kwargs["vm_name"]]
        })

        # Act
        submit_deallocate_res = self.cmd(
            'az computeschedule vm-submit-deallocate --location {location} '
            '--schedule \'{schedule}\' '
            '--execution-parameters \'{execution_parameters}\' '
            '--resources \'{resources}\' '
            '--correlationid {correlationid} ',
            # Assert
            checks=[
                JMESPathCheck('results[0].resourceId', self.kwargs.get('vm_name', '')),
                JMESPathCheck('location', self.kwargs.get('location', ''))
            ]
        ).get_output_in_json()

        operation_ids = []

        for result in submit_deallocate_res.get("results", []):
            operationid = result.get("operation", {}).get("operationId")
            if operationid:
                operation_ids.append(operationid)

        self.kwargs.update({"operationIds": json.dumps(operation_ids)})

        time.sleep(3)

        cancel_operation_status = self.cmd(
            'az computeschedule vm-cancel-operations --location {location} '
            '--operation-ids \'{operationIds}\' '
            '--correlationid {cancel_ops_correlationid} ',
            # Assert
            checks=[
                JMESPathCheck('results[0].resourceId', self.kwargs.get('vm_name', ''))
            ]
        ).get_output_in_json()
        
        # Assert
        assert len(cancel_operation_status) > 0


    # Get operation errors test
    @AllowLargeResponse()
    @ResourceGroupPreparer(location="eastus2euap")
    def test_computeschedule_submitdeallocate_getoperationerrors(self):
        # Arrange
        self.kwargs.update({
            "vm_name": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/{rg}/providers/Microsoft.Compute/virtualMachines/SA-CLIEXTVM-8",
            "retry_count": 3,
            "location": "eastus2euap",
            "retry_window_in_minutes": 75,
            "correlationid": str(uuid.uuid4())
        })

        self.kwargs["schedule"] = json.dumps({
            "deadline": (datetime.now() + timedelta(minutes=1)).strftime("%Y-%m-%d %H:%M:%S"),
            "timezone": "UTC",
            "deadline-type": "InitiateAt"
        })

        self.kwargs["execution_parameters"] = json.dumps({
            "retry-policy": {
                "retry-count": self.kwargs["retry_count"],
                "retry-window-in-minutes": self.kwargs["retry_window_in_minutes"]
            }
        })

        self.kwargs["resources"] = json.dumps({
            "ids": [self.kwargs["vm_name"]]
        })

        # Act
        submit_deallocate_res = self.cmd(
            'az computeschedule vm-submit-deallocate --location {location} '
            '--schedule \'{schedule}\' '
            '--execution-parameters \'{execution_parameters}\' '
            '--resources \'{resources}\' '
            '--correlationid {correlationid} ',
            # Assert
            checks=[
                JMESPathCheck('results[0].resourceId', self.kwargs.get('vm_name', '')),
                JMESPathCheck('location', self.kwargs.get('location', ''))
            ]
        ).get_output_in_json()

        operation_ids = []

        for result in submit_deallocate_res.get("results", []):
            operationid = result.get("operation", {}).get("operationId")
            if operationid:
                operation_ids.append(operationid)

        self.kwargs.update({"operationIds": json.dumps(operation_ids)})

        time.sleep(3)

        get_operation_errors_res = self.cmd(
            'az computeschedule vm-get-operation-errors --location {location} '
            '--operation-ids \'{operationIds}\' ',
        ).get_output_in_json()
        
        # Assert
        assert len(get_operation_errors_res) > 0