# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import (ScenarioTest, ResourceGroupPreparer)
from azure.cli.testsdk.scenario_tests import AllowLargeResponse

class InformaticaScenario(ScenarioTest):
    @AllowLargeResponse(size_kb=10240)
    @ResourceGroupPreparer(name_prefix='cli_test_informatica', location="westus2")
    def test_informatica(self, resource_group):
        self.kwargs.update({
            'name': 'InformaticaResourceCLIExtTest3',
            'location': 'westus2',
            'sku': 'standard',
            'capacity': '1',
            'tier': 'standard',
            'type': 'Standard',
            'resource_group': 'InformaticaDemo',
            'subscription': '00000000-0000-0000-0000-000000000000',
            'sso_url': 'https://contoso.com/singlesignon',
            'org_name': 'InformaticaDemo',
            'serverless_runtime_name': 'demoRuntime',
            'country': 'India',
            'domain': '',
            'business_phone': '',
            'marketplace_subscription_id': 'c948d31a-c011-4b16-ce29-688c1565fc06',
            'publisher_id': 'informatica',
            'user_phone': '9876543210',
            'user_upn': 'Test_Infa@mpliftrlogz20210811outlook.onmicrosoft.com',
            'org_id': 'wtdmhlwhkvgqdumaehgfgiqcxgnqpx',
            'informatica_region': 'US West1',
            'office_address': 'sbttzwyajgdbsvipuiclbzvkcvwyil',
            'link_token': '',
            'offer_id': 'azurenativeinfaservces',
            'plan_id': 'privatepreview-plan-cdi-free_00',
            'plan_name': 'CDI Free - Private Preview',
            'term_unit': 'P1Y',
            'term_id': 'o73usof6rkyy',
            'user_first_name': 'Test',
            'user_last_name': 'Infa',
            'user_email': 'Test_Infa@mpliftrlogz20210811outlook.onmicrosoft.com',
            'user_upn': 'Test_Infa@mpliftrlogz20210811outlook.onmicrosoft.com',
            'number_of_employee': 0,
            'company_name': 'Microsoft',
            'business': '',
            'number_of_employees': 0,
            'link_organization': '{}',
            'tags': 'key8430=cagshqtjlxtqqhdwtchokvxszybp'
        })

        # Create Informatica Organization
        self.cmd('az informatica data-management organization create --resource-group {resource_group} --org-name {name} --subscription {subscription} --location {location} --company-details \'{{"company-name": "{company_name}", "office-address": "{office_address}", "country": "{country}", "domain": "{domain}", "number-of-employees": {number_of_employee}}}\' --marketplace-details \'{{"marketplace-subscription-id": "{marketplace_subscription_id}", "offer-details": {{"offer-id": "{offer_id}", "plan-id": "{plan_id}", "plan-name": "{plan_name}", "publisher-id": "{publisher_id}", "term-unit": "{term_unit}", "term-id": "{term_id}"}}}}\' --user-details \'{{"first-name": "{user_first_name}", "last-name": "{user_last_name}", "email-address": "{user_email}", "upn": "{user_upn}", "phone-number": "{user_phone}"}}\' --informatica-properties \'{{"organization-id": "{org_id}", "organization-name": "{org_name}", "informatica-region": "{informatica_region}"}}\' --link-organization \'{{"token": "{link_token}"}}\'',
            checks=[
                self.check('name', '{name}'),
                self.check('informaticaProperties.organizationName', '{org_name}'),
                self.check('provisioningState', 'Succeeded')
            ])
        
        # List Informatica
        checks = []
        self.cmd('az informatica data-management organization list --subscription {subscription} --resource-group {resource_group}',
        checks=checks)

        # Show Informatica Organization
        self.cmd('az informatica data-management organization show -g {resource_group} -n {name} --subscription {subscription}',
                 checks=[
                self.check('name', '{name}'),
                self.check('informaticaProperties.organizationName', '{org_name}'),
                self.check('provisioningState', 'Succeeded')
            ])

        # Delete Informatica Organization
        checks = []
        self.cmd('az informatica data-management organization delete -n {org_name} -g {resource_group} --subscription {subscription} --yes',
        checks = checks)
