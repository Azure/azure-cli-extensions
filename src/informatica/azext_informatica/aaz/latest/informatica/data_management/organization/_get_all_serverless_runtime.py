# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "informatica data-management organization get-all-serverless-runtime",
)
class GetAllServerlessRuntime(AAZCommand):
    """Gets all serverless runtime resources in a given informatica organization resource.
    """

    _aaz_info = {
        "version": "2024-05-08",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/informatica.datamanagement/organizations/{}/getallserverlessruntimes", "2024-05-08"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.org_name = AAZStrArg(
            options=["--org-name"],
            help="Name of the Organizations resource",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9_-]*$",
            ),
        )
        _args_schema.rg = AAZResourceGroupNameArg(
            options=["--rg"],
            help="Resource group name",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.OrganizationsGetAllServerlessRuntimes(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class OrganizationsGetAllServerlessRuntimes(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/getAllServerlessRuntimes",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.org_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.rg,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-05-08",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.informatica_runtime_resources = AAZListType(
                serialized_name="informaticaRuntimeResources",
                flags={"required": True},
            )

            informatica_runtime_resources = cls._schema_on_200.informatica_runtime_resources
            informatica_runtime_resources.Element = AAZObjectType()

            _element = cls._schema_on_200.informatica_runtime_resources.Element
            _element.created_by = AAZStrType(
                serialized_name="createdBy",
                flags={"required": True},
            )
            _element.created_time = AAZStrType(
                serialized_name="createdTime",
                flags={"required": True},
            )
            _element.description = AAZStrType()
            _element.id = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.serverless_config_properties = AAZObjectType(
                serialized_name="serverlessConfigProperties",
                flags={"required": True},
            )
            _element.status = AAZStrType(
                flags={"required": True},
            )
            _element.status_localized = AAZStrType(
                serialized_name="statusLocalized",
                flags={"required": True},
            )
            _element.status_message = AAZStrType(
                serialized_name="statusMessage",
                flags={"required": True},
            )
            _element.type = AAZStrType(
                flags={"required": True},
            )
            _element.updated_by = AAZStrType(
                serialized_name="updatedBy",
                flags={"required": True},
            )
            _element.updated_time = AAZStrType(
                serialized_name="updatedTime",
                flags={"required": True},
            )

            serverless_config_properties = cls._schema_on_200.informatica_runtime_resources.Element.serverless_config_properties
            serverless_config_properties.advanced_custom_properties = AAZStrType(
                serialized_name="advancedCustomProperties",
            )
            serverless_config_properties.application_type = AAZStrType(
                serialized_name="applicationType",
            )
            serverless_config_properties.compute_units = AAZStrType(
                serialized_name="computeUnits",
            )
            serverless_config_properties.execution_timeout = AAZStrType(
                serialized_name="executionTimeout",
            )
            serverless_config_properties.platform = AAZStrType()
            serverless_config_properties.region = AAZStrType()
            serverless_config_properties.resource_group_name = AAZStrType(
                serialized_name="resourceGroupName",
            )
            serverless_config_properties.serverless_arm_resource_id = AAZStrType(
                serialized_name="serverlessArmResourceId",
            )
            serverless_config_properties.subnet = AAZStrType()
            serverless_config_properties.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
            )
            serverless_config_properties.supplementary_file_location = AAZStrType(
                serialized_name="supplementaryFileLocation",
            )
            serverless_config_properties.tags = AAZStrType()
            serverless_config_properties.tenant_id = AAZStrType(
                serialized_name="tenantId",
            )
            serverless_config_properties.vnet = AAZStrType()

            return cls._schema_on_200


class _GetAllServerlessRuntimeHelper:
    """Helper class for GetAllServerlessRuntime"""


__all__ = ["GetAllServerlessRuntime"]
