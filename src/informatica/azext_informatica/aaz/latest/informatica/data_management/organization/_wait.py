# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "informatica data-management organization wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/informatica.datamanagement/organizations/{}", "2024-05-08"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.org_name = AAZStrArg(
            options=["-n", "--name", "--org-name"],
            help="Name of the Organizations resource",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9_-]*$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Resource group name",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.OrganizationsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class OrganizationsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.org_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-05-08",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.company_details = AAZObjectType(
                serialized_name="companyDetails",
            )
            properties.informatica_properties = AAZObjectType(
                serialized_name="informaticaProperties",
            )
            properties.link_organization = AAZObjectType(
                serialized_name="linkOrganization",
            )
            properties.marketplace_details = AAZObjectType(
                serialized_name="marketplaceDetails",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.user_details = AAZObjectType(
                serialized_name="userDetails",
            )

            company_details = cls._schema_on_200.properties.company_details
            company_details.business = AAZStrType()
            company_details.company_name = AAZStrType(
                serialized_name="companyName",
            )
            company_details.country = AAZStrType()
            company_details.domain = AAZStrType()
            company_details.number_of_employees = AAZIntType(
                serialized_name="numberOfEmployees",
            )
            company_details.office_address = AAZStrType(
                serialized_name="officeAddress",
            )

            informatica_properties = cls._schema_on_200.properties.informatica_properties
            informatica_properties.informatica_region = AAZStrType(
                serialized_name="informaticaRegion",
            )
            informatica_properties.organization_id = AAZStrType(
                serialized_name="organizationId",
            )
            informatica_properties.organization_name = AAZStrType(
                serialized_name="organizationName",
            )
            informatica_properties.single_sign_on_url = AAZStrType(
                serialized_name="singleSignOnUrl",
            )

            link_organization = cls._schema_on_200.properties.link_organization
            link_organization.token = AAZStrType()

            marketplace_details = cls._schema_on_200.properties.marketplace_details
            marketplace_details.marketplace_subscription_id = AAZStrType(
                serialized_name="marketplaceSubscriptionId",
            )
            marketplace_details.offer_details = AAZObjectType(
                serialized_name="offerDetails",
                flags={"required": True},
            )

            offer_details = cls._schema_on_200.properties.marketplace_details.offer_details
            offer_details.offer_id = AAZStrType(
                serialized_name="offerId",
                flags={"required": True},
            )
            offer_details.plan_id = AAZStrType(
                serialized_name="planId",
                flags={"required": True},
            )
            offer_details.plan_name = AAZStrType(
                serialized_name="planName",
                flags={"required": True},
            )
            offer_details.publisher_id = AAZStrType(
                serialized_name="publisherId",
                flags={"required": True},
            )
            offer_details.term_id = AAZStrType(
                serialized_name="termId",
                flags={"required": True},
            )
            offer_details.term_unit = AAZStrType(
                serialized_name="termUnit",
            )

            user_details = cls._schema_on_200.properties.user_details
            user_details.email_address = AAZStrType(
                serialized_name="emailAddress",
            )
            user_details.first_name = AAZStrType(
                serialized_name="firstName",
            )
            user_details.last_name = AAZStrType(
                serialized_name="lastName",
            )
            user_details.phone_number = AAZStrType(
                serialized_name="phoneNumber",
            )
            user_details.upn = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _WaitHelper:
    """Helper class for Wait"""


__all__ = ["Wait"]
