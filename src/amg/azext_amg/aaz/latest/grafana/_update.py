# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "grafana update",
)
class Update(AAZCommand):
    """Update a workspace for Grafana resource.

    :example: disable the public network access
        az grafana update -g MyResourceGroup -n MyGrafana --public-network-access disabled

    :example: enable mail notification through SMTP relay sevice of mailgun
        az grafana update -g MyResourceGroup -n MyGrafana --smtp enabled --from-address johndoe@outlook.com --from-name john --host "smtp.mailgun.org:587" --user "postmaster@sandbox12345.mailgun.org" --password "password" --start-tls-policy OpportunisticStartTLS --skip-verify true
    """

    _aaz_info = {
        "version": "2023-09-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.dashboard/grafana/{}", "2023-09-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.workspace_name = AAZStrArg(
            options=["-n", "--name", "--workspace-name"],
            help="The workspace name of Azure Managed Grafana.",
            required=True,
            id_part="name",
        )
        _args_schema.sku_tier = AAZStrArg(
            options=["--sku-tier"],
            help="The Sku of the grafana resource.",
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            help="The tags for grafana resource.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.service_account = AAZStrArg(
            options=["--api-key", "--service-account"],
            arg_group="Properties",
            help="The api key setting of the Grafana instance.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.deterministic_outbound_ip = AAZStrArg(
            options=["-i", "--deterministic-outbound-ip"],
            arg_group="Properties",
            help="Whether a Grafana instance uses deterministic outbound IPs.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.grafana_major_version = AAZStrArg(
            options=["-v", "--major-version", "--grafana-major-version"],
            arg_group="Properties",
            help="The major Grafana software version to target.",
        )
        _args_schema.public_network_access = AAZStrArg(
            options=["-p", "--public-network-access"],
            arg_group="Properties",
            help="Indicate the state for enable or disable traffic over the public interface.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.zone_redundancy = AAZStrArg(
            options=["--zone-redundancy"],
            arg_group="Properties",
            help="The zone redundancy setting of the Grafana instance.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        # define Arg Group "Smtp"

        _args_schema = cls._args_schema
        _args_schema.smtp_enabled = AAZBoolArg(
            options=["--smtp", "--smtp-enabled"],
            arg_group="Smtp",
            help="Enable this to allow Grafana to send email.",
        )
        _args_schema.from_address = AAZStrArg(
            options=["--from-address"],
            arg_group="Smtp",
            help="Address used when sending out emails https://pkg.go.dev/net/mail#Address",
        )
        _args_schema.from_name = AAZStrArg(
            options=["--from-name"],
            arg_group="Smtp",
            help="Name to be used when sending out emails. Default is \"Azure Managed Grafana Notification\" https://pkg.go.dev/net/mail#Address",
        )
        _args_schema.host = AAZStrArg(
            options=["--host"],
            arg_group="Smtp",
            help="SMTP server hostname with port, e.g. test.email.net:587",
        )
        _args_schema.password = AAZStrArg(
            options=["--password"],
            arg_group="Smtp",
            help="Password of SMTP auth. If the password contains # or ;, then you have to wrap it with triple quotes",
        )
        _args_schema.skip_verify = AAZBoolArg(
            options=["--skip-verify"],
            arg_group="Smtp",
            help="Verify SSL for SMTP server. Default is false https://pkg.go.dev/crypto/tls#Config",
        )
        _args_schema.start_tls_policy = AAZStrArg(
            options=["--start-tls-policy"],
            arg_group="Smtp",
            help="The StartTLSPolicy setting of the SMTP configuration https://pkg.go.dev/github.com/go-mail/mail#StartTLSPolicy",
            enum={"MandatoryStartTLS": "MandatoryStartTLS", "NoStartTLS": "NoStartTLS", "OpportunisticStartTLS": "OpportunisticStartTLS"},
        )
        _args_schema.user = AAZStrArg(
            options=["--user"],
            arg_group="Smtp",
            help="User of SMTP auth",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.GrafanaUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class GrafanaUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)
            if session.http_response.status_code in [202]:
                return self.on_202(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Dashboard/grafana/{workspaceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "workspaceName", self.ctx.args.workspace_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-09-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("sku", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("apiKey", AAZStrType, ".service_account")
                properties.set_prop("deterministicOutboundIP", AAZStrType, ".deterministic_outbound_ip")
                properties.set_prop("grafanaConfigurations", AAZObjectType)
                properties.set_prop("grafanaMajorVersion", AAZStrType, ".grafana_major_version")
                properties.set_prop("publicNetworkAccess", AAZStrType, ".public_network_access")
                properties.set_prop("zoneRedundancy", AAZStrType, ".zone_redundancy")

            grafana_configurations = _builder.get(".properties.grafanaConfigurations")
            if grafana_configurations is not None:
                grafana_configurations.set_prop("smtp", AAZObjectType)

            smtp = _builder.get(".properties.grafanaConfigurations.smtp")
            if smtp is not None:
                smtp.set_prop("enabled", AAZBoolType, ".smtp_enabled")
                smtp.set_prop("fromAddress", AAZStrType, ".from_address")
                smtp.set_prop("fromName", AAZStrType, ".from_name")
                smtp.set_prop("host", AAZStrType, ".host")
                smtp.set_prop("password", AAZStrType, ".password", typ_kwargs={"flags": {"secret": True}})
                smtp.set_prop("skipVerify", AAZBoolType, ".skip_verify")
                smtp.set_prop("startTLSPolicy", AAZStrType, ".start_tls_policy")
                smtp.set_prop("user", AAZStrType, ".user")

            sku = _builder.get(".sku")
            if sku is not None:
                sku.set_prop("name", AAZStrType, ".sku_tier", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_managed_grafana_read(cls._schema_on_200)

            return cls._schema_on_200

        def on_202(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_202
            )

        _schema_on_202 = None

        @classmethod
        def _build_schema_on_202(cls):
            if cls._schema_on_202 is not None:
                return cls._schema_on_202

            cls._schema_on_202 = AAZObjectType()
            _UpdateHelper._build_schema_managed_grafana_read(cls._schema_on_202)

            return cls._schema_on_202


class _UpdateHelper:
    """Helper class for Update"""

    _schema_managed_grafana_read = None

    @classmethod
    def _build_schema_managed_grafana_read(cls, _schema):
        if cls._schema_managed_grafana_read is not None:
            _schema.id = cls._schema_managed_grafana_read.id
            _schema.identity = cls._schema_managed_grafana_read.identity
            _schema.location = cls._schema_managed_grafana_read.location
            _schema.name = cls._schema_managed_grafana_read.name
            _schema.properties = cls._schema_managed_grafana_read.properties
            _schema.sku = cls._schema_managed_grafana_read.sku
            _schema.system_data = cls._schema_managed_grafana_read.system_data
            _schema.tags = cls._schema_managed_grafana_read.tags
            _schema.type = cls._schema_managed_grafana_read.type
            return

        cls._schema_managed_grafana_read = _schema_managed_grafana_read = AAZObjectType()

        managed_grafana_read = _schema_managed_grafana_read
        managed_grafana_read.id = AAZStrType(
            flags={"read_only": True},
        )
        managed_grafana_read.identity = AAZObjectType()
        managed_grafana_read.location = AAZStrType()
        managed_grafana_read.name = AAZStrType(
            flags={"read_only": True},
        )
        managed_grafana_read.properties = AAZObjectType()
        managed_grafana_read.sku = AAZObjectType()
        managed_grafana_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        cls._build_schema_system_data_read(managed_grafana_read.system_data)
        managed_grafana_read.tags = AAZDictType()
        managed_grafana_read.type = AAZStrType(
            flags={"read_only": True},
        )

        identity = _schema_managed_grafana_read.identity
        identity.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )
        identity.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )
        identity.type = AAZStrType(
            flags={"required": True},
        )
        identity.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_managed_grafana_read.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType()

        _element = _schema_managed_grafana_read.identity.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
            flags={"read_only": True},
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )

        properties = _schema_managed_grafana_read.properties
        properties.api_key = AAZStrType(
            serialized_name="apiKey",
        )
        properties.auto_generated_domain_name_label_scope = AAZStrType(
            serialized_name="autoGeneratedDomainNameLabelScope",
        )
        properties.deterministic_outbound_ip = AAZStrType(
            serialized_name="deterministicOutboundIP",
        )
        properties.endpoint = AAZStrType(
            flags={"read_only": True},
        )
        properties.enterprise_configurations = AAZObjectType(
            serialized_name="enterpriseConfigurations",
        )
        properties.grafana_configurations = AAZObjectType(
            serialized_name="grafanaConfigurations",
        )
        properties.grafana_integrations = AAZObjectType(
            serialized_name="grafanaIntegrations",
        )
        properties.grafana_major_version = AAZStrType(
            serialized_name="grafanaMajorVersion",
        )
        properties.grafana_plugins = AAZDictType(
            serialized_name="grafanaPlugins",
        )
        properties.grafana_version = AAZStrType(
            serialized_name="grafanaVersion",
            flags={"read_only": True},
        )
        properties.outbound_i_ps = AAZListType(
            serialized_name="outboundIPs",
            flags={"read_only": True},
        )
        properties.private_endpoint_connections = AAZListType(
            serialized_name="privateEndpointConnections",
            flags={"read_only": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.public_network_access = AAZStrType(
            serialized_name="publicNetworkAccess",
        )
        properties.zone_redundancy = AAZStrType(
            serialized_name="zoneRedundancy",
        )

        enterprise_configurations = _schema_managed_grafana_read.properties.enterprise_configurations
        enterprise_configurations.marketplace_auto_renew = AAZStrType(
            serialized_name="marketplaceAutoRenew",
        )
        enterprise_configurations.marketplace_plan_id = AAZStrType(
            serialized_name="marketplacePlanId",
        )

        grafana_configurations = _schema_managed_grafana_read.properties.grafana_configurations
        grafana_configurations.smtp = AAZObjectType()

        smtp = _schema_managed_grafana_read.properties.grafana_configurations.smtp
        smtp.enabled = AAZBoolType()
        smtp.from_address = AAZStrType(
            serialized_name="fromAddress",
        )
        smtp.from_name = AAZStrType(
            serialized_name="fromName",
        )
        smtp.host = AAZStrType()
        smtp.password = AAZStrType(
            flags={"secret": True},
        )
        smtp.skip_verify = AAZBoolType(
            serialized_name="skipVerify",
        )
        smtp.start_tls_policy = AAZStrType(
            serialized_name="startTLSPolicy",
        )
        smtp.user = AAZStrType()

        grafana_integrations = _schema_managed_grafana_read.properties.grafana_integrations
        grafana_integrations.azure_monitor_workspace_integrations = AAZListType(
            serialized_name="azureMonitorWorkspaceIntegrations",
        )

        azure_monitor_workspace_integrations = _schema_managed_grafana_read.properties.grafana_integrations.azure_monitor_workspace_integrations
        azure_monitor_workspace_integrations.Element = AAZObjectType()

        _element = _schema_managed_grafana_read.properties.grafana_integrations.azure_monitor_workspace_integrations.Element
        _element.azure_monitor_workspace_resource_id = AAZStrType(
            serialized_name="azureMonitorWorkspaceResourceId",
        )

        grafana_plugins = _schema_managed_grafana_read.properties.grafana_plugins
        grafana_plugins.Element = AAZObjectType()

        _element = _schema_managed_grafana_read.properties.grafana_plugins.Element
        _element.plugin_id = AAZStrType(
            serialized_name="pluginId",
            flags={"read_only": True},
        )

        outbound_i_ps = _schema_managed_grafana_read.properties.outbound_i_ps
        outbound_i_ps.Element = AAZStrType()

        private_endpoint_connections = _schema_managed_grafana_read.properties.private_endpoint_connections
        private_endpoint_connections.Element = AAZObjectType()

        _element = _schema_managed_grafana_read.properties.private_endpoint_connections.Element
        _element.id = AAZStrType(
            flags={"read_only": True},
        )
        _element.name = AAZStrType(
            flags={"read_only": True},
        )
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        cls._build_schema_system_data_read(_element.system_data)
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_managed_grafana_read.properties.private_endpoint_connections.Element.properties
        properties.group_ids = AAZListType(
            serialized_name="groupIds",
        )
        properties.private_endpoint = AAZObjectType(
            serialized_name="privateEndpoint",
        )
        properties.private_link_service_connection_state = AAZObjectType(
            serialized_name="privateLinkServiceConnectionState",
            flags={"required": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        group_ids = _schema_managed_grafana_read.properties.private_endpoint_connections.Element.properties.group_ids
        group_ids.Element = AAZStrType()

        private_endpoint = _schema_managed_grafana_read.properties.private_endpoint_connections.Element.properties.private_endpoint
        private_endpoint.id = AAZStrType(
            flags={"read_only": True},
        )

        private_link_service_connection_state = _schema_managed_grafana_read.properties.private_endpoint_connections.Element.properties.private_link_service_connection_state
        private_link_service_connection_state.actions_required = AAZStrType(
            serialized_name="actionsRequired",
        )
        private_link_service_connection_state.description = AAZStrType()
        private_link_service_connection_state.status = AAZStrType()

        sku = _schema_managed_grafana_read.sku
        sku.name = AAZStrType(
            flags={"required": True},
        )

        tags = _schema_managed_grafana_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_managed_grafana_read.id
        _schema.identity = cls._schema_managed_grafana_read.identity
        _schema.location = cls._schema_managed_grafana_read.location
        _schema.name = cls._schema_managed_grafana_read.name
        _schema.properties = cls._schema_managed_grafana_read.properties
        _schema.sku = cls._schema_managed_grafana_read.sku
        _schema.system_data = cls._schema_managed_grafana_read.system_data
        _schema.tags = cls._schema_managed_grafana_read.tags
        _schema.type = cls._schema_managed_grafana_read.type

    _schema_system_data_read = None

    @classmethod
    def _build_schema_system_data_read(cls, _schema):
        if cls._schema_system_data_read is not None:
            _schema.created_at = cls._schema_system_data_read.created_at
            _schema.created_by = cls._schema_system_data_read.created_by
            _schema.created_by_type = cls._schema_system_data_read.created_by_type
            _schema.last_modified_at = cls._schema_system_data_read.last_modified_at
            _schema.last_modified_by = cls._schema_system_data_read.last_modified_by
            _schema.last_modified_by_type = cls._schema_system_data_read.last_modified_by_type
            return

        cls._schema_system_data_read = _schema_system_data_read = AAZObjectType(
            flags={"read_only": True}
        )

        system_data_read = _schema_system_data_read
        system_data_read.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data_read.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data_read.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data_read.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data_read.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data_read.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        _schema.created_at = cls._schema_system_data_read.created_at
        _schema.created_by = cls._schema_system_data_read.created_by
        _schema.created_by_type = cls._schema_system_data_read.created_by_type
        _schema.last_modified_at = cls._schema_system_data_read.last_modified_at
        _schema.last_modified_by = cls._schema_system_data_read.last_modified_by
        _schema.last_modified_by_type = cls._schema_system_data_read.last_modified_by_type


__all__ = ["Update"]
