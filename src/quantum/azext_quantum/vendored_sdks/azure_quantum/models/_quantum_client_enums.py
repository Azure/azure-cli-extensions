# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class DimensionScope(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The scope at which the quota is applied.
    """

    WORKSPACE = "Workspace"
    SUBSCRIPTION = "Subscription"

class JobStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The job status.
    """

    WAITING = "Waiting"
    EXECUTING = "Executing"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CANCELLED = "Cancelled"

class MeterPeriod(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The time period in which the quota's underlying meter is accumulated. Based on calendar year.
    'None' is used for concurrent quotas.
    """

    NONE = "None"
    MONTHLY = "Monthly"

class ProviderAvailability(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Provider availability.
    """

    AVAILABLE = "Available"
    DEGRADED = "Degraded"
    UNAVAILABLE = "Unavailable"

class TargetAvailability(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Target availability.
    """

    AVAILABLE = "Available"
    DEGRADED = "Degraded"
    UNAVAILABLE = "Unavailable"
