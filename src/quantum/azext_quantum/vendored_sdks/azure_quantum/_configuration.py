# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, TYPE_CHECKING, Union

from azure.core.credentials import AzureKeyCredential
from azure.core.pipeline import policies

from ._version import VERSION

if TYPE_CHECKING:
    from azure.core.credentials import TokenCredential


class ServicesClientConfiguration:  # pylint: disable=too-many-instance-attributes
    """Configuration for ServicesClient.

    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param region: The Azure region where the Azure Quantum Workspace is located. Required.
    :type region: str
    :param credential: Credential used to authenticate requests to the service. Is either a
     TokenCredential type or a AzureKeyCredential type. Required.
    :type credential: ~azure.core.credentials.TokenCredential or
     ~azure.core.credentials.AzureKeyCredential
    :param service_base_url: The Azure Quantum service base url. Default value is
     "quantum.azure.com".
    :type service_base_url: str
    :keyword api_version: The API version to use for this operation. Default value is
     "2024-10-01-preview". Note that overriding this default value may result in unsupported
     behavior.
    :paramtype api_version: str
    """

    def __init__(
        self,
        region: str,
        credential: Union["TokenCredential", AzureKeyCredential],
        service_base_url: str = "quantum.azure.com",
        **kwargs: Any,
    ) -> None:
        api_version: str = kwargs.pop("api_version", "2024-10-01-preview")

        if region is None:
            raise ValueError("Parameter 'region' must not be None.")
        if credential is None:
            raise ValueError("Parameter 'credential' must not be None.")

        self.region = region
        self.credential = credential
        self.service_base_url = service_base_url
        self.api_version = api_version
        self.credential_scopes = kwargs.pop("credential_scopes", ["https://quantum.microsoft.com/.default"])
        kwargs.setdefault("sdk_moniker", "quantum/{}".format(VERSION))
        self.polling_interval = kwargs.get("polling_interval", 30)
        self._configure(**kwargs)

    def _infer_policy(self, **kwargs):
        if hasattr(self.credential, "get_token"):
            return policies.BearerTokenCredentialPolicy(self.credential, *self.credential_scopes, **kwargs)
        if isinstance(self.credential, AzureKeyCredential):
            return policies.AzureKeyCredentialPolicy(self.credential, "x-ms-quantum-api-key", **kwargs)
        raise TypeError(f"Unsupported credential: {self.credential}")

    def _configure(self, **kwargs: Any) -> None:
        self.user_agent_policy = kwargs.get("user_agent_policy") or policies.UserAgentPolicy(**kwargs)
        self.headers_policy = kwargs.get("headers_policy") or policies.HeadersPolicy(**kwargs)
        self.proxy_policy = kwargs.get("proxy_policy") or policies.ProxyPolicy(**kwargs)
        self.logging_policy = kwargs.get("logging_policy") or policies.NetworkTraceLoggingPolicy(**kwargs)
        self.http_logging_policy = kwargs.get("http_logging_policy") or policies.HttpLoggingPolicy(**kwargs)
        self.custom_hook_policy = kwargs.get("custom_hook_policy") or policies.CustomHookPolicy(**kwargs)
        self.redirect_policy = kwargs.get("redirect_policy") or policies.RedirectPolicy(**kwargs)
        self.retry_policy = kwargs.get("retry_policy") or policies.RetryPolicy(**kwargs)
        self.authentication_policy = kwargs.get("authentication_policy")
        if self.credential and not self.authentication_policy:
            self.authentication_policy = self._infer_policy(**kwargs)
