# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class QuantumWorkspace(Model):
    """The resource proxy definition object for quantum workspace.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The unique id for this workspace.
    :vartype id: str
    :ivar name: The name of this workspace.
    :vartype name: str
    :ivar type: The type of this workspace.
    :vartype type: str
    :param location: The location (region) of this workspace.
    :type location: str
    :param providers: List of Providers selected for this Workspace
    :type providers: list[~quantum.models.Provider]
    :param usable: Whether the current workspace is ready to accept Jobs.
     Possible values include: 'Yes', 'No', 'Partial'
    :type usable: str or ~quantum.models.UsableStatus
    :param provisioning_state: Provisioning status field. Possible values
     include: 'Succeeded', 'ProviderLaunching', 'ProviderUpdating',
     'ProviderDeleting', 'ProviderProvisioning', 'Deleted', 'Failed'
    :type provisioning_state: str or ~quantum.models.ProvisioningStatus
    :param resource_usage_id: Unique id to track resource usage.
    :type resource_usage_id: str
    :param storage_account: ARM Resource Id of the storage account associated
     with this workspace.
    :type storage_account: str
    :param tags: The tags associated with this workspace.
    :type tags: object
    :param identity: Managed Identity information
    :type identity: ~quantum.models.QuantumWorkspaceIdentity
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'providers': {'key': 'properties.providers', 'type': '[Provider]'},
        'usable': {'key': 'properties.usable', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'resource_usage_id': {'key': 'properties.resourceUsageId', 'type': 'str'},
        'storage_account': {'key': 'properties.storageAccount', 'type': 'str'},
        'tags': {'key': 'tags', 'type': 'object'},
        'identity': {'key': 'identity', 'type': 'QuantumWorkspaceIdentity'},
    }

    def __init__(self, **kwargs):
        super(QuantumWorkspace, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.providers = kwargs.get('providers', None)
        self.usable = kwargs.get('usable', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.resource_usage_id = kwargs.get('resource_usage_id', None)
        self.storage_account = kwargs.get('storage_account', None)
        self.tags = kwargs.get('tags', None)
        self.identity = kwargs.get('identity', None)
