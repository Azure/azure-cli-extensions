# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import get_enum_type
from azext_connection.action import (
    AddSecretAuthInfo,
    AddUserAssignedIdentityAuthInfo,
    AddSystemAssignedIdentityAuthInfo,
    AddServicePrincipalSecretAuthInfo,
    AddServicePrincipalCertificateAuthInfo
)


def load_arguments(self, _):

    with self.argument_context('connection linker list') as c:
        c.argument('resource_uri', type=str, help='The fully qualified Azure Resource manager identifier of the '
                   'resource to be connected.')

    with self.argument_context('connection linker show') as c:
        c.argument('resource_uri', type=str, help='The fully qualified Azure Resource manager identifier of the '
                   'resource to be connected.')
        c.argument('linker_name', options_list=['--name', '-n', '--linker-name'], type=str, help='The name Linker '
                   'resource.')

    with self.argument_context('connection linker create') as c:
        c.argument('resource_uri', type=str, help='The fully qualified Azure Resource manager identifier of the '
                   'resource to be connected.')
        c.argument('linker_name', options_list=['--name', '-n', '--linker-name'], type=str, help='The name Linker '
                   'resource.')
        c.argument('target_id', type=str, help='The resource Id of target service.')
        c.argument('secret_auth_info', action=AddSecretAuthInfo, nargs='+', help='The authentication info when '
                   'authType is secret', arg_group='AuthInfo')
        c.argument('user_assigned_identity_auth_info', action=AddUserAssignedIdentityAuthInfo, nargs='+', help='The '
                   'authentication info when authType is userAssignedIdentity', arg_group='AuthInfo')
        c.argument('system_assigned_identity_auth_info', action=AddSystemAssignedIdentityAuthInfo, nargs='+',
                   help='The authentication info when authType is systemAssignedIdentity Expect value: KEY1=VALUE1 '
                   'KEY2=VALUE2 ...', arg_group='AuthInfo')
        c.argument('service_principal_secret_auth_info', action=AddServicePrincipalSecretAuthInfo, nargs='+',
                   help='The authentication info when authType is servicePrincipal secret', arg_group='AuthInfo')
        c.argument('service_principal_certificate_auth_info', action=AddServicePrincipalCertificateAuthInfo, nargs='+',
                   help='The authentication info when authType is servicePrincipal certificate', arg_group='AuthInfo')
        c.argument('client_type', arg_type=get_enum_type(['none', 'dotnet', 'dotnetCore', 'python', 'django', 'php',
                                                          'Nodejs', 'java', 'go', 'springCloudBinding']), help='')

    with self.argument_context('connection linker update') as c:
        c.argument('resource_uri', type=str, help='The fully qualified Azure Resource manager identifier of the '
                   'resource to be connected.')
        c.argument('linker_name', options_list=['--name', '-n', '--linker-name'], type=str, help='The name Linker '
                   'resource.')
        c.argument('target_id', type=str, help='The resource Id of target service.')
        c.argument('secret_auth_info', action=AddSecretAuthInfo, nargs='+', help='The authentication info when '
                   'authType is secret', arg_group='AuthInfo')
        c.argument('user_assigned_identity_auth_info', action=AddUserAssignedIdentityAuthInfo, nargs='+', help='The '
                   'authentication info when authType is userAssignedIdentity', arg_group='AuthInfo')
        c.argument('system_assigned_identity_auth_info', action=AddSystemAssignedIdentityAuthInfo, nargs='+',
                   help='The authentication info when authType is systemAssignedIdentity Expect value: KEY1=VALUE1 '
                   'KEY2=VALUE2 ...', arg_group='AuthInfo')
        c.argument('service_principal_secret_auth_info', action=AddServicePrincipalSecretAuthInfo, nargs='+',
                   help='The authentication info when authType is servicePrincipal secret', arg_group='AuthInfo')
        c.argument('service_principal_certificate_auth_info', action=AddServicePrincipalCertificateAuthInfo, nargs='+',
                   help='The authentication info when authType is servicePrincipal certificate', arg_group='AuthInfo')
        c.argument('client_type', arg_type=get_enum_type(['none', 'dotnet', 'dotnetCore', 'python', 'django', 'php',
                                                          'Nodejs', 'java', 'go', 'springCloudBinding']), help='')

    with self.argument_context('connection linker delete') as c:
        c.argument('resource_uri', type=str, help='The fully qualified Azure Resource manager identifier of the '
                   'resource to be connected.')
        c.argument('linker_name', options_list=['--name', '-n', '--linker-name'], type=str, help='The name Linker '
                   'resource.')

    with self.argument_context('connection linker list-configuration') as c:
        c.argument('resource_uri', type=str, help='The fully qualified Azure Resource manager identifier of the '
                   'resource to be connected.')
        c.argument('linker_name', options_list=['--name', '-n', '--linker-name'], type=str, help='The name Linker '
                   'resource.')

    with self.argument_context('connection linker validate-linker') as c:
        c.argument('resource_uri', type=str, help='The fully qualified Azure Resource manager identifier of the '
                   'resource to be connected.')
        c.argument('linker_name', options_list=['--name', '-n', '--linker-name'], type=str, help='The name Linker '
                   'resource.')

    with self.argument_context('connection linker wait') as c:
        c.argument('resource_uri', type=str, help='The fully qualified Azure Resource manager identifier of the '
                   'resource to be connected.')
        c.argument('linker_name', options_list=['--name', '-n', '--linker-name'], type=str, help='The name Linker '
                   'resource.')
