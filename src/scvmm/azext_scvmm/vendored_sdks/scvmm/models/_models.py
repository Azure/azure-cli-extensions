# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class Resource(msrest.serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: Required. The geo-location where the resource lives.
    :vartype location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: Required. The geo-location where the resource lives.
        :paramtype location: str
        """
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.location = kwargs['location']


class AvailabilitySet(TrackedResource):
    """The AvailabilitySets resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: Required. The geo-location where the resource lives.
    :vartype location: str
    :ivar extended_location: Required. The extended location.
    :vartype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
    :ivar availability_set_name: Name of the availability set.
    :vartype availability_set_name: str
    :ivar vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
    :vartype vmm_server_id: str
    :ivar provisioning_state: Provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted",
     "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'location': {'required': True},
        'extended_location': {'required': True},
        'availability_set_name': {'min_length': 1},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'availability_set_name': {'key': 'properties.availabilitySetName', 'type': 'str'},
        'vmm_server_id': {'key': 'properties.vmmServerId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: Required. The geo-location where the resource lives.
        :paramtype location: str
        :keyword extended_location: Required. The extended location.
        :paramtype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
        :keyword availability_set_name: Name of the availability set.
        :paramtype availability_set_name: str
        :keyword vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
        :paramtype vmm_server_id: str
        """
        super(AvailabilitySet, self).__init__(**kwargs)
        self.extended_location = kwargs['extended_location']
        self.availability_set_name = kwargs.get('availability_set_name', None)
        self.vmm_server_id = kwargs.get('vmm_server_id', None)
        self.provisioning_state = None


class AvailabilitySetListItem(msrest.serialization.Model):
    """Availability Set model.

    :ivar id: Gets the ARM Id of the microsoft.scvmm/availabilitySets resource.
    :vartype id: str
    :ivar name: Gets or sets the name of the availability set.
    :vartype name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Gets the ARM Id of the microsoft.scvmm/availabilitySets resource.
        :paramtype id: str
        :keyword name: Gets or sets the name of the availability set.
        :paramtype name: str
        """
        super(AvailabilitySetListItem, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)


class AvailabilitySetListResult(msrest.serialization.Model):
    """List of AvailabilitySets.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of AvailabilitySets.
    :vartype value: list[~azure.mgmt.scvmm.models.AvailabilitySet]
    :ivar next_link: Url to follow for getting next page of resources.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AvailabilitySet]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of AvailabilitySets.
        :paramtype value: list[~azure.mgmt.scvmm.models.AvailabilitySet]
        """
        super(AvailabilitySetListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class Checkpoint(msrest.serialization.Model):
    """Defines the resource properties.

    :ivar parent_checkpoint_id: Gets ID of parent of the checkpoint.
    :vartype parent_checkpoint_id: str
    :ivar checkpoint_id: Gets ID of the checkpoint.
    :vartype checkpoint_id: str
    :ivar name: Gets name of the checkpoint.
    :vartype name: str
    :ivar description: Gets description of the checkpoint.
    :vartype description: str
    """

    _attribute_map = {
        'parent_checkpoint_id': {'key': 'parentCheckpointID', 'type': 'str'},
        'checkpoint_id': {'key': 'checkpointID', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword parent_checkpoint_id: Gets ID of parent of the checkpoint.
        :paramtype parent_checkpoint_id: str
        :keyword checkpoint_id: Gets ID of the checkpoint.
        :paramtype checkpoint_id: str
        :keyword name: Gets name of the checkpoint.
        :paramtype name: str
        :keyword description: Gets description of the checkpoint.
        :paramtype description: str
        """
        super(Checkpoint, self).__init__(**kwargs)
        self.parent_checkpoint_id = kwargs.get('parent_checkpoint_id', None)
        self.checkpoint_id = kwargs.get('checkpoint_id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)


class Cloud(TrackedResource):
    """The Clouds resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: Required. The geo-location where the resource lives.
    :vartype location: str
    :ivar extended_location: Required. The extended location.
    :vartype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
    :ivar inventory_item_id: Gets or sets the inventory Item ID for the resource.
    :vartype inventory_item_id: str
    :ivar uuid: Unique ID of the cloud.
    :vartype uuid: str
    :ivar vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
    :vartype vmm_server_id: str
    :ivar cloud_name: Name of the cloud in VMMServer.
    :vartype cloud_name: str
    :ivar cloud_capacity: Capacity of the cloud.
    :vartype cloud_capacity: ~azure.mgmt.scvmm.models.CloudCapacity
    :ivar storage_qo_s_policies: List of QoS policies available for the cloud.
    :vartype storage_qo_s_policies: list[~azure.mgmt.scvmm.models.StorageQoSPolicy]
    :ivar provisioning_state: Provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted",
     "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'location': {'required': True},
        'extended_location': {'required': True},
        'uuid': {'min_length': 1},
        'cloud_name': {'readonly': True},
        'cloud_capacity': {'readonly': True},
        'storage_qo_s_policies': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'inventory_item_id': {'key': 'properties.inventoryItemId', 'type': 'str'},
        'uuid': {'key': 'properties.uuid', 'type': 'str'},
        'vmm_server_id': {'key': 'properties.vmmServerId', 'type': 'str'},
        'cloud_name': {'key': 'properties.cloudName', 'type': 'str'},
        'cloud_capacity': {'key': 'properties.cloudCapacity', 'type': 'CloudCapacity'},
        'storage_qo_s_policies': {'key': 'properties.storageQoSPolicies', 'type': '[StorageQoSPolicy]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: Required. The geo-location where the resource lives.
        :paramtype location: str
        :keyword extended_location: Required. The extended location.
        :paramtype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
        :keyword inventory_item_id: Gets or sets the inventory Item ID for the resource.
        :paramtype inventory_item_id: str
        :keyword uuid: Unique ID of the cloud.
        :paramtype uuid: str
        :keyword vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
        :paramtype vmm_server_id: str
        """
        super(Cloud, self).__init__(**kwargs)
        self.extended_location = kwargs['extended_location']
        self.inventory_item_id = kwargs.get('inventory_item_id', None)
        self.uuid = kwargs.get('uuid', None)
        self.vmm_server_id = kwargs.get('vmm_server_id', None)
        self.cloud_name = None
        self.cloud_capacity = None
        self.storage_qo_s_policies = None
        self.provisioning_state = None


class CloudCapacity(msrest.serialization.Model):
    """Cloud Capacity model.

    :ivar cpu_count: CPUCount specifies the maximum number of CPUs that can be allocated in the
     cloud.
    :vartype cpu_count: long
    :ivar memory_mb: MemoryMB specifies a memory usage limit in megabytes.
    :vartype memory_mb: long
    :ivar vm_count: VMCount gives the max number of VMs that can be deployed in the cloud.
    :vartype vm_count: long
    """

    _attribute_map = {
        'cpu_count': {'key': 'cpuCount', 'type': 'long'},
        'memory_mb': {'key': 'memoryMB', 'type': 'long'},
        'vm_count': {'key': 'vmCount', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword cpu_count: CPUCount specifies the maximum number of CPUs that can be allocated in the
         cloud.
        :paramtype cpu_count: long
        :keyword memory_mb: MemoryMB specifies a memory usage limit in megabytes.
        :paramtype memory_mb: long
        :keyword vm_count: VMCount gives the max number of VMs that can be deployed in the cloud.
        :paramtype vm_count: long
        """
        super(CloudCapacity, self).__init__(**kwargs)
        self.cpu_count = kwargs.get('cpu_count', None)
        self.memory_mb = kwargs.get('memory_mb', None)
        self.vm_count = kwargs.get('vm_count', None)


class InventoryItemProperties(msrest.serialization.Model):
    """Defines the resource properties.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: CloudInventoryItem, VirtualMachineInventoryItem, VirtualMachineTemplateInventoryItem, VirtualNetworkInventoryItem.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar inventory_type: Required. They inventory type.Constant filled by server. Possible values
     include: "Cloud", "VirtualNetwork", "VirtualMachineTemplate", "VirtualMachine".
    :vartype inventory_type: str or ~azure.mgmt.scvmm.models.InventoryType
    :ivar managed_resource_id: Gets the tracked resource id corresponding to the inventory
     resource.
    :vartype managed_resource_id: str
    :ivar uuid: Gets the UUID (which is assigned by VMM) for the inventory item.
    :vartype uuid: str
    :ivar inventory_item_name: Gets the Managed Object name in VMM for the inventory item.
    :vartype inventory_item_name: str
    :ivar provisioning_state: Provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted",
     "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ProvisioningState
    """

    _validation = {
        'inventory_type': {'required': True},
        'managed_resource_id': {'readonly': True},
        'uuid': {'readonly': True},
        'inventory_item_name': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'inventory_type': {'key': 'inventoryType', 'type': 'str'},
        'managed_resource_id': {'key': 'managedResourceId', 'type': 'str'},
        'uuid': {'key': 'uuid', 'type': 'str'},
        'inventory_item_name': {'key': 'inventoryItemName', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    _subtype_map = {
        'inventory_type': {'Cloud': 'CloudInventoryItem', 'VirtualMachine': 'VirtualMachineInventoryItem', 'VirtualMachineTemplate': 'VirtualMachineTemplateInventoryItem', 'VirtualNetwork': 'VirtualNetworkInventoryItem'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(InventoryItemProperties, self).__init__(**kwargs)
        self.inventory_type = None  # type: Optional[str]
        self.managed_resource_id = None
        self.uuid = None
        self.inventory_item_name = None
        self.provisioning_state = None


class CloudInventoryItem(InventoryItemProperties):
    """The Cloud inventory item.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar inventory_type: Required. They inventory type.Constant filled by server. Possible values
     include: "Cloud", "VirtualNetwork", "VirtualMachineTemplate", "VirtualMachine".
    :vartype inventory_type: str or ~azure.mgmt.scvmm.models.InventoryType
    :ivar managed_resource_id: Gets the tracked resource id corresponding to the inventory
     resource.
    :vartype managed_resource_id: str
    :ivar uuid: Gets the UUID (which is assigned by VMM) for the inventory item.
    :vartype uuid: str
    :ivar inventory_item_name: Gets the Managed Object name in VMM for the inventory item.
    :vartype inventory_item_name: str
    :ivar provisioning_state: Provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted",
     "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ProvisioningState
    """

    _validation = {
        'inventory_type': {'required': True},
        'managed_resource_id': {'readonly': True},
        'uuid': {'readonly': True},
        'inventory_item_name': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'inventory_type': {'key': 'inventoryType', 'type': 'str'},
        'managed_resource_id': {'key': 'managedResourceId', 'type': 'str'},
        'uuid': {'key': 'uuid', 'type': 'str'},
        'inventory_item_name': {'key': 'inventoryItemName', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(CloudInventoryItem, self).__init__(**kwargs)
        self.inventory_type = 'Cloud'  # type: str


class CloudListResult(msrest.serialization.Model):
    """List of Clouds.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of Clouds.
    :vartype value: list[~azure.mgmt.scvmm.models.Cloud]
    :ivar next_link: Url to follow for getting next page of resources.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Cloud]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Clouds.
        :paramtype value: list[~azure.mgmt.scvmm.models.Cloud]
        """
        super(CloudListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class ErrorAdditionalInfo(msrest.serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(msrest.serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.scvmm.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.scvmm.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(msrest.serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.scvmm.models.ErrorDetail
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetail'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.scvmm.models.ErrorDetail
        """
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class ExtendedLocation(msrest.serialization.Model):
    """The extended location.

    :ivar type: The extended location type.
    :vartype type: str
    :ivar name: The extended location name.
    :vartype name: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: The extended location type.
        :paramtype type: str
        :keyword name: The extended location name.
        :paramtype name: str
        """
        super(ExtendedLocation, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.name = kwargs.get('name', None)


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ProxyResource, self).__init__(**kwargs)


class GuestAgent(ProxyResource):
    """Defines the GuestAgent.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar uuid: Gets a unique identifier for this resource.
    :vartype uuid: str
    :ivar credentials: Username / Password Credentials to provision guest agent.
    :vartype credentials: ~azure.mgmt.scvmm.models.GuestCredential
    :ivar http_proxy_config: HTTP Proxy configuration for the VM.
    :vartype http_proxy_config: ~azure.mgmt.scvmm.models.HttpProxyConfiguration
    :ivar provisioning_action: Gets or sets the guest agent provisioning action. Possible values
     include: "install", "uninstall", "repair".
    :vartype provisioning_action: str or ~azure.mgmt.scvmm.models.ProvisioningAction
    :ivar status: Gets the guest agent status.
    :vartype status: str
    :ivar custom_resource_name: Gets the name of the corresponding resource in Kubernetes.
    :vartype custom_resource_name: str
    :ivar provisioning_state: Provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted",
     "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'uuid': {'readonly': True},
        'status': {'readonly': True},
        'custom_resource_name': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'uuid': {'key': 'properties.uuid', 'type': 'str'},
        'credentials': {'key': 'properties.credentials', 'type': 'GuestCredential'},
        'http_proxy_config': {'key': 'properties.httpProxyConfig', 'type': 'HttpProxyConfiguration'},
        'provisioning_action': {'key': 'properties.provisioningAction', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'custom_resource_name': {'key': 'properties.customResourceName', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword credentials: Username / Password Credentials to provision guest agent.
        :paramtype credentials: ~azure.mgmt.scvmm.models.GuestCredential
        :keyword http_proxy_config: HTTP Proxy configuration for the VM.
        :paramtype http_proxy_config: ~azure.mgmt.scvmm.models.HttpProxyConfiguration
        :keyword provisioning_action: Gets or sets the guest agent provisioning action. Possible values
         include: "install", "uninstall", "repair".
        :paramtype provisioning_action: str or ~azure.mgmt.scvmm.models.ProvisioningAction
        """
        super(GuestAgent, self).__init__(**kwargs)
        self.uuid = None
        self.credentials = kwargs.get('credentials', None)
        self.http_proxy_config = kwargs.get('http_proxy_config', None)
        self.provisioning_action = kwargs.get('provisioning_action', None)
        self.status = None
        self.custom_resource_name = None
        self.provisioning_state = None


class GuestAgentList(msrest.serialization.Model):
    """List of GuestAgent.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: Url to follow for getting next page of GuestAgent.
    :vartype next_link: str
    :ivar value: Required. Array of GuestAgent.
    :vartype value: list[~azure.mgmt.scvmm.models.GuestAgent]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[GuestAgent]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required. Array of GuestAgent.
        :paramtype value: list[~azure.mgmt.scvmm.models.GuestAgent]
        """
        super(GuestAgentList, self).__init__(**kwargs)
        self.next_link = None
        self.value = kwargs['value']


class GuestCredential(msrest.serialization.Model):
    """Username / Password Credentials to connect to guest.

    All required parameters must be populated in order to send to Azure.

    :ivar username: Required. Gets or sets username to connect with the guest.
    :vartype username: str
    :ivar password: Required. Gets or sets the password to connect with the guest.
    :vartype password: str
    """

    _validation = {
        'username': {'required': True},
        'password': {'required': True},
    }

    _attribute_map = {
        'username': {'key': 'username', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword username: Required. Gets or sets username to connect with the guest.
        :paramtype username: str
        :keyword password: Required. Gets or sets the password to connect with the guest.
        :paramtype password: str
        """
        super(GuestCredential, self).__init__(**kwargs)
        self.username = kwargs['username']
        self.password = kwargs['password']


class HardwareProfile(msrest.serialization.Model):
    """Defines the resource properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar memory_mb: MemoryMB is the size of a virtual machine's memory, in MB.
    :vartype memory_mb: int
    :ivar cpu_count: Gets or sets the number of vCPUs for the vm.
    :vartype cpu_count: int
    :ivar limit_cpu_for_migration: Gets or sets a value indicating whether to enable processor
     compatibility mode for live migration of VMs. Possible values include: "false", "true".
    :vartype limit_cpu_for_migration: str or ~azure.mgmt.scvmm.models.LimitCpuForMigration
    :ivar dynamic_memory_enabled: Gets or sets a value indicating whether to enable dynamic memory
     or not. Possible values include: "false", "true".
    :vartype dynamic_memory_enabled: str or ~azure.mgmt.scvmm.models.DynamicMemoryEnabled
    :ivar dynamic_memory_max_mb: Gets or sets the max dynamic memory for the vm.
    :vartype dynamic_memory_max_mb: int
    :ivar dynamic_memory_min_mb: Gets or sets the min dynamic memory for the vm.
    :vartype dynamic_memory_min_mb: int
    :ivar is_highly_available: Gets highly available property. Possible values include: "false",
     "true".
    :vartype is_highly_available: str or ~azure.mgmt.scvmm.models.IsHighlyAvailable
    """

    _validation = {
        'is_highly_available': {'readonly': True},
    }

    _attribute_map = {
        'memory_mb': {'key': 'memoryMB', 'type': 'int'},
        'cpu_count': {'key': 'cpuCount', 'type': 'int'},
        'limit_cpu_for_migration': {'key': 'limitCpuForMigration', 'type': 'str'},
        'dynamic_memory_enabled': {'key': 'dynamicMemoryEnabled', 'type': 'str'},
        'dynamic_memory_max_mb': {'key': 'dynamicMemoryMaxMB', 'type': 'int'},
        'dynamic_memory_min_mb': {'key': 'dynamicMemoryMinMB', 'type': 'int'},
        'is_highly_available': {'key': 'isHighlyAvailable', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword memory_mb: MemoryMB is the size of a virtual machine's memory, in MB.
        :paramtype memory_mb: int
        :keyword cpu_count: Gets or sets the number of vCPUs for the vm.
        :paramtype cpu_count: int
        :keyword limit_cpu_for_migration: Gets or sets a value indicating whether to enable processor
         compatibility mode for live migration of VMs. Possible values include: "false", "true".
        :paramtype limit_cpu_for_migration: str or ~azure.mgmt.scvmm.models.LimitCpuForMigration
        :keyword dynamic_memory_enabled: Gets or sets a value indicating whether to enable dynamic
         memory or not. Possible values include: "false", "true".
        :paramtype dynamic_memory_enabled: str or ~azure.mgmt.scvmm.models.DynamicMemoryEnabled
        :keyword dynamic_memory_max_mb: Gets or sets the max dynamic memory for the vm.
        :paramtype dynamic_memory_max_mb: int
        :keyword dynamic_memory_min_mb: Gets or sets the min dynamic memory for the vm.
        :paramtype dynamic_memory_min_mb: int
        """
        super(HardwareProfile, self).__init__(**kwargs)
        self.memory_mb = kwargs.get('memory_mb', None)
        self.cpu_count = kwargs.get('cpu_count', None)
        self.limit_cpu_for_migration = kwargs.get('limit_cpu_for_migration', None)
        self.dynamic_memory_enabled = kwargs.get('dynamic_memory_enabled', None)
        self.dynamic_memory_max_mb = kwargs.get('dynamic_memory_max_mb', None)
        self.dynamic_memory_min_mb = kwargs.get('dynamic_memory_min_mb', None)
        self.is_highly_available = None


class HardwareProfileUpdate(msrest.serialization.Model):
    """Defines the resource properties.

    :ivar memory_mb: MemoryMB is the size of a virtual machine's memory, in MB.
    :vartype memory_mb: int
    :ivar cpu_count: Gets or sets the number of vCPUs for the vm.
    :vartype cpu_count: int
    :ivar limit_cpu_for_migration: Gets or sets a value indicating whether to enable processor
     compatibility mode for live migration of VMs. Possible values include: "false", "true".
    :vartype limit_cpu_for_migration: str or ~azure.mgmt.scvmm.models.LimitCpuForMigration
    :ivar dynamic_memory_enabled: Gets or sets a value indicating whether to enable dynamic memory
     or not. Possible values include: "false", "true".
    :vartype dynamic_memory_enabled: str or ~azure.mgmt.scvmm.models.DynamicMemoryEnabled
    :ivar dynamic_memory_max_mb: Gets or sets the max dynamic memory for the vm.
    :vartype dynamic_memory_max_mb: int
    :ivar dynamic_memory_min_mb: Gets or sets the min dynamic memory for the vm.
    :vartype dynamic_memory_min_mb: int
    """

    _attribute_map = {
        'memory_mb': {'key': 'memoryMB', 'type': 'int'},
        'cpu_count': {'key': 'cpuCount', 'type': 'int'},
        'limit_cpu_for_migration': {'key': 'limitCpuForMigration', 'type': 'str'},
        'dynamic_memory_enabled': {'key': 'dynamicMemoryEnabled', 'type': 'str'},
        'dynamic_memory_max_mb': {'key': 'dynamicMemoryMaxMB', 'type': 'int'},
        'dynamic_memory_min_mb': {'key': 'dynamicMemoryMinMB', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword memory_mb: MemoryMB is the size of a virtual machine's memory, in MB.
        :paramtype memory_mb: int
        :keyword cpu_count: Gets or sets the number of vCPUs for the vm.
        :paramtype cpu_count: int
        :keyword limit_cpu_for_migration: Gets or sets a value indicating whether to enable processor
         compatibility mode for live migration of VMs. Possible values include: "false", "true".
        :paramtype limit_cpu_for_migration: str or ~azure.mgmt.scvmm.models.LimitCpuForMigration
        :keyword dynamic_memory_enabled: Gets or sets a value indicating whether to enable dynamic
         memory or not. Possible values include: "false", "true".
        :paramtype dynamic_memory_enabled: str or ~azure.mgmt.scvmm.models.DynamicMemoryEnabled
        :keyword dynamic_memory_max_mb: Gets or sets the max dynamic memory for the vm.
        :paramtype dynamic_memory_max_mb: int
        :keyword dynamic_memory_min_mb: Gets or sets the min dynamic memory for the vm.
        :paramtype dynamic_memory_min_mb: int
        """
        super(HardwareProfileUpdate, self).__init__(**kwargs)
        self.memory_mb = kwargs.get('memory_mb', None)
        self.cpu_count = kwargs.get('cpu_count', None)
        self.limit_cpu_for_migration = kwargs.get('limit_cpu_for_migration', None)
        self.dynamic_memory_enabled = kwargs.get('dynamic_memory_enabled', None)
        self.dynamic_memory_max_mb = kwargs.get('dynamic_memory_max_mb', None)
        self.dynamic_memory_min_mb = kwargs.get('dynamic_memory_min_mb', None)


class HttpProxyConfiguration(msrest.serialization.Model):
    """HTTP Proxy configuration for the VM.

    :ivar https_proxy: Gets or sets httpsProxy url.
    :vartype https_proxy: str
    """

    _attribute_map = {
        'https_proxy': {'key': 'httpsProxy', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword https_proxy: Gets or sets httpsProxy url.
        :paramtype https_proxy: str
        """
        super(HttpProxyConfiguration, self).__init__(**kwargs)
        self.https_proxy = kwargs.get('https_proxy', None)


class Identity(msrest.serialization.Model):
    """Managed service identity.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar principal_id: The principal id of managed service identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant of managed service identity.
    :vartype tenant_id: str
    :ivar type: Required. The type of managed service identity. Possible values include: "None",
     "SystemAssigned".
    :vartype type: str or ~azure.mgmt.scvmm.models.IdentityType
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: Required. The type of managed service identity. Possible values include: "None",
         "SystemAssigned".
        :paramtype type: str or ~azure.mgmt.scvmm.models.IdentityType
        """
        super(Identity, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = kwargs['type']


class InfrastructureProfile(msrest.serialization.Model):
    """Specifies the vmmServer infrastructure specific settings for the virtual machine instance.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar inventory_item_id: Gets or sets the inventory Item ID for the resource.
    :vartype inventory_item_id: str
    :ivar vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
    :vartype vmm_server_id: str
    :ivar cloud_id: ARM Id of the cloud resource to use for deploying the vm.
    :vartype cloud_id: str
    :ivar template_id: ARM Id of the template resource to use for deploying the vm.
    :vartype template_id: str
    :ivar vm_name: VMName is the name of VM on the SCVMM server.
    :vartype vm_name: str
    :ivar uuid: Unique ID of the virtual machine.
    :vartype uuid: str
    :ivar last_restored_vm_checkpoint: Last restored checkpoint in the vm.
    :vartype last_restored_vm_checkpoint: ~azure.mgmt.scvmm.models.Checkpoint
    :ivar checkpoints: Checkpoints in the vm.
    :vartype checkpoints: list[~azure.mgmt.scvmm.models.Checkpoint]
    :ivar checkpoint_type: Type of checkpoint supported for the vm.
    :vartype checkpoint_type: str
    :ivar generation: Gets or sets the generation for the vm.
    :vartype generation: int
    :ivar bios_guid: Gets or sets the bios guid for the vm.
    :vartype bios_guid: str
    """

    _validation = {
        'vm_name': {'min_length': 1},
        'last_restored_vm_checkpoint': {'readonly': True},
    }

    _attribute_map = {
        'inventory_item_id': {'key': 'inventoryItemId', 'type': 'str'},
        'vmm_server_id': {'key': 'vmmServerId', 'type': 'str'},
        'cloud_id': {'key': 'cloudId', 'type': 'str'},
        'template_id': {'key': 'templateId', 'type': 'str'},
        'vm_name': {'key': 'vmName', 'type': 'str'},
        'uuid': {'key': 'uuid', 'type': 'str'},
        'last_restored_vm_checkpoint': {'key': 'lastRestoredVMCheckpoint', 'type': 'Checkpoint'},
        'checkpoints': {'key': 'checkpoints', 'type': '[Checkpoint]'},
        'checkpoint_type': {'key': 'checkpointType', 'type': 'str'},
        'generation': {'key': 'generation', 'type': 'int'},
        'bios_guid': {'key': 'biosGuid', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword inventory_item_id: Gets or sets the inventory Item ID for the resource.
        :paramtype inventory_item_id: str
        :keyword vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
        :paramtype vmm_server_id: str
        :keyword cloud_id: ARM Id of the cloud resource to use for deploying the vm.
        :paramtype cloud_id: str
        :keyword template_id: ARM Id of the template resource to use for deploying the vm.
        :paramtype template_id: str
        :keyword vm_name: VMName is the name of VM on the SCVMM server.
        :paramtype vm_name: str
        :keyword uuid: Unique ID of the virtual machine.
        :paramtype uuid: str
        :keyword checkpoints: Checkpoints in the vm.
        :paramtype checkpoints: list[~azure.mgmt.scvmm.models.Checkpoint]
        :keyword checkpoint_type: Type of checkpoint supported for the vm.
        :paramtype checkpoint_type: str
        :keyword generation: Gets or sets the generation for the vm.
        :paramtype generation: int
        :keyword bios_guid: Gets or sets the bios guid for the vm.
        :paramtype bios_guid: str
        """
        super(InfrastructureProfile, self).__init__(**kwargs)
        self.inventory_item_id = kwargs.get('inventory_item_id', None)
        self.vmm_server_id = kwargs.get('vmm_server_id', None)
        self.cloud_id = kwargs.get('cloud_id', None)
        self.template_id = kwargs.get('template_id', None)
        self.vm_name = kwargs.get('vm_name', None)
        self.uuid = kwargs.get('uuid', None)
        self.last_restored_vm_checkpoint = None
        self.checkpoints = kwargs.get('checkpoints', None)
        self.checkpoint_type = kwargs.get('checkpoint_type', None)
        self.generation = kwargs.get('generation', None)
        self.bios_guid = kwargs.get('bios_guid', None)


class InfrastructureProfileUpdate(msrest.serialization.Model):
    """Specifies the vmmServer infrastructure specific settings for the virtual machine instance for update.

    :ivar checkpoint_type: Type of checkpoint supported for the vm.
    :vartype checkpoint_type: str
    """

    _attribute_map = {
        'checkpoint_type': {'key': 'checkpointType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword checkpoint_type: Type of checkpoint supported for the vm.
        :paramtype checkpoint_type: str
        """
        super(InfrastructureProfileUpdate, self).__init__(**kwargs)
        self.checkpoint_type = kwargs.get('checkpoint_type', None)


class InventoryItem(ProxyResource):
    """Defines the inventory item.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar kind: Metadata used by portal/tooling/etc to render different UX experiences for
     resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported,
     the resource provider must validate and persist this value.
    :vartype kind: str
    :ivar inventory_type: Required. They inventory type.Constant filled by server. Possible values
     include: "Cloud", "VirtualNetwork", "VirtualMachineTemplate", "VirtualMachine".
    :vartype inventory_type: str or ~azure.mgmt.scvmm.models.InventoryType
    :ivar managed_resource_id: Gets the tracked resource id corresponding to the inventory
     resource.
    :vartype managed_resource_id: str
    :ivar uuid: Gets the UUID (which is assigned by VMM) for the inventory item.
    :vartype uuid: str
    :ivar inventory_item_name: Gets the Managed Object name in VMM for the inventory item.
    :vartype inventory_item_name: str
    :ivar provisioning_state: Provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted",
     "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'inventory_type': {'required': True},
        'managed_resource_id': {'readonly': True},
        'uuid': {'readonly': True},
        'inventory_item_name': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'kind': {'key': 'kind', 'type': 'str'},
        'inventory_type': {'key': 'properties.inventoryType', 'type': 'str'},
        'managed_resource_id': {'key': 'properties.managedResourceId', 'type': 'str'},
        'uuid': {'key': 'properties.uuid', 'type': 'str'},
        'inventory_item_name': {'key': 'properties.inventoryItemName', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword kind: Metadata used by portal/tooling/etc to render different UX experiences for
         resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported,
         the resource provider must validate and persist this value.
        :paramtype kind: str
        """
        super(InventoryItem, self).__init__(**kwargs)
        self.kind = kwargs.get('kind', None)
        self.inventory_type = None  # type: Optional[str]
        self.managed_resource_id = None
        self.uuid = None
        self.inventory_item_name = None
        self.provisioning_state = None


class InventoryItemDetails(msrest.serialization.Model):
    """Defines the resource properties.

    :ivar inventory_item_id: Gets or sets the inventory Item ID for the resource.
    :vartype inventory_item_id: str
    :ivar inventory_item_name: Gets or sets the Managed Object name in VMM for the resource.
    :vartype inventory_item_name: str
    """

    _attribute_map = {
        'inventory_item_id': {'key': 'inventoryItemId', 'type': 'str'},
        'inventory_item_name': {'key': 'inventoryItemName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword inventory_item_id: Gets or sets the inventory Item ID for the resource.
        :paramtype inventory_item_id: str
        :keyword inventory_item_name: Gets or sets the Managed Object name in VMM for the resource.
        :paramtype inventory_item_name: str
        """
        super(InventoryItemDetails, self).__init__(**kwargs)
        self.inventory_item_id = kwargs.get('inventory_item_id', None)
        self.inventory_item_name = kwargs.get('inventory_item_name', None)


class InventoryItemsList(msrest.serialization.Model):
    """List of InventoryItems.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: Url to follow for getting next page of InventoryItems.
    :vartype next_link: str
    :ivar value: Required. Array of InventoryItems.
    :vartype value: list[~azure.mgmt.scvmm.models.InventoryItem]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[InventoryItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required. Array of InventoryItems.
        :paramtype value: list[~azure.mgmt.scvmm.models.InventoryItem]
        """
        super(InventoryItemsList, self).__init__(**kwargs)
        self.next_link = None
        self.value = kwargs['value']


class NetworkInterface(msrest.serialization.Model):
    """Network Interface model.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Gets or sets the name of the network interface.
    :vartype name: str
    :ivar display_name: Gets the display name of the network interface as shown in the vmmServer.
     This is the fallback label for a NIC when the name is not set.
    :vartype display_name: str
    :ivar ipv4_addresses: Gets the nic ipv4 addresses.
    :vartype ipv4_addresses: list[str]
    :ivar ipv6_addresses: Gets the nic ipv6 addresses.
    :vartype ipv6_addresses: list[str]
    :ivar mac_address: Gets or sets the nic MAC address.
    :vartype mac_address: str
    :ivar virtual_network_id: Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork
     resource to connect the nic.
    :vartype virtual_network_id: str
    :ivar network_name: Gets the name of the virtual network in vmmServer that the nic is connected
     to.
    :vartype network_name: str
    :ivar ipv4_address_type: Gets or sets the ipv4 address type. Possible values include:
     "Dynamic", "Static".
    :vartype ipv4_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
    :ivar ipv6_address_type: Gets or sets the ipv6 address type. Possible values include:
     "Dynamic", "Static".
    :vartype ipv6_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
    :ivar mac_address_type: Gets or sets the mac address type. Possible values include: "Dynamic",
     "Static".
    :vartype mac_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
    :ivar nic_id: Gets or sets the nic id.
    :vartype nic_id: str
    """

    _validation = {
        'display_name': {'readonly': True},
        'ipv4_addresses': {'readonly': True},
        'ipv6_addresses': {'readonly': True},
        'network_name': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'ipv4_addresses': {'key': 'ipv4Addresses', 'type': '[str]'},
        'ipv6_addresses': {'key': 'ipv6Addresses', 'type': '[str]'},
        'mac_address': {'key': 'macAddress', 'type': 'str'},
        'virtual_network_id': {'key': 'virtualNetworkId', 'type': 'str'},
        'network_name': {'key': 'networkName', 'type': 'str'},
        'ipv4_address_type': {'key': 'ipv4AddressType', 'type': 'str'},
        'ipv6_address_type': {'key': 'ipv6AddressType', 'type': 'str'},
        'mac_address_type': {'key': 'macAddressType', 'type': 'str'},
        'nic_id': {'key': 'nicId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Gets or sets the name of the network interface.
        :paramtype name: str
        :keyword mac_address: Gets or sets the nic MAC address.
        :paramtype mac_address: str
        :keyword virtual_network_id: Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork
         resource to connect the nic.
        :paramtype virtual_network_id: str
        :keyword ipv4_address_type: Gets or sets the ipv4 address type. Possible values include:
         "Dynamic", "Static".
        :paramtype ipv4_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
        :keyword ipv6_address_type: Gets or sets the ipv6 address type. Possible values include:
         "Dynamic", "Static".
        :paramtype ipv6_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
        :keyword mac_address_type: Gets or sets the mac address type. Possible values include:
         "Dynamic", "Static".
        :paramtype mac_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
        :keyword nic_id: Gets or sets the nic id.
        :paramtype nic_id: str
        """
        super(NetworkInterface, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display_name = None
        self.ipv4_addresses = None
        self.ipv6_addresses = None
        self.mac_address = kwargs.get('mac_address', None)
        self.virtual_network_id = kwargs.get('virtual_network_id', None)
        self.network_name = None
        self.ipv4_address_type = kwargs.get('ipv4_address_type', None)
        self.ipv6_address_type = kwargs.get('ipv6_address_type', None)
        self.mac_address_type = kwargs.get('mac_address_type', None)
        self.nic_id = kwargs.get('nic_id', None)


class NetworkInterfaceUpdate(msrest.serialization.Model):
    """Network Interface model.

    :ivar name: Gets or sets the name of the network interface.
    :vartype name: str
    :ivar mac_address: Gets or sets the nic MAC address.
    :vartype mac_address: str
    :ivar virtual_network_id: Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork
     resource to connect the nic.
    :vartype virtual_network_id: str
    :ivar ipv4_address_type: Gets or sets the ipv4 address type. Possible values include:
     "Dynamic", "Static".
    :vartype ipv4_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
    :ivar ipv6_address_type: Gets or sets the ipv6 address type. Possible values include:
     "Dynamic", "Static".
    :vartype ipv6_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
    :ivar mac_address_type: Gets or sets the mac address type. Possible values include: "Dynamic",
     "Static".
    :vartype mac_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
    :ivar nic_id: Gets or sets the nic id.
    :vartype nic_id: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'mac_address': {'key': 'macAddress', 'type': 'str'},
        'virtual_network_id': {'key': 'virtualNetworkId', 'type': 'str'},
        'ipv4_address_type': {'key': 'ipv4AddressType', 'type': 'str'},
        'ipv6_address_type': {'key': 'ipv6AddressType', 'type': 'str'},
        'mac_address_type': {'key': 'macAddressType', 'type': 'str'},
        'nic_id': {'key': 'nicId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Gets or sets the name of the network interface.
        :paramtype name: str
        :keyword mac_address: Gets or sets the nic MAC address.
        :paramtype mac_address: str
        :keyword virtual_network_id: Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork
         resource to connect the nic.
        :paramtype virtual_network_id: str
        :keyword ipv4_address_type: Gets or sets the ipv4 address type. Possible values include:
         "Dynamic", "Static".
        :paramtype ipv4_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
        :keyword ipv6_address_type: Gets or sets the ipv6 address type. Possible values include:
         "Dynamic", "Static".
        :paramtype ipv6_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
        :keyword mac_address_type: Gets or sets the mac address type. Possible values include:
         "Dynamic", "Static".
        :paramtype mac_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
        :keyword nic_id: Gets or sets the nic id.
        :paramtype nic_id: str
        """
        super(NetworkInterfaceUpdate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.mac_address = kwargs.get('mac_address', None)
        self.virtual_network_id = kwargs.get('virtual_network_id', None)
        self.ipv4_address_type = kwargs.get('ipv4_address_type', None)
        self.ipv6_address_type = kwargs.get('ipv6_address_type', None)
        self.mac_address_type = kwargs.get('mac_address_type', None)
        self.nic_id = kwargs.get('nic_id', None)


class NetworkProfile(msrest.serialization.Model):
    """Defines the resource properties.

    :ivar network_interfaces: Gets or sets the list of network interfaces associated with the
     virtual machine.
    :vartype network_interfaces: list[~azure.mgmt.scvmm.models.NetworkInterface]
    """

    _attribute_map = {
        'network_interfaces': {'key': 'networkInterfaces', 'type': '[NetworkInterface]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword network_interfaces: Gets or sets the list of network interfaces associated with the
         virtual machine.
        :paramtype network_interfaces: list[~azure.mgmt.scvmm.models.NetworkInterface]
        """
        super(NetworkProfile, self).__init__(**kwargs)
        self.network_interfaces = kwargs.get('network_interfaces', None)


class NetworkProfileUpdate(msrest.serialization.Model):
    """Defines the resource properties.

    :ivar network_interfaces: Gets or sets the list of network interfaces associated with the
     virtual machine.
    :vartype network_interfaces: list[~azure.mgmt.scvmm.models.NetworkInterfaceUpdate]
    """

    _attribute_map = {
        'network_interfaces': {'key': 'networkInterfaces', 'type': '[NetworkInterfaceUpdate]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword network_interfaces: Gets or sets the list of network interfaces associated with the
         virtual machine.
        :paramtype network_interfaces: list[~azure.mgmt.scvmm.models.NetworkInterfaceUpdate]
        """
        super(NetworkProfileUpdate, self).__init__(**kwargs)
        self.network_interfaces = kwargs.get('network_interfaces', None)


class Operation(msrest.serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.scvmm.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Possible values include: "user",
     "system", "user,system".
    :vartype origin: str or ~azure.mgmt.scvmm.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. Possible values include: "Internal".
    :vartype action_type: str or ~azure.mgmt.scvmm.models.ActionType
    """

    _validation = {
        'name': {'readonly': True},
        'is_data_action': {'readonly': True},
        'origin': {'readonly': True},
        'action_type': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
        'action_type': {'key': 'actionType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.scvmm.models.OperationDisplay
        """
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = kwargs.get('display', None)
        self.origin = None
        self.action_type = None


class OperationDisplay(msrest.serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(msrest.serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.scvmm.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(OperationListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class OsProfileForVMInstance(msrest.serialization.Model):
    """Defines the resource properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar admin_password: Admin password of the virtual machine.
    :vartype admin_password: str
    :ivar computer_name: Gets or sets computer name.
    :vartype computer_name: str
    :ivar os_type: Gets the type of the os. Possible values include: "Windows", "Linux", "Other".
    :vartype os_type: str or ~azure.mgmt.scvmm.models.OsType
    :ivar os_sku: Gets os sku.
    :vartype os_sku: str
    :ivar os_version: Gets os version.
    :vartype os_version: str
    """

    _validation = {
        'os_type': {'readonly': True},
        'os_sku': {'readonly': True},
        'os_version': {'readonly': True},
    }

    _attribute_map = {
        'admin_password': {'key': 'adminPassword', 'type': 'str'},
        'computer_name': {'key': 'computerName', 'type': 'str'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'os_sku': {'key': 'osSku', 'type': 'str'},
        'os_version': {'key': 'osVersion', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword admin_password: Admin password of the virtual machine.
        :paramtype admin_password: str
        :keyword computer_name: Gets or sets computer name.
        :paramtype computer_name: str
        """
        super(OsProfileForVMInstance, self).__init__(**kwargs)
        self.admin_password = kwargs.get('admin_password', None)
        self.computer_name = kwargs.get('computer_name', None)
        self.os_type = None
        self.os_sku = None
        self.os_version = None


class ResourcePatch(msrest.serialization.Model):
    """Object containing tags updates for patch operations.

    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(ResourcePatch, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class StopVirtualMachineOptions(msrest.serialization.Model):
    """Defines the stop action properties.

    :ivar skip_shutdown: Gets or sets a value indicating whether to request non-graceful VM
     shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates
     otherwise. Defaults to false. Possible values include: "false", "true". Default value: "false".
    :vartype skip_shutdown: str or ~azure.mgmt.scvmm.models.SkipShutdown
    """

    _attribute_map = {
        'skip_shutdown': {'key': 'skipShutdown', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword skip_shutdown: Gets or sets a value indicating whether to request non-graceful VM
         shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates
         otherwise. Defaults to false. Possible values include: "false", "true". Default value: "false".
        :paramtype skip_shutdown: str or ~azure.mgmt.scvmm.models.SkipShutdown
        """
        super(StopVirtualMachineOptions, self).__init__(**kwargs)
        self.skip_shutdown = kwargs.get('skip_shutdown', "false")


class StorageProfile(msrest.serialization.Model):
    """Defines the resource properties.

    :ivar disks: Gets or sets the list of virtual disks associated with the virtual machine.
    :vartype disks: list[~azure.mgmt.scvmm.models.VirtualDisk]
    """

    _attribute_map = {
        'disks': {'key': 'disks', 'type': '[VirtualDisk]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword disks: Gets or sets the list of virtual disks associated with the virtual machine.
        :paramtype disks: list[~azure.mgmt.scvmm.models.VirtualDisk]
        """
        super(StorageProfile, self).__init__(**kwargs)
        self.disks = kwargs.get('disks', None)


class StorageProfileUpdate(msrest.serialization.Model):
    """Defines the resource properties.

    :ivar disks: Gets or sets the list of virtual disks associated with the virtual machine.
    :vartype disks: list[~azure.mgmt.scvmm.models.VirtualDiskUpdate]
    """

    _attribute_map = {
        'disks': {'key': 'disks', 'type': '[VirtualDiskUpdate]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword disks: Gets or sets the list of virtual disks associated with the virtual machine.
        :paramtype disks: list[~azure.mgmt.scvmm.models.VirtualDiskUpdate]
        """
        super(StorageProfileUpdate, self).__init__(**kwargs)
        self.disks = kwargs.get('disks', None)


class StorageQoSPolicy(msrest.serialization.Model):
    """The StorageQoSPolicy definition.

    :ivar name: The name of the policy.
    :vartype name: str
    :ivar id: The ID of the QoS policy.
    :vartype id: str
    :ivar iops_maximum: The maximum IO operations per second.
    :vartype iops_maximum: long
    :ivar iops_minimum: The minimum IO operations per second.
    :vartype iops_minimum: long
    :ivar bandwidth_limit: The Bandwidth Limit for internet traffic.
    :vartype bandwidth_limit: long
    :ivar policy_id: The underlying policy.
    :vartype policy_id: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'iops_maximum': {'key': 'iopsMaximum', 'type': 'long'},
        'iops_minimum': {'key': 'iopsMinimum', 'type': 'long'},
        'bandwidth_limit': {'key': 'bandwidthLimit', 'type': 'long'},
        'policy_id': {'key': 'policyId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the policy.
        :paramtype name: str
        :keyword id: The ID of the QoS policy.
        :paramtype id: str
        :keyword iops_maximum: The maximum IO operations per second.
        :paramtype iops_maximum: long
        :keyword iops_minimum: The minimum IO operations per second.
        :paramtype iops_minimum: long
        :keyword bandwidth_limit: The Bandwidth Limit for internet traffic.
        :paramtype bandwidth_limit: long
        :keyword policy_id: The underlying policy.
        :paramtype policy_id: str
        """
        super(StorageQoSPolicy, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.id = kwargs.get('id', None)
        self.iops_maximum = kwargs.get('iops_maximum', None)
        self.iops_minimum = kwargs.get('iops_minimum', None)
        self.bandwidth_limit = kwargs.get('bandwidth_limit', None)
        self.policy_id = kwargs.get('policy_id', None)


class StorageQoSPolicyDetails(msrest.serialization.Model):
    """The StorageQoSPolicyDetails definition.

    :ivar name: The name of the policy.
    :vartype name: str
    :ivar id: The ID of the QoS policy.
    :vartype id: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the policy.
        :paramtype name: str
        :keyword id: The ID of the QoS policy.
        :paramtype id: str
        """
        super(StorageQoSPolicyDetails, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.id = kwargs.get('id', None)


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Possible values include:
     "User", "Application", "ManagedIdentity", "Key".
    :vartype created_by_type: str or ~azure.mgmt.scvmm.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.scvmm.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Possible values
         include: "User", "Application", "ManagedIdentity", "Key".
        :paramtype created_by_type: str or ~azure.mgmt.scvmm.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Possible
         values include: "User", "Application", "ManagedIdentity", "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.scvmm.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super(SystemData, self).__init__(**kwargs)
        self.created_by = kwargs.get('created_by', None)
        self.created_by_type = kwargs.get('created_by_type', None)
        self.created_at = kwargs.get('created_at', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.last_modified_by_type = kwargs.get('last_modified_by_type', None)
        self.last_modified_at = kwargs.get('last_modified_at', None)


class VirtualDisk(msrest.serialization.Model):
    """Virtual disk model.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Gets or sets the name of the disk.
    :vartype name: str
    :ivar display_name: Gets the display name of the virtual disk as shown in the vmmServer. This
     is the fallback label for a disk when the name is not set.
    :vartype display_name: str
    :ivar disk_id: Gets or sets the disk id.
    :vartype disk_id: str
    :ivar disk_size_gb: Gets or sets the disk total size.
    :vartype disk_size_gb: int
    :ivar max_disk_size_gb: Gets the max disk size.
    :vartype max_disk_size_gb: int
    :ivar bus: Gets or sets the disk bus.
    :vartype bus: int
    :ivar lun: Gets or sets the disk lun.
    :vartype lun: int
    :ivar bus_type: Gets or sets the disk bus type.
    :vartype bus_type: str
    :ivar vhd_type: Gets or sets the disk vhd type.
    :vartype vhd_type: str
    :ivar volume_type: Gets the disk volume type.
    :vartype volume_type: str
    :ivar vhd_format_type: Gets the disk vhd format type.
    :vartype vhd_format_type: str
    :ivar template_disk_id: Gets or sets the disk id in the template.
    :vartype template_disk_id: str
    :ivar storage_qo_s_policy: The QoS policy for the disk.
    :vartype storage_qo_s_policy: ~azure.mgmt.scvmm.models.StorageQoSPolicyDetails
    :ivar create_diff_disk: Gets or sets a value indicating diff disk. Possible values include:
     "false", "true".
    :vartype create_diff_disk: str or ~azure.mgmt.scvmm.models.CreateDiffDisk
    """

    _validation = {
        'display_name': {'readonly': True},
        'max_disk_size_gb': {'readonly': True},
        'volume_type': {'readonly': True},
        'vhd_format_type': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'disk_id': {'key': 'diskId', 'type': 'str'},
        'disk_size_gb': {'key': 'diskSizeGB', 'type': 'int'},
        'max_disk_size_gb': {'key': 'maxDiskSizeGB', 'type': 'int'},
        'bus': {'key': 'bus', 'type': 'int'},
        'lun': {'key': 'lun', 'type': 'int'},
        'bus_type': {'key': 'busType', 'type': 'str'},
        'vhd_type': {'key': 'vhdType', 'type': 'str'},
        'volume_type': {'key': 'volumeType', 'type': 'str'},
        'vhd_format_type': {'key': 'vhdFormatType', 'type': 'str'},
        'template_disk_id': {'key': 'templateDiskId', 'type': 'str'},
        'storage_qo_s_policy': {'key': 'storageQoSPolicy', 'type': 'StorageQoSPolicyDetails'},
        'create_diff_disk': {'key': 'createDiffDisk', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Gets or sets the name of the disk.
        :paramtype name: str
        :keyword disk_id: Gets or sets the disk id.
        :paramtype disk_id: str
        :keyword disk_size_gb: Gets or sets the disk total size.
        :paramtype disk_size_gb: int
        :keyword bus: Gets or sets the disk bus.
        :paramtype bus: int
        :keyword lun: Gets or sets the disk lun.
        :paramtype lun: int
        :keyword bus_type: Gets or sets the disk bus type.
        :paramtype bus_type: str
        :keyword vhd_type: Gets or sets the disk vhd type.
        :paramtype vhd_type: str
        :keyword template_disk_id: Gets or sets the disk id in the template.
        :paramtype template_disk_id: str
        :keyword storage_qo_s_policy: The QoS policy for the disk.
        :paramtype storage_qo_s_policy: ~azure.mgmt.scvmm.models.StorageQoSPolicyDetails
        :keyword create_diff_disk: Gets or sets a value indicating diff disk. Possible values include:
         "false", "true".
        :paramtype create_diff_disk: str or ~azure.mgmt.scvmm.models.CreateDiffDisk
        """
        super(VirtualDisk, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display_name = None
        self.disk_id = kwargs.get('disk_id', None)
        self.disk_size_gb = kwargs.get('disk_size_gb', None)
        self.max_disk_size_gb = None
        self.bus = kwargs.get('bus', None)
        self.lun = kwargs.get('lun', None)
        self.bus_type = kwargs.get('bus_type', None)
        self.vhd_type = kwargs.get('vhd_type', None)
        self.volume_type = None
        self.vhd_format_type = None
        self.template_disk_id = kwargs.get('template_disk_id', None)
        self.storage_qo_s_policy = kwargs.get('storage_qo_s_policy', None)
        self.create_diff_disk = kwargs.get('create_diff_disk', None)


class VirtualDiskUpdate(msrest.serialization.Model):
    """Virtual disk model.

    :ivar name: Gets or sets the name of the disk.
    :vartype name: str
    :ivar disk_id: Gets or sets the disk id.
    :vartype disk_id: str
    :ivar disk_size_gb: Gets or sets the disk total size.
    :vartype disk_size_gb: int
    :ivar bus: Gets or sets the disk bus.
    :vartype bus: int
    :ivar lun: Gets or sets the disk lun.
    :vartype lun: int
    :ivar bus_type: Gets or sets the disk bus type.
    :vartype bus_type: str
    :ivar vhd_type: Gets or sets the disk vhd type.
    :vartype vhd_type: str
    :ivar storage_qo_s_policy: The QoS policy for the disk.
    :vartype storage_qo_s_policy: ~azure.mgmt.scvmm.models.StorageQoSPolicyDetails
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'disk_id': {'key': 'diskId', 'type': 'str'},
        'disk_size_gb': {'key': 'diskSizeGB', 'type': 'int'},
        'bus': {'key': 'bus', 'type': 'int'},
        'lun': {'key': 'lun', 'type': 'int'},
        'bus_type': {'key': 'busType', 'type': 'str'},
        'vhd_type': {'key': 'vhdType', 'type': 'str'},
        'storage_qo_s_policy': {'key': 'storageQoSPolicy', 'type': 'StorageQoSPolicyDetails'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Gets or sets the name of the disk.
        :paramtype name: str
        :keyword disk_id: Gets or sets the disk id.
        :paramtype disk_id: str
        :keyword disk_size_gb: Gets or sets the disk total size.
        :paramtype disk_size_gb: int
        :keyword bus: Gets or sets the disk bus.
        :paramtype bus: int
        :keyword lun: Gets or sets the disk lun.
        :paramtype lun: int
        :keyword bus_type: Gets or sets the disk bus type.
        :paramtype bus_type: str
        :keyword vhd_type: Gets or sets the disk vhd type.
        :paramtype vhd_type: str
        :keyword storage_qo_s_policy: The QoS policy for the disk.
        :paramtype storage_qo_s_policy: ~azure.mgmt.scvmm.models.StorageQoSPolicyDetails
        """
        super(VirtualDiskUpdate, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.disk_id = kwargs.get('disk_id', None)
        self.disk_size_gb = kwargs.get('disk_size_gb', None)
        self.bus = kwargs.get('bus', None)
        self.lun = kwargs.get('lun', None)
        self.bus_type = kwargs.get('bus_type', None)
        self.vhd_type = kwargs.get('vhd_type', None)
        self.storage_qo_s_policy = kwargs.get('storage_qo_s_policy', None)


class VirtualMachineCreateCheckpoint(msrest.serialization.Model):
    """Defines the create checkpoint action properties.

    :ivar name: Name of the checkpoint.
    :vartype name: str
    :ivar description: Description of the checkpoint.
    :vartype description: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the checkpoint.
        :paramtype name: str
        :keyword description: Description of the checkpoint.
        :paramtype description: str
        """
        super(VirtualMachineCreateCheckpoint, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)


class VirtualMachineDeleteCheckpoint(msrest.serialization.Model):
    """Defines the delete checkpoint action properties.

    :ivar id: ID of the checkpoint to be deleted.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: ID of the checkpoint to be deleted.
        :paramtype id: str
        """
        super(VirtualMachineDeleteCheckpoint, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class VirtualMachineInstance(ProxyResource):
    """Define the virtualMachineInstance.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar extended_location: Required. Gets or sets the extended location.
    :vartype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
    :ivar availability_sets: Availability Sets in vm.
    :vartype availability_sets: list[~azure.mgmt.scvmm.models.AvailabilitySetListItem]
    :ivar os_profile: OS properties.
    :vartype os_profile: ~azure.mgmt.scvmm.models.OsProfileForVMInstance
    :ivar hardware_profile: Hardware properties.
    :vartype hardware_profile: ~azure.mgmt.scvmm.models.HardwareProfile
    :ivar network_profile: Network properties.
    :vartype network_profile: ~azure.mgmt.scvmm.models.NetworkProfile
    :ivar storage_profile: Storage properties.
    :vartype storage_profile: ~azure.mgmt.scvmm.models.StorageProfile
    :ivar infrastructure_profile: Gets the infrastructure profile.
    :vartype infrastructure_profile: ~azure.mgmt.scvmm.models.InfrastructureProfile
    :ivar power_state: Gets the power state of the virtual machine.
    :vartype power_state: str
    :ivar provisioning_state: Provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted",
     "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'extended_location': {'required': True},
        'power_state': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'availability_sets': {'key': 'properties.availabilitySets', 'type': '[AvailabilitySetListItem]'},
        'os_profile': {'key': 'properties.osProfile', 'type': 'OsProfileForVMInstance'},
        'hardware_profile': {'key': 'properties.hardwareProfile', 'type': 'HardwareProfile'},
        'network_profile': {'key': 'properties.networkProfile', 'type': 'NetworkProfile'},
        'storage_profile': {'key': 'properties.storageProfile', 'type': 'StorageProfile'},
        'infrastructure_profile': {'key': 'properties.infrastructureProfile', 'type': 'InfrastructureProfile'},
        'power_state': {'key': 'properties.powerState', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword extended_location: Required. Gets or sets the extended location.
        :paramtype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
        :keyword availability_sets: Availability Sets in vm.
        :paramtype availability_sets: list[~azure.mgmt.scvmm.models.AvailabilitySetListItem]
        :keyword os_profile: OS properties.
        :paramtype os_profile: ~azure.mgmt.scvmm.models.OsProfileForVMInstance
        :keyword hardware_profile: Hardware properties.
        :paramtype hardware_profile: ~azure.mgmt.scvmm.models.HardwareProfile
        :keyword network_profile: Network properties.
        :paramtype network_profile: ~azure.mgmt.scvmm.models.NetworkProfile
        :keyword storage_profile: Storage properties.
        :paramtype storage_profile: ~azure.mgmt.scvmm.models.StorageProfile
        :keyword infrastructure_profile: Gets the infrastructure profile.
        :paramtype infrastructure_profile: ~azure.mgmt.scvmm.models.InfrastructureProfile
        """
        super(VirtualMachineInstance, self).__init__(**kwargs)
        self.extended_location = kwargs['extended_location']
        self.availability_sets = kwargs.get('availability_sets', None)
        self.os_profile = kwargs.get('os_profile', None)
        self.hardware_profile = kwargs.get('hardware_profile', None)
        self.network_profile = kwargs.get('network_profile', None)
        self.storage_profile = kwargs.get('storage_profile', None)
        self.infrastructure_profile = kwargs.get('infrastructure_profile', None)
        self.power_state = None
        self.provisioning_state = None


class VirtualMachineInstanceListResult(msrest.serialization.Model):
    """List of VirtualMachineInstances.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Array of VirtualMachineInstances.
    :vartype value: list[~azure.mgmt.scvmm.models.VirtualMachineInstance]
    :ivar next_link: Url to follow for getting next page of resources.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualMachineInstance]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Array of VirtualMachineInstances.
        :paramtype value: list[~azure.mgmt.scvmm.models.VirtualMachineInstance]
        """
        super(VirtualMachineInstanceListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class VirtualMachineInstanceUpdate(msrest.serialization.Model):
    """Defines the virtualMachineInstanceUpdate.

    :ivar hardware_profile: Defines the resource properties.
    :vartype hardware_profile: ~azure.mgmt.scvmm.models.HardwareProfileUpdate
    :ivar storage_profile: Defines the resource properties.
    :vartype storage_profile: ~azure.mgmt.scvmm.models.StorageProfileUpdate
    :ivar network_profile: Defines the resource properties.
    :vartype network_profile: ~azure.mgmt.scvmm.models.NetworkProfileUpdate
    :ivar availability_sets: Availability Sets in vm.
    :vartype availability_sets: list[~azure.mgmt.scvmm.models.AvailabilitySetListItem]
    :ivar infrastructure_profile: Gets the infrastructure profile.
    :vartype infrastructure_profile: ~azure.mgmt.scvmm.models.InfrastructureProfileUpdate
    """

    _attribute_map = {
        'hardware_profile': {'key': 'properties.hardwareProfile', 'type': 'HardwareProfileUpdate'},
        'storage_profile': {'key': 'properties.storageProfile', 'type': 'StorageProfileUpdate'},
        'network_profile': {'key': 'properties.networkProfile', 'type': 'NetworkProfileUpdate'},
        'availability_sets': {'key': 'properties.availabilitySets', 'type': '[AvailabilitySetListItem]'},
        'infrastructure_profile': {'key': 'properties.infrastructureProfile', 'type': 'InfrastructureProfileUpdate'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword hardware_profile: Defines the resource properties.
        :paramtype hardware_profile: ~azure.mgmt.scvmm.models.HardwareProfileUpdate
        :keyword storage_profile: Defines the resource properties.
        :paramtype storage_profile: ~azure.mgmt.scvmm.models.StorageProfileUpdate
        :keyword network_profile: Defines the resource properties.
        :paramtype network_profile: ~azure.mgmt.scvmm.models.NetworkProfileUpdate
        :keyword availability_sets: Availability Sets in vm.
        :paramtype availability_sets: list[~azure.mgmt.scvmm.models.AvailabilitySetListItem]
        :keyword infrastructure_profile: Gets the infrastructure profile.
        :paramtype infrastructure_profile: ~azure.mgmt.scvmm.models.InfrastructureProfileUpdate
        """
        super(VirtualMachineInstanceUpdate, self).__init__(**kwargs)
        self.hardware_profile = kwargs.get('hardware_profile', None)
        self.storage_profile = kwargs.get('storage_profile', None)
        self.network_profile = kwargs.get('network_profile', None)
        self.availability_sets = kwargs.get('availability_sets', None)
        self.infrastructure_profile = kwargs.get('infrastructure_profile', None)


class VirtualMachineInventoryItem(InventoryItemProperties):
    """The Virtual machine inventory item.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar inventory_type: Required. They inventory type.Constant filled by server. Possible values
     include: "Cloud", "VirtualNetwork", "VirtualMachineTemplate", "VirtualMachine".
    :vartype inventory_type: str or ~azure.mgmt.scvmm.models.InventoryType
    :ivar managed_resource_id: Gets the tracked resource id corresponding to the inventory
     resource.
    :vartype managed_resource_id: str
    :ivar uuid: Gets the UUID (which is assigned by VMM) for the inventory item.
    :vartype uuid: str
    :ivar inventory_item_name: Gets the Managed Object name in VMM for the inventory item.
    :vartype inventory_item_name: str
    :ivar provisioning_state: Provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted",
     "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ProvisioningState
    :ivar os_type: Gets the type of the os. Possible values include: "Windows", "Linux", "Other".
    :vartype os_type: str or ~azure.mgmt.scvmm.models.OsType
    :ivar os_name: Gets os name.
    :vartype os_name: str
    :ivar os_version: Gets os version.
    :vartype os_version: str
    :ivar power_state: Gets the power state of the virtual machine.
    :vartype power_state: str
    :ivar ip_addresses: Gets or sets the nic ip addresses.
    :vartype ip_addresses: list[str]
    :ivar cloud: Cloud inventory resource details where the VM is present.
    :vartype cloud: ~azure.mgmt.scvmm.models.InventoryItemDetails
    :ivar bios_guid: Gets the bios guid.
    :vartype bios_guid: str
    :ivar managed_machine_resource_id: Gets the tracked resource id corresponding to the inventory
     resource.
    :vartype managed_machine_resource_id: str
    """

    _validation = {
        'inventory_type': {'required': True},
        'managed_resource_id': {'readonly': True},
        'uuid': {'readonly': True},
        'inventory_item_name': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'os_type': {'readonly': True},
        'os_name': {'readonly': True},
        'os_version': {'readonly': True},
        'power_state': {'readonly': True},
        'bios_guid': {'readonly': True},
        'managed_machine_resource_id': {'readonly': True},
    }

    _attribute_map = {
        'inventory_type': {'key': 'inventoryType', 'type': 'str'},
        'managed_resource_id': {'key': 'managedResourceId', 'type': 'str'},
        'uuid': {'key': 'uuid', 'type': 'str'},
        'inventory_item_name': {'key': 'inventoryItemName', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'os_name': {'key': 'osName', 'type': 'str'},
        'os_version': {'key': 'osVersion', 'type': 'str'},
        'power_state': {'key': 'powerState', 'type': 'str'},
        'ip_addresses': {'key': 'ipAddresses', 'type': '[str]'},
        'cloud': {'key': 'cloud', 'type': 'InventoryItemDetails'},
        'bios_guid': {'key': 'biosGuid', 'type': 'str'},
        'managed_machine_resource_id': {'key': 'managedMachineResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword ip_addresses: Gets or sets the nic ip addresses.
        :paramtype ip_addresses: list[str]
        :keyword cloud: Cloud inventory resource details where the VM is present.
        :paramtype cloud: ~azure.mgmt.scvmm.models.InventoryItemDetails
        """
        super(VirtualMachineInventoryItem, self).__init__(**kwargs)
        self.inventory_type = 'VirtualMachine'  # type: str
        self.os_type = None
        self.os_name = None
        self.os_version = None
        self.power_state = None
        self.ip_addresses = kwargs.get('ip_addresses', None)
        self.cloud = kwargs.get('cloud', None)
        self.bios_guid = None
        self.managed_machine_resource_id = None


class VirtualMachineRestoreCheckpoint(msrest.serialization.Model):
    """Defines the restore checkpoint action properties.

    :ivar id: ID of the checkpoint to be restored to.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: ID of the checkpoint to be restored to.
        :paramtype id: str
        """
        super(VirtualMachineRestoreCheckpoint, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class VirtualMachineTemplate(TrackedResource):
    """The VirtualMachineTemplates resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: Required. The geo-location where the resource lives.
    :vartype location: str
    :ivar extended_location: Required. The extended location.
    :vartype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
    :ivar inventory_item_id: Gets or sets the inventory Item ID for the resource.
    :vartype inventory_item_id: str
    :ivar uuid: Unique ID of the virtual machine template.
    :vartype uuid: str
    :ivar vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
    :vartype vmm_server_id: str
    :ivar os_type: Gets the type of the os. Possible values include: "Windows", "Linux", "Other".
    :vartype os_type: str or ~azure.mgmt.scvmm.models.OsType
    :ivar os_name: Gets os name.
    :vartype os_name: str
    :ivar computer_name: Gets computer name.
    :vartype computer_name: str
    :ivar memory_mb: MemoryMB is the desired size of a virtual machine's memory, in MB.
    :vartype memory_mb: int
    :ivar cpu_count: Gets the desired number of vCPUs for the vm.
    :vartype cpu_count: int
    :ivar limit_cpu_for_migration: Gets a value indicating whether to enable processor
     compatibility mode for live migration of VMs. Possible values include: "false", "true".
    :vartype limit_cpu_for_migration: str or ~azure.mgmt.scvmm.models.LimitCpuForMigration
    :ivar dynamic_memory_enabled: Gets a value indicating whether to enable dynamic memory or not.
     Possible values include: "false", "true".
    :vartype dynamic_memory_enabled: str or ~azure.mgmt.scvmm.models.DynamicMemoryEnabled
    :ivar is_customizable: Gets a value indicating whether the vm template is customizable or not.
     Possible values include: "false", "true".
    :vartype is_customizable: str or ~azure.mgmt.scvmm.models.IsCustomizable
    :ivar dynamic_memory_max_mb: Gets the max dynamic memory for the vm.
    :vartype dynamic_memory_max_mb: int
    :ivar dynamic_memory_min_mb: Gets the min dynamic memory for the vm.
    :vartype dynamic_memory_min_mb: int
    :ivar is_highly_available: Gets highly available property. Possible values include: "false",
     "true".
    :vartype is_highly_available: str or ~azure.mgmt.scvmm.models.IsHighlyAvailable
    :ivar generation: Gets the generation for the vm.
    :vartype generation: int
    :ivar network_interfaces: Gets the network interfaces of the template.
    :vartype network_interfaces: list[~azure.mgmt.scvmm.models.NetworkInterface]
    :ivar disks: Gets the disks of the template.
    :vartype disks: list[~azure.mgmt.scvmm.models.VirtualDisk]
    :ivar provisioning_state: Provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted",
     "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'location': {'required': True},
        'extended_location': {'required': True},
        'uuid': {'min_length': 1},
        'os_type': {'readonly': True},
        'os_name': {'readonly': True},
        'computer_name': {'readonly': True},
        'memory_mb': {'readonly': True},
        'cpu_count': {'readonly': True},
        'limit_cpu_for_migration': {'readonly': True},
        'dynamic_memory_enabled': {'readonly': True},
        'is_customizable': {'readonly': True},
        'dynamic_memory_max_mb': {'readonly': True},
        'dynamic_memory_min_mb': {'readonly': True},
        'is_highly_available': {'readonly': True},
        'generation': {'readonly': True},
        'network_interfaces': {'readonly': True},
        'disks': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'inventory_item_id': {'key': 'properties.inventoryItemId', 'type': 'str'},
        'uuid': {'key': 'properties.uuid', 'type': 'str'},
        'vmm_server_id': {'key': 'properties.vmmServerId', 'type': 'str'},
        'os_type': {'key': 'properties.osType', 'type': 'str'},
        'os_name': {'key': 'properties.osName', 'type': 'str'},
        'computer_name': {'key': 'properties.computerName', 'type': 'str'},
        'memory_mb': {'key': 'properties.memoryMB', 'type': 'int'},
        'cpu_count': {'key': 'properties.cpuCount', 'type': 'int'},
        'limit_cpu_for_migration': {'key': 'properties.limitCpuForMigration', 'type': 'str'},
        'dynamic_memory_enabled': {'key': 'properties.dynamicMemoryEnabled', 'type': 'str'},
        'is_customizable': {'key': 'properties.isCustomizable', 'type': 'str'},
        'dynamic_memory_max_mb': {'key': 'properties.dynamicMemoryMaxMB', 'type': 'int'},
        'dynamic_memory_min_mb': {'key': 'properties.dynamicMemoryMinMB', 'type': 'int'},
        'is_highly_available': {'key': 'properties.isHighlyAvailable', 'type': 'str'},
        'generation': {'key': 'properties.generation', 'type': 'int'},
        'network_interfaces': {'key': 'properties.networkInterfaces', 'type': '[NetworkInterface]'},
        'disks': {'key': 'properties.disks', 'type': '[VirtualDisk]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: Required. The geo-location where the resource lives.
        :paramtype location: str
        :keyword extended_location: Required. The extended location.
        :paramtype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
        :keyword inventory_item_id: Gets or sets the inventory Item ID for the resource.
        :paramtype inventory_item_id: str
        :keyword uuid: Unique ID of the virtual machine template.
        :paramtype uuid: str
        :keyword vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
        :paramtype vmm_server_id: str
        """
        super(VirtualMachineTemplate, self).__init__(**kwargs)
        self.extended_location = kwargs['extended_location']
        self.inventory_item_id = kwargs.get('inventory_item_id', None)
        self.uuid = kwargs.get('uuid', None)
        self.vmm_server_id = kwargs.get('vmm_server_id', None)
        self.os_type = None
        self.os_name = None
        self.computer_name = None
        self.memory_mb = None
        self.cpu_count = None
        self.limit_cpu_for_migration = None
        self.dynamic_memory_enabled = None
        self.is_customizable = None
        self.dynamic_memory_max_mb = None
        self.dynamic_memory_min_mb = None
        self.is_highly_available = None
        self.generation = None
        self.network_interfaces = None
        self.disks = None
        self.provisioning_state = None


class VirtualMachineTemplateInventoryItem(InventoryItemProperties):
    """The Virtual machine template inventory item.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar inventory_type: Required. They inventory type.Constant filled by server. Possible values
     include: "Cloud", "VirtualNetwork", "VirtualMachineTemplate", "VirtualMachine".
    :vartype inventory_type: str or ~azure.mgmt.scvmm.models.InventoryType
    :ivar managed_resource_id: Gets the tracked resource id corresponding to the inventory
     resource.
    :vartype managed_resource_id: str
    :ivar uuid: Gets the UUID (which is assigned by VMM) for the inventory item.
    :vartype uuid: str
    :ivar inventory_item_name: Gets the Managed Object name in VMM for the inventory item.
    :vartype inventory_item_name: str
    :ivar provisioning_state: Provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted",
     "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ProvisioningState
    :ivar cpu_count: Gets the desired number of vCPUs for the vm.
    :vartype cpu_count: int
    :ivar memory_mb: MemoryMB is the desired size of a virtual machine's memory, in MB.
    :vartype memory_mb: int
    :ivar os_type: Gets the type of the os. Possible values include: "Windows", "Linux", "Other".
    :vartype os_type: str or ~azure.mgmt.scvmm.models.OsType
    :ivar os_name: Gets os name.
    :vartype os_name: str
    """

    _validation = {
        'inventory_type': {'required': True},
        'managed_resource_id': {'readonly': True},
        'uuid': {'readonly': True},
        'inventory_item_name': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'cpu_count': {'readonly': True},
        'memory_mb': {'readonly': True},
        'os_type': {'readonly': True},
        'os_name': {'readonly': True},
    }

    _attribute_map = {
        'inventory_type': {'key': 'inventoryType', 'type': 'str'},
        'managed_resource_id': {'key': 'managedResourceId', 'type': 'str'},
        'uuid': {'key': 'uuid', 'type': 'str'},
        'inventory_item_name': {'key': 'inventoryItemName', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'cpu_count': {'key': 'cpuCount', 'type': 'int'},
        'memory_mb': {'key': 'memoryMB', 'type': 'int'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'os_name': {'key': 'osName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(VirtualMachineTemplateInventoryItem, self).__init__(**kwargs)
        self.inventory_type = 'VirtualMachineTemplate'  # type: str
        self.cpu_count = None
        self.memory_mb = None
        self.os_type = None
        self.os_name = None


class VirtualMachineTemplateListResult(msrest.serialization.Model):
    """List of VirtualMachineTemplates.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of VirtualMachineTemplates.
    :vartype value: list[~azure.mgmt.scvmm.models.VirtualMachineTemplate]
    :ivar next_link: Url to follow for getting next page of resources.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualMachineTemplate]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VirtualMachineTemplates.
        :paramtype value: list[~azure.mgmt.scvmm.models.VirtualMachineTemplate]
        """
        super(VirtualMachineTemplateListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class VirtualNetwork(TrackedResource):
    """The VirtualNetworks resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: Required. The geo-location where the resource lives.
    :vartype location: str
    :ivar extended_location: Required. The extended location.
    :vartype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
    :ivar inventory_item_id: Gets or sets the inventory Item ID for the resource.
    :vartype inventory_item_id: str
    :ivar uuid: Unique ID of the virtual network.
    :vartype uuid: str
    :ivar vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
    :vartype vmm_server_id: str
    :ivar network_name: Name of the virtual network in vmmServer.
    :vartype network_name: str
    :ivar provisioning_state: Provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted",
     "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'location': {'required': True},
        'extended_location': {'required': True},
        'uuid': {'min_length': 1},
        'network_name': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'inventory_item_id': {'key': 'properties.inventoryItemId', 'type': 'str'},
        'uuid': {'key': 'properties.uuid', 'type': 'str'},
        'vmm_server_id': {'key': 'properties.vmmServerId', 'type': 'str'},
        'network_name': {'key': 'properties.networkName', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: Required. The geo-location where the resource lives.
        :paramtype location: str
        :keyword extended_location: Required. The extended location.
        :paramtype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
        :keyword inventory_item_id: Gets or sets the inventory Item ID for the resource.
        :paramtype inventory_item_id: str
        :keyword uuid: Unique ID of the virtual network.
        :paramtype uuid: str
        :keyword vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
        :paramtype vmm_server_id: str
        """
        super(VirtualNetwork, self).__init__(**kwargs)
        self.extended_location = kwargs['extended_location']
        self.inventory_item_id = kwargs.get('inventory_item_id', None)
        self.uuid = kwargs.get('uuid', None)
        self.vmm_server_id = kwargs.get('vmm_server_id', None)
        self.network_name = None
        self.provisioning_state = None


class VirtualNetworkInventoryItem(InventoryItemProperties):
    """The Virtual network inventory item.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar inventory_type: Required. They inventory type.Constant filled by server. Possible values
     include: "Cloud", "VirtualNetwork", "VirtualMachineTemplate", "VirtualMachine".
    :vartype inventory_type: str or ~azure.mgmt.scvmm.models.InventoryType
    :ivar managed_resource_id: Gets the tracked resource id corresponding to the inventory
     resource.
    :vartype managed_resource_id: str
    :ivar uuid: Gets the UUID (which is assigned by VMM) for the inventory item.
    :vartype uuid: str
    :ivar inventory_item_name: Gets the Managed Object name in VMM for the inventory item.
    :vartype inventory_item_name: str
    :ivar provisioning_state: Provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted",
     "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ProvisioningState
    """

    _validation = {
        'inventory_type': {'required': True},
        'managed_resource_id': {'readonly': True},
        'uuid': {'readonly': True},
        'inventory_item_name': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'inventory_type': {'key': 'inventoryType', 'type': 'str'},
        'managed_resource_id': {'key': 'managedResourceId', 'type': 'str'},
        'uuid': {'key': 'uuid', 'type': 'str'},
        'inventory_item_name': {'key': 'inventoryItemName', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(VirtualNetworkInventoryItem, self).__init__(**kwargs)
        self.inventory_type = 'VirtualNetwork'  # type: str


class VirtualNetworkListResult(msrest.serialization.Model):
    """List of VirtualNetworks.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of VirtualNetworks.
    :vartype value: list[~azure.mgmt.scvmm.models.VirtualNetwork]
    :ivar next_link: Url to follow for getting next page of resources.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetwork]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VirtualNetworks.
        :paramtype value: list[~azure.mgmt.scvmm.models.VirtualNetwork]
        """
        super(VirtualNetworkListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class VmInstanceHybridIdentityMetadata(ProxyResource):
    """Defines the HybridIdentityMetadata.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar resource_uid: The unique identifier for the resource.
    :vartype resource_uid: str
    :ivar public_key: Gets or sets the Public Key.
    :vartype public_key: str
    :ivar provisioning_state: Provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted",
     "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'resource_uid': {'key': 'properties.resourceUid', 'type': 'str'},
        'public_key': {'key': 'properties.publicKey', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword resource_uid: The unique identifier for the resource.
        :paramtype resource_uid: str
        :keyword public_key: Gets or sets the Public Key.
        :paramtype public_key: str
        """
        super(VmInstanceHybridIdentityMetadata, self).__init__(**kwargs)
        self.resource_uid = kwargs.get('resource_uid', None)
        self.public_key = kwargs.get('public_key', None)
        self.provisioning_state = None


class VmInstanceHybridIdentityMetadataList(msrest.serialization.Model):
    """List of HybridIdentityMetadata.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: Url to follow for getting next page of HybridIdentityMetadata.
    :vartype next_link: str
    :ivar value: Required. Array of HybridIdentityMetadata.
    :vartype value: list[~azure.mgmt.scvmm.models.VmInstanceHybridIdentityMetadata]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[VmInstanceHybridIdentityMetadata]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required. Array of HybridIdentityMetadata.
        :paramtype value: list[~azure.mgmt.scvmm.models.VmInstanceHybridIdentityMetadata]
        """
        super(VmInstanceHybridIdentityMetadataList, self).__init__(**kwargs)
        self.next_link = None
        self.value = kwargs['value']


class VMMCredential(msrest.serialization.Model):
    """Credentials to connect to VMMServer.

    :ivar username: Username to use to connect to VMMServer.
    :vartype username: str
    :ivar password: Password to use to connect to VMMServer.
    :vartype password: str
    """

    _attribute_map = {
        'username': {'key': 'username', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword username: Username to use to connect to VMMServer.
        :paramtype username: str
        :keyword password: Password to use to connect to VMMServer.
        :paramtype password: str
        """
        super(VMMCredential, self).__init__(**kwargs)
        self.username = kwargs.get('username', None)
        self.password = kwargs.get('password', None)


class VMMServer(TrackedResource):
    """The VmmServers resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: Required. The geo-location where the resource lives.
    :vartype location: str
    :ivar extended_location: Required. The extended location.
    :vartype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
    :ivar credentials: Credentials to connect to VMMServer.
    :vartype credentials: ~azure.mgmt.scvmm.models.VMMCredential
    :ivar fqdn: Required. Fqdn is the hostname/ip of the vmmServer.
    :vartype fqdn: str
    :ivar port: Port is the port on which the vmmServer is listening.
    :vartype port: int
    :ivar connection_status: Gets the connection status to the vmmServer.
    :vartype connection_status: str
    :ivar error_message: Gets any error message if connection to vmmServer is having any issue.
    :vartype error_message: str
    :ivar uuid: Unique ID of vmmServer.
    :vartype uuid: str
    :ivar version: Version is the version of the vmmSever.
    :vartype version: str
    :ivar provisioning_state: Provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted",
     "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'location': {'required': True},
        'extended_location': {'required': True},
        'fqdn': {'required': True, 'min_length': 1},
        'port': {'maximum': 65535, 'minimum': 1},
        'connection_status': {'readonly': True},
        'error_message': {'readonly': True},
        'uuid': {'readonly': True},
        'version': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'credentials': {'key': 'properties.credentials', 'type': 'VMMCredential'},
        'fqdn': {'key': 'properties.fqdn', 'type': 'str'},
        'port': {'key': 'properties.port', 'type': 'int'},
        'connection_status': {'key': 'properties.connectionStatus', 'type': 'str'},
        'error_message': {'key': 'properties.errorMessage', 'type': 'str'},
        'uuid': {'key': 'properties.uuid', 'type': 'str'},
        'version': {'key': 'properties.version', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: Required. The geo-location where the resource lives.
        :paramtype location: str
        :keyword extended_location: Required. The extended location.
        :paramtype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
        :keyword credentials: Credentials to connect to VMMServer.
        :paramtype credentials: ~azure.mgmt.scvmm.models.VMMCredential
        :keyword fqdn: Required. Fqdn is the hostname/ip of the vmmServer.
        :paramtype fqdn: str
        :keyword port: Port is the port on which the vmmServer is listening.
        :paramtype port: int
        """
        super(VMMServer, self).__init__(**kwargs)
        self.extended_location = kwargs['extended_location']
        self.credentials = kwargs.get('credentials', None)
        self.fqdn = kwargs['fqdn']
        self.port = kwargs.get('port', None)
        self.connection_status = None
        self.error_message = None
        self.uuid = None
        self.version = None
        self.provisioning_state = None


class VMMServerListResult(msrest.serialization.Model):
    """List of VmmServers.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of VmmServers.
    :vartype value: list[~azure.mgmt.scvmm.models.VMMServer]
    :ivar next_link: Url to follow for getting next page of resources.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VMMServer]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of VmmServers.
        :paramtype value: list[~azure.mgmt.scvmm.models.VMMServer]
        """
        super(VMMServerListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None
