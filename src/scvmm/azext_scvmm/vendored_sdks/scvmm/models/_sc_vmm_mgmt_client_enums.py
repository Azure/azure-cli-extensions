# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from six import with_metaclass
from azure.core import CaseInsensitiveEnumMeta


class ActionType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
    """

    INTERNAL = "Internal"

class AllocationMethod(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Network address allocation method.
    """

    #: Dynamically allocated address.
    DYNAMIC = "Dynamic"
    #: Statically allocated address.
    STATIC = "Static"

class CreatedByType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The type of identity that created the resource.
    """

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"

class CreateDiffDisk(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Create diff disk.
    """

    #: Enable create diff disk.
    TRUE = "true"
    #: Disable create diff disk.
    FALSE = "false"

class DeleteFromHost(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    #: Enable delete from host.
    TRUE = "true"
    #: Disable delete from host.
    FALSE = "false"

class DynamicMemoryEnabled(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Dynamic memory enabled.
    """

    #: Enable dynamic memory.
    TRUE = "true"
    #: Disable dynamic memory.
    FALSE = "false"

class ForceDelete(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    #: Enable force delete.
    TRUE = "true"
    #: Disable force delete.
    FALSE = "false"

class InventoryType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The inventory type
    """

    #: Cloud inventory type.
    CLOUD = "Cloud"
    #: VirtualNetwork inventory type.
    VIRTUAL_NETWORK = "VirtualNetwork"
    #: VirtualMachine inventory type.
    VIRTUAL_MACHINE = "VirtualMachine"
    #: VirtualMachineTemplate inventory type.
    VIRTUAL_MACHINE_TEMPLATE = "VirtualMachineTemplate"

class IsCustomizable(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Customizable.
    """

    #: Enable customizable.
    TRUE = "true"
    #: Disable customizable.
    FALSE = "false"

class IsHighlyAvailable(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Highly available.
    """

    #: Enable highly available.
    TRUE = "true"
    #: Disable highly available.
    FALSE = "false"

class LimitCpuForMigration(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Limit CPU for migration.
    """

    #: Enable limit CPU for migration.
    TRUE = "true"
    #: Disable limit CPU for migration.
    FALSE = "false"

class Origin(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
    logs UX. Default value is "user,system"
    """

    USER = "user"
    SYSTEM = "system"
    USER_SYSTEM = "user,system"

class OsType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Virtual machine operating system type.
    """

    #: Windows operating system.
    WINDOWS = "Windows"
    #: Linux operating system.
    LINUX = "Linux"
    #: Other operating system.
    OTHER = "Other"

class ProvisioningAction(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Guest agent provisioning action.
    """

    #: Install guest agent.
    INSTALL = "install"
    #: Uninstall guest agent.
    UNINSTALL = "uninstall"
    #: Repair guest agent.
    REPAIR = "repair"

class ResourceProvisioningState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The provisioning state of the resource.
    """

    #: Resource has been created.
    SUCCEEDED = "Succeeded"
    #: Resource creation failed.
    FAILED = "Failed"
    #: Resource creation was canceled.
    CANCELED = "Canceled"
    #: The resource is provisioning.
    PROVISIONING = "Provisioning"
    #: The resource is updating.
    UPDATING = "Updating"
    #: The resource is being deleted.
    DELETING = "Deleting"
    #: The resource has been accepted.
    ACCEPTED = "Accepted"
    #: The resource was created.
    CREATED = "Created"

class SkipShutdown(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Gets or sets a value indicating whether to request non-graceful VM shutdown. True value for
    this flag indicates non-graceful shutdown whereas false indicates otherwise. Defaults to false.
    """

    #: Enable skip shutdown.
    TRUE = "true"
    #: Disable skip shutdown.
    FALSE = "false"
