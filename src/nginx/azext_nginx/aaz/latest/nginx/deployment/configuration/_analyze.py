# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "nginx deployment configuration analyze",
)
class Analyze(AAZCommand):
    """Analyze an NGINX configuration without applying it to the NGINXaaS deployment

    :example: Config package dry run
        az nginx deployment configuration analyze --deployment-name myDeployment --resource-group myResourceGroup --configuration-name default --root-file <nginx.conf> --package '{data:H4sIAAAAAAAAA+3VbWvbMBAHcL/Op7hCoTCIbckPCU0olG3QvVoog21QMCK+1qGyJGRlpBv57pPXbsla1wkdZS3c70UMdxfxP2wn6mqhVuFcq8vg2cTeKMt+Xb37V56zLGBpwvOYpVkyCmLGspwHED9fpI1l44QFCKzWrm9uV/+Vqpwz8GMA3tI0zqKoQRgzZHfF1net8K6Yp9eTP3WJonGFf3bUptag/YYWWBzGIQvT47G/wb1d1tvlt931w4C8KyB/UsCkt5v2drNHAyZdAZMnBcx7u6Pe7vh3wMHWwCaZXDQOFYwf3KRCiRrhTYgrURuJ/iei3sqt58IttIJo66hWiZdiKV3hbgyCw5WLKlfLyV8zFt3SKuBxDEfTg3cf3376OnsP7dzJtOInZyilhs/ayvJgGvnChTraHLDuyHD/eW0Zq1c3RYOuqFCUfuUz3Tg4rPznpH/wy/AchRx+mMGhxVo7LERZ2p1fmrWl4akxt29K17wRTQPtC3ccRR1D/ijpqmJe4fx698L8ZS3M91mY/8vCyctaONln4WT/hdeD9eB//xkQQgghhBBCCCGEEEIIIYQQQggh5FX6CfCArk8AKAAA}'
    """

    _aaz_info = {
        "version": "2024-11-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/nginx.nginxplus/nginxdeployments/{}/configurations/{}/analyze", "2024-11-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.configuration_name = AAZStrArg(
            options=["-n", "--name", "--configuration-name"],
            help="The name of configuration, only 'default' is supported value due to the singleton of NGINX conf",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-z][a-z0-9]*$",
            ),
        )
        _args_schema.deployment_name = AAZStrArg(
            options=["--deployment-name"],
            help="The name of targeted NGINX deployment",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^([a-z0-9A-Z][a-z0-9A-Z-]{0,28}[a-z0-9A-Z]|[a-z0-9A-Z])$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Config"

        _args_schema = cls._args_schema
        _args_schema.files = AAZListArg(
            options=["--files"],
            arg_group="Config",
            help="Config files. Cannot be used with package, only protected-files",
        )
        _args_schema.package = AAZObjectArg(
            options=["--package"],
            arg_group="Config",
            help="Compressed files. Cannot be used with files or protected-files",
        )
        _args_schema.protected_files = AAZListArg(
            options=["--protected-files"],
            arg_group="Config",
            help="Cannot be used with package, only files",
        )
        _args_schema.root_file = AAZStrArg(
            options=["--root-file"],
            arg_group="Config",
            help="The root file of the NGINX config file(s). It must match one of the files' filepath.",
        )

        files = cls._args_schema.files
        files.Element = AAZObjectArg()

        _element = cls._args_schema.files.Element
        _element.content = AAZStrArg(
            options=["content"],
        )
        _element.virtual_path = AAZStrArg(
            options=["virtual-path"],
        )

        package = cls._args_schema.package
        package.data = AAZStrArg(
            options=["data"],
        )
        package.protected_files = AAZListArg(
            options=["protected-files"],
        )

        protected_files = cls._args_schema.package.protected_files
        protected_files.Element = AAZStrArg()

        protected_files = cls._args_schema.protected_files
        protected_files.Element = AAZObjectArg()

        _element = cls._args_schema.protected_files.Element
        _element.content = AAZStrArg(
            options=["content"],
            help="The content of the protected file. This value is a PUT only value. If you perform a GET request on this value, it will be empty because it is a protected file.",
        )
        _element.content_hash = AAZStrArg(
            options=["content-hash"],
            help="The hash of the content of the file. This value is used to determine if the file has changed.",
        )
        _element.virtual_path = AAZStrArg(
            options=["virtual-path"],
            help="The virtual path of the protected file.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ConfigurationsAnalysis(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ConfigurationsAnalysis(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{deploymentName}/configurations/{configurationName}/analyze",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "configurationName", self.ctx.args.configuration_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "deploymentName", self.ctx.args.deployment_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-11-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"client_flatten": True}}
            )
            _builder.set_prop("config", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})

            config = _builder.get(".config")
            if config is not None:
                config.set_prop("files", AAZListType, ".files")
                config.set_prop("package", AAZObjectType, ".package")
                config.set_prop("protectedFiles", AAZListType, ".protected_files")
                config.set_prop("rootFile", AAZStrType, ".root_file")

            files = _builder.get(".config.files")
            if files is not None:
                files.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".config.files[]")
            if _elements is not None:
                _elements.set_prop("content", AAZStrType, ".content")
                _elements.set_prop("virtualPath", AAZStrType, ".virtual_path")

            package = _builder.get(".config.package")
            if package is not None:
                package.set_prop("data", AAZStrType, ".data")
                package.set_prop("protectedFiles", AAZListType, ".protected_files")

            protected_files = _builder.get(".config.package.protectedFiles")
            if protected_files is not None:
                protected_files.set_elements(AAZStrType, ".")

            protected_files = _builder.get(".config.protectedFiles")
            if protected_files is not None:
                protected_files.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".config.protectedFiles[]")
            if _elements is not None:
                _elements.set_prop("content", AAZStrType, ".content", typ_kwargs={"flags": {"secret": True}})
                _elements.set_prop("contentHash", AAZStrType, ".content_hash")
                _elements.set_prop("virtualPath", AAZStrType, ".virtual_path")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.data = AAZObjectType()
            _schema_on_200.status = AAZStrType(
                flags={"required": True},
            )

            data = cls._schema_on_200.data
            data.diagnostics = AAZListType()
            data.errors = AAZListType()

            diagnostics = cls._schema_on_200.data.diagnostics
            diagnostics.Element = AAZObjectType()

            _element = cls._schema_on_200.data.diagnostics.Element
            _element.category = AAZStrType()
            _element.description = AAZStrType(
                flags={"required": True},
            )
            _element.directive = AAZStrType(
                flags={"required": True},
            )
            _element.file = AAZStrType(
                flags={"required": True},
            )
            _element.id = AAZStrType()
            _element.level = AAZStrType(
                flags={"required": True},
            )
            _element.line = AAZFloatType(
                flags={"required": True},
            )
            _element.message = AAZStrType(
                flags={"required": True},
            )
            _element.rule = AAZStrType(
                flags={"required": True},
            )

            errors = cls._schema_on_200.data.errors
            errors.Element = AAZObjectType()

            _element = cls._schema_on_200.data.errors.Element
            _element.description = AAZStrType(
                flags={"required": True},
            )
            _element.directive = AAZStrType(
                flags={"required": True},
            )
            _element.file = AAZStrType(
                flags={"required": True},
            )
            _element.id = AAZStrType()
            _element.line = AAZFloatType(
                flags={"required": True},
            )
            _element.message = AAZStrType(
                flags={"required": True},
            )
            _element.rule = AAZStrType(
                flags={"required": True},
            )

            return cls._schema_on_200


class _AnalyzeHelper:
    """Helper class for Analyze"""


__all__ = ["Analyze"]
