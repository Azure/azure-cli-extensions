# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "nginx deployment create",
)
class Create(AAZCommand):
    """Create an NGINX for Azure resource

    :example: Deployment Create with PublicIP
        az nginx deployment create --name myDeployment --resource-group myResourceGroup --location eastus2 --sku name="preview_Monthly_gmz7xq9ge3py" --network-profile front-end-ip-configuration="{public-ip-addresses:[{id:/subscriptions/mySubscription/resourceGroups/myResourceGroup/providers/Microsoft.Network/publicIPAddresses/myPublicIP}]}" network-interface-configuration="{subnet-id:/subscriptions/mySubscription/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet}"

    :example: Deployment Create with PrivateIP
        az nginx deployment create --name myDeployment --resource-group myResourceGroup --location eastus2 --sku name="preview_Monthly_gmz7xq9ge3py" --network-profile front-end-ip-configuration="{private-ip-addresses:[{private-ip-allocation-method:Static,subnet-id:/subscriptions/mySubscription/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet,private-ip-address:10.0.0.2}]}" network-interface-configuration="{subnet-id:/subscriptions/mySubscription/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet}"
        az nginx deployment create --name myDeployment --resource-group myResourceGroup --location eastus2 --sku name="preview_Monthly_gmz7xq9ge3py" --network-profile front-end-ip-configuration="{private-ip-addresses:[{private-ip-allocation-method:Dynamic,subnet-id:/subscriptions/mySubscription/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet,private-ip-address:10.0.0.2}]}" network-interface-configuration="{subnet-id:/subscriptions/mySubscription/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/mySubnet}"

    :example: Deployment with managed identity, storage account and scaling
        az anginx deployment  create --deployment-name myDeployment --myResourceGroup azclitest-geo --location eastus --sku name=preview_Monthly_gmz7xq9ge3py --network-profile network-interface-configuration='{subnet-id:/subscriptions/subscriptionId/resourcegroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/vnet-azclitest/subnets/mySubnet}' front-end-ip-configuration='{public-ip-addresses:[{id:/subscriptions/subscriptionId/resourceGroups/myResourceGroup/providers/Microsoft.Network/publicIPAddresses/myPublicIP}]}' --identity '{"type":"UserAssigned","userAssignedIdentities":{"/subscriptions/subscriptionId/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myManagedIdentity":{}}}' --logging storage-account='{"account-name":"myStorageAccount","container-name":"myContainer"}' --scaling-properties capacity=10
    """

    _aaz_info = {
        "version": "2024-01-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/nginx.nginxplus/nginxdeployments/{}", "2024-01-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.deployment_name = AAZStrArg(
            options=["-n", "--name", "--deployment-name"],
            help={"short-summary": "The name of the targeted NGINX deployment", "long-summary": "It should contain only alphanumeric characters, up to 30 characters long; and cannot begin or end with a hyphen."},
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([a-z0-9A-Z][a-z0-9A-Z-]{0,28}[a-z0-9A-Z]|[a-z0-9A-Z])$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.identity = AAZObjectArg(
            options=["--identity"],
            arg_group="Body",
            help={"short-summary": "Managed identity to perform operations on Azure key vault or storage account", "long-summary": "The managed identity should have necessary access roles on the Azure resources. For certificate access, the managed identity should have cert read access on Azure key vault. For storage account logging, it should have blob contributor role.\nUsage: --identity '{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"/subscriptions/subscriptionId/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myUserAssigneMI\":{}}}'\nType is an enum that accepts values UserAssigned or SystemAssigned"},
        )
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Body",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.sku = AAZObjectArg(
            options=["--sku"],
            arg_group="Body",
            help={"short-summary": "The billing information for the resource", "long-summary": "More information on https://docs.nginx.com/nginx-for-azure/billing/overview/\nUsage: --sku name=XXX"},
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Body",
            help={"short-summary": "Tags for deployment.", "long-summary": "Usage: --tags tag1=\"value1\" tag2=\"value2\""},
        )

        identity = cls._args_schema.identity
        identity.type = AAZStrArg(
            options=["type"],
            help="Type of managed identity to use",
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "SystemAssigned, UserAssigned": "SystemAssigned, UserAssigned", "UserAssigned": "UserAssigned"},
        )
        identity.user_assigned_identities = AAZDictArg(
            options=["user-assigned-identities"],
        )

        user_assigned_identities = cls._args_schema.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectArg(
            blank={},
        )

        sku = cls._args_schema.sku
        sku.name = AAZStrArg(
            options=["name"],
            help="Name of the SKU.",
            required=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.auto_upgrade_profile = AAZObjectArg(
            options=["--auto-upgrade-profile"],
            arg_group="Properties",
            help="Autoupgrade settings of a deployment. can be stable or preview",
        )
        _args_schema.enable_diagnostics = AAZBoolArg(
            options=["--enable-diagnostics"],
            arg_group="Properties",
            help="Boolean to enable/disable diagnostics support",
        )
        _args_schema.logging = AAZObjectArg(
            options=["--logging"],
            arg_group="Properties",
            help={"short-summary": "To have logs sent to your storage account. Must specify managed identity with blob contributor role on Azure storage account", "long-summary": "Usage: --logging storage-account='{\"account-name\":\"<storageaccount>\", \"container-name\":<containername>}'"},
        )
        _args_schema.network_profile = AAZObjectArg(
            options=["--network-profile"],
            arg_group="Properties",
            help={"short-summary": "IP address and VNet + subnet information", "long-summary": "Usage: --network-profile front-end-ip-configuration=\"<private or public IP address information>\" network-interface-configuration=\"<subnet information>\"\nfront-end-ip-configuration: IP information, public or private IP addresses.\nnetwork-interface-configuration: A subnet within your virtual network. This subnet should be delegated to NGINX.NGINXPLUS/nginxDeployments"},
        )
        _args_schema.scaling_properties = AAZObjectArg(
            options=["--scaling-properties"],
            arg_group="Properties",
            help={"short-summary": "Scaling for NGINX capacity units (NCUs)", "long-summary": "For more information- https://docs.nginx.com/nginxaas/azure/billing/overview/\nUsage: --scaling-properties capacity=<NCU value>"},
        )
        _args_schema.user_profile = AAZObjectArg(
            options=["--user-profile"],
            arg_group="Properties",
            help={"short-summary": "Optional: Preferred communication email", "long-summary": "Usage --user-profile preferred-email=xyz@abc.com"},
        )

        auto_upgrade_profile = cls._args_schema.auto_upgrade_profile
        auto_upgrade_profile.upgrade_channel = AAZStrArg(
            options=["upgrade-channel"],
            help="Channel used for autoupgrade.",
            required=True,
        )

        logging = cls._args_schema.logging
        logging.storage_account = AAZObjectArg(
            options=["storage-account"],
        )

        storage_account = cls._args_schema.logging.storage_account
        storage_account.account_name = AAZStrArg(
            options=["account-name"],
        )
        storage_account.container_name = AAZStrArg(
            options=["container-name"],
        )

        network_profile = cls._args_schema.network_profile
        network_profile.front_end_ip_configuration = AAZObjectArg(
            options=["front-end-ip-configuration"],
        )
        network_profile.network_interface_configuration = AAZObjectArg(
            options=["network-interface-configuration"],
        )

        front_end_ip_configuration = cls._args_schema.network_profile.front_end_ip_configuration
        front_end_ip_configuration.private_ip_addresses = AAZListArg(
            options=["private-ip-addresses"],
        )
        front_end_ip_configuration.public_ip_addresses = AAZListArg(
            options=["public-ip-addresses"],
        )

        private_ip_addresses = cls._args_schema.network_profile.front_end_ip_configuration.private_ip_addresses
        private_ip_addresses.Element = AAZObjectArg()

        _element = cls._args_schema.network_profile.front_end_ip_configuration.private_ip_addresses.Element
        _element.private_ip_address = AAZStrArg(
            options=["private-ip-address"],
        )
        _element.private_ip_allocation_method = AAZStrArg(
            options=["private-ip-allocation-method"],
            enum={"Dynamic": "Dynamic", "Static": "Static"},
        )
        _element.subnet_id = AAZStrArg(
            options=["subnet-id"],
        )

        public_ip_addresses = cls._args_schema.network_profile.front_end_ip_configuration.public_ip_addresses
        public_ip_addresses.Element = AAZObjectArg()

        _element = cls._args_schema.network_profile.front_end_ip_configuration.public_ip_addresses.Element
        _element.id = AAZStrArg(
            options=["id"],
        )

        network_interface_configuration = cls._args_schema.network_profile.network_interface_configuration
        network_interface_configuration.subnet_id = AAZStrArg(
            options=["subnet-id"],
        )

        scaling_properties = cls._args_schema.scaling_properties
        scaling_properties.profiles = AAZListArg(
            options=["profiles"],
        )
        scaling_properties.capacity = AAZIntArg(
            options=["capacity"],
        )

        profiles = cls._args_schema.scaling_properties.profiles
        profiles.Element = AAZObjectArg()

        _element = cls._args_schema.scaling_properties.profiles.Element
        _element.capacity = AAZObjectArg(
            options=["capacity"],
            help="The capacity parameters of the profile.",
            required=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            required=True,
        )

        capacity = cls._args_schema.scaling_properties.profiles.Element.capacity
        capacity.max = AAZIntArg(
            options=["max"],
            help="The maximum number of NCUs the deployment can be autoscaled to.",
            required=True,
            fmt=AAZIntArgFormat(
                minimum=0,
            ),
        )
        capacity.min = AAZIntArg(
            options=["min"],
            help="The minimum number of NCUs the deployment can be autoscaled to.",
            required=True,
            fmt=AAZIntArgFormat(
                minimum=0,
            ),
        )

        user_profile = cls._args_schema.user_profile
        user_profile.preferred_email = AAZStrArg(
            options=["preferred-email"],
            help="The preferred support contact email address of the user used for sending alerts and notification. Can be an empty string or a valid email address.",
            fmt=AAZStrArgFormat(
                pattern="^$|^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\.)+[A-Za-z]{2,}$",
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.DeploymentsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class DeploymentsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Nginx.NginxPlus/nginxDeployments/{deploymentName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "deploymentName", self.ctx.args.deployment_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-01-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"client_flatten": True}}
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("sku", AAZObjectType, ".sku")
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".type")
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("autoUpgradeProfile", AAZObjectType, ".auto_upgrade_profile")
                properties.set_prop("enableDiagnosticsSupport", AAZBoolType, ".enable_diagnostics")
                properties.set_prop("logging", AAZObjectType, ".logging")
                properties.set_prop("networkProfile", AAZObjectType, ".network_profile")
                properties.set_prop("scalingProperties", AAZObjectType, ".scaling_properties")
                properties.set_prop("userProfile", AAZObjectType, ".user_profile")

            auto_upgrade_profile = _builder.get(".properties.autoUpgradeProfile")
            if auto_upgrade_profile is not None:
                auto_upgrade_profile.set_prop("upgradeChannel", AAZStrType, ".upgrade_channel", typ_kwargs={"flags": {"required": True}})

            logging = _builder.get(".properties.logging")
            if logging is not None:
                logging.set_prop("storageAccount", AAZObjectType, ".storage_account")

            storage_account = _builder.get(".properties.logging.storageAccount")
            if storage_account is not None:
                storage_account.set_prop("accountName", AAZStrType, ".account_name")
                storage_account.set_prop("containerName", AAZStrType, ".container_name")

            network_profile = _builder.get(".properties.networkProfile")
            if network_profile is not None:
                network_profile.set_prop("frontEndIPConfiguration", AAZObjectType, ".front_end_ip_configuration")
                network_profile.set_prop("networkInterfaceConfiguration", AAZObjectType, ".network_interface_configuration")

            front_end_ip_configuration = _builder.get(".properties.networkProfile.frontEndIPConfiguration")
            if front_end_ip_configuration is not None:
                front_end_ip_configuration.set_prop("privateIPAddresses", AAZListType, ".private_ip_addresses")
                front_end_ip_configuration.set_prop("publicIPAddresses", AAZListType, ".public_ip_addresses")

            private_ip_addresses = _builder.get(".properties.networkProfile.frontEndIPConfiguration.privateIPAddresses")
            if private_ip_addresses is not None:
                private_ip_addresses.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.networkProfile.frontEndIPConfiguration.privateIPAddresses[]")
            if _elements is not None:
                _elements.set_prop("privateIPAddress", AAZStrType, ".private_ip_address")
                _elements.set_prop("privateIPAllocationMethod", AAZStrType, ".private_ip_allocation_method")
                _elements.set_prop("subnetId", AAZStrType, ".subnet_id")

            public_ip_addresses = _builder.get(".properties.networkProfile.frontEndIPConfiguration.publicIPAddresses")
            if public_ip_addresses is not None:
                public_ip_addresses.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.networkProfile.frontEndIPConfiguration.publicIPAddresses[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id")

            network_interface_configuration = _builder.get(".properties.networkProfile.networkInterfaceConfiguration")
            if network_interface_configuration is not None:
                network_interface_configuration.set_prop("subnetId", AAZStrType, ".subnet_id")

            scaling_properties = _builder.get(".properties.scalingProperties")
            if scaling_properties is not None:
                scaling_properties.set_prop("autoScaleSettings", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
                scaling_properties.set_prop("capacity", AAZIntType, ".capacity")

            auto_scale_settings = _builder.get(".properties.scalingProperties.autoScaleSettings")
            if auto_scale_settings is not None:
                auto_scale_settings.set_prop("profiles", AAZListType, ".profiles", typ_kwargs={"flags": {"required": True}})

            profiles = _builder.get(".properties.scalingProperties.autoScaleSettings.profiles")
            if profiles is not None:
                profiles.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.scalingProperties.autoScaleSettings.profiles[]")
            if _elements is not None:
                _elements.set_prop("capacity", AAZObjectType, ".capacity", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})

            capacity = _builder.get(".properties.scalingProperties.autoScaleSettings.profiles[].capacity")
            if capacity is not None:
                capacity.set_prop("max", AAZIntType, ".max", typ_kwargs={"flags": {"required": True}})
                capacity.set_prop("min", AAZIntType, ".min", typ_kwargs={"flags": {"required": True}})

            user_profile = _builder.get(".properties.userProfile")
            if user_profile is not None:
                user_profile.set_prop("preferredEmail", AAZStrType, ".preferred_email")

            sku = _builder.get(".sku")
            if sku is not None:
                sku.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.identity = AAZObjectType()
            _schema_on_200_201.location = AAZStrType()
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.sku = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200_201.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType()
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200_201.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType()

            _element = cls._schema_on_200_201.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.auto_upgrade_profile = AAZObjectType(
                serialized_name="autoUpgradeProfile",
            )
            properties.enable_diagnostics_support = AAZBoolType(
                serialized_name="enableDiagnosticsSupport",
            )
            properties.ip_address = AAZStrType(
                serialized_name="ipAddress",
                flags={"read_only": True},
            )
            properties.logging = AAZObjectType()
            properties.managed_resource_group = AAZStrType(
                serialized_name="managedResourceGroup",
            )
            properties.network_profile = AAZObjectType(
                serialized_name="networkProfile",
            )
            properties.nginx_version = AAZStrType(
                serialized_name="nginxVersion",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.scaling_properties = AAZObjectType(
                serialized_name="scalingProperties",
            )
            properties.user_profile = AAZObjectType(
                serialized_name="userProfile",
            )

            auto_upgrade_profile = cls._schema_on_200_201.properties.auto_upgrade_profile
            auto_upgrade_profile.upgrade_channel = AAZStrType(
                serialized_name="upgradeChannel",
                flags={"required": True},
            )

            logging = cls._schema_on_200_201.properties.logging
            logging.storage_account = AAZObjectType(
                serialized_name="storageAccount",
            )

            storage_account = cls._schema_on_200_201.properties.logging.storage_account
            storage_account.account_name = AAZStrType(
                serialized_name="accountName",
            )
            storage_account.container_name = AAZStrType(
                serialized_name="containerName",
            )

            network_profile = cls._schema_on_200_201.properties.network_profile
            network_profile.front_end_ip_configuration = AAZObjectType(
                serialized_name="frontEndIPConfiguration",
            )
            network_profile.network_interface_configuration = AAZObjectType(
                serialized_name="networkInterfaceConfiguration",
            )

            front_end_ip_configuration = cls._schema_on_200_201.properties.network_profile.front_end_ip_configuration
            front_end_ip_configuration.private_ip_addresses = AAZListType(
                serialized_name="privateIPAddresses",
            )
            front_end_ip_configuration.public_ip_addresses = AAZListType(
                serialized_name="publicIPAddresses",
            )

            private_ip_addresses = cls._schema_on_200_201.properties.network_profile.front_end_ip_configuration.private_ip_addresses
            private_ip_addresses.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.network_profile.front_end_ip_configuration.private_ip_addresses.Element
            _element.private_ip_address = AAZStrType(
                serialized_name="privateIPAddress",
            )
            _element.private_ip_allocation_method = AAZStrType(
                serialized_name="privateIPAllocationMethod",
            )
            _element.subnet_id = AAZStrType(
                serialized_name="subnetId",
            )

            public_ip_addresses = cls._schema_on_200_201.properties.network_profile.front_end_ip_configuration.public_ip_addresses
            public_ip_addresses.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.network_profile.front_end_ip_configuration.public_ip_addresses.Element
            _element.id = AAZStrType()

            network_interface_configuration = cls._schema_on_200_201.properties.network_profile.network_interface_configuration
            network_interface_configuration.subnet_id = AAZStrType(
                serialized_name="subnetId",
            )

            scaling_properties = cls._schema_on_200_201.properties.scaling_properties
            scaling_properties.auto_scale_settings = AAZObjectType(
                serialized_name="autoScaleSettings",
                flags={"client_flatten": True},
            )
            scaling_properties.capacity = AAZIntType()

            auto_scale_settings = cls._schema_on_200_201.properties.scaling_properties.auto_scale_settings
            auto_scale_settings.profiles = AAZListType(
                flags={"required": True},
            )

            profiles = cls._schema_on_200_201.properties.scaling_properties.auto_scale_settings.profiles
            profiles.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.scaling_properties.auto_scale_settings.profiles.Element
            _element.capacity = AAZObjectType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )

            capacity = cls._schema_on_200_201.properties.scaling_properties.auto_scale_settings.profiles.Element.capacity
            capacity.max = AAZIntType(
                flags={"required": True},
            )
            capacity.min = AAZIntType(
                flags={"required": True},
            )

            user_profile = cls._schema_on_200_201.properties.user_profile
            user_profile.preferred_email = AAZStrType(
                serialized_name="preferredEmail",
            )

            sku = cls._schema_on_200_201.sku
            sku.name = AAZStrType(
                flags={"required": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
