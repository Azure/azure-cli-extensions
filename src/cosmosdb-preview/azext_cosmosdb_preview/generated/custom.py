# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from knack.util import CLIError
from azure.cli.core.util import sdk_no_wait


def cosmosdb_database_account_list(client,
                                   resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list()


def cosmosdb_database_account_show(client,
                                   resource_group_name,
                                   account_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name)


def cosmosdb_database_account_create(client,
                                     resource_group_name,
                                     account_name,
                                     locations,
                                     location=None,
                                     tags=None,
                                     type_=None,
                                     user_assigned_identities=None,
                                     kind=None,
                                     consistency_policy=None,
                                     ip_rules=None,
                                     is_virtual_network_filter_enabled=None,
                                     enable_automatic_failover=None,
                                     capabilities=None,
                                     virtual_network_rules=None,
                                     enable_multiple_write_locations=None,
                                     enable_cassandra_connector=None,
                                     disable_key_based_metadata_write_access=None,
                                     key_vault_key_uri=None,
                                     default_identity=None,
                                     public_network_access=None,
                                     enable_free_tier=None,
                                     enable_analytical_storage=None,
                                     periodic_mode_backup_policy=None,
                                     continuous_mode_backup_policy=None,
                                     cors=None,
                                     network_acl_bypass=None,
                                     network_acl_bypass_resource_ids=None,
                                     disable_local_auth=None,
                                     restore_source=None,
                                     restore_timestamp_in_utc=None,
                                     databases_to_restore=None,
                                     enable_full_text_query=None,
                                     schema_type=None,
                                     server_version=None,
                                     no_wait=False):
    all_backup_policy = []
    if periodic_mode_backup_policy is not None:
        all_backup_policy.append(periodic_mode_backup_policy)
    if continuous_mode_backup_policy is not None:
        all_backup_policy.append(continuous_mode_backup_policy)
    if len(all_backup_policy) > 1:
        raise CLIError('at most one of  periodic_mode_backup_policy, continuous_mode_backup_policy is needed for '
                       'backup_policy!')
    backup_policy = all_backup_policy[0] if len(all_backup_policy) == 1 else None
    create_update_parameters = {}
    if location is not None:
        create_update_parameters['location'] = location
    if tags is not None:
        create_update_parameters['tags'] = tags
    create_update_parameters['identity'] = {}
    if type_ is not None:
        create_update_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        create_update_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(create_update_parameters['identity']) == 0:
        del create_update_parameters['identity']
    if kind is not None:
        create_update_parameters['kind'] = kind
    if consistency_policy is not None:
        create_update_parameters['consistency_policy'] = consistency_policy
    create_update_parameters['locations'] = locations
    create_update_parameters['database_account_offer_type'] = "Standard"
    if ip_rules is not None:
        create_update_parameters['ip_rules'] = ip_rules
    if is_virtual_network_filter_enabled is not None:
        create_update_parameters['is_virtual_network_filter_enabled'] = is_virtual_network_filter_enabled
    if enable_automatic_failover is not None:
        create_update_parameters['enable_automatic_failover'] = enable_automatic_failover
    if capabilities is not None:
        create_update_parameters['capabilities'] = capabilities
    if virtual_network_rules is not None:
        create_update_parameters['virtual_network_rules'] = virtual_network_rules
    if enable_multiple_write_locations is not None:
        create_update_parameters['enable_multiple_write_locations'] = enable_multiple_write_locations
    if enable_cassandra_connector is not None:
        create_update_parameters['enable_cassandra_connector'] = enable_cassandra_connector
    create_update_parameters['connector_offer'] = "Small"
    if disable_key_based_metadata_write_access is not None:
        create_update_parameters['disable_key_based_metadata_write_access'] = disable_key_based_metadata_write_access
    if key_vault_key_uri is not None:
        create_update_parameters['key_vault_key_uri'] = key_vault_key_uri
    if default_identity is not None:
        create_update_parameters['default_identity'] = default_identity
    if public_network_access is not None:
        create_update_parameters['public_network_access'] = public_network_access
    if enable_free_tier is not None:
        create_update_parameters['enable_free_tier'] = enable_free_tier
    if enable_analytical_storage is not None:
        create_update_parameters['enable_analytical_storage'] = enable_analytical_storage
    if backup_policy is not None:
        create_update_parameters['backup_policy'] = backup_policy
    if cors is not None:
        create_update_parameters['cors'] = cors
    if network_acl_bypass is not None:
        create_update_parameters['network_acl_bypass'] = network_acl_bypass
    if network_acl_bypass_resource_ids is not None:
        create_update_parameters['network_acl_bypass_resource_ids'] = network_acl_bypass_resource_ids
    if disable_local_auth is not None:
        create_update_parameters['disable_local_auth'] = disable_local_auth
    create_update_parameters['restore_parameters'] = {}
    create_update_parameters['restore_parameters']['restore_mode'] = "PointInTime"
    if restore_source is not None:
        create_update_parameters['restore_parameters']['restore_source'] = restore_source
    if restore_timestamp_in_utc is not None:
        create_update_parameters['restore_parameters']['restore_timestamp_in_utc'] = restore_timestamp_in_utc
    if databases_to_restore is not None:
        create_update_parameters['restore_parameters']['databases_to_restore'] = databases_to_restore
    if len(create_update_parameters['restore_parameters']) == 0:
        del create_update_parameters['restore_parameters']
    create_update_parameters['diagnostic_log_settings'] = {}
    if enable_full_text_query is not None:
        create_update_parameters['diagnostic_log_settings']['enable_full_text_query'] = enable_full_text_query
    if len(create_update_parameters['diagnostic_log_settings']) == 0:
        del create_update_parameters['diagnostic_log_settings']
    create_update_parameters['analytical_storage_configuration'] = {}
    if schema_type is not None:
        create_update_parameters['analytical_storage_configuration']['schema_type'] = schema_type
    if len(create_update_parameters['analytical_storage_configuration']) == 0:
        del create_update_parameters['analytical_storage_configuration']
    create_update_parameters['api_properties'] = {}
    if server_version is not None:
        create_update_parameters['api_properties']['server_version'] = server_version
    if len(create_update_parameters['api_properties']) == 0:
        del create_update_parameters['api_properties']
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       create_update_parameters=create_update_parameters)


def cosmosdb_database_account_update(client,
                                     resource_group_name,
                                     account_name,
                                     tags=None,
                                     location=None,
                                     consistency_policy=None,
                                     locations=None,
                                     ip_rules=None,
                                     is_virtual_network_filter_enabled=None,
                                     enable_automatic_failover=None,
                                     capabilities=None,
                                     virtual_network_rules=None,
                                     enable_multiple_write_locations=None,
                                     enable_cassandra_connector=None,
                                     disable_key_based_metadata_write_access=None,
                                     key_vault_key_uri=None,
                                     default_identity=None,
                                     public_network_access=None,
                                     enable_free_tier=None,
                                     enable_analytical_storage=None,
                                     periodic_mode_backup_policy=None,
                                     continuous_mode_backup_policy=None,
                                     cors=None,
                                     network_acl_bypass=None,
                                     network_acl_bypass_resource_ids=None,
                                     disable_local_auth=None,
                                     enable_full_text_query=None,
                                     schema_type=None,
                                     server_version=None,
                                     type_=None,
                                     user_assigned_identities=None,
                                     no_wait=False):
    all_backup_policy = []
    if periodic_mode_backup_policy is not None:
        all_backup_policy.append(periodic_mode_backup_policy)
    if continuous_mode_backup_policy is not None:
        all_backup_policy.append(continuous_mode_backup_policy)
    if len(all_backup_policy) > 1:
        raise CLIError('at most one of  periodic_mode_backup_policy, continuous_mode_backup_policy is needed for '
                       'backup_policy!')
    backup_policy = all_backup_policy[0] if len(all_backup_policy) == 1 else None
    update_parameters = {}
    if tags is not None:
        update_parameters['tags'] = tags
    if location is not None:
        update_parameters['location'] = location
    if consistency_policy is not None:
        update_parameters['consistency_policy'] = consistency_policy
    if locations is not None:
        update_parameters['locations'] = locations
    if ip_rules is not None:
        update_parameters['ip_rules'] = ip_rules
    if is_virtual_network_filter_enabled is not None:
        update_parameters['is_virtual_network_filter_enabled'] = is_virtual_network_filter_enabled
    if enable_automatic_failover is not None:
        update_parameters['enable_automatic_failover'] = enable_automatic_failover
    if capabilities is not None:
        update_parameters['capabilities'] = capabilities
    if virtual_network_rules is not None:
        update_parameters['virtual_network_rules'] = virtual_network_rules
    if enable_multiple_write_locations is not None:
        update_parameters['enable_multiple_write_locations'] = enable_multiple_write_locations
    if enable_cassandra_connector is not None:
        update_parameters['enable_cassandra_connector'] = enable_cassandra_connector
    update_parameters['connector_offer'] = "Small"
    if disable_key_based_metadata_write_access is not None:
        update_parameters['disable_key_based_metadata_write_access'] = disable_key_based_metadata_write_access
    if key_vault_key_uri is not None:
        update_parameters['key_vault_key_uri'] = key_vault_key_uri
    if default_identity is not None:
        update_parameters['default_identity'] = default_identity
    if public_network_access is not None:
        update_parameters['public_network_access'] = public_network_access
    if enable_free_tier is not None:
        update_parameters['enable_free_tier'] = enable_free_tier
    if enable_analytical_storage is not None:
        update_parameters['enable_analytical_storage'] = enable_analytical_storage
    if backup_policy is not None:
        update_parameters['backup_policy'] = backup_policy
    if cors is not None:
        update_parameters['cors'] = cors
    if network_acl_bypass is not None:
        update_parameters['network_acl_bypass'] = network_acl_bypass
    if network_acl_bypass_resource_ids is not None:
        update_parameters['network_acl_bypass_resource_ids'] = network_acl_bypass_resource_ids
    if disable_local_auth is not None:
        update_parameters['disable_local_auth'] = disable_local_auth
    update_parameters['diagnostic_log_settings'] = {}
    if enable_full_text_query is not None:
        update_parameters['diagnostic_log_settings']['enable_full_text_query'] = enable_full_text_query
    if len(update_parameters['diagnostic_log_settings']) == 0:
        del update_parameters['diagnostic_log_settings']
    update_parameters['analytical_storage_configuration'] = {}
    if schema_type is not None:
        update_parameters['analytical_storage_configuration']['schema_type'] = schema_type
    if len(update_parameters['analytical_storage_configuration']) == 0:
        del update_parameters['analytical_storage_configuration']
    update_parameters['api_properties'] = {}
    if server_version is not None:
        update_parameters['api_properties']['server_version'] = server_version
    if len(update_parameters['api_properties']) == 0:
        del update_parameters['api_properties']
    update_parameters['identity'] = {}
    if type_ is not None:
        update_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        update_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(update_parameters['identity']) == 0:
        del update_parameters['identity']
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       update_parameters=update_parameters)


def cosmosdb_database_account_delete(client,
                                     resource_group_name,
                                     account_name,
                                     no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       account_name=account_name)


def cosmosdb_database_account_check_name_exist(client,
                                               account_name):
    return client.check_name_exists(account_name=account_name)


def cosmosdb_database_account_failover_priority_change(client,
                                                       resource_group_name,
                                                       account_name,
                                                       failover_policies,
                                                       no_wait=False):
    failover_parameters = {}
    failover_parameters['failover_policies'] = failover_policies
    return sdk_no_wait(no_wait,
                       client.begin_failover_priority_change,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       failover_parameters=failover_parameters)


def cosmosdb_database_account_list_connection_string(client,
                                                     resource_group_name,
                                                     account_name):
    return client.list_connection_strings(resource_group_name=resource_group_name,
                                          account_name=account_name)


def cosmosdb_database_account_list_key(client,
                                       resource_group_name,
                                       account_name):
    return client.list_keys(resource_group_name=resource_group_name,
                            account_name=account_name)


def cosmosdb_database_account_list_metric(client,
                                          resource_group_name,
                                          account_name,
                                          filter_):
    return client.list_metrics(resource_group_name=resource_group_name,
                               account_name=account_name,
                               filter=filter_)


def cosmosdb_database_account_list_metric_definition(client,
                                                     resource_group_name,
                                                     account_name):
    return client.list_metric_definitions(resource_group_name=resource_group_name,
                                          account_name=account_name)


def cosmosdb_database_account_list_read_only_key(client,
                                                 resource_group_name,
                                                 account_name):
    return client.list_read_only_keys(resource_group_name=resource_group_name,
                                      account_name=account_name)


def cosmosdb_database_account_list_usage(client,
                                         resource_group_name,
                                         account_name,
                                         filter_=None):
    return client.list_usages(resource_group_name=resource_group_name,
                              account_name=account_name,
                              filter=filter_)


def cosmosdb_database_account_offline_region(client,
                                             resource_group_name,
                                             account_name,
                                             region,
                                             no_wait=False):
    region_parameter_for_offline = {}
    region_parameter_for_offline['region'] = region
    return sdk_no_wait(no_wait,
                       client.begin_offline_region,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       region_parameter_for_offline=region_parameter_for_offline)


def cosmosdb_database_account_online_region(client,
                                            resource_group_name,
                                            account_name,
                                            region,
                                            no_wait=False):
    region_parameter_for_online = {}
    region_parameter_for_online['region'] = region
    return sdk_no_wait(no_wait,
                       client.begin_online_region,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       region_parameter_for_online=region_parameter_for_online)


def cosmosdb_database_account_regenerate_key(client,
                                             resource_group_name,
                                             account_name,
                                             key_kind,
                                             no_wait=False):
    key_to_regenerate = {}
    key_to_regenerate['key_kind'] = key_kind
    return sdk_no_wait(no_wait,
                       client.begin_regenerate_key,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       key_to_regenerate=key_to_regenerate)


def cosmosdb_database_account_show_read_only_key(client,
                                                 resource_group_name,
                                                 account_name):
    return client.get_read_only_keys(resource_group_name=resource_group_name,
                                     account_name=account_name)


def cosmosdb_database_list_metric(client,
                                  resource_group_name,
                                  account_name,
                                  database_rid,
                                  filter_):
    return client.list_metrics(resource_group_name=resource_group_name,
                               account_name=account_name,
                               database_rid=database_rid,
                               filter=filter_)


def cosmosdb_database_list_metric_definition(client,
                                             resource_group_name,
                                             account_name,
                                             database_rid):
    return client.list_metric_definitions(resource_group_name=resource_group_name,
                                          account_name=account_name,
                                          database_rid=database_rid)


def cosmosdb_database_list_usage(client,
                                 resource_group_name,
                                 account_name,
                                 database_rid,
                                 filter_=None):
    return client.list_usages(resource_group_name=resource_group_name,
                              account_name=account_name,
                              database_rid=database_rid,
                              filter=filter_)


def cosmosdb_collection_list_metric(client,
                                    resource_group_name,
                                    account_name,
                                    database_rid,
                                    collection_rid,
                                    filter_):
    return client.list_metrics(resource_group_name=resource_group_name,
                               account_name=account_name,
                               database_rid=database_rid,
                               collection_rid=collection_rid,
                               filter=filter_)


def cosmosdb_collection_list_metric_definition(client,
                                               resource_group_name,
                                               account_name,
                                               database_rid,
                                               collection_rid):
    return client.list_metric_definitions(resource_group_name=resource_group_name,
                                          account_name=account_name,
                                          database_rid=database_rid,
                                          collection_rid=collection_rid)


def cosmosdb_collection_list_usage(client,
                                   resource_group_name,
                                   account_name,
                                   database_rid,
                                   collection_rid,
                                   filter_=None):
    return client.list_usages(resource_group_name=resource_group_name,
                              account_name=account_name,
                              database_rid=database_rid,
                              collection_rid=collection_rid,
                              filter=filter_)


def cosmosdb_collection_region_list_metric(client,
                                           resource_group_name,
                                           account_name,
                                           region,
                                           database_rid,
                                           collection_rid,
                                           filter_):
    return client.list_metrics(resource_group_name=resource_group_name,
                               account_name=account_name,
                               region=region,
                               database_rid=database_rid,
                               collection_rid=collection_rid,
                               filter=filter_)


def cosmosdb_database_account_region_list_metric(client,
                                                 resource_group_name,
                                                 account_name,
                                                 region,
                                                 filter_):
    return client.list_metrics(resource_group_name=resource_group_name,
                               account_name=account_name,
                               region=region,
                               filter=filter_)


def cosmosdb_percentile_source_target_list_metric(client,
                                                  resource_group_name,
                                                  account_name,
                                                  source_region,
                                                  target_region,
                                                  filter_):
    return client.list_metrics(resource_group_name=resource_group_name,
                               account_name=account_name,
                               source_region=source_region,
                               target_region=target_region,
                               filter=filter_)


def cosmosdb_percentile_target_list_metric(client,
                                           resource_group_name,
                                           account_name,
                                           target_region,
                                           filter_):
    return client.list_metrics(resource_group_name=resource_group_name,
                               account_name=account_name,
                               target_region=target_region,
                               filter=filter_)


def cosmosdb_percentile_list_metric(client,
                                    resource_group_name,
                                    account_name,
                                    filter_):
    return client.list_metrics(resource_group_name=resource_group_name,
                               account_name=account_name,
                               filter=filter_)


def cosmosdb_collection_partition_region_list_metric(client,
                                                     resource_group_name,
                                                     account_name,
                                                     region,
                                                     database_rid,
                                                     collection_rid,
                                                     filter_):
    return client.list_metrics(resource_group_name=resource_group_name,
                               account_name=account_name,
                               region=region,
                               database_rid=database_rid,
                               collection_rid=collection_rid,
                               filter=filter_)


def cosmosdb_collection_partition_list_metric(client,
                                              resource_group_name,
                                              account_name,
                                              database_rid,
                                              collection_rid,
                                              filter_):
    return client.list_metrics(resource_group_name=resource_group_name,
                               account_name=account_name,
                               database_rid=database_rid,
                               collection_rid=collection_rid,
                               filter=filter_)


def cosmosdb_collection_partition_list_usage(client,
                                             resource_group_name,
                                             account_name,
                                             database_rid,
                                             collection_rid,
                                             filter_=None):
    return client.list_usages(resource_group_name=resource_group_name,
                              account_name=account_name,
                              database_rid=database_rid,
                              collection_rid=collection_rid,
                              filter=filter_)


def cosmosdb_partition_key_range_id_list_metric(client,
                                                resource_group_name,
                                                account_name,
                                                database_rid,
                                                collection_rid,
                                                partition_key_range_id,
                                                filter_):
    return client.list_metrics(resource_group_name=resource_group_name,
                               account_name=account_name,
                               database_rid=database_rid,
                               collection_rid=collection_rid,
                               partition_key_range_id=partition_key_range_id,
                               filter=filter_)


def cosmosdb_partition_key_range_id_region_list_metric(client,
                                                       resource_group_name,
                                                       account_name,
                                                       region,
                                                       database_rid,
                                                       collection_rid,
                                                       partition_key_range_id,
                                                       filter_):
    return client.list_metrics(resource_group_name=resource_group_name,
                               account_name=account_name,
                               region=region,
                               database_rid=database_rid,
                               collection_rid=collection_rid,
                               partition_key_range_id=partition_key_range_id,
                               filter=filter_)


def cosmosdb_graph_resource_create_update_graph(client,
                                                resource_group_name,
                                                account_name,
                                                graph_name,
                                                id_,
                                                location=None,
                                                tags=None,
                                                type_=None,
                                                user_assigned_identities=None,
                                                throughput=None,
                                                max_throughput=None):
    create_update_graph_parameters = {}
    if location is not None:
        create_update_graph_parameters['location'] = location
    if tags is not None:
        create_update_graph_parameters['tags'] = tags
    create_update_graph_parameters['identity'] = {}
    if type_ is not None:
        create_update_graph_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        create_update_graph_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(create_update_graph_parameters['identity']) == 0:
        del create_update_graph_parameters['identity']
    create_update_graph_parameters['options'] = {}
    if throughput is not None:
        create_update_graph_parameters['options']['throughput'] = throughput
    create_update_graph_parameters['options']['autoscale_settings'] = {}
    if max_throughput is not None:
        create_update_graph_parameters['options']['autoscale_settings']['max_throughput'] = max_throughput
    if len(create_update_graph_parameters['options']['autoscale_settings']) == 0:
        del create_update_graph_parameters['options']['autoscale_settings']
    if len(create_update_graph_parameters['options']) == 0:
        del create_update_graph_parameters['options']
    create_update_graph_parameters['resource'] = {}
    create_update_graph_parameters['resource']['id'] = id_
    if len(create_update_graph_parameters['resource']) == 0:
        del create_update_graph_parameters['resource']
    return client.begin_create_update_graph(resource_group_name=resource_group_name,
                                            account_name=account_name,
                                            graph_name=graph_name,
                                            create_update_graph_parameters=create_update_graph_parameters)


def cosmosdb_graph_resource_delete_graph_resource(client,
                                                  resource_group_name,
                                                  account_name,
                                                  graph_name):
    return client.begin_delete_graph_resource(resource_group_name=resource_group_name,
                                              account_name=account_name,
                                              graph_name=graph_name)


def cosmosdb_graph_resource_list_graph(client,
                                       resource_group_name,
                                       account_name):
    return client.list_graphs(resource_group_name=resource_group_name,
                              account_name=account_name)


def cosmosdb_graph_resource_show_graph(client,
                                       resource_group_name,
                                       account_name,
                                       graph_name):
    return client.get_graph(resource_group_name=resource_group_name,
                            account_name=account_name,
                            graph_name=graph_name)


def cosmosdb_sql_resource_create_update_sql_container(client,
                                                      resource_group_name,
                                                      account_name,
                                                      database_name,
                                                      container_name,
                                                      create_update_sql_container_parameters):
    return client.begin_create_update_sql_container(resource_group_name=resource_group_name,
                                                    account_name=account_name,
                                                    database_name=database_name,
                                                    container_name=container_name,
                                                    create_update_sql_container_parameters=create_update_sql_container_parameters)


def cosmosdb_sql_resource_create_update_sql_database(client,
                                                     resource_group_name,
                                                     account_name,
                                                     database_name,
                                                     id_,
                                                     location=None,
                                                     tags=None,
                                                     type_=None,
                                                     user_assigned_identities=None,
                                                     throughput=None,
                                                     max_throughput=None):
    create_update_sql_database_parameters = {}
    if location is not None:
        create_update_sql_database_parameters['location'] = location
    if tags is not None:
        create_update_sql_database_parameters['tags'] = tags
    create_update_sql_database_parameters['identity'] = {}
    if type_ is not None:
        create_update_sql_database_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        create_update_sql_database_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(create_update_sql_database_parameters['identity']) == 0:
        del create_update_sql_database_parameters['identity']
    create_update_sql_database_parameters['options'] = {}
    if throughput is not None:
        create_update_sql_database_parameters['options']['throughput'] = throughput
    create_update_sql_database_parameters['options']['autoscale_settings'] = {}
    if max_throughput is not None:
        create_update_sql_database_parameters['options']['autoscale_settings']['max_throughput'] = max_throughput
    if len(create_update_sql_database_parameters['options']['autoscale_settings']) == 0:
        del create_update_sql_database_parameters['options']['autoscale_settings']
    if len(create_update_sql_database_parameters['options']) == 0:
        del create_update_sql_database_parameters['options']
    create_update_sql_database_parameters['resource'] = {}
    create_update_sql_database_parameters['resource']['id'] = id_
    if len(create_update_sql_database_parameters['resource']) == 0:
        del create_update_sql_database_parameters['resource']
    return client.begin_create_update_sql_database(resource_group_name=resource_group_name,
                                                   account_name=account_name,
                                                   database_name=database_name,
                                                   create_update_sql_database_parameters=create_update_sql_database_parameters)


def cosmosdb_sql_resource_create_update_sql_role_assignment(client,
                                                            role_assignment_id,
                                                            resource_group_name,
                                                            account_name,
                                                            role_definition_id=None,
                                                            scope=None,
                                                            principal_id=None):
    create_update_sql_role_assignment_parameters = {}
    if role_definition_id is not None:
        create_update_sql_role_assignment_parameters['role_definition_id'] = role_definition_id
    if scope is not None:
        create_update_sql_role_assignment_parameters['scope'] = scope
    if principal_id is not None:
        create_update_sql_role_assignment_parameters['principal_id'] = principal_id
    return client.begin_create_update_sql_role_assignment(role_assignment_id=role_assignment_id,
                                                          resource_group_name=resource_group_name,
                                                          account_name=account_name,
                                                          create_update_sql_role_assignment_parameters=create_update_sql_role_assignment_parameters)


def cosmosdb_sql_resource_create_update_sql_role_definition(client,
                                                            role_definition_id,
                                                            resource_group_name,
                                                            account_name,
                                                            role_name=None,
                                                            type_=None,
                                                            assignable_scopes=None,
                                                            permissions=None):
    create_update_sql_role_definition_parameters = {}
    if role_name is not None:
        create_update_sql_role_definition_parameters['role_name'] = role_name
    if type_ is not None:
        create_update_sql_role_definition_parameters['type'] = type_
    if assignable_scopes is not None:
        create_update_sql_role_definition_parameters['assignable_scopes'] = assignable_scopes
    if permissions is not None:
        create_update_sql_role_definition_parameters['permissions'] = permissions
    return client.begin_create_update_sql_role_definition(role_definition_id=role_definition_id,
                                                          resource_group_name=resource_group_name,
                                                          account_name=account_name,
                                                          create_update_sql_role_definition_parameters=create_update_sql_role_definition_parameters)


def cosmosdb_sql_resource_create_update_sql_stored_procedure(client,
                                                             resource_group_name,
                                                             account_name,
                                                             database_name,
                                                             container_name,
                                                             stored_procedure_name,
                                                             resource,
                                                             location=None,
                                                             tags=None,
                                                             type_=None,
                                                             user_assigned_identities=None,
                                                             throughput=None,
                                                             max_throughput=None):
    create_update_sql_stored_procedure_parameters = {}
    if location is not None:
        create_update_sql_stored_procedure_parameters['location'] = location
    if tags is not None:
        create_update_sql_stored_procedure_parameters['tags'] = tags
    create_update_sql_stored_procedure_parameters['identity'] = {}
    if type_ is not None:
        create_update_sql_stored_procedure_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        create_update_sql_stored_procedure_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(create_update_sql_stored_procedure_parameters['identity']) == 0:
        del create_update_sql_stored_procedure_parameters['identity']
    create_update_sql_stored_procedure_parameters['resource'] = resource
    create_update_sql_stored_procedure_parameters['options'] = {}
    if throughput is not None:
        create_update_sql_stored_procedure_parameters['options']['throughput'] = throughput
    create_update_sql_stored_procedure_parameters['options']['autoscale_settings'] = {}
    if max_throughput is not None:
        create_update_sql_stored_procedure_parameters['options']['autoscale_settings']['max_throughput'] = max_throughput
    if len(create_update_sql_stored_procedure_parameters['options']['autoscale_settings']) == 0:
        del create_update_sql_stored_procedure_parameters['options']['autoscale_settings']
    return client.begin_create_update_sql_stored_procedure(resource_group_name=resource_group_name,
                                                           account_name=account_name,
                                                           database_name=database_name,
                                                           container_name=container_name,
                                                           stored_procedure_name=stored_procedure_name,
                                                           create_update_sql_stored_procedure_parameters=create_update_sql_stored_procedure_parameters)


def cosmosdb_sql_resource_create_update_sql_trigger(client,
                                                    resource_group_name,
                                                    account_name,
                                                    database_name,
                                                    container_name,
                                                    trigger_name,
                                                    resource,
                                                    location=None,
                                                    tags=None,
                                                    type_=None,
                                                    user_assigned_identities=None,
                                                    throughput=None,
                                                    max_throughput=None):
    create_update_sql_trigger_parameters = {}
    if location is not None:
        create_update_sql_trigger_parameters['location'] = location
    if tags is not None:
        create_update_sql_trigger_parameters['tags'] = tags
    create_update_sql_trigger_parameters['identity'] = {}
    if type_ is not None:
        create_update_sql_trigger_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        create_update_sql_trigger_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(create_update_sql_trigger_parameters['identity']) == 0:
        del create_update_sql_trigger_parameters['identity']
    create_update_sql_trigger_parameters['resource'] = resource
    create_update_sql_trigger_parameters['options'] = {}
    if throughput is not None:
        create_update_sql_trigger_parameters['options']['throughput'] = throughput
    create_update_sql_trigger_parameters['options']['autoscale_settings'] = {}
    if max_throughput is not None:
        create_update_sql_trigger_parameters['options']['autoscale_settings']['max_throughput'] = max_throughput
    if len(create_update_sql_trigger_parameters['options']['autoscale_settings']) == 0:
        del create_update_sql_trigger_parameters['options']['autoscale_settings']
    return client.begin_create_update_sql_trigger(resource_group_name=resource_group_name,
                                                  account_name=account_name,
                                                  database_name=database_name,
                                                  container_name=container_name,
                                                  trigger_name=trigger_name,
                                                  create_update_sql_trigger_parameters=create_update_sql_trigger_parameters)


def cosmosdb_sql_resource_create_update_sql_user_defined_function(client,
                                                                  resource_group_name,
                                                                  account_name,
                                                                  database_name,
                                                                  container_name,
                                                                  user_defined_function_name,
                                                                  resource,
                                                                  location=None,
                                                                  tags=None,
                                                                  type_=None,
                                                                  user_assigned_identities=None,
                                                                  throughput=None,
                                                                  max_throughput=None):
    create_update_sql_user_defined_function_parameters = {}
    if location is not None:
        create_update_sql_user_defined_function_parameters['location'] = location
    if tags is not None:
        create_update_sql_user_defined_function_parameters['tags'] = tags
    create_update_sql_user_defined_function_parameters['identity'] = {}
    if type_ is not None:
        create_update_sql_user_defined_function_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        create_update_sql_user_defined_function_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(create_update_sql_user_defined_function_parameters['identity']) == 0:
        del create_update_sql_user_defined_function_parameters['identity']
    create_update_sql_user_defined_function_parameters['resource'] = resource
    create_update_sql_user_defined_function_parameters['options'] = {}
    if throughput is not None:
        create_update_sql_user_defined_function_parameters['options']['throughput'] = throughput
    create_update_sql_user_defined_function_parameters['options']['autoscale_settings'] = {}
    if max_throughput is not None:
        create_update_sql_user_defined_function_parameters['options']['autoscale_settings']['max_throughput'] = max_throughput
    if len(create_update_sql_user_defined_function_parameters['options']['autoscale_settings']) == 0:
        del create_update_sql_user_defined_function_parameters['options']['autoscale_settings']
    return client.begin_create_update_sql_user_defined_function(resource_group_name=resource_group_name,
                                                                account_name=account_name,
                                                                database_name=database_name,
                                                                container_name=container_name,
                                                                user_defined_function_name=user_defined_function_name,
                                                                create_update_sql_user_defined_function_parameters=create_update_sql_user_defined_function_parameters)


def cosmosdb_sql_resource_delete_sql_container(client,
                                               resource_group_name,
                                               account_name,
                                               database_name,
                                               container_name):
    return client.begin_delete_sql_container(resource_group_name=resource_group_name,
                                             account_name=account_name,
                                             database_name=database_name,
                                             container_name=container_name)


def cosmosdb_sql_resource_delete_sql_database(client,
                                              resource_group_name,
                                              account_name,
                                              database_name):
    return client.begin_delete_sql_database(resource_group_name=resource_group_name,
                                            account_name=account_name,
                                            database_name=database_name)


def cosmosdb_sql_resource_delete_sql_role_assignment(client,
                                                     role_assignment_id,
                                                     resource_group_name,
                                                     account_name):
    return client.begin_delete_sql_role_assignment(role_assignment_id=role_assignment_id,
                                                   resource_group_name=resource_group_name,
                                                   account_name=account_name)


def cosmosdb_sql_resource_delete_sql_role_definition(client,
                                                     role_definition_id,
                                                     resource_group_name,
                                                     account_name):
    return client.begin_delete_sql_role_definition(role_definition_id=role_definition_id,
                                                   resource_group_name=resource_group_name,
                                                   account_name=account_name)


def cosmosdb_sql_resource_delete_sql_stored_procedure(client,
                                                      resource_group_name,
                                                      account_name,
                                                      database_name,
                                                      container_name,
                                                      stored_procedure_name):
    return client.begin_delete_sql_stored_procedure(resource_group_name=resource_group_name,
                                                    account_name=account_name,
                                                    database_name=database_name,
                                                    container_name=container_name,
                                                    stored_procedure_name=stored_procedure_name)


def cosmosdb_sql_resource_delete_sql_trigger(client,
                                             resource_group_name,
                                             account_name,
                                             database_name,
                                             container_name,
                                             trigger_name):
    return client.begin_delete_sql_trigger(resource_group_name=resource_group_name,
                                           account_name=account_name,
                                           database_name=database_name,
                                           container_name=container_name,
                                           trigger_name=trigger_name)


def cosmosdb_sql_resource_delete_sql_user_defined_function(client,
                                                           resource_group_name,
                                                           account_name,
                                                           database_name,
                                                           container_name,
                                                           user_defined_function_name):
    return client.begin_delete_sql_user_defined_function(resource_group_name=resource_group_name,
                                                         account_name=account_name,
                                                         database_name=database_name,
                                                         container_name=container_name,
                                                         user_defined_function_name=user_defined_function_name)


def cosmosdb_sql_resource_list_sql_container(client,
                                             resource_group_name,
                                             account_name,
                                             database_name):
    return client.list_sql_containers(resource_group_name=resource_group_name,
                                      account_name=account_name,
                                      database_name=database_name)


def cosmosdb_sql_resource_list_sql_database(client,
                                            resource_group_name,
                                            account_name):
    return client.list_sql_databases(resource_group_name=resource_group_name,
                                     account_name=account_name)


def cosmosdb_sql_resource_list_sql_role_assignment(client,
                                                   resource_group_name,
                                                   account_name):
    return client.list_sql_role_assignments(resource_group_name=resource_group_name,
                                            account_name=account_name)


def cosmosdb_sql_resource_list_sql_role_definition(client,
                                                   resource_group_name,
                                                   account_name):
    return client.list_sql_role_definitions(resource_group_name=resource_group_name,
                                            account_name=account_name)


def cosmosdb_sql_resource_list_sql_stored_procedure(client,
                                                    resource_group_name,
                                                    account_name,
                                                    database_name,
                                                    container_name):
    return client.list_sql_stored_procedures(resource_group_name=resource_group_name,
                                             account_name=account_name,
                                             database_name=database_name,
                                             container_name=container_name)


def cosmosdb_sql_resource_list_sql_trigger(client,
                                           resource_group_name,
                                           account_name,
                                           database_name,
                                           container_name):
    return client.list_sql_triggers(resource_group_name=resource_group_name,
                                    account_name=account_name,
                                    database_name=database_name,
                                    container_name=container_name)


def cosmosdb_sql_resource_list_sql_user_defined_function(client,
                                                         resource_group_name,
                                                         account_name,
                                                         database_name,
                                                         container_name):
    return client.list_sql_user_defined_functions(resource_group_name=resource_group_name,
                                                  account_name=account_name,
                                                  database_name=database_name,
                                                  container_name=container_name)


def cosmosdb_sql_resource_migrate_sql_container_to_autoscale(client,
                                                             resource_group_name,
                                                             account_name,
                                                             database_name,
                                                             container_name):
    return client.begin_migrate_sql_container_to_autoscale(resource_group_name=resource_group_name,
                                                           account_name=account_name,
                                                           database_name=database_name,
                                                           container_name=container_name)


def cosmosdb_sql_resource_migrate_sql_container_to_manual_throughput(client,
                                                                     resource_group_name,
                                                                     account_name,
                                                                     database_name,
                                                                     container_name):
    return client.begin_migrate_sql_container_to_manual_throughput(resource_group_name=resource_group_name,
                                                                   account_name=account_name,
                                                                   database_name=database_name,
                                                                   container_name=container_name)


def cosmosdb_sql_resource_migrate_sql_database_to_autoscale(client,
                                                            resource_group_name,
                                                            account_name,
                                                            database_name):
    return client.begin_migrate_sql_database_to_autoscale(resource_group_name=resource_group_name,
                                                          account_name=account_name,
                                                          database_name=database_name)


def cosmosdb_sql_resource_migrate_sql_database_to_manual_throughput(client,
                                                                    resource_group_name,
                                                                    account_name,
                                                                    database_name):
    return client.begin_migrate_sql_database_to_manual_throughput(resource_group_name=resource_group_name,
                                                                  account_name=account_name,
                                                                  database_name=database_name)


def cosmosdb_sql_resource_retrieve_continuou_backup_information(client,
                                                                resource_group_name,
                                                                account_name,
                                                                database_name,
                                                                container_name,
                                                                location_=None):
    location = {}
    if location_ is not None:
        location['location'] = location_
    return client.begin_retrieve_continuous_backup_information(resource_group_name=resource_group_name,
                                                               account_name=account_name,
                                                               database_name=database_name,
                                                               container_name=container_name,
                                                               location=location)


def cosmosdb_sql_resource_show_sql_container(client,
                                             resource_group_name,
                                             account_name,
                                             database_name,
                                             container_name):
    return client.get_sql_container(resource_group_name=resource_group_name,
                                    account_name=account_name,
                                    database_name=database_name,
                                    container_name=container_name)


def cosmosdb_sql_resource_show_sql_container_throughput(client,
                                                        resource_group_name,
                                                        account_name,
                                                        database_name,
                                                        container_name):
    return client.get_sql_container_throughput(resource_group_name=resource_group_name,
                                               account_name=account_name,
                                               database_name=database_name,
                                               container_name=container_name)


def cosmosdb_sql_resource_show_sql_database(client,
                                            resource_group_name,
                                            account_name,
                                            database_name):
    return client.get_sql_database(resource_group_name=resource_group_name,
                                   account_name=account_name,
                                   database_name=database_name)


def cosmosdb_sql_resource_show_sql_database_throughput(client,
                                                       resource_group_name,
                                                       account_name,
                                                       database_name):
    return client.get_sql_database_throughput(resource_group_name=resource_group_name,
                                              account_name=account_name,
                                              database_name=database_name)


def cosmosdb_sql_resource_show_sql_role_assignment(client,
                                                   role_assignment_id,
                                                   resource_group_name,
                                                   account_name):
    return client.get_sql_role_assignment(role_assignment_id=role_assignment_id,
                                          resource_group_name=resource_group_name,
                                          account_name=account_name)


def cosmosdb_sql_resource_show_sql_role_definition(client,
                                                   role_definition_id,
                                                   resource_group_name,
                                                   account_name):
    return client.get_sql_role_definition(role_definition_id=role_definition_id,
                                          resource_group_name=resource_group_name,
                                          account_name=account_name)


def cosmosdb_sql_resource_show_sql_stored_procedure(client,
                                                    resource_group_name,
                                                    account_name,
                                                    database_name,
                                                    container_name,
                                                    stored_procedure_name):
    return client.get_sql_stored_procedure(resource_group_name=resource_group_name,
                                           account_name=account_name,
                                           database_name=database_name,
                                           container_name=container_name,
                                           stored_procedure_name=stored_procedure_name)


def cosmosdb_sql_resource_show_sql_trigger(client,
                                           resource_group_name,
                                           account_name,
                                           database_name,
                                           container_name,
                                           trigger_name):
    return client.get_sql_trigger(resource_group_name=resource_group_name,
                                  account_name=account_name,
                                  database_name=database_name,
                                  container_name=container_name,
                                  trigger_name=trigger_name)


def cosmosdb_sql_resource_show_sql_user_defined_function(client,
                                                         resource_group_name,
                                                         account_name,
                                                         database_name,
                                                         container_name,
                                                         user_defined_function_name):
    return client.get_sql_user_defined_function(resource_group_name=resource_group_name,
                                                account_name=account_name,
                                                database_name=database_name,
                                                container_name=container_name,
                                                user_defined_function_name=user_defined_function_name)


def cosmosdb_sql_resource_update_sql_container_throughput(client,
                                                          resource_group_name,
                                                          account_name,
                                                          database_name,
                                                          container_name,
                                                          location=None,
                                                          tags=None,
                                                          type_=None,
                                                          user_assigned_identities=None,
                                                          throughput=None,
                                                          max_throughput=None,
                                                          throughput_policy=None):
    update_throughput_parameters = {}
    if location is not None:
        update_throughput_parameters['location'] = location
    if tags is not None:
        update_throughput_parameters['tags'] = tags
    update_throughput_parameters['identity'] = {}
    if type_ is not None:
        update_throughput_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        update_throughput_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(update_throughput_parameters['identity']) == 0:
        del update_throughput_parameters['identity']
    update_throughput_parameters['resource'] = {}
    if throughput is not None:
        update_throughput_parameters['resource']['throughput'] = throughput
    update_throughput_parameters['resource']['autoscale_settings'] = {}
    if max_throughput is not None:
        update_throughput_parameters['resource']['autoscale_settings']['max_throughput'] = max_throughput
    update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy'] = {}
    if throughput_policy is not None:
        update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']['throughput_policy'] = throughput_policy
    if len(update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']) == 0:
        del update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']
    return client.begin_update_sql_container_throughput(resource_group_name=resource_group_name,
                                                        account_name=account_name,
                                                        database_name=database_name,
                                                        container_name=container_name,
                                                        update_throughput_parameters=update_throughput_parameters)


def cosmosdb_sql_resource_update_sql_database_throughput(client,
                                                         resource_group_name,
                                                         account_name,
                                                         database_name,
                                                         location=None,
                                                         tags=None,
                                                         type_=None,
                                                         user_assigned_identities=None,
                                                         throughput=None,
                                                         max_throughput=None,
                                                         throughput_policy=None):
    update_throughput_parameters = {}
    if location is not None:
        update_throughput_parameters['location'] = location
    if tags is not None:
        update_throughput_parameters['tags'] = tags
    update_throughput_parameters['identity'] = {}
    if type_ is not None:
        update_throughput_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        update_throughput_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(update_throughput_parameters['identity']) == 0:
        del update_throughput_parameters['identity']
    update_throughput_parameters['resource'] = {}
    if throughput is not None:
        update_throughput_parameters['resource']['throughput'] = throughput
    update_throughput_parameters['resource']['autoscale_settings'] = {}
    if max_throughput is not None:
        update_throughput_parameters['resource']['autoscale_settings']['max_throughput'] = max_throughput
    update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy'] = {}
    if throughput_policy is not None:
        update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']['throughput_policy'] = throughput_policy
    if len(update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']) == 0:
        del update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']
    return client.begin_update_sql_database_throughput(resource_group_name=resource_group_name,
                                                       account_name=account_name,
                                                       database_name=database_name,
                                                       update_throughput_parameters=update_throughput_parameters)


def cosmosdb_mongo_db_resource_create_update_mongo_db_collection(client,
                                                                 resource_group_name,
                                                                 account_name,
                                                                 database_name,
                                                                 collection_name,
                                                                 id_,
                                                                 location=None,
                                                                 tags=None,
                                                                 type_=None,
                                                                 user_assigned_identities=None,
                                                                 throughput=None,
                                                                 max_throughput=None,
                                                                 shard_key=None,
                                                                 indexes=None,
                                                                 analytical_storage_ttl=None):
    create_update_mongo__d_b_collection_parameters = {}
    if location is not None:
        create_update_mongo__d_b_collection_parameters['location'] = location
    if tags is not None:
        create_update_mongo__d_b_collection_parameters['tags'] = tags
    create_update_mongo__d_b_collection_parameters['identity'] = {}
    if type_ is not None:
        create_update_mongo__d_b_collection_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        create_update_mongo__d_b_collection_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(create_update_mongo__d_b_collection_parameters['identity']) == 0:
        del create_update_mongo__d_b_collection_parameters['identity']
    create_update_mongo__d_b_collection_parameters['options'] = {}
    if throughput is not None:
        create_update_mongo__d_b_collection_parameters['options']['throughput'] = throughput
    create_update_mongo__d_b_collection_parameters['options']['autoscale_settings'] = {}
    if max_throughput is not None:
        create_update_mongo__d_b_collection_parameters['options']['autoscale_settings']['max_throughput'] = max_throughput
    if len(create_update_mongo__d_b_collection_parameters['options']['autoscale_settings']) == 0:
        del create_update_mongo__d_b_collection_parameters['options']['autoscale_settings']
    if len(create_update_mongo__d_b_collection_parameters['options']) == 0:
        del create_update_mongo__d_b_collection_parameters['options']
    create_update_mongo__d_b_collection_parameters['resource'] = {}
    create_update_mongo__d_b_collection_parameters['resource']['id'] = id_
    if shard_key is not None:
        create_update_mongo__d_b_collection_parameters['resource']['shard_key'] = shard_key
    if indexes is not None:
        create_update_mongo__d_b_collection_parameters['resource']['indexes'] = indexes
    if analytical_storage_ttl is not None:
        create_update_mongo__d_b_collection_parameters['resource']['analytical_storage_ttl'] = analytical_storage_ttl
    if len(create_update_mongo__d_b_collection_parameters['resource']) == 0:
        del create_update_mongo__d_b_collection_parameters['resource']
    return client.begin_create_update_mongo_db_collection(resource_group_name=resource_group_name,
                                                          account_name=account_name,
                                                          database_name=database_name,
                                                          collection_name=collection_name,
                                                          create_update_mongo_db_collection_parameters=create_update_mongo__d_b_collection_parameters)


def cosmosdb_mongo_db_resource_create_update_mongo_db_database(client,
                                                               resource_group_name,
                                                               account_name,
                                                               database_name,
                                                               id_,
                                                               location=None,
                                                               tags=None,
                                                               type_=None,
                                                               user_assigned_identities=None,
                                                               throughput=None,
                                                               max_throughput=None):
    create_update_mongo__d_b_database_parameters = {}
    if location is not None:
        create_update_mongo__d_b_database_parameters['location'] = location
    if tags is not None:
        create_update_mongo__d_b_database_parameters['tags'] = tags
    create_update_mongo__d_b_database_parameters['identity'] = {}
    if type_ is not None:
        create_update_mongo__d_b_database_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        create_update_mongo__d_b_database_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(create_update_mongo__d_b_database_parameters['identity']) == 0:
        del create_update_mongo__d_b_database_parameters['identity']
    create_update_mongo__d_b_database_parameters['options'] = {}
    if throughput is not None:
        create_update_mongo__d_b_database_parameters['options']['throughput'] = throughput
    create_update_mongo__d_b_database_parameters['options']['autoscale_settings'] = {}
    if max_throughput is not None:
        create_update_mongo__d_b_database_parameters['options']['autoscale_settings']['max_throughput'] = max_throughput
    if len(create_update_mongo__d_b_database_parameters['options']['autoscale_settings']) == 0:
        del create_update_mongo__d_b_database_parameters['options']['autoscale_settings']
    if len(create_update_mongo__d_b_database_parameters['options']) == 0:
        del create_update_mongo__d_b_database_parameters['options']
    create_update_mongo__d_b_database_parameters['resource'] = {}
    create_update_mongo__d_b_database_parameters['resource']['id'] = id_
    if len(create_update_mongo__d_b_database_parameters['resource']) == 0:
        del create_update_mongo__d_b_database_parameters['resource']
    return client.begin_create_update_mongo_db_database(resource_group_name=resource_group_name,
                                                        account_name=account_name,
                                                        database_name=database_name,
                                                        create_update_mongo_db_database_parameters=create_update_mongo__d_b_database_parameters)


def cosmosdb_mongo_db_resource_delete_mongo_db_collection(client,
                                                          resource_group_name,
                                                          account_name,
                                                          database_name,
                                                          collection_name):
    return client.begin_delete_mongo_db_collection(resource_group_name=resource_group_name,
                                                   account_name=account_name,
                                                   database_name=database_name,
                                                   collection_name=collection_name)


def cosmosdb_mongo_db_resource_delete_mongo_db_database(client,
                                                        resource_group_name,
                                                        account_name,
                                                        database_name):
    return client.begin_delete_mongo_db_database(resource_group_name=resource_group_name,
                                                 account_name=account_name,
                                                 database_name=database_name)


def cosmosdb_mongo_db_resource_list_mongo_db_collection(client,
                                                        resource_group_name,
                                                        account_name,
                                                        database_name):
    return client.list_mongo_db_collections(resource_group_name=resource_group_name,
                                            account_name=account_name,
                                            database_name=database_name)


def cosmosdb_mongo_db_resource_list_mongo_db_database(client,
                                                      resource_group_name,
                                                      account_name):
    return client.list_mongo_db_databases(resource_group_name=resource_group_name,
                                          account_name=account_name)


def cosmosdb_mongo_db_resource_migrate_mongo_db_collection_to_autoscale(client,
                                                                        resource_group_name,
                                                                        account_name,
                                                                        database_name,
                                                                        collection_name):
    return client.begin_migrate_mongo_db_collection_to_autoscale(resource_group_name=resource_group_name,
                                                                 account_name=account_name,
                                                                 database_name=database_name,
                                                                 collection_name=collection_name)


def cosmosdb_mongo_db_resource_migrate_mongo_db_collection_to_manual_throughput(client,
                                                                                resource_group_name,
                                                                                account_name,
                                                                                database_name,
                                                                                collection_name):
    return client.begin_migrate_mongo_db_collection_to_manual_throughput(resource_group_name=resource_group_name,
                                                                         account_name=account_name,
                                                                         database_name=database_name,
                                                                         collection_name=collection_name)


def cosmosdb_mongo_db_resource_migrate_mongo_db_database_to_autoscale(client,
                                                                      resource_group_name,
                                                                      account_name,
                                                                      database_name):
    return client.begin_migrate_mongo_db_database_to_autoscale(resource_group_name=resource_group_name,
                                                               account_name=account_name,
                                                               database_name=database_name)


def cosmosdb_mongo_db_resource_migrate_mongo_db_database_to_manual_throughput(client,
                                                                              resource_group_name,
                                                                              account_name,
                                                                              database_name):
    return client.begin_migrate_mongo_db_database_to_manual_throughput(resource_group_name=resource_group_name,
                                                                       account_name=account_name,
                                                                       database_name=database_name)


def cosmosdb_mongo_db_resource_show_mongo_db_collection(client,
                                                        resource_group_name,
                                                        account_name,
                                                        database_name,
                                                        collection_name):
    return client.get_mongo_db_collection(resource_group_name=resource_group_name,
                                          account_name=account_name,
                                          database_name=database_name,
                                          collection_name=collection_name)


def cosmosdb_mongo_db_resource_show_mongo_db_collection_throughput(client,
                                                                   resource_group_name,
                                                                   account_name,
                                                                   database_name,
                                                                   collection_name):
    return client.get_mongo_db_collection_throughput(resource_group_name=resource_group_name,
                                                     account_name=account_name,
                                                     database_name=database_name,
                                                     collection_name=collection_name)


def cosmosdb_mongo_db_resource_show_mongo_db_database(client,
                                                      resource_group_name,
                                                      account_name,
                                                      database_name):
    return client.get_mongo_db_database(resource_group_name=resource_group_name,
                                        account_name=account_name,
                                        database_name=database_name)


def cosmosdb_mongo_db_resource_show_mongo_db_database_throughput(client,
                                                                 resource_group_name,
                                                                 account_name,
                                                                 database_name):
    return client.get_mongo_db_database_throughput(resource_group_name=resource_group_name,
                                                   account_name=account_name,
                                                   database_name=database_name)


def cosmosdb_mongo_db_resource_update_mongo_db_collection_throughput(client,
                                                                     resource_group_name,
                                                                     account_name,
                                                                     database_name,
                                                                     collection_name,
                                                                     location=None,
                                                                     tags=None,
                                                                     type_=None,
                                                                     user_assigned_identities=None,
                                                                     throughput=None,
                                                                     max_throughput=None,
                                                                     throughput_policy=None):
    update_throughput_parameters = {}
    if location is not None:
        update_throughput_parameters['location'] = location
    if tags is not None:
        update_throughput_parameters['tags'] = tags
    update_throughput_parameters['identity'] = {}
    if type_ is not None:
        update_throughput_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        update_throughput_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(update_throughput_parameters['identity']) == 0:
        del update_throughput_parameters['identity']
    update_throughput_parameters['resource'] = {}
    if throughput is not None:
        update_throughput_parameters['resource']['throughput'] = throughput
    update_throughput_parameters['resource']['autoscale_settings'] = {}
    if max_throughput is not None:
        update_throughput_parameters['resource']['autoscale_settings']['max_throughput'] = max_throughput
    update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy'] = {}
    if throughput_policy is not None:
        update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']['throughput_policy'] = throughput_policy
    if len(update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']) == 0:
        del update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']
    return client.begin_update_mongo_db_collection_throughput(resource_group_name=resource_group_name,
                                                              account_name=account_name,
                                                              database_name=database_name,
                                                              collection_name=collection_name,
                                                              update_throughput_parameters=update_throughput_parameters)


def cosmosdb_mongo_db_resource_update_mongo_db_database_throughput(client,
                                                                   resource_group_name,
                                                                   account_name,
                                                                   database_name,
                                                                   location=None,
                                                                   tags=None,
                                                                   type_=None,
                                                                   user_assigned_identities=None,
                                                                   throughput=None,
                                                                   max_throughput=None,
                                                                   throughput_policy=None):
    update_throughput_parameters = {}
    if location is not None:
        update_throughput_parameters['location'] = location
    if tags is not None:
        update_throughput_parameters['tags'] = tags
    update_throughput_parameters['identity'] = {}
    if type_ is not None:
        update_throughput_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        update_throughput_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(update_throughput_parameters['identity']) == 0:
        del update_throughput_parameters['identity']
    update_throughput_parameters['resource'] = {}
    if throughput is not None:
        update_throughput_parameters['resource']['throughput'] = throughput
    update_throughput_parameters['resource']['autoscale_settings'] = {}
    if max_throughput is not None:
        update_throughput_parameters['resource']['autoscale_settings']['max_throughput'] = max_throughput
    update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy'] = {}
    if throughput_policy is not None:
        update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']['throughput_policy'] = throughput_policy
    if len(update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']) == 0:
        del update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']
    return client.begin_update_mongo_db_database_throughput(resource_group_name=resource_group_name,
                                                            account_name=account_name,
                                                            database_name=database_name,
                                                            update_throughput_parameters=update_throughput_parameters)


def cosmosdb_table_resource_create_update_table(client,
                                                resource_group_name,
                                                account_name,
                                                table_name,
                                                id_,
                                                location=None,
                                                tags=None,
                                                type_=None,
                                                user_assigned_identities=None,
                                                throughput=None,
                                                max_throughput=None):
    create_update_table_parameters = {}
    if location is not None:
        create_update_table_parameters['location'] = location
    if tags is not None:
        create_update_table_parameters['tags'] = tags
    create_update_table_parameters['identity'] = {}
    if type_ is not None:
        create_update_table_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        create_update_table_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(create_update_table_parameters['identity']) == 0:
        del create_update_table_parameters['identity']
    create_update_table_parameters['options'] = {}
    if throughput is not None:
        create_update_table_parameters['options']['throughput'] = throughput
    create_update_table_parameters['options']['autoscale_settings'] = {}
    if max_throughput is not None:
        create_update_table_parameters['options']['autoscale_settings']['max_throughput'] = max_throughput
    if len(create_update_table_parameters['options']['autoscale_settings']) == 0:
        del create_update_table_parameters['options']['autoscale_settings']
    if len(create_update_table_parameters['options']) == 0:
        del create_update_table_parameters['options']
    create_update_table_parameters['resource'] = {}
    create_update_table_parameters['resource']['id'] = id_
    if len(create_update_table_parameters['resource']) == 0:
        del create_update_table_parameters['resource']
    return client.begin_create_update_table(resource_group_name=resource_group_name,
                                            account_name=account_name,
                                            table_name=table_name,
                                            create_update_table_parameters=create_update_table_parameters)


def cosmosdb_table_resource_delete_table(client,
                                         resource_group_name,
                                         account_name,
                                         table_name):
    return client.begin_delete_table(resource_group_name=resource_group_name,
                                     account_name=account_name,
                                     table_name=table_name)


def cosmosdb_table_resource_list_table(client,
                                       resource_group_name,
                                       account_name):
    return client.list_tables(resource_group_name=resource_group_name,
                              account_name=account_name)


def cosmosdb_table_resource_migrate_table_to_autoscale(client,
                                                       resource_group_name,
                                                       account_name,
                                                       table_name):
    return client.begin_migrate_table_to_autoscale(resource_group_name=resource_group_name,
                                                   account_name=account_name,
                                                   table_name=table_name)


def cosmosdb_table_resource_migrate_table_to_manual_throughput(client,
                                                               resource_group_name,
                                                               account_name,
                                                               table_name):
    return client.begin_migrate_table_to_manual_throughput(resource_group_name=resource_group_name,
                                                           account_name=account_name,
                                                           table_name=table_name)


def cosmosdb_table_resource_show_table(client,
                                       resource_group_name,
                                       account_name,
                                       table_name):
    return client.get_table(resource_group_name=resource_group_name,
                            account_name=account_name,
                            table_name=table_name)


def cosmosdb_table_resource_show_table_throughput(client,
                                                  resource_group_name,
                                                  account_name,
                                                  table_name):
    return client.get_table_throughput(resource_group_name=resource_group_name,
                                       account_name=account_name,
                                       table_name=table_name)


def cosmosdb_table_resource_update_table_throughput(client,
                                                    resource_group_name,
                                                    account_name,
                                                    table_name,
                                                    location=None,
                                                    tags=None,
                                                    type_=None,
                                                    user_assigned_identities=None,
                                                    throughput=None,
                                                    max_throughput=None,
                                                    throughput_policy=None):
    update_throughput_parameters = {}
    if location is not None:
        update_throughput_parameters['location'] = location
    if tags is not None:
        update_throughput_parameters['tags'] = tags
    update_throughput_parameters['identity'] = {}
    if type_ is not None:
        update_throughput_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        update_throughput_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(update_throughput_parameters['identity']) == 0:
        del update_throughput_parameters['identity']
    update_throughput_parameters['resource'] = {}
    if throughput is not None:
        update_throughput_parameters['resource']['throughput'] = throughput
    update_throughput_parameters['resource']['autoscale_settings'] = {}
    if max_throughput is not None:
        update_throughput_parameters['resource']['autoscale_settings']['max_throughput'] = max_throughput
    update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy'] = {}
    if throughput_policy is not None:
        update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']['throughput_policy'] = throughput_policy
    if len(update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']) == 0:
        del update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']
    return client.begin_update_table_throughput(resource_group_name=resource_group_name,
                                                account_name=account_name,
                                                table_name=table_name,
                                                update_throughput_parameters=update_throughput_parameters)


def cosmosdb_cassandra_resource_create_update_cassandra_keyspace(client,
                                                                 resource_group_name,
                                                                 account_name,
                                                                 keyspace_name,
                                                                 id_,
                                                                 location=None,
                                                                 tags=None,
                                                                 type_=None,
                                                                 user_assigned_identities=None,
                                                                 throughput=None,
                                                                 max_throughput=None):
    create_update_cassandra_keyspace_parameters = {}
    if location is not None:
        create_update_cassandra_keyspace_parameters['location'] = location
    if tags is not None:
        create_update_cassandra_keyspace_parameters['tags'] = tags
    create_update_cassandra_keyspace_parameters['identity'] = {}
    if type_ is not None:
        create_update_cassandra_keyspace_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        create_update_cassandra_keyspace_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(create_update_cassandra_keyspace_parameters['identity']) == 0:
        del create_update_cassandra_keyspace_parameters['identity']
    create_update_cassandra_keyspace_parameters['options'] = {}
    if throughput is not None:
        create_update_cassandra_keyspace_parameters['options']['throughput'] = throughput
    create_update_cassandra_keyspace_parameters['options']['autoscale_settings'] = {}
    if max_throughput is not None:
        create_update_cassandra_keyspace_parameters['options']['autoscale_settings']['max_throughput'] = max_throughput
    if len(create_update_cassandra_keyspace_parameters['options']['autoscale_settings']) == 0:
        del create_update_cassandra_keyspace_parameters['options']['autoscale_settings']
    if len(create_update_cassandra_keyspace_parameters['options']) == 0:
        del create_update_cassandra_keyspace_parameters['options']
    create_update_cassandra_keyspace_parameters['resource'] = {}
    create_update_cassandra_keyspace_parameters['resource']['id'] = id_
    if len(create_update_cassandra_keyspace_parameters['resource']) == 0:
        del create_update_cassandra_keyspace_parameters['resource']
    return client.begin_create_update_cassandra_keyspace(resource_group_name=resource_group_name,
                                                         account_name=account_name,
                                                         keyspace_name=keyspace_name,
                                                         create_update_cassandra_keyspace_parameters=create_update_cassandra_keyspace_parameters)


def cosmosdb_cassandra_resource_create_update_cassandra_table(client,
                                                              resource_group_name,
                                                              account_name,
                                                              keyspace_name,
                                                              table_name,
                                                              id_,
                                                              location=None,
                                                              tags=None,
                                                              type_=None,
                                                              user_assigned_identities=None,
                                                              throughput=None,
                                                              max_throughput=None,
                                                              default_ttl=None,
                                                              analytical_storage_ttl=None,
                                                              columns=None,
                                                              partition_keys=None,
                                                              cluster_keys=None):
    create_update_cassandra_table_parameters = {}
    if location is not None:
        create_update_cassandra_table_parameters['location'] = location
    if tags is not None:
        create_update_cassandra_table_parameters['tags'] = tags
    create_update_cassandra_table_parameters['identity'] = {}
    if type_ is not None:
        create_update_cassandra_table_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        create_update_cassandra_table_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(create_update_cassandra_table_parameters['identity']) == 0:
        del create_update_cassandra_table_parameters['identity']
    create_update_cassandra_table_parameters['options'] = {}
    if throughput is not None:
        create_update_cassandra_table_parameters['options']['throughput'] = throughput
    create_update_cassandra_table_parameters['options']['autoscale_settings'] = {}
    if max_throughput is not None:
        create_update_cassandra_table_parameters['options']['autoscale_settings']['max_throughput'] = max_throughput
    if len(create_update_cassandra_table_parameters['options']['autoscale_settings']) == 0:
        del create_update_cassandra_table_parameters['options']['autoscale_settings']
    if len(create_update_cassandra_table_parameters['options']) == 0:
        del create_update_cassandra_table_parameters['options']
    create_update_cassandra_table_parameters['resource'] = {}
    create_update_cassandra_table_parameters['resource']['id'] = id_
    if default_ttl is not None:
        create_update_cassandra_table_parameters['resource']['default_ttl'] = default_ttl
    if analytical_storage_ttl is not None:
        create_update_cassandra_table_parameters['resource']['analytical_storage_ttl'] = analytical_storage_ttl
    create_update_cassandra_table_parameters['resource']['schema'] = {}
    if columns is not None:
        create_update_cassandra_table_parameters['resource']['schema']['columns'] = columns
    if partition_keys is not None:
        create_update_cassandra_table_parameters['resource']['schema']['partition_keys'] = partition_keys
    if cluster_keys is not None:
        create_update_cassandra_table_parameters['resource']['schema']['cluster_keys'] = cluster_keys
    if len(create_update_cassandra_table_parameters['resource']['schema']) == 0:
        del create_update_cassandra_table_parameters['resource']['schema']
    return client.begin_create_update_cassandra_table(resource_group_name=resource_group_name,
                                                      account_name=account_name,
                                                      keyspace_name=keyspace_name,
                                                      table_name=table_name,
                                                      create_update_cassandra_table_parameters=create_update_cassandra_table_parameters)


def cosmosdb_cassandra_resource_create_update_cassandra_view(client,
                                                             resource_group_name,
                                                             account_name,
                                                             keyspace_name,
                                                             view_name,
                                                             resource,
                                                             location=None,
                                                             tags=None,
                                                             type_=None,
                                                             user_assigned_identities=None,
                                                             throughput=None,
                                                             max_throughput=None):
    create_update_cassandra_view_parameters = {}
    if location is not None:
        create_update_cassandra_view_parameters['location'] = location
    if tags is not None:
        create_update_cassandra_view_parameters['tags'] = tags
    create_update_cassandra_view_parameters['identity'] = {}
    if type_ is not None:
        create_update_cassandra_view_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        create_update_cassandra_view_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(create_update_cassandra_view_parameters['identity']) == 0:
        del create_update_cassandra_view_parameters['identity']
    create_update_cassandra_view_parameters['resource'] = resource
    create_update_cassandra_view_parameters['options'] = {}
    if throughput is not None:
        create_update_cassandra_view_parameters['options']['throughput'] = throughput
    create_update_cassandra_view_parameters['options']['autoscale_settings'] = {}
    if max_throughput is not None:
        create_update_cassandra_view_parameters['options']['autoscale_settings']['max_throughput'] = max_throughput
    if len(create_update_cassandra_view_parameters['options']['autoscale_settings']) == 0:
        del create_update_cassandra_view_parameters['options']['autoscale_settings']
    return client.begin_create_update_cassandra_view(resource_group_name=resource_group_name,
                                                     account_name=account_name,
                                                     keyspace_name=keyspace_name,
                                                     view_name=view_name,
                                                     create_update_cassandra_view_parameters=create_update_cassandra_view_parameters)


def cosmosdb_cassandra_resource_delete_cassandra_keyspace(client,
                                                          resource_group_name,
                                                          account_name,
                                                          keyspace_name):
    return client.begin_delete_cassandra_keyspace(resource_group_name=resource_group_name,
                                                  account_name=account_name,
                                                  keyspace_name=keyspace_name)


def cosmosdb_cassandra_resource_delete_cassandra_table(client,
                                                       resource_group_name,
                                                       account_name,
                                                       keyspace_name,
                                                       table_name):
    return client.begin_delete_cassandra_table(resource_group_name=resource_group_name,
                                               account_name=account_name,
                                               keyspace_name=keyspace_name,
                                               table_name=table_name)


def cosmosdb_cassandra_resource_delete_cassandra_view(client,
                                                      resource_group_name,
                                                      account_name,
                                                      keyspace_name,
                                                      view_name):
    return client.begin_delete_cassandra_view(resource_group_name=resource_group_name,
                                              account_name=account_name,
                                              keyspace_name=keyspace_name,
                                              view_name=view_name)


def cosmosdb_cassandra_resource_list_cassandra_keyspace(client,
                                                        resource_group_name,
                                                        account_name):
    return client.list_cassandra_keyspaces(resource_group_name=resource_group_name,
                                           account_name=account_name)


def cosmosdb_cassandra_resource_list_cassandra_table(client,
                                                     resource_group_name,
                                                     account_name,
                                                     keyspace_name):
    return client.list_cassandra_tables(resource_group_name=resource_group_name,
                                        account_name=account_name,
                                        keyspace_name=keyspace_name)


def cosmosdb_cassandra_resource_list_cassandra_view(client,
                                                    resource_group_name,
                                                    account_name,
                                                    keyspace_name):
    return client.list_cassandra_views(resource_group_name=resource_group_name,
                                       account_name=account_name,
                                       keyspace_name=keyspace_name)


def cosmosdb_cassandra_resource_migrate_cassandra_keyspace_to_autoscale(client,
                                                                        resource_group_name,
                                                                        account_name,
                                                                        keyspace_name):
    return client.begin_migrate_cassandra_keyspace_to_autoscale(resource_group_name=resource_group_name,
                                                                account_name=account_name,
                                                                keyspace_name=keyspace_name)


def cosmosdb_cassandra_resource_migrate_cassandra_keyspace_to_manual_throughput(client,
                                                                                resource_group_name,
                                                                                account_name,
                                                                                keyspace_name):
    return client.begin_migrate_cassandra_keyspace_to_manual_throughput(resource_group_name=resource_group_name,
                                                                        account_name=account_name,
                                                                        keyspace_name=keyspace_name)


def cosmosdb_cassandra_resource_migrate_cassandra_table_to_autoscale(client,
                                                                     resource_group_name,
                                                                     account_name,
                                                                     keyspace_name,
                                                                     table_name):
    return client.begin_migrate_cassandra_table_to_autoscale(resource_group_name=resource_group_name,
                                                             account_name=account_name,
                                                             keyspace_name=keyspace_name,
                                                             table_name=table_name)


def cosmosdb_cassandra_resource_migrate_cassandra_table_to_manual_throughput(client,
                                                                             resource_group_name,
                                                                             account_name,
                                                                             keyspace_name,
                                                                             table_name):
    return client.begin_migrate_cassandra_table_to_manual_throughput(resource_group_name=resource_group_name,
                                                                     account_name=account_name,
                                                                     keyspace_name=keyspace_name,
                                                                     table_name=table_name)


def cosmosdb_cassandra_resource_migrate_cassandra_view_to_autoscale(client,
                                                                    resource_group_name,
                                                                    account_name,
                                                                    keyspace_name,
                                                                    view_name):
    return client.begin_migrate_cassandra_view_to_autoscale(resource_group_name=resource_group_name,
                                                            account_name=account_name,
                                                            keyspace_name=keyspace_name,
                                                            view_name=view_name)


def cosmosdb_cassandra_resource_migrate_cassandra_view_to_manual_throughput(client,
                                                                            resource_group_name,
                                                                            account_name,
                                                                            keyspace_name,
                                                                            view_name):
    return client.begin_migrate_cassandra_view_to_manual_throughput(resource_group_name=resource_group_name,
                                                                    account_name=account_name,
                                                                    keyspace_name=keyspace_name,
                                                                    view_name=view_name)


def cosmosdb_cassandra_resource_show_cassandra_keyspace(client,
                                                        resource_group_name,
                                                        account_name,
                                                        keyspace_name):
    return client.get_cassandra_keyspace(resource_group_name=resource_group_name,
                                         account_name=account_name,
                                         keyspace_name=keyspace_name)


def cosmosdb_cassandra_resource_show_cassandra_keyspace_throughput(client,
                                                                   resource_group_name,
                                                                   account_name,
                                                                   keyspace_name):
    return client.get_cassandra_keyspace_throughput(resource_group_name=resource_group_name,
                                                    account_name=account_name,
                                                    keyspace_name=keyspace_name)


def cosmosdb_cassandra_resource_show_cassandra_table(client,
                                                     resource_group_name,
                                                     account_name,
                                                     keyspace_name,
                                                     table_name):
    return client.get_cassandra_table(resource_group_name=resource_group_name,
                                      account_name=account_name,
                                      keyspace_name=keyspace_name,
                                      table_name=table_name)


def cosmosdb_cassandra_resource_show_cassandra_table_throughput(client,
                                                                resource_group_name,
                                                                account_name,
                                                                keyspace_name,
                                                                table_name):
    return client.get_cassandra_table_throughput(resource_group_name=resource_group_name,
                                                 account_name=account_name,
                                                 keyspace_name=keyspace_name,
                                                 table_name=table_name)


def cosmosdb_cassandra_resource_show_cassandra_view(client,
                                                    resource_group_name,
                                                    account_name,
                                                    keyspace_name,
                                                    view_name):
    return client.get_cassandra_view(resource_group_name=resource_group_name,
                                     account_name=account_name,
                                     keyspace_name=keyspace_name,
                                     view_name=view_name)


def cosmosdb_cassandra_resource_show_cassandra_view_throughput(client,
                                                               resource_group_name,
                                                               account_name,
                                                               keyspace_name,
                                                               view_name):
    return client.get_cassandra_view_throughput(resource_group_name=resource_group_name,
                                                account_name=account_name,
                                                keyspace_name=keyspace_name,
                                                view_name=view_name)


def cosmosdb_cassandra_resource_update_cassandra_keyspace_throughput(client,
                                                                     resource_group_name,
                                                                     account_name,
                                                                     keyspace_name,
                                                                     location=None,
                                                                     tags=None,
                                                                     type_=None,
                                                                     user_assigned_identities=None,
                                                                     throughput=None,
                                                                     max_throughput=None,
                                                                     throughput_policy=None):
    update_throughput_parameters = {}
    if location is not None:
        update_throughput_parameters['location'] = location
    if tags is not None:
        update_throughput_parameters['tags'] = tags
    update_throughput_parameters['identity'] = {}
    if type_ is not None:
        update_throughput_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        update_throughput_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(update_throughput_parameters['identity']) == 0:
        del update_throughput_parameters['identity']
    update_throughput_parameters['resource'] = {}
    if throughput is not None:
        update_throughput_parameters['resource']['throughput'] = throughput
    update_throughput_parameters['resource']['autoscale_settings'] = {}
    if max_throughput is not None:
        update_throughput_parameters['resource']['autoscale_settings']['max_throughput'] = max_throughput
    update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy'] = {}
    if throughput_policy is not None:
        update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']['throughput_policy'] = throughput_policy
    if len(update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']) == 0:
        del update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']
    return client.begin_update_cassandra_keyspace_throughput(resource_group_name=resource_group_name,
                                                             account_name=account_name,
                                                             keyspace_name=keyspace_name,
                                                             update_throughput_parameters=update_throughput_parameters)


def cosmosdb_cassandra_resource_update_cassandra_table_throughput(client,
                                                                  resource_group_name,
                                                                  account_name,
                                                                  keyspace_name,
                                                                  table_name,
                                                                  location=None,
                                                                  tags=None,
                                                                  type_=None,
                                                                  user_assigned_identities=None,
                                                                  throughput=None,
                                                                  max_throughput=None,
                                                                  throughput_policy=None):
    update_throughput_parameters = {}
    if location is not None:
        update_throughput_parameters['location'] = location
    if tags is not None:
        update_throughput_parameters['tags'] = tags
    update_throughput_parameters['identity'] = {}
    if type_ is not None:
        update_throughput_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        update_throughput_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(update_throughput_parameters['identity']) == 0:
        del update_throughput_parameters['identity']
    update_throughput_parameters['resource'] = {}
    if throughput is not None:
        update_throughput_parameters['resource']['throughput'] = throughput
    update_throughput_parameters['resource']['autoscale_settings'] = {}
    if max_throughput is not None:
        update_throughput_parameters['resource']['autoscale_settings']['max_throughput'] = max_throughput
    update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy'] = {}
    if throughput_policy is not None:
        update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']['throughput_policy'] = throughput_policy
    if len(update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']) == 0:
        del update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']
    return client.begin_update_cassandra_table_throughput(resource_group_name=resource_group_name,
                                                          account_name=account_name,
                                                          keyspace_name=keyspace_name,
                                                          table_name=table_name,
                                                          update_throughput_parameters=update_throughput_parameters)


def cosmosdb_cassandra_resource_update_cassandra_view_throughput(client,
                                                                 resource_group_name,
                                                                 account_name,
                                                                 keyspace_name,
                                                                 view_name,
                                                                 location=None,
                                                                 tags=None,
                                                                 type_=None,
                                                                 user_assigned_identities=None,
                                                                 throughput=None,
                                                                 max_throughput=None,
                                                                 throughput_policy=None):
    update_throughput_parameters = {}
    if location is not None:
        update_throughput_parameters['location'] = location
    if tags is not None:
        update_throughput_parameters['tags'] = tags
    update_throughput_parameters['identity'] = {}
    if type_ is not None:
        update_throughput_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        update_throughput_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(update_throughput_parameters['identity']) == 0:
        del update_throughput_parameters['identity']
    update_throughput_parameters['resource'] = {}
    if throughput is not None:
        update_throughput_parameters['resource']['throughput'] = throughput
    update_throughput_parameters['resource']['autoscale_settings'] = {}
    if max_throughput is not None:
        update_throughput_parameters['resource']['autoscale_settings']['max_throughput'] = max_throughput
    update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy'] = {}
    if throughput_policy is not None:
        update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']['throughput_policy'] = throughput_policy
    if len(update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']) == 0:
        del update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']
    return client.begin_update_cassandra_view_throughput(resource_group_name=resource_group_name,
                                                         account_name=account_name,
                                                         keyspace_name=keyspace_name,
                                                         view_name=view_name,
                                                         update_throughput_parameters=update_throughput_parameters)


def cosmosdb_gremlin_resource_create_update_gremlin_database(client,
                                                             resource_group_name,
                                                             account_name,
                                                             database_name,
                                                             id_,
                                                             location=None,
                                                             tags=None,
                                                             type_=None,
                                                             user_assigned_identities=None,
                                                             throughput=None,
                                                             max_throughput=None):
    create_update_gremlin_database_parameters = {}
    if location is not None:
        create_update_gremlin_database_parameters['location'] = location
    if tags is not None:
        create_update_gremlin_database_parameters['tags'] = tags
    create_update_gremlin_database_parameters['identity'] = {}
    if type_ is not None:
        create_update_gremlin_database_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        create_update_gremlin_database_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(create_update_gremlin_database_parameters['identity']) == 0:
        del create_update_gremlin_database_parameters['identity']
    create_update_gremlin_database_parameters['options'] = {}
    if throughput is not None:
        create_update_gremlin_database_parameters['options']['throughput'] = throughput
    create_update_gremlin_database_parameters['options']['autoscale_settings'] = {}
    if max_throughput is not None:
        create_update_gremlin_database_parameters['options']['autoscale_settings']['max_throughput'] = max_throughput
    if len(create_update_gremlin_database_parameters['options']['autoscale_settings']) == 0:
        del create_update_gremlin_database_parameters['options']['autoscale_settings']
    if len(create_update_gremlin_database_parameters['options']) == 0:
        del create_update_gremlin_database_parameters['options']
    create_update_gremlin_database_parameters['resource'] = {}
    create_update_gremlin_database_parameters['resource']['id'] = id_
    if len(create_update_gremlin_database_parameters['resource']) == 0:
        del create_update_gremlin_database_parameters['resource']
    return client.begin_create_update_gremlin_database(resource_group_name=resource_group_name,
                                                       account_name=account_name,
                                                       database_name=database_name,
                                                       create_update_gremlin_database_parameters=create_update_gremlin_database_parameters)


def cosmosdb_gremlin_resource_create_update_gremlin_graph(client,
                                                          resource_group_name,
                                                          account_name,
                                                          database_name,
                                                          graph_name,
                                                          create_update_gremlin_graph_parameters):
    return client.begin_create_update_gremlin_graph(resource_group_name=resource_group_name,
                                                    account_name=account_name,
                                                    database_name=database_name,
                                                    graph_name=graph_name,
                                                    create_update_gremlin_graph_parameters=create_update_gremlin_graph_parameters)


def cosmosdb_gremlin_resource_delete_gremlin_database(client,
                                                      resource_group_name,
                                                      account_name,
                                                      database_name):
    return client.begin_delete_gremlin_database(resource_group_name=resource_group_name,
                                                account_name=account_name,
                                                database_name=database_name)


def cosmosdb_gremlin_resource_delete_gremlin_graph(client,
                                                   resource_group_name,
                                                   account_name,
                                                   database_name,
                                                   graph_name):
    return client.begin_delete_gremlin_graph(resource_group_name=resource_group_name,
                                             account_name=account_name,
                                             database_name=database_name,
                                             graph_name=graph_name)


def cosmosdb_gremlin_resource_list_gremlin_database(client,
                                                    resource_group_name,
                                                    account_name):
    return client.list_gremlin_databases(resource_group_name=resource_group_name,
                                         account_name=account_name)


def cosmosdb_gremlin_resource_list_gremlin_graph(client,
                                                 resource_group_name,
                                                 account_name,
                                                 database_name):
    return client.list_gremlin_graphs(resource_group_name=resource_group_name,
                                      account_name=account_name,
                                      database_name=database_name)


def cosmosdb_gremlin_resource_migrate_gremlin_database_to_autoscale(client,
                                                                    resource_group_name,
                                                                    account_name,
                                                                    database_name):
    return client.begin_migrate_gremlin_database_to_autoscale(resource_group_name=resource_group_name,
                                                              account_name=account_name,
                                                              database_name=database_name)


def cosmosdb_gremlin_resource_migrate_gremlin_database_to_manual_throughput(client,
                                                                            resource_group_name,
                                                                            account_name,
                                                                            database_name):
    return client.begin_migrate_gremlin_database_to_manual_throughput(resource_group_name=resource_group_name,
                                                                      account_name=account_name,
                                                                      database_name=database_name)


def cosmosdb_gremlin_resource_migrate_gremlin_graph_to_autoscale(client,
                                                                 resource_group_name,
                                                                 account_name,
                                                                 database_name,
                                                                 graph_name):
    return client.begin_migrate_gremlin_graph_to_autoscale(resource_group_name=resource_group_name,
                                                           account_name=account_name,
                                                           database_name=database_name,
                                                           graph_name=graph_name)


def cosmosdb_gremlin_resource_migrate_gremlin_graph_to_manual_throughput(client,
                                                                         resource_group_name,
                                                                         account_name,
                                                                         database_name,
                                                                         graph_name):
    return client.begin_migrate_gremlin_graph_to_manual_throughput(resource_group_name=resource_group_name,
                                                                   account_name=account_name,
                                                                   database_name=database_name,
                                                                   graph_name=graph_name)


def cosmosdb_gremlin_resource_show_gremlin_database(client,
                                                    resource_group_name,
                                                    account_name,
                                                    database_name):
    return client.get_gremlin_database(resource_group_name=resource_group_name,
                                       account_name=account_name,
                                       database_name=database_name)


def cosmosdb_gremlin_resource_show_gremlin_database_throughput(client,
                                                               resource_group_name,
                                                               account_name,
                                                               database_name):
    return client.get_gremlin_database_throughput(resource_group_name=resource_group_name,
                                                  account_name=account_name,
                                                  database_name=database_name)


def cosmosdb_gremlin_resource_show_gremlin_graph(client,
                                                 resource_group_name,
                                                 account_name,
                                                 database_name,
                                                 graph_name):
    return client.get_gremlin_graph(resource_group_name=resource_group_name,
                                    account_name=account_name,
                                    database_name=database_name,
                                    graph_name=graph_name)


def cosmosdb_gremlin_resource_show_gremlin_graph_throughput(client,
                                                            resource_group_name,
                                                            account_name,
                                                            database_name,
                                                            graph_name):
    return client.get_gremlin_graph_throughput(resource_group_name=resource_group_name,
                                               account_name=account_name,
                                               database_name=database_name,
                                               graph_name=graph_name)


def cosmosdb_gremlin_resource_update_gremlin_database_throughput(client,
                                                                 resource_group_name,
                                                                 account_name,
                                                                 database_name,
                                                                 location=None,
                                                                 tags=None,
                                                                 type_=None,
                                                                 user_assigned_identities=None,
                                                                 throughput=None,
                                                                 max_throughput=None,
                                                                 throughput_policy=None):
    update_throughput_parameters = {}
    if location is not None:
        update_throughput_parameters['location'] = location
    if tags is not None:
        update_throughput_parameters['tags'] = tags
    update_throughput_parameters['identity'] = {}
    if type_ is not None:
        update_throughput_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        update_throughput_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(update_throughput_parameters['identity']) == 0:
        del update_throughput_parameters['identity']
    update_throughput_parameters['resource'] = {}
    if throughput is not None:
        update_throughput_parameters['resource']['throughput'] = throughput
    update_throughput_parameters['resource']['autoscale_settings'] = {}
    if max_throughput is not None:
        update_throughput_parameters['resource']['autoscale_settings']['max_throughput'] = max_throughput
    update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy'] = {}
    if throughput_policy is not None:
        update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']['throughput_policy'] = throughput_policy
    if len(update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']) == 0:
        del update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']
    return client.begin_update_gremlin_database_throughput(resource_group_name=resource_group_name,
                                                           account_name=account_name,
                                                           database_name=database_name,
                                                           update_throughput_parameters=update_throughput_parameters)


def cosmosdb_gremlin_resource_update_gremlin_graph_throughput(client,
                                                              resource_group_name,
                                                              account_name,
                                                              database_name,
                                                              graph_name,
                                                              location=None,
                                                              tags=None,
                                                              type_=None,
                                                              user_assigned_identities=None,
                                                              throughput=None,
                                                              max_throughput=None,
                                                              throughput_policy=None):
    update_throughput_parameters = {}
    if location is not None:
        update_throughput_parameters['location'] = location
    if tags is not None:
        update_throughput_parameters['tags'] = tags
    update_throughput_parameters['identity'] = {}
    if type_ is not None:
        update_throughput_parameters['identity']['type'] = type_
    if user_assigned_identities is not None:
        update_throughput_parameters['identity']['user_assigned_identities'] = user_assigned_identities
    if len(update_throughput_parameters['identity']) == 0:
        del update_throughput_parameters['identity']
    update_throughput_parameters['resource'] = {}
    if throughput is not None:
        update_throughput_parameters['resource']['throughput'] = throughput
    update_throughput_parameters['resource']['autoscale_settings'] = {}
    if max_throughput is not None:
        update_throughput_parameters['resource']['autoscale_settings']['max_throughput'] = max_throughput
    update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy'] = {}
    if throughput_policy is not None:
        update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']['throughput_policy'] = throughput_policy
    if len(update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']) == 0:
        del update_throughput_parameters['resource']['autoscale_settings']['auto_upgrade_policy']
    return client.begin_update_gremlin_graph_throughput(resource_group_name=resource_group_name,
                                                        account_name=account_name,
                                                        database_name=database_name,
                                                        graph_name=graph_name,
                                                        update_throughput_parameters=update_throughput_parameters)


def cosmosdb_location_get(client,
                          location):
    return client.location_get(location=location)


def cosmosdb_location_list(client):
    return client.location_list()


def cosmosdb_cassandra_cluster_list(client,
                                    resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def cosmosdb_cassandra_cluster_show(client,
                                    resource_group_name,
                                    cluster_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name)


def cosmosdb_cassandra_cluster_update(client,
                                      resource_group_name,
                                      cluster_name,
                                      location=None,
                                      tags=None,
                                      type_=None,
                                      user_assigned_identities=None,
                                      provisioning_state=None,
                                      restore_from_backup_id=None,
                                      delegated_management_subnet_id=None,
                                      cassandra_version=None,
                                      cluster_name_override=None,
                                      authentication_method=None,
                                      initial_cassandra_admin_password=None,
                                      hours_between_backups=None,
                                      repair_enabled=None,
                                      client_certificates=None,
                                      external_gossip_certificates=None,
                                      external_seed_nodes=None,
                                      ip_address=None,
                                      no_wait=False):
    body = {}
    if location is not None:
        body['location'] = location
    if tags is not None:
        body['tags'] = tags
    body['identity'] = {}
    if type_ is not None:
        body['identity']['type'] = type_
    if user_assigned_identities is not None:
        body['identity']['user_assigned_identities'] = user_assigned_identities
    if len(body['identity']) == 0:
        del body['identity']
    body['properties'] = {}
    if provisioning_state is not None:
        body['properties']['provisioning_state'] = provisioning_state
    if restore_from_backup_id is not None:
        body['properties']['restore_from_backup_id'] = restore_from_backup_id
    if delegated_management_subnet_id is not None:
        body['properties']['delegated_management_subnet_id'] = delegated_management_subnet_id
    if cassandra_version is not None:
        body['properties']['cassandra_version'] = cassandra_version
    if cluster_name_override is not None:
        body['properties']['cluster_name_override'] = cluster_name_override
    if authentication_method is not None:
        body['properties']['authentication_method'] = authentication_method
    if initial_cassandra_admin_password is not None:
        body['properties']['initial_cassandra_admin_password'] = initial_cassandra_admin_password
    if hours_between_backups is not None:
        body['properties']['hours_between_backups'] = hours_between_backups
    if repair_enabled is not None:
        body['properties']['repair_enabled'] = repair_enabled
    if client_certificates is not None:
        body['properties']['client_certificates'] = client_certificates
    if external_gossip_certificates is not None:
        body['properties']['external_gossip_certificates'] = external_gossip_certificates
    if external_seed_nodes is not None:
        body['properties']['external_seed_nodes'] = external_seed_nodes
    body['properties']['prometheus_endpoint'] = {}
    if ip_address is not None:
        body['properties']['prometheus_endpoint']['ip_address'] = ip_address
    if len(body['properties']['prometheus_endpoint']) == 0:
        del body['properties']['prometheus_endpoint']
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       body=body)


def cosmosdb_cassandra_cluster_delete(client,
                                      resource_group_name,
                                      cluster_name,
                                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name)


def cosmosdb_cassandra_cluster_create_update(client,
                                             resource_group_name,
                                             cluster_name,
                                             location=None,
                                             tags=None,
                                             type_=None,
                                             user_assigned_identities=None,
                                             provisioning_state=None,
                                             restore_from_backup_id=None,
                                             delegated_management_subnet_id=None,
                                             cassandra_version=None,
                                             cluster_name_override=None,
                                             authentication_method=None,
                                             initial_cassandra_admin_password=None,
                                             hours_between_backups=None,
                                             repair_enabled=None,
                                             client_certificates=None,
                                             external_gossip_certificates=None,
                                             external_seed_nodes=None,
                                             ip_address=None,
                                             no_wait=False):
    body = {}
    if location is not None:
        body['location'] = location
    if tags is not None:
        body['tags'] = tags
    body['identity'] = {}
    if type_ is not None:
        body['identity']['type'] = type_
    if user_assigned_identities is not None:
        body['identity']['user_assigned_identities'] = user_assigned_identities
    if len(body['identity']) == 0:
        del body['identity']
    body['properties'] = {}
    if provisioning_state is not None:
        body['properties']['provisioning_state'] = provisioning_state
    if restore_from_backup_id is not None:
        body['properties']['restore_from_backup_id'] = restore_from_backup_id
    if delegated_management_subnet_id is not None:
        body['properties']['delegated_management_subnet_id'] = delegated_management_subnet_id
    if cassandra_version is not None:
        body['properties']['cassandra_version'] = cassandra_version
    if cluster_name_override is not None:
        body['properties']['cluster_name_override'] = cluster_name_override
    if authentication_method is not None:
        body['properties']['authentication_method'] = authentication_method
    if initial_cassandra_admin_password is not None:
        body['properties']['initial_cassandra_admin_password'] = initial_cassandra_admin_password
    if hours_between_backups is not None:
        body['properties']['hours_between_backups'] = hours_between_backups
    if repair_enabled is not None:
        body['properties']['repair_enabled'] = repair_enabled
    if client_certificates is not None:
        body['properties']['client_certificates'] = client_certificates
    if external_gossip_certificates is not None:
        body['properties']['external_gossip_certificates'] = external_gossip_certificates
    if external_seed_nodes is not None:
        body['properties']['external_seed_nodes'] = external_seed_nodes
    body['properties']['prometheus_endpoint'] = {}
    if ip_address is not None:
        body['properties']['prometheus_endpoint']['ip_address'] = ip_address
    if len(body['properties']['prometheus_endpoint']) == 0:
        del body['properties']['prometheus_endpoint']
    return sdk_no_wait(no_wait,
                       client.begin_create_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       body=body)


def cosmosdb_cassandra_cluster_fetch_node_status(client,
                                                 resource_group_name,
                                                 cluster_name,
                                                 no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_fetch_node_status,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name)


def cosmosdb_cassandra_cluster_list_backup(client,
                                           resource_group_name,
                                           cluster_name):
    return client.list_backups(resource_group_name=resource_group_name,
                               cluster_name=cluster_name)


def cosmosdb_cassandra_cluster_request_repair(client,
                                              resource_group_name,
                                              cluster_name,
                                              keyspace,
                                              tables=None,
                                              no_wait=False):
    body = {}
    body['keyspace'] = keyspace
    if tables is not None:
        body['tables'] = tables
    return sdk_no_wait(no_wait,
                       client.begin_request_repair,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       body=body)


def cosmosdb_cassandra_cluster_show_backup(client,
                                           resource_group_name,
                                           cluster_name,
                                           backup_id):
    return client.get_backup(resource_group_name=resource_group_name,
                             cluster_name=cluster_name,
                             backup_id=backup_id)


def cosmosdb_cassandra_data_center_list(client,
                                        resource_group_name,
                                        cluster_name):
    return client.list(resource_group_name=resource_group_name,
                       cluster_name=cluster_name)


def cosmosdb_cassandra_data_center_show(client,
                                        resource_group_name,
                                        cluster_name,
                                        data_center_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      data_center_name=data_center_name)


def cosmosdb_cassandra_data_center_update(client,
                                          resource_group_name,
                                          cluster_name,
                                          data_center_name,
                                          provisioning_state=None,
                                          data_center_location=None,
                                          delegated_subnet_id=None,
                                          node_count=None,
                                          base64_encoded_cassandra_yaml_fragment=None,
                                          no_wait=False):
    body = {}
    body['properties'] = {}
    if provisioning_state is not None:
        body['properties']['provisioning_state'] = provisioning_state
    if data_center_location is not None:
        body['properties']['data_center_location'] = data_center_location
    if delegated_subnet_id is not None:
        body['properties']['delegated_subnet_id'] = delegated_subnet_id
    if node_count is not None:
        body['properties']['node_count'] = node_count
    if base64_encoded_cassandra_yaml_fragment is not None:
        body['properties']['base64_encoded_cassandra_yaml_fragment'] = base64_encoded_cassandra_yaml_fragment
    if len(body['properties']) == 0:
        del body['properties']
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       data_center_name=data_center_name,
                       body=body)


def cosmosdb_cassandra_data_center_delete(client,
                                          resource_group_name,
                                          cluster_name,
                                          data_center_name,
                                          no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       data_center_name=data_center_name)


def cosmosdb_cassandra_data_center_create_update(client,
                                                 resource_group_name,
                                                 cluster_name,
                                                 data_center_name,
                                                 provisioning_state=None,
                                                 data_center_location=None,
                                                 delegated_subnet_id=None,
                                                 node_count=None,
                                                 base64_encoded_cassandra_yaml_fragment=None,
                                                 no_wait=False):
    body = {}
    body['properties'] = {}
    if provisioning_state is not None:
        body['properties']['provisioning_state'] = provisioning_state
    if data_center_location is not None:
        body['properties']['data_center_location'] = data_center_location
    if delegated_subnet_id is not None:
        body['properties']['delegated_subnet_id'] = delegated_subnet_id
    if node_count is not None:
        body['properties']['node_count'] = node_count
    if base64_encoded_cassandra_yaml_fragment is not None:
        body['properties']['base64_encoded_cassandra_yaml_fragment'] = base64_encoded_cassandra_yaml_fragment
    if len(body['properties']) == 0:
        del body['properties']
    return sdk_no_wait(no_wait,
                       client.begin_create_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       data_center_name=data_center_name,
                       body=body)


def cosmosdb_notebook_workspace_list(client,
                                     resource_group_name,
                                     account_name):
    return client.list_by_database_account(resource_group_name=resource_group_name,
                                           account_name=account_name)


def cosmosdb_notebook_workspace_show(client,
                                     resource_group_name,
                                     account_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      notebook_workspace_name="default")


def cosmosdb_notebook_workspace_create(client,
                                       resource_group_name,
                                       account_name,
                                       no_wait=False):
    notebook_create_update_parameters = {}
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       notebook_workspace_name="default",
                       notebook_create_update_parameters=notebook_create_update_parameters)


def cosmosdb_notebook_workspace_update(client,
                                       resource_group_name,
                                       account_name,
                                       no_wait=False):
    notebook_create_update_parameters = {}
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       notebook_workspace_name="default",
                       notebook_create_update_parameters=notebook_create_update_parameters)


def cosmosdb_notebook_workspace_delete(client,
                                       resource_group_name,
                                       account_name,
                                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       notebook_workspace_name="default")


def cosmosdb_notebook_workspace_list_connection_info(client,
                                                     resource_group_name,
                                                     account_name):
    return client.list_connection_info(resource_group_name=resource_group_name,
                                       account_name=account_name,
                                       notebook_workspace_name="default")


def cosmosdb_notebook_workspace_regenerate_auth_token(client,
                                                      resource_group_name,
                                                      account_name,
                                                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_regenerate_auth_token,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       notebook_workspace_name="default")


def cosmosdb_notebook_workspace_start(client,
                                      resource_group_name,
                                      account_name,
                                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_start,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       notebook_workspace_name="default")


def cosmosdb_private_endpoint_connection_list(client,
                                              resource_group_name,
                                              account_name):
    return client.list_by_database_account(resource_group_name=resource_group_name,
                                           account_name=account_name)


def cosmosdb_private_endpoint_connection_show(client,
                                              resource_group_name,
                                              account_name,
                                              private_endpoint_connection_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      private_endpoint_connection_name=private_endpoint_connection_name)


def cosmosdb_private_endpoint_connection_create(client,
                                                resource_group_name,
                                                account_name,
                                                private_endpoint_connection_name,
                                                private_link_service_connection_state=None,
                                                group_id=None,
                                                provisioning_state=None,
                                                id_=None,
                                                no_wait=False):
    parameters = {}
    if private_link_service_connection_state is not None:
        parameters['private_link_service_connection_state'] = private_link_service_connection_state
    if group_id is not None:
        parameters['group_id'] = group_id
    if provisioning_state is not None:
        parameters['provisioning_state'] = provisioning_state
    parameters['private_endpoint'] = {}
    if id_ is not None:
        parameters['private_endpoint']['id'] = id_
    if len(parameters['private_endpoint']) == 0:
        del parameters['private_endpoint']
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       private_endpoint_connection_name=private_endpoint_connection_name,
                       parameters=parameters)


def cosmosdb_private_endpoint_connection_update(instance,
                                                resource_group_name,
                                                account_name,
                                                private_endpoint_connection_name,
                                                private_link_service_connection_state=None,
                                                group_id=None,
                                                provisioning_state=None,
                                                id_=None,
                                                no_wait=False):
    if private_link_service_connection_state is not None:
        instance.private_link_service_connection_state = private_link_service_connection_state
    if group_id is not None:
        instance.group_id = group_id
    if provisioning_state is not None:
        instance.provisioning_state = provisioning_state
    if id_ is not None:
        instance.private_endpoint.id = id_
    return instance


def cosmosdb_private_endpoint_connection_delete(client,
                                                resource_group_name,
                                                account_name,
                                                private_endpoint_connection_name,
                                                no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       private_endpoint_connection_name=private_endpoint_connection_name)


def cosmosdb_private_link_resource_list(client,
                                        resource_group_name,
                                        account_name):
    return client.list_by_database_account(resource_group_name=resource_group_name,
                                           account_name=account_name)


def cosmosdb_private_link_resource_show(client,
                                        resource_group_name,
                                        account_name,
                                        group_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      group_name=group_name)


def cosmosdb_restorable_database_account_list(client,
                                              location=None):
    if location is not None:
        return client.list_by_location(location=location)
    return client.list()


def cosmosdb_restorable_database_account_show(client,
                                              location,
                                              instance_id):
    return client.get_by_location(location=location,
                                  instance_id=instance_id)


def cosmosdb_restorable_sql_database_list(client,
                                          location,
                                          instance_id):
    return client.list(location=location,
                       instance_id=instance_id)


def cosmosdb_restorable_sql_container_list(client,
                                           location,
                                           instance_id,
                                           restorable_sql_database_rid=None,
                                           start_time=None,
                                           end_time=None):
    return client.list(location=location,
                       instance_id=instance_id,
                       restorable_sql_database_rid=restorable_sql_database_rid,
                       start_time=start_time,
                       end_time=end_time)


def cosmosdb_restorable_sql_resource_list(client,
                                          location,
                                          instance_id,
                                          restore_location=None,
                                          restore_timestamp_in_utc=None):
    return client.list(location=location,
                       instance_id=instance_id,
                       restore_location=restore_location,
                       restore_timestamp_in_utc=restore_timestamp_in_utc)


def cosmosdb_restorable_mongodb_database_list(client,
                                              location,
                                              instance_id):
    return client.list(location=location,
                       instance_id=instance_id)


def cosmosdb_restorable_mongodb_collection_list(client,
                                                location,
                                                instance_id,
                                                restorable_mongodb_database_rid=None):
    return client.list(location=location,
                       instance_id=instance_id,
                       restorable_mongodb_database_rid=restorable_mongodb_database_rid)


def cosmosdb_restorable_mongodb_resource_list(client,
                                              location,
                                              instance_id,
                                              restore_location=None,
                                              restore_timestamp_in_utc=None):
    return client.list(location=location,
                       instance_id=instance_id,
                       restore_location=restore_location,
                       restore_timestamp_in_utc=restore_timestamp_in_utc)


def cosmosdb_service_list(client,
                          resource_group_name,
                          account_name):
    return client.list(resource_group_name=resource_group_name,
                       account_name=account_name)


def cosmosdb_service_show(client,
                          resource_group_name,
                          account_name,
                          service_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      service_name=service_name)


def cosmosdb_service_create(client,
                            resource_group_name,
                            account_name,
                            service_name,
                            instance_size=None,
                            instance_count=None,
                            service_type=None,
                            no_wait=False):
    create_update_parameters = {}
    if instance_size is not None:
        create_update_parameters['instance_size'] = instance_size
    if instance_count is not None:
        create_update_parameters['instance_count'] = instance_count
    if service_type is not None:
        create_update_parameters['service_type'] = service_type
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       service_name=service_name,
                       create_update_parameters=create_update_parameters)


def cosmosdb_service_delete(client,
                            resource_group_name,
                            account_name,
                            service_name,
                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       account_name=account_name,
                       service_name=service_name)


def cosmosdb_data_transfer_job_list(client,
                                    resource_group_name,
                                    account_name):
    return client.list_by_database_account(resource_group_name=resource_group_name,
                                           account_name=account_name)


def cosmosdb_data_transfer_job_show(client,
                                    resource_group_name,
                                    account_name,
                                    job_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      job_name=job_name)


def cosmosdb_data_transfer_job_create(client,
                                      resource_group_name,
                                      account_name,
                                      job_name,
                                      job_create_parameters):
    return client.create(resource_group_name=resource_group_name,
                         account_name=account_name,
                         job_name=job_name,
                         job_create_parameters=job_create_parameters)
