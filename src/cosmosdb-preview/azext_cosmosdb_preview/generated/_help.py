# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from knack.help_files import helps


helps['cosmosdb'] = '''
    type: group
    short-summary: Manage Cosmos DB
'''

helps['cosmosdb database-account'] = """
    type: group
    short-summary: Manage database account with cosmosdb
"""

helps['cosmosdb database-account list'] = """
    type: command
    short-summary: "Lists all the Azure Cosmos DB database accounts available under the given resource group. And \
Lists all the Azure Cosmos DB database accounts available under the subscription."
    examples:
      - name: CosmosDBDatabaseAccountListByResourceGroup
        text: |-
               az cosmosdb database-account list --resource-group "rg1"
      - name: CosmosDBDatabaseAccountList
        text: |-
               az cosmosdb database-account list
"""

helps['cosmosdb database-account show'] = """
    type: command
    short-summary: "Retrieves the properties of an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBDatabaseAccountGet
        text: |-
               az cosmosdb database-account show --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb database-account create'] = """
    type: command
    short-summary: "Create an Azure Cosmos DB database account. The \\"Update\\" method is preferred when performing \
updates on an account."
    parameters:
      - name: --consistency-policy
        short-summary: "The consistency policy for the Cosmos DB account."
        long-summary: |
            Usage: --consistency-policy default-consistency-level=XX max-staleness-prefix=XX \
max-interval-in-seconds=XX

            default-consistency-level: Required. The default consistency level and configuration settings of the \
Cosmos DB account.
            max-staleness-prefix: When used with the Bounded Staleness consistency level, this value represents the \
number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when \
defaultConsistencyPolicy is set to 'BoundedStaleness'.
            max-interval-in-seconds: When used with the Bounded Staleness consistency level, this value represents the \
time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when \
defaultConsistencyPolicy is set to 'BoundedStaleness'.
      - name: --locations
        short-summary: "An array that contains the georeplication locations enabled for the Cosmos DB account."
        long-summary: |
            Usage: --locations location-name=XX failover-priority=XX is-zone-redundant=XX

            location-name: The name of the region.
            failover-priority: The failover priority of the region. A failover priority of 0 indicates a write region. \
The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for \
each of the regions in which the database account exists.
            is-zone-redundant: Flag to indicate whether or not this region is an AvailabilityZone region

            Multiple actions can be specified by using more than one --locations argument.
      - name: --ip-rules
        short-summary: "List of IpRules."
        long-summary: |
            Usage: --ip-rules ip-address-or-range=XX

            ip-address-or-range: A single IPv4 address or a single IPv4 address range in CIDR format. Provided IPs \
must be well-formatted and cannot be contained in one of the following ranges: 10.0.0.0/8, 100.64.0.0/10, \
172.16.0.0/12, 192.168.0.0/16, since these are not enforceable by the IP address filter. Example of valid inputs: \
“23.40.210.245” or “23.40.210.0/8”.

            Multiple actions can be specified by using more than one --ip-rules argument.
      - name: --capabilities
        short-summary: "List of Cosmos DB capabilities for the account"
        long-summary: |
            Usage: --capabilities name=XX

            name: Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also \
include "EnableTable" and "EnableGremlin".

            Multiple actions can be specified by using more than one --capabilities argument.
      - name: --virtual-network-rules
        short-summary: "List of Virtual Network ACL rules configured for the Cosmos DB account."
        long-summary: |
            Usage: --virtual-network-rules id=XX ignore-missing-v-net-service-endpoint=XX

            id: Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/provid\
ers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
            ignore-missing-v-net-service-endpoint: Create firewall rule before the virtual network has vnet service \
endpoint enabled.

            Multiple actions can be specified by using more than one --virtual-network-rules argument.
      - name: --periodic-mode-backup-policy
        short-summary: "The object representing periodic mode backup policy."
        long-summary: |
            Usage: --periodic-mode-backup-policy backup-interval-in-minutes=XX backup-retention-interval-in-hours=XX \
backup-storage-redundancy=XX type=XX status=XX target-type=XX start-time=XX

            backup-interval-in-minutes: An integer representing the interval in minutes between two backups
            backup-retention-interval-in-hours: An integer representing the time (in hours) that each backup is \
retained
            backup-storage-redundancy: Enum to indicate type of backup residency
            type: Required. Describes the mode of backups.
            status: Describes the status of migration between backup policy types.
            target-type: Describes the target backup policy type of the backup policy migration.
            start-time: Time at which the backup policy migration started (ISO-8601 format).
      - name: --continuous-mode-backup-policy
        short-summary: "The object representing continuous mode backup policy."
        long-summary: |
            Usage: --continuous-mode-backup-policy type=XX status=XX target-type=XX start-time=XX

            type: Required. Describes the mode of backups.
            status: Describes the status of migration between backup policy types.
            target-type: Describes the target backup policy type of the backup policy migration.
            start-time: Time at which the backup policy migration started (ISO-8601 format).
      - name: --cors
        short-summary: "The CORS policy for the Cosmos DB database account."
        long-summary: |
            Usage: --cors allowed-origins=XX allowed-methods=XX allowed-headers=XX exposed-headers=XX \
max-age-in-seconds=XX

            allowed-origins: Required. The origin domains that are permitted to make a request against the service via \
CORS.
            allowed-methods: The methods (HTTP request verbs) that the origin domain may use for a CORS request.
            allowed-headers: The request headers that the origin domain may specify on the CORS request.
            exposed-headers: The response headers that may be sent in the response to the CORS request and exposed by \
the browser to the request issuer.
            max-age-in-seconds: The maximum amount time that a browser should cache the preflight OPTIONS request.

            Multiple actions can be specified by using more than one --cors argument.
      - name: --databases-to-restore
        short-summary: "List of specific databases available for restore."
        long-summary: |
            Usage: --databases-to-restore database-name=XX collection-names=XX

            database-name: The name of the database available for restore.
            collection-names: The names of the collections available for restore.

            Multiple actions can be specified by using more than one --databases-to-restore argument.
    examples:
      - name: CosmosDBDatabaseAccountCreateMax
        text: |-
               az cosmosdb database-account create --account-name "ddb1" --type "SystemAssigned,UserAssigned" \
--user-assigned-identities "{\\"/subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/eu2cgroup/providers/\
Microsoft.ManagedIdentity/userAssignedIdentities/id1\\":{}}" --kind "MongoDB" --location "westus" --schema-type \
"WellDefined" --server-version "3.2" --periodic-mode-backup-policy backup-interval-in-minutes=240 \
backup-retention-interval-in-hours=8 backup-storage-redundancy="Geo" --consistency-policy \
default-consistency-level="BoundedStaleness" max-interval-in-seconds=10 max-staleness-prefix=200 --cors \
allowed-origins="https://test" --default-identity "FirstPartyIdentity" --enable-analytical-storage true \
--enable-free-tier false --ip-rules ip-address-or-range="23.43.230.120" --ip-rules ip-address-or-range="110.12.240.0/12\
" --is-virtual-network-filter-enabled true --key-vault-key-uri "https://myKeyVault.vault.azure.net" --locations \
failover-priority=0 is-zone-redundant=false location-name="southcentralus" --locations failover-priority=1 \
is-zone-redundant=false location-name="eastus" --network-acl-bypass "AzureServices" --network-acl-bypass-resource-ids \
"/subscriptions/subId/resourcegroups/rgName/providers/Microsoft.Synapse/workspaces/workspaceName" \
--public-network-access "Enabled" --virtual-network-rules id="/subscriptions/subId/resourceGroups/rg/providers/Microsof\
t.Network/virtualNetworks/vnet1/subnets/subnet1" ignore-missing-v-net-service-endpoint=false --resource-group "rg1"
      - name: CosmosDBDatabaseAccountCreateMin
        text: |-
               az cosmosdb database-account create --account-name "ddb1" --location "westus" --locations \
failover-priority=0 is-zone-redundant=false location-name="southcentralus" --resource-group "rg1"
"""

helps['cosmosdb database-account update'] = """
    type: command
    short-summary: "Updates the properties of an existing Azure Cosmos DB database account."
    parameters:
      - name: --consistency-policy
        short-summary: "The consistency policy for the Cosmos DB account."
        long-summary: |
            Usage: --consistency-policy default-consistency-level=XX max-staleness-prefix=XX \
max-interval-in-seconds=XX

            default-consistency-level: Required. The default consistency level and configuration settings of the \
Cosmos DB account.
            max-staleness-prefix: When used with the Bounded Staleness consistency level, this value represents the \
number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when \
defaultConsistencyPolicy is set to 'BoundedStaleness'.
            max-interval-in-seconds: When used with the Bounded Staleness consistency level, this value represents the \
time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when \
defaultConsistencyPolicy is set to 'BoundedStaleness'.
      - name: --locations
        short-summary: "An array that contains the georeplication locations enabled for the Cosmos DB account."
        long-summary: |
            Usage: --locations location-name=XX failover-priority=XX is-zone-redundant=XX

            location-name: The name of the region.
            failover-priority: The failover priority of the region. A failover priority of 0 indicates a write region. \
The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for \
each of the regions in which the database account exists.
            is-zone-redundant: Flag to indicate whether or not this region is an AvailabilityZone region

            Multiple actions can be specified by using more than one --locations argument.
      - name: --ip-rules
        short-summary: "List of IpRules."
        long-summary: |
            Usage: --ip-rules ip-address-or-range=XX

            ip-address-or-range: A single IPv4 address or a single IPv4 address range in CIDR format. Provided IPs \
must be well-formatted and cannot be contained in one of the following ranges: 10.0.0.0/8, 100.64.0.0/10, \
172.16.0.0/12, 192.168.0.0/16, since these are not enforceable by the IP address filter. Example of valid inputs: \
“23.40.210.245” or “23.40.210.0/8”.

            Multiple actions can be specified by using more than one --ip-rules argument.
      - name: --capabilities
        short-summary: "List of Cosmos DB capabilities for the account"
        long-summary: |
            Usage: --capabilities name=XX

            name: Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also \
include "EnableTable" and "EnableGremlin".

            Multiple actions can be specified by using more than one --capabilities argument.
      - name: --virtual-network-rules
        short-summary: "List of Virtual Network ACL rules configured for the Cosmos DB account."
        long-summary: |
            Usage: --virtual-network-rules id=XX ignore-missing-v-net-service-endpoint=XX

            id: Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/provid\
ers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.
            ignore-missing-v-net-service-endpoint: Create firewall rule before the virtual network has vnet service \
endpoint enabled.

            Multiple actions can be specified by using more than one --virtual-network-rules argument.
      - name: --periodic-mode-backup-policy
        short-summary: "The object representing periodic mode backup policy."
        long-summary: |
            Usage: --periodic-mode-backup-policy backup-interval-in-minutes=XX backup-retention-interval-in-hours=XX \
backup-storage-redundancy=XX type=XX status=XX target-type=XX start-time=XX

            backup-interval-in-minutes: An integer representing the interval in minutes between two backups
            backup-retention-interval-in-hours: An integer representing the time (in hours) that each backup is \
retained
            backup-storage-redundancy: Enum to indicate type of backup residency
            type: Required. Describes the mode of backups.
            status: Describes the status of migration between backup policy types.
            target-type: Describes the target backup policy type of the backup policy migration.
            start-time: Time at which the backup policy migration started (ISO-8601 format).
      - name: --continuous-mode-backup-policy
        short-summary: "The object representing continuous mode backup policy."
        long-summary: |
            Usage: --continuous-mode-backup-policy type=XX status=XX target-type=XX start-time=XX

            type: Required. Describes the mode of backups.
            status: Describes the status of migration between backup policy types.
            target-type: Describes the target backup policy type of the backup policy migration.
            start-time: Time at which the backup policy migration started (ISO-8601 format).
      - name: --cors
        short-summary: "The CORS policy for the Cosmos DB database account."
        long-summary: |
            Usage: --cors allowed-origins=XX allowed-methods=XX allowed-headers=XX exposed-headers=XX \
max-age-in-seconds=XX

            allowed-origins: Required. The origin domains that are permitted to make a request against the service via \
CORS.
            allowed-methods: The methods (HTTP request verbs) that the origin domain may use for a CORS request.
            allowed-headers: The request headers that the origin domain may specify on the CORS request.
            exposed-headers: The response headers that may be sent in the response to the CORS request and exposed by \
the browser to the request issuer.
            max-age-in-seconds: The maximum amount time that a browser should cache the preflight OPTIONS request.

            Multiple actions can be specified by using more than one --cors argument.
    examples:
      - name: CosmosDBDatabaseAccountPatch
        text: |-
               az cosmosdb database-account update --account-name "ddb1" --resource-group "rg1" --type \
"SystemAssigned,UserAssigned" --user-assigned-identities "{\\"/subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resou\
rceGroups/eu2cgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1\\":{}}" --location "westus" \
--schema-type "WellDefined" --periodic-mode-backup-policy backup-interval-in-minutes=240 \
backup-retention-interval-in-hours=720 backup-storage-redundancy="Geo" --consistency-policy \
default-consistency-level="BoundedStaleness" max-interval-in-seconds=10 max-staleness-prefix=200 --default-identity \
"FirstPartyIdentity" --enable-full-text-query "True" --enable-analytical-storage true --enable-free-tier false \
--ip-rules ip-address-or-range="23.43.230.120" --ip-rules ip-address-or-range="110.12.240.0/12" \
--is-virtual-network-filter-enabled true --network-acl-bypass "AzureServices" --network-acl-bypass-resource-ids \
"/subscriptions/subId/resourcegroups/rgName/providers/Microsoft.Synapse/workspaces/workspaceName" \
--virtual-network-rules id="/subscriptions/subId/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/vnet1/su\
bnets/subnet1" ignore-missing-v-net-service-endpoint=false --tags dept="finance"
"""

helps['cosmosdb database-account delete'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBDatabaseAccountDelete
        text: |-
               az cosmosdb database-account delete --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb database-account check-name-exist'] = """
    type: command
    short-summary: "Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only \
lowercase letters, numbers, and the '-' character, and must be between 3 and 50 characters."
    examples:
      - name: CosmosDBDatabaseAccountCheckNameExists
        text: |-
               az cosmosdb database-account check-name-exist --account-name "ddb1"
"""

helps['cosmosdb database-account failover-priority-change'] = """
    type: command
    short-summary: "Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0 \
indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority \
values must be unique for each of the regions in which the database account exists."
    parameters:
      - name: --failover-policies
        short-summary: "List of failover policies."
        long-summary: |
            Usage: --failover-policies location-name=XX failover-priority=XX

            location-name: The name of the region in which the database account exists.
            failover-priority: The failover priority of the region. A failover priority of 0 indicates a write region. \
The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for \
each of the regions in which the database account exists.

            Multiple actions can be specified by using more than one --failover-policies argument.
    examples:
      - name: CosmosDBDatabaseAccountFailoverPriorityChange
        text: |-
               az cosmosdb database-account failover-priority-change --account-name "ddb1-failover" \
--failover-policies failover-priority=0 location-name="eastus" --failover-policies failover-priority=1 \
location-name="westus" --resource-group "rg1"
"""

helps['cosmosdb database-account list-connection-string'] = """
    type: command
    short-summary: "Lists the connection strings for the specified Azure Cosmos DB database account."
    examples:
      - name: CosmosDBDatabaseAccountListConnectionStrings
        text: |-
               az cosmosdb database-account list-connection-string --account-name "ddb1" --resource-group "rg1"
      - name: CosmosDBDatabaseAccountListConnectionStringsMongo
        text: |-
               az cosmosdb database-account list-connection-string --account-name "mongo-ddb1" --resource-group "rg1"
"""

helps['cosmosdb database-account list-key'] = """
    type: command
    short-summary: "Lists the access keys for the specified Azure Cosmos DB database account."
    examples:
      - name: CosmosDBDatabaseAccountListKeys
        text: |-
               az cosmosdb database-account list-key --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb database-account list-metric'] = """
    type: command
    short-summary: "Retrieves the metrics determined by the given filter for the given database account."
    examples:
      - name: CosmosDBDatabaseAccountGetMetrics
        text: |-
               az cosmosdb database-account list-metric --filter "$filter=(name.value eq \'Total Requests\') and \
timeGrain eq duration\'PT5M\' and startTime eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \
\'2017-11-20T00:13:55.2780000Z" --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb database-account list-metric-definition'] = """
    type: command
    short-summary: "Retrieves metric definitions for the given database account."
    examples:
      - name: CosmosDBDatabaseAccountGetMetricDefinitions
        text: |-
               az cosmosdb database-account list-metric-definition --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb database-account list-read-only-key'] = """
    type: command
    short-summary: "Lists the read-only access keys for the specified Azure Cosmos DB database account."
    examples:
      - name: CosmosDBDatabaseAccountListReadOnlyKeys
        text: |-
               az cosmosdb database-account list-read-only-key --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb database-account list-usage'] = """
    type: command
    short-summary: "Retrieves the usages (most recent data) for the given database account."
    examples:
      - name: CosmosDBDatabaseAccountGetUsages
        text: |-
               az cosmosdb database-account list-usage --filter "$filter=name.value eq \'Storage\'" --account-name \
"ddb1" --resource-group "rg1"
"""

helps['cosmosdb database-account offline-region'] = """
    type: command
    short-summary: "Offline the specified region for the specified Azure Cosmos DB database account."
    examples:
      - name: CosmosDBDatabaseAccountOfflineRegion
        text: |-
               az cosmosdb database-account offline-region --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb database-account online-region'] = """
    type: command
    short-summary: "Online the specified region for the specified Azure Cosmos DB database account."
    examples:
      - name: CosmosDBDatabaseAccountOnlineRegion
        text: |-
               az cosmosdb database-account online-region --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb database-account regenerate-key'] = """
    type: command
    short-summary: "Regenerates an access key for the specified Azure Cosmos DB database account."
    examples:
      - name: CosmosDBDatabaseAccountRegenerateKey
        text: |-
               az cosmosdb database-account regenerate-key --account-name "ddb1" --key-kind "primary" --resource-group \
"rg1"
"""

helps['cosmosdb database-account show-read-only-key'] = """
    type: command
    short-summary: "Lists the read-only access keys for the specified Azure Cosmos DB database account."
    examples:
      - name: CosmosDBDatabaseAccountListReadOnlyKeys
        text: |-
               az cosmosdb database-account show-read-only-key --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb database-account wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the cosmosdb database-account is met.
    examples:
      - name: Pause executing next line of CLI script until the cosmosdb database-account is successfully created.
        text: |-
               az cosmosdb database-account wait --account-name "ddb1" --resource-group "rg1" --created
      - name: Pause executing next line of CLI script until the cosmosdb database-account is successfully updated.
        text: |-
               az cosmosdb database-account wait --account-name "ddb1" --resource-group "rg1" --updated
      - name: Pause executing next line of CLI script until the cosmosdb database-account is successfully deleted.
        text: |-
               az cosmosdb database-account wait --account-name "ddb1" --resource-group "rg1" --deleted
"""

helps['cosmosdb database'] = """
    type: group
    short-summary: Manage database with cosmosdb
"""

helps['cosmosdb database list-metric'] = """
    type: command
    short-summary: "Retrieves the metrics determined by the given filter for the given database account and database."
    examples:
      - name: CosmosDBDatabaseGetMetrics
        text: |-
               az cosmosdb database list-metric --filter "$filter=(name.value eq \'Total Requests\') and timeGrain eq \
duration\'PT5M\' and startTime eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \'2017-11-20T00:13:55.2780000Z" \
--account-name "ddb1" --database-rid "rid" --resource-group "rg1"
"""

helps['cosmosdb database list-metric-definition'] = """
    type: command
    short-summary: "Retrieves metric definitions for the given database."
    examples:
      - name: CosmosDBDatabaseGetMetricDefinitions
        text: |-
               az cosmosdb database list-metric-definition --account-name "ddb1" --database-rid "databaseRid" \
--resource-group "rg1"
"""

helps['cosmosdb database list-usage'] = """
    type: command
    short-summary: "Retrieves the usages (most recent data) for the given database."
    examples:
      - name: CosmosDBDatabaseGetUsages
        text: |-
               az cosmosdb database list-usage --filter "$filter=name.value eq \'Storage\'" --account-name "ddb1" \
--database-rid "databaseRid" --resource-group "rg1"
"""

helps['cosmosdb collection'] = """
    type: group
    short-summary: Manage collection with cosmosdb
"""

helps['cosmosdb collection list-metric'] = """
    type: command
    short-summary: "Retrieves the metrics determined by the given filter for the given database account and \
collection."
    examples:
      - name: CosmosDBCollectionGetMetrics
        text: |-
               az cosmosdb collection list-metric --filter "$filter=(name.value eq \'Total Requests\') and timeGrain \
eq duration\'PT5M\' and startTime eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \'2017-11-20T00:13:55.2780000Z" \
--account-name "ddb1" --collection-rid "collectionRid" --database-rid "databaseRid" --resource-group "rg1"
"""

helps['cosmosdb collection list-metric-definition'] = """
    type: command
    short-summary: "Retrieves metric definitions for the given collection."
    examples:
      - name: CosmosDBCollectionGetMetricDefinitions
        text: |-
               az cosmosdb collection list-metric-definition --account-name "ddb1" --collection-rid "collectionRid" \
--database-rid "databaseRid" --resource-group "rg1"
"""

helps['cosmosdb collection list-usage'] = """
    type: command
    short-summary: "Retrieves the usages (most recent storage data) for the given collection."
    examples:
      - name: CosmosDBCollectionGetUsages
        text: |-
               az cosmosdb collection list-usage --filter "$filter=name.value eq \'Storage\'" --account-name "ddb1" \
--collection-rid "collectionRid" --database-rid "databaseRid" --resource-group "rg1"
"""

helps['cosmosdb collection-region'] = """
    type: group
    short-summary: Manage collection region with cosmosdb
"""

helps['cosmosdb collection-region list-metric'] = """
    type: command
    short-summary: "Retrieves the metrics determined by the given filter for the given database account, collection \
and region."
    examples:
      - name: CosmosDBRegionCollectionGetMetrics
        text: |-
               az cosmosdb collection-region list-metric --filter "$filter=(name.value eq \'Total Requests\') and \
timeGrain eq duration\'PT5M\' and startTime eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \
\'2017-11-20T00:13:55.2780000Z" --account-name "ddb1" --collection-rid "collectionRid" --database-rid "databaseRid" \
--region "North Europe" --resource-group "rg1"
"""

helps['cosmosdb database-account-region'] = """
    type: group
    short-summary: Manage database account region with cosmosdb
"""

helps['cosmosdb database-account-region list-metric'] = """
    type: command
    short-summary: "Retrieves the metrics determined by the given filter for the given database account and region."
    examples:
      - name: CosmosDBDatabaseAccountRegionGetMetrics
        text: |-
               az cosmosdb database-account-region list-metric --filter "$filter=(name.value eq \'Total Requests\') \
and timeGrain eq duration\'PT5M\' and startTime eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \
\'2017-11-20T00:13:55.2780000Z" --account-name "ddb1" --region "North Europe" --resource-group "rg1"
"""

helps['cosmosdb percentile-source-target'] = """
    type: group
    short-summary: Manage percentile source target with cosmosdb
"""

helps['cosmosdb percentile-source-target list-metric'] = """
    type: command
    short-summary: "Retrieves the metrics determined by the given filter for the given account, source and target \
region. This url is only for PBS and Replication Latency data."
    examples:
      - name: CosmosDBDatabaseAccountRegionGetMetrics
        text: |-
               az cosmosdb percentile-source-target list-metric --filter "$filter=(name.value eq \'Probabilistic \
Bounded Staleness\') and timeGrain eq duration\'PT5M\' and startTime eq \'2017-11-19T23:53:55.2780000Z\' and endTime \
eq \'2017-11-20T00:13:55.2780000Z" --account-name "ddb1" --resource-group "rg1" --source-region "West Central US" \
--target-region "East US"
"""

helps['cosmosdb percentile-target'] = """
    type: group
    short-summary: Manage percentile target with cosmosdb
"""

helps['cosmosdb percentile-target list-metric'] = """
    type: command
    short-summary: "Retrieves the metrics determined by the given filter for the given account target region. This url \
is only for PBS and Replication Latency data."
    examples:
      - name: CosmosDBDatabaseAccountRegionGetMetrics
        text: |-
               az cosmosdb percentile-target list-metric --filter "$filter=(name.value eq \'Probabilistic Bounded \
Staleness\') and timeGrain eq duration\'PT5M\' and startTime eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \
\'2017-11-20T00:13:55.2780000Z" --account-name "ddb1" --resource-group "rg1" --target-region "East US"
"""

helps['cosmosdb percentile'] = """
    type: group
    short-summary: Manage percentile with cosmosdb
"""

helps['cosmosdb percentile list-metric'] = """
    type: command
    short-summary: "Retrieves the metrics determined by the given filter for the given database account. This url is \
only for PBS and Replication Latency data."
    examples:
      - name: CosmosDBDatabaseAccountRegionGetMetrics
        text: |-
               az cosmosdb percentile list-metric --filter "$filter=(name.value eq \'Probabilistic Bounded \
Staleness\') and timeGrain eq duration\'PT5M\' and startTime eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \
\'2017-11-20T00:13:55.2780000Z" --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb collection-partition-region'] = """
    type: group
    short-summary: Manage collection partition region with cosmosdb
"""

helps['cosmosdb collection-partition-region list-metric'] = """
    type: command
    short-summary: "Retrieves the metrics determined by the given filter for the given collection and region, split by \
partition."
    examples:
      - name: CosmosDBDatabaseAccountRegionGetMetrics
        text: |-
               az cosmosdb collection-partition-region list-metric --filter "$filter=(name.value eq \'Max RUs Per \
Second\') and timeGrain eq duration\'PT1M\' and startTime eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \
\'2017-11-20T23:58:55.2780000Z" --account-name "ddb1" --collection-rid "collectionRid" --database-rid "databaseRid" \
--region "North Europe" --resource-group "rg1"
"""

helps['cosmosdb collection-partition'] = """
    type: group
    short-summary: Manage collection partition with cosmosdb
"""

helps['cosmosdb collection-partition list-metric'] = """
    type: command
    short-summary: "Retrieves the metrics determined by the given filter for the given collection, split by \
partition."
    examples:
      - name: CosmosDBDatabaseAccountRegionGetMetrics
        text: |-
               az cosmosdb collection-partition list-metric --filter "$filter=(name.value eq \'Max RUs Per Second\') \
and timeGrain eq duration\'PT1M\' and startTime eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \
\'2017-11-20T23:58:55.2780000Z" --account-name "ddb1" --collection-rid "collectionRid" --database-rid "databaseRid" \
--resource-group "rg1"
"""

helps['cosmosdb collection-partition list-usage'] = """
    type: command
    short-summary: "Retrieves the usages (most recent storage data) for the given collection, split by partition."
    examples:
      - name: CosmosDBCollectionGetUsages
        text: |-
               az cosmosdb collection-partition list-usage --filter "$filter=name.value eq \'Partition Storage\'" \
--account-name "ddb1" --collection-rid "collectionRid" --database-rid "databaseRid" --resource-group "rg1"
"""

helps['cosmosdb partition-key-range-id'] = """
    type: group
    short-summary: Manage partition key range id with cosmosdb
"""

helps['cosmosdb partition-key-range-id list-metric'] = """
    type: command
    short-summary: "Retrieves the metrics determined by the given filter for the given partition key range id."
    examples:
      - name: CosmosDBDatabaseAccountRegionGetMetrics
        text: |-
               az cosmosdb partition-key-range-id list-metric --filter "$filter=(name.value eq \'Max RUs Per Second\') \
and timeGrain eq duration\'PT1M\' and startTime eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \
\'2017-11-20T23:58:55.2780000Z" --account-name "ddb1" --collection-rid "collectionRid" --database-rid "databaseRid" \
--partition-key-range-id "0" --resource-group "rg1"
"""

helps['cosmosdb partition-key-range-id-region'] = """
    type: group
    short-summary: Manage partition key range id region with cosmosdb
"""

helps['cosmosdb partition-key-range-id-region list-metric'] = """
    type: command
    short-summary: "Retrieves the metrics determined by the given filter for the given partition key range id and \
region."
    examples:
      - name: CosmosDBDatabaseAccountRegionGetMetrics
        text: |-
               az cosmosdb partition-key-range-id-region list-metric --filter "$filter=(name.value eq \'Max RUs Per \
Second\') and timeGrain eq duration\'PT1M\' and startTime eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \
\'2017-11-20T23:58:55.2780000Z" --account-name "ddb1" --collection-rid "collectionRid" --database-rid "databaseRid" \
--partition-key-range-id "0" --region "West US" --resource-group "rg1"
"""

helps['cosmosdb graph-resource'] = """
    type: group
    short-summary: Manage graph resource with cosmosdb
"""

helps['cosmosdb graph-resource create-update-graph'] = """
    type: command
    short-summary: "Create or update an Azure Cosmos DB Graph."
    examples:
      - name: CosmosDBGraphCreateUpdate
        text: |-
               az cosmosdb graph-resource create-update-graph --account-name "ddb1" --location "West US" --id \
"graphName" --graph-name "graphName" --resource-group "rg1"
"""

helps['cosmosdb graph-resource delete-graph-resource'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB Graph Resource."
    examples:
      - name: CosmosDBSqlDatabaseDelete
        text: |-
               az cosmosdb graph-resource delete-graph-resource --account-name "ddb1" --graph-name "graphName" \
--resource-group "rg1"
"""

helps['cosmosdb graph-resource list-graph'] = """
    type: command
    short-summary: "Lists the graphs under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBSqlDatabaseList
        text: |-
               az cosmosdb graph-resource list-graph --account-name "ddb1" --resource-group "rgName"
"""

helps['cosmosdb graph-resource show-graph'] = """
    type: command
    short-summary: "Gets the Graph resource under an existing Azure Cosmos DB database account with the provided \
name."
    examples:
      - name: CosmosDBSqlDatabaseGet
        text: |-
               az cosmosdb graph-resource show-graph --account-name "ddb1" --graph-name "graphName" --resource-group \
"rg1"
"""

helps['cosmosdb sql-resource'] = """
    type: group
    short-summary: Manage sql resource with cosmosdb
"""

helps['cosmosdb sql-resource create-update-sql-container'] = """
    type: command
    short-summary: "Create or update an Azure Cosmos DB SQL container."
    examples:
      - name: CosmosDBSqlContainerCreateUpdate
        text: |-
               az cosmosdb sql-resource create-update-sql-container --account-name "ddb1" --container-name \
"containerName" --create-update-sql-container-parameters "{\\"location\\":\\"West US\\",\\"tags\\":{},\\"resource\\":{\
\\"conflictResolutionPolicy\\":{\\"conflictResolutionPath\\":\\"/path\\",\\"mode\\":\\"LastWriterWins\\"},\\"defaultTtl\
\\":100,\\"id\\":\\"containerName\\",\\"indexingPolicy\\":{\\"automatic\\":true,\\"excludedPaths\\":[],\\"includedPaths\
\\":[{\\"path\\":\\"/*\\",\\"indexes\\":[{\\"dataType\\":\\"String\\",\\"kind\\":\\"Range\\",\\"precision\\":-1},{\\"da\
taType\\":\\"Number\\",\\"kind\\":\\"Range\\",\\"precision\\":-1}]}],\\"indexingMode\\":\\"consistent\\"},\\"partitionK\
ey\\":{\\"kind\\":\\"Hash\\",\\"paths\\":[\\"/AccountNumber\\"]},\\"uniqueKeyPolicy\\":{\\"uniqueKeys\\":[{\\"paths\\":\
[\\"/testPath\\"]}]}},\\"options\\":{}}" --database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb sql-resource create-update-sql-database'] = """
    type: command
    short-summary: "Create or update an Azure Cosmos DB SQL database."
    examples:
      - name: CosmosDBSqlDatabaseCreateUpdate
        text: |-
               az cosmosdb sql-resource create-update-sql-database --account-name "ddb1" --location "West US" --id \
"databaseName" --database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb sql-resource create-update-sql-role-assignment'] = """
    type: command
    short-summary: "Creates or updates an Azure Cosmos DB SQL Role Assignment."
    examples:
      - name: CosmosDBSqlRoleAssignmentCreateUpdate
        text: |-
               az cosmosdb sql-resource create-update-sql-role-assignment --account-name "myAccountName" \
--principal-id "myPrincipalId" --role-definition-id "/subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName\
/providers/Microsoft.DocumentDB/databaseAccounts/myAccountName/sqlRoleDefinitions/myRoleDefinitionId" --scope \
"/subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName/providers/Microsoft.DocumentDB/databaseAccounts/myA\
ccountName/dbs/purchases/colls/redmond-purchases" --resource-group "myResourceGroupName" --role-assignment-id \
"myRoleAssignmentId"
"""

helps['cosmosdb sql-resource create-update-sql-role-definition'] = """
    type: command
    short-summary: "Creates or updates an Azure Cosmos DB SQL Role Definition."
    parameters:
      - name: --permissions
        short-summary: "The set of operations allowed through this Role Definition."
        long-summary: |
            Usage: --permissions data-actions=XX not-data-actions=XX

            data-actions: An array of data actions that are allowed.
            not-data-actions: An array of data actions that are denied.

            Multiple actions can be specified by using more than one --permissions argument.
    examples:
      - name: CosmosDBSqlRoleDefinitionCreateUpdate
        text: |-
               az cosmosdb sql-resource create-update-sql-role-definition --account-name "myAccountName" --type \
"CustomRole" --assignable-scopes "/subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName/providers/Microsof\
t.DocumentDB/databaseAccounts/myAccountName/dbs/sales" "/subscriptions/mySubscriptionId/resourceGroups/myResourceGroupN\
ame/providers/Microsoft.DocumentDB/databaseAccounts/myAccountName/dbs/purchases" --permissions \
data-actions="Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/create" \
data-actions="Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/read" --role-name "myRoleName" \
--resource-group "myResourceGroupName" --role-definition-id "myRoleDefinitionId"
"""

helps['cosmosdb sql-resource create-update-sql-stored-procedure'] = """
    type: command
    short-summary: "Create or update an Azure Cosmos DB SQL storedProcedure."
    parameters:
      - name: --resource
        short-summary: "The standard JSON format of a storedProcedure"
        long-summary: |
            Usage: --resource id=XX body=XX

            id: Required. Name of the Cosmos DB SQL storedProcedure
            body: Body of the Stored Procedure
    examples:
      - name: CosmosDBSqlStoredProcedureCreateUpdate
        text: |-
               az cosmosdb sql-resource create-update-sql-stored-procedure --account-name "ddb1" --container-name \
"containerName" --resource body="body" id="storedProcedureName" --database-name "databaseName" --resource-group "rg1" \
--stored-procedure-name "storedProcedureName"
"""

helps['cosmosdb sql-resource create-update-sql-trigger'] = """
    type: command
    short-summary: "Create or update an Azure Cosmos DB SQL trigger."
    parameters:
      - name: --resource
        short-summary: "The standard JSON format of a trigger"
        long-summary: |
            Usage: --resource id=XX body=XX trigger-type=XX trigger-operation=XX

            id: Required. Name of the Cosmos DB SQL trigger
            body: Body of the Trigger
            trigger-type: Type of the Trigger
            trigger-operation: The operation the trigger is associated with
    examples:
      - name: CosmosDBSqlTriggerCreateUpdate
        text: |-
               az cosmosdb sql-resource create-update-sql-trigger --account-name "ddb1" --container-name \
"containerName" --resource body="body" id="triggerName" trigger-operation="triggerOperation" \
trigger-type="triggerType" --database-name "databaseName" --resource-group "rg1" --trigger-name "triggerName"
"""

helps['cosmosdb sql-resource create-update-sql-user-defined-function'] = """
    type: command
    short-summary: "Create or update an Azure Cosmos DB SQL userDefinedFunction."
    parameters:
      - name: --resource
        short-summary: "The standard JSON format of a userDefinedFunction"
        long-summary: |
            Usage: --resource id=XX body=XX

            id: Required. Name of the Cosmos DB SQL userDefinedFunction
            body: Body of the User Defined Function
    examples:
      - name: CosmosDBSqlUserDefinedFunctionCreateUpdate
        text: |-
               az cosmosdb sql-resource create-update-sql-user-defined-function --account-name "ddb1" --container-name \
"containerName" --resource body="body" id="userDefinedFunctionName" --database-name "databaseName" --resource-group \
"rg1" --user-defined-function-name "userDefinedFunctionName"
"""

helps['cosmosdb sql-resource delete-sql-container'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB SQL container."
    examples:
      - name: CosmosDBSqlContainerDelete
        text: |-
               az cosmosdb sql-resource delete-sql-container --account-name "ddb1" --container-name "containerName" \
--database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb sql-resource delete-sql-database'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB SQL database."
    examples:
      - name: CosmosDBSqlDatabaseDelete
        text: |-
               az cosmosdb sql-resource delete-sql-database --account-name "ddb1" --database-name "databaseName" \
--resource-group "rg1"
"""

helps['cosmosdb sql-resource delete-sql-role-assignment'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB SQL Role Assignment."
    examples:
      - name: CosmosDBSqlRoleAssignmentDelete
        text: |-
               az cosmosdb sql-resource delete-sql-role-assignment --account-name "myAccountName" --resource-group \
"myResourceGroupName" --role-assignment-id "myRoleAssignmentId"
"""

helps['cosmosdb sql-resource delete-sql-role-definition'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB SQL Role Definition."
    examples:
      - name: CosmosDBSqlRoleDefinitionDelete
        text: |-
               az cosmosdb sql-resource delete-sql-role-definition --account-name "myAccountName" --resource-group \
"myResourceGroupName" --role-definition-id "myRoleDefinitionId"
"""

helps['cosmosdb sql-resource delete-sql-stored-procedure'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB SQL storedProcedure."
    examples:
      - name: CosmosDBSqlStoredProcedureDelete
        text: |-
               az cosmosdb sql-resource delete-sql-stored-procedure --account-name "ddb1" --container-name \
"containerName" --database-name "databaseName" --resource-group "rg1" --stored-procedure-name "storedProcedureName"
"""

helps['cosmosdb sql-resource delete-sql-trigger'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB SQL trigger."
    examples:
      - name: CosmosDBSqlTriggerDelete
        text: |-
               az cosmosdb sql-resource delete-sql-trigger --account-name "ddb1" --container-name "containerName" \
--database-name "databaseName" --resource-group "rg1" --trigger-name "triggerName"
"""

helps['cosmosdb sql-resource delete-sql-user-defined-function'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB SQL userDefinedFunction."
    examples:
      - name: CosmosDBSqlUserDefinedFunctionDelete
        text: |-
               az cosmosdb sql-resource delete-sql-user-defined-function --account-name "ddb1" --container-name \
"containerName" --database-name "databaseName" --resource-group "rg1" --user-defined-function-name \
"userDefinedFunctionName"
"""

helps['cosmosdb sql-resource list-sql-container'] = """
    type: command
    short-summary: "Lists the SQL container under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBSqlContainerList
        text: |-
               az cosmosdb sql-resource list-sql-container --account-name "ddb1" --database-name "databaseName" \
--resource-group "rgName"
"""

helps['cosmosdb sql-resource list-sql-database'] = """
    type: command
    short-summary: "Lists the SQL databases under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBSqlDatabaseList
        text: |-
               az cosmosdb sql-resource list-sql-database --account-name "ddb1" --resource-group "rgName"
"""

helps['cosmosdb sql-resource list-sql-role-assignment'] = """
    type: command
    short-summary: "Retrieves the list of all Azure Cosmos DB SQL Role Assignments."
    examples:
      - name: CosmosDBSqlRoleAssignmentList
        text: |-
               az cosmosdb sql-resource list-sql-role-assignment --account-name "myAccountName" --resource-group \
"myResourceGroupName"
"""

helps['cosmosdb sql-resource list-sql-role-definition'] = """
    type: command
    short-summary: "Retrieves the list of all Azure Cosmos DB SQL Role Definitions."
    examples:
      - name: CosmosDBSqlRoleDefinitionList
        text: |-
               az cosmosdb sql-resource list-sql-role-definition --account-name "myAccountName" --resource-group \
"myResourceGroupName"
"""

helps['cosmosdb sql-resource list-sql-stored-procedure'] = """
    type: command
    short-summary: "Lists the SQL storedProcedure under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBSqlStoredProcedureList
        text: |-
               az cosmosdb sql-resource list-sql-stored-procedure --account-name "ddb1" --container-name \
"containerName" --database-name "databaseName" --resource-group "rgName"
"""

helps['cosmosdb sql-resource list-sql-trigger'] = """
    type: command
    short-summary: "Lists the SQL trigger under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBSqlTriggerList
        text: |-
               az cosmosdb sql-resource list-sql-trigger --account-name "ddb1" --container-name "containerName" \
--database-name "databaseName" --resource-group "rgName"
"""

helps['cosmosdb sql-resource list-sql-user-defined-function'] = """
    type: command
    short-summary: "Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBSqlUserDefinedFunctionList
        text: |-
               az cosmosdb sql-resource list-sql-user-defined-function --account-name "ddb1" --container-name \
"containerName" --database-name "databaseName" --resource-group "rgName"
"""

helps['cosmosdb sql-resource migrate-sql-container-to-autoscale'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB SQL container from manual throughput to autoscale."
    examples:
      - name: CosmosDBSqlContainerMigrateToAutoscale
        text: |-
               az cosmosdb sql-resource migrate-sql-container-to-autoscale --account-name "ddb1" --container-name \
"containerName" --database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb sql-resource migrate-sql-container-to-manual-throughput'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB SQL container from autoscale to manual throughput."
    examples:
      - name: CosmosDBSqlContainerMigrateToManualThroughput
        text: |-
               az cosmosdb sql-resource migrate-sql-container-to-manual-throughput --account-name "ddb1" \
--container-name "containerName" --database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb sql-resource migrate-sql-database-to-autoscale'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB SQL database from manual throughput to autoscale."
    examples:
      - name: CosmosDBSqlDatabaseMigrateToAutoscale
        text: |-
               az cosmosdb sql-resource migrate-sql-database-to-autoscale --account-name "ddb1" --database-name \
"databaseName" --resource-group "rg1"
"""

helps['cosmosdb sql-resource migrate-sql-database-to-manual-throughput'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB SQL database from autoscale to manual throughput."
    examples:
      - name: CosmosDBSqlDatabaseMigrateToManualThroughput
        text: |-
               az cosmosdb sql-resource migrate-sql-database-to-manual-throughput --account-name "ddb1" \
--database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb sql-resource retrieve-continuou-backup-information'] = """
    type: command
    short-summary: "Retrieves continuous backup information for a container resource."
    examples:
      - name: CosmosDBSqlContainerBackupInformation
        text: |-
               az cosmosdb sql-resource retrieve-continuou-backup-information --account-name "ddb1" --container-name \
"containerName" --database-name "databaseName" --location "North Europe" --resource-group "rgName"
"""

helps['cosmosdb sql-resource show-sql-container'] = """
    type: command
    short-summary: "Gets the SQL container under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBSqlContainerGet
        text: |-
               az cosmosdb sql-resource show-sql-container --account-name "ddb1" --container-name "containerName" \
--database-name "databaseName" --resource-group "rgName"
"""

helps['cosmosdb sql-resource show-sql-container-throughput'] = """
    type: command
    short-summary: "Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBSqlContainerThroughputGet
        text: |-
               az cosmosdb sql-resource show-sql-container-throughput --account-name "ddb1" --container-name \
"containerName" --database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb sql-resource show-sql-database'] = """
    type: command
    short-summary: "Gets the SQL database under an existing Azure Cosmos DB database account with the provided name."
    examples:
      - name: CosmosDBSqlDatabaseGet
        text: |-
               az cosmosdb sql-resource show-sql-database --account-name "ddb1" --database-name "databaseName" \
--resource-group "rg1"
"""

helps['cosmosdb sql-resource show-sql-database-throughput'] = """
    type: command
    short-summary: "Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account \
with the provided name."
    examples:
      - name: CosmosDBSqlDatabaseThroughputGet
        text: |-
               az cosmosdb sql-resource show-sql-database-throughput --account-name "ddb1" --database-name \
"databaseName" --resource-group "rg1"
"""

helps['cosmosdb sql-resource show-sql-role-assignment'] = """
    type: command
    short-summary: "Retrieves the properties of an existing Azure Cosmos DB SQL Role Assignment with the given Id."
    examples:
      - name: CosmosDBSqlRoleAssignmentGet
        text: |-
               az cosmosdb sql-resource show-sql-role-assignment --account-name "myAccountName" --resource-group \
"myResourceGroupName" --role-assignment-id "myRoleAssignmentId"
"""

helps['cosmosdb sql-resource show-sql-role-definition'] = """
    type: command
    short-summary: "Retrieves the properties of an existing Azure Cosmos DB SQL Role Definition with the given Id."
    examples:
      - name: CosmosDBSqlRoleDefinitionGet
        text: |-
               az cosmosdb sql-resource show-sql-role-definition --account-name "myAccountName" --resource-group \
"myResourceGroupName" --role-definition-id "myRoleDefinitionId"
"""

helps['cosmosdb sql-resource show-sql-stored-procedure'] = """
    type: command
    short-summary: "Gets the SQL storedProcedure under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBSqlStoredProcedureGet
        text: |-
               az cosmosdb sql-resource show-sql-stored-procedure --account-name "ddb1" --container-name \
"containerName" --database-name "databaseName" --resource-group "rgName" --stored-procedure-name "storedProcedureName"
"""

helps['cosmosdb sql-resource show-sql-trigger'] = """
    type: command
    short-summary: "Gets the SQL trigger under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBSqlTriggerGet
        text: |-
               az cosmosdb sql-resource show-sql-trigger --account-name "ddb1" --container-name "containerName" \
--database-name "databaseName" --resource-group "rgName" --trigger-name "triggerName"
"""

helps['cosmosdb sql-resource show-sql-user-defined-function'] = """
    type: command
    short-summary: "Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBSqlUserDefinedFunctionGet
        text: |-
               az cosmosdb sql-resource show-sql-user-defined-function --account-name "ddb1" --container-name \
"containerName" --database-name "databaseName" --resource-group "rgName" --user-defined-function-name \
"userDefinedFunctionName"
"""

helps['cosmosdb sql-resource update-sql-container-throughput'] = """
    type: command
    short-summary: "Update RUs per second of an Azure Cosmos DB SQL container."
    parameters:
      - name: --throughput-policy
        short-summary: "Represents throughput policy which service must adhere to for auto-upgrade"
        long-summary: |
            Usage: --throughput-policy is-enabled=XX increment-percent=XX

            is-enabled: Determines whether the ThroughputPolicy is active or not
            increment-percent: Represents the percentage by which throughput can increase every time throughput policy \
kicks in.
    examples:
      - name: CosmosDBSqlContainerThroughputUpdate
        text: |-
               az cosmosdb sql-resource update-sql-container-throughput --account-name "ddb1" --container-name \
"containerName" --database-name "databaseName" --resource-group "rg1" --location "West US" --throughput 400
"""

helps['cosmosdb sql-resource update-sql-database-throughput'] = """
    type: command
    short-summary: "Update RUs per second of an Azure Cosmos DB SQL database."
    parameters:
      - name: --throughput-policy
        short-summary: "Represents throughput policy which service must adhere to for auto-upgrade"
        long-summary: |
            Usage: --throughput-policy is-enabled=XX increment-percent=XX

            is-enabled: Determines whether the ThroughputPolicy is active or not
            increment-percent: Represents the percentage by which throughput can increase every time throughput policy \
kicks in.
    examples:
      - name: CosmosDBSqlDatabaseThroughputUpdate
        text: |-
               az cosmosdb sql-resource update-sql-database-throughput --account-name "ddb1" --database-name \
"databaseName" --resource-group "rg1" --location "West US" --throughput 400
"""

helps['cosmosdb mongo-db-resource'] = """
    type: group
    short-summary: Manage mongo db resource with cosmosdb
"""

helps['cosmosdb mongo-db-resource create-update-mongo-db-collection'] = """
    type: command
    short-summary: "Create or update an Azure Cosmos DB MongoDB Collection."
    examples:
      - name: CosmosDBMongoDBCollectionCreateUpdate
        text: |-
               az cosmosdb mongo-db-resource create-update-mongo-db-collection --account-name "ddb1" --collection-name \
"collectionName" --location "West US" --analytical-storage-ttl 500 --id "collectionName" --indexes \
"[{\\"key\\":{\\"keys\\":[\\"_ts\\"]},\\"options\\":{\\"expireAfterSeconds\\":100,\\"unique\\":true}},{\\"key\\":{\\"ke\
ys\\":[\\"_id\\"]}}]" --shard-key testKey="Hash" --database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb mongo-db-resource create-update-mongo-db-database'] = """
    type: command
    short-summary: "Create or updates Azure Cosmos DB MongoDB database."
    examples:
      - name: CosmosDBMongoDBDatabaseCreateUpdate
        text: |-
               az cosmosdb mongo-db-resource create-update-mongo-db-database --account-name "ddb1" --location "West \
US" --id "databaseName" --database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb mongo-db-resource delete-mongo-db-collection'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB MongoDB Collection."
    examples:
      - name: CosmosDBMongoDBCollectionDelete
        text: |-
               az cosmosdb mongo-db-resource delete-mongo-db-collection --account-name "ddb1" --collection-name \
"collectionName" --database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb mongo-db-resource delete-mongo-db-database'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB MongoDB database."
    examples:
      - name: CosmosDBMongoDBDatabaseDelete
        text: |-
               az cosmosdb mongo-db-resource delete-mongo-db-database --account-name "ddb1" --database-name \
"databaseName" --resource-group "rg1"
"""

helps['cosmosdb mongo-db-resource list-mongo-db-collection'] = """
    type: command
    short-summary: "Lists the MongoDB collection under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBMongoDBCollectionList
        text: |-
               az cosmosdb mongo-db-resource list-mongo-db-collection --account-name "ddb1" --database-name \
"databaseName" --resource-group "rgName"
"""

helps['cosmosdb mongo-db-resource list-mongo-db-database'] = """
    type: command
    short-summary: "Lists the MongoDB databases under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBMongoDBDatabaseList
        text: |-
               az cosmosdb mongo-db-resource list-mongo-db-database --account-name "ddb1" --resource-group "rgName"
"""

helps['cosmosdb mongo-db-resource migrate-mongo-db-collection-to-autoscale'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB MongoDB collection from manual throughput to autoscale."
    examples:
      - name: CosmosDBMongoDBCollectionMigrateToAutoscale
        text: |-
               az cosmosdb mongo-db-resource migrate-mongo-db-collection-to-autoscale --account-name "ddb1" \
--collection-name "collectionName" --database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb mongo-db-resource migrate-mongo-db-collection-to-manual-throughput'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual throughput."
    examples:
      - name: CosmosDBMongoDBCollectionMigrateToManualThroughput
        text: |-
               az cosmosdb mongo-db-resource migrate-mongo-db-collection-to-manual-throughput --account-name "ddb1" \
--collection-name "collectionName" --database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb mongo-db-resource migrate-mongo-db-database-to-autoscale'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB MongoDB database from manual throughput to autoscale."
    examples:
      - name: CosmosDBMongoDBDatabaseMigrateToAutoscale
        text: |-
               az cosmosdb mongo-db-resource migrate-mongo-db-database-to-autoscale --account-name "ddb1" \
--database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb mongo-db-resource migrate-mongo-db-database-to-manual-throughput'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB MongoDB database from autoscale to manual throughput."
    examples:
      - name: CosmosDBMongoDBDatabaseMigrateToManualThroughput
        text: |-
               az cosmosdb mongo-db-resource migrate-mongo-db-database-to-manual-throughput --account-name "ddb1" \
--database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb mongo-db-resource show-mongo-db-collection'] = """
    type: command
    short-summary: "Gets the MongoDB collection under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBMongoDBCollectionGet
        text: |-
               az cosmosdb mongo-db-resource show-mongo-db-collection --account-name "ddb1" --collection-name \
"collectionName" --database-name "databaseName" --resource-group "rgName"
"""

helps['cosmosdb mongo-db-resource show-mongo-db-collection-throughput'] = """
    type: command
    short-summary: "Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database \
account with the provided name."
    examples:
      - name: CosmosDBMongoDBCollectionThroughputGet
        text: |-
               az cosmosdb mongo-db-resource show-mongo-db-collection-throughput --account-name "ddb1" \
--collection-name "collectionName" --database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb mongo-db-resource show-mongo-db-database'] = """
    type: command
    short-summary: "Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided \
name."
    examples:
      - name: CosmosDBMongoDBDatabaseGet
        text: |-
               az cosmosdb mongo-db-resource show-mongo-db-database --account-name "ddb1" --database-name \
"databaseName" --resource-group "rg1"
"""

helps['cosmosdb mongo-db-resource show-mongo-db-database-throughput'] = """
    type: command
    short-summary: "Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account \
with the provided name."
    examples:
      - name: CosmosDBMongoDBDatabaseThroughputGet
        text: |-
               az cosmosdb mongo-db-resource show-mongo-db-database-throughput --account-name "ddb1" --database-name \
"databaseName" --resource-group "rg1"
"""

helps['cosmosdb mongo-db-resource update-mongo-db-collection-throughput'] = """
    type: command
    short-summary: "Update the RUs per second of an Azure Cosmos DB MongoDB collection."
    parameters:
      - name: --throughput-policy
        short-summary: "Represents throughput policy which service must adhere to for auto-upgrade"
        long-summary: |
            Usage: --throughput-policy is-enabled=XX increment-percent=XX

            is-enabled: Determines whether the ThroughputPolicy is active or not
            increment-percent: Represents the percentage by which throughput can increase every time throughput policy \
kicks in.
    examples:
      - name: CosmosDBMongoDBCollectionThroughputUpdate
        text: |-
               az cosmosdb mongo-db-resource update-mongo-db-collection-throughput --account-name "ddb1" \
--collection-name "collectionName" --database-name "databaseName" --resource-group "rg1" --location "West US" \
--throughput 400
"""

helps['cosmosdb mongo-db-resource update-mongo-db-database-throughput'] = """
    type: command
    short-summary: "Update RUs per second of the an Azure Cosmos DB MongoDB database."
    parameters:
      - name: --throughput-policy
        short-summary: "Represents throughput policy which service must adhere to for auto-upgrade"
        long-summary: |
            Usage: --throughput-policy is-enabled=XX increment-percent=XX

            is-enabled: Determines whether the ThroughputPolicy is active or not
            increment-percent: Represents the percentage by which throughput can increase every time throughput policy \
kicks in.
    examples:
      - name: CosmosDBMongoDBDatabaseThroughputUpdate
        text: |-
               az cosmosdb mongo-db-resource update-mongo-db-database-throughput --account-name "ddb1" --database-name \
"databaseName" --resource-group "rg1" --location "West US" --throughput 400
"""

helps['cosmosdb table-resource'] = """
    type: group
    short-summary: Manage table resource with cosmosdb
"""

helps['cosmosdb table-resource create-update-table'] = """
    type: command
    short-summary: "Create or update an Azure Cosmos DB Table."
    examples:
      - name: CosmosDBTableReplace
        text: |-
               az cosmosdb table-resource create-update-table --account-name "ddb1" --location "West US" --id \
"tableName" --resource-group "rg1" --table-name "tableName"
"""

helps['cosmosdb table-resource delete-table'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB Table."
    examples:
      - name: CosmosDBTableDelete
        text: |-
               az cosmosdb table-resource delete-table --account-name "ddb1" --resource-group "rg1" --table-name \
"tableName"
"""

helps['cosmosdb table-resource list-table'] = """
    type: command
    short-summary: "Lists the Tables under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBTableList
        text: |-
               az cosmosdb table-resource list-table --account-name "ddb1" --resource-group "rgName"
"""

helps['cosmosdb table-resource migrate-table-to-autoscale'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB Table from manual throughput to autoscale."
    examples:
      - name: CosmosDBTableMigrateToAutoscale
        text: |-
               az cosmosdb table-resource migrate-table-to-autoscale --account-name "ddb1" --resource-group "rg1" \
--table-name "tableName"
"""

helps['cosmosdb table-resource migrate-table-to-manual-throughput'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB Table from autoscale to manual throughput."
    examples:
      - name: CosmosDBTableMigrateToManualThroughput
        text: |-
               az cosmosdb table-resource migrate-table-to-manual-throughput --account-name "ddb1" --resource-group \
"rg1" --table-name "tableName"
"""

helps['cosmosdb table-resource show-table'] = """
    type: command
    short-summary: "Gets the Tables under an existing Azure Cosmos DB database account with the provided name."
    examples:
      - name: CosmosDBTableGet
        text: |-
               az cosmosdb table-resource show-table --account-name "ddb1" --resource-group "rg1" --table-name \
"tableName"
"""

helps['cosmosdb table-resource show-table-throughput'] = """
    type: command
    short-summary: "Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the \
provided name."
    examples:
      - name: CosmosDBTableThroughputGet
        text: |-
               az cosmosdb table-resource show-table-throughput --account-name "ddb1" --resource-group "rg1" \
--table-name "tableName"
"""

helps['cosmosdb table-resource update-table-throughput'] = """
    type: command
    short-summary: "Update RUs per second of an Azure Cosmos DB Table."
    parameters:
      - name: --throughput-policy
        short-summary: "Represents throughput policy which service must adhere to for auto-upgrade"
        long-summary: |
            Usage: --throughput-policy is-enabled=XX increment-percent=XX

            is-enabled: Determines whether the ThroughputPolicy is active or not
            increment-percent: Represents the percentage by which throughput can increase every time throughput policy \
kicks in.
    examples:
      - name: CosmosDBTableThroughputUpdate
        text: |-
               az cosmosdb table-resource update-table-throughput --account-name "ddb1" --resource-group "rg1" \
--table-name "tableName" --location "West US" --throughput 400
"""

helps['cosmosdb cassandra-resource'] = """
    type: group
    short-summary: Manage cassandra resource with cosmosdb
"""

helps['cosmosdb cassandra-resource create-update-cassandra-keyspace'] = """
    type: command
    short-summary: "Create or update an Azure Cosmos DB Cassandra keyspace."
    examples:
      - name: CosmosDBCassandraKeyspaceCreateUpdate
        text: |-
               az cosmosdb cassandra-resource create-update-cassandra-keyspace --account-name "ddb1" --location "West \
US" --id "keyspaceName" --keyspace-name "keyspaceName" --resource-group "rg1"
"""

helps['cosmosdb cassandra-resource create-update-cassandra-table'] = """
    type: command
    short-summary: "Create or update an Azure Cosmos DB Cassandra Table."
    parameters:
      - name: --columns
        short-summary: "List of Cassandra table columns."
        long-summary: |
            Usage: --columns name=XX type=XX

            name: Name of the Cosmos DB Cassandra table column
            type: Type of the Cosmos DB Cassandra table column

            Multiple actions can be specified by using more than one --columns argument.
      - name: --partition-keys
        short-summary: "List of partition key."
        long-summary: |
            Usage: --partition-keys name=XX

            name: Name of the Cosmos DB Cassandra table partition key

            Multiple actions can be specified by using more than one --partition-keys argument.
      - name: --cluster-keys
        short-summary: "List of cluster key."
        long-summary: |
            Usage: --cluster-keys name=XX order-by=XX

            name: Name of the Cosmos DB Cassandra table cluster key
            order-by: Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc"

            Multiple actions can be specified by using more than one --cluster-keys argument.
    examples:
      - name: CosmosDBCassandraTableCreateUpdate
        text: |-
               az cosmosdb cassandra-resource create-update-cassandra-table --account-name "ddb1" --location "West US" \
--cluster-keys name="columnA" order-by="Asc" --columns name="columnA" type="Ascii" --partition-keys name="columnA" \
--analytical-storage-ttl 500 --default-ttl 100 --id "tableName" --keyspace-name "keyspaceName" --resource-group "rg1" \
--table-name "tableName"
"""

helps['cosmosdb cassandra-resource create-update-cassandra-view'] = """
    type: command
    short-summary: "Create or update an Azure Cosmos DB Cassandra View."
    parameters:
      - name: --resource
        short-summary: "The standard JSON format of a Cassandra view"
        long-summary: |
            Usage: --resource id=XX view-definition=XX

            id: Required. Name of the Cosmos DB Cassandra view
            view-definition: View Definition of the Cosmos DB Cassandra view
    examples:
      - name: CosmosDBCassandraViewCreateUpdate
        text: |-
               az cosmosdb cassandra-resource create-update-cassandra-view --account-name "ddb1" --resource \
id="viewname" view-definition="SELECT columna, columnb, columnc FROM keyspacename.srctablename WHERE columna IS NOT \
NULL AND columnc IS NOT NULL PRIMARY (columnc, columna)" --keyspace-name "keyspacename" --resource-group "rg1" \
--view-name "viewname"
"""

helps['cosmosdb cassandra-resource delete-cassandra-keyspace'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB Cassandra keyspace."
    examples:
      - name: CosmosDBCassandraKeyspaceDelete
        text: |-
               az cosmosdb cassandra-resource delete-cassandra-keyspace --account-name "ddb1" --keyspace-name \
"keyspaceName" --resource-group "rg1"
"""

helps['cosmosdb cassandra-resource delete-cassandra-table'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB Cassandra table."
    examples:
      - name: CosmosDBCassandraTableDelete
        text: |-
               az cosmosdb cassandra-resource delete-cassandra-table --account-name "ddb1" --keyspace-name \
"keyspaceName" --resource-group "rg1" --table-name "tableName"
"""

helps['cosmosdb cassandra-resource delete-cassandra-view'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB Cassandra view."
    examples:
      - name: CosmosDBCassandraViewDelete
        text: |-
               az cosmosdb cassandra-resource delete-cassandra-view --account-name "ddb1" --keyspace-name \
"keyspacename" --resource-group "rg1" --view-name "viewname"
"""

helps['cosmosdb cassandra-resource list-cassandra-keyspace'] = """
    type: command
    short-summary: "Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBCassandraKeyspaceList
        text: |-
               az cosmosdb cassandra-resource list-cassandra-keyspace --account-name "ddb1" --resource-group "rgName"
"""

helps['cosmosdb cassandra-resource list-cassandra-table'] = """
    type: command
    short-summary: "Lists the Cassandra table under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBCassandraTableList
        text: |-
               az cosmosdb cassandra-resource list-cassandra-table --account-name "ddb1" --keyspace-name \
"keyspaceName" --resource-group "rgName"
"""

helps['cosmosdb cassandra-resource list-cassandra-view'] = """
    type: command
    short-summary: "Lists the Cassandra materialized views under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBCassandraViewList
        text: |-
               az cosmosdb cassandra-resource list-cassandra-view --account-name "ddb1" --keyspace-name "keyspacename" \
--resource-group "rgName"
"""

helps['cosmosdb cassandra-resource migrate-cassandra-keyspace-to-autoscale'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB Cassandra Keyspace from manual throughput to autoscale."
    examples:
      - name: CosmosDBCassandraKeyspaceMigrateToAutoscale
        text: |-
               az cosmosdb cassandra-resource migrate-cassandra-keyspace-to-autoscale --account-name "ddb1" \
--keyspace-name "keyspaceName" --resource-group "rg1"
"""

helps['cosmosdb cassandra-resource migrate-cassandra-keyspace-to-manual-throughput'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB Cassandra Keyspace from autoscale to manual throughput."
    examples:
      - name: CosmosDBCassandraKeyspaceMigrateToManualThroughput
        text: |-
               az cosmosdb cassandra-resource migrate-cassandra-keyspace-to-manual-throughput --account-name "ddb1" \
--keyspace-name "keyspaceName" --resource-group "rg1"
"""

helps['cosmosdb cassandra-resource migrate-cassandra-table-to-autoscale'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB Cassandra table from manual throughput to autoscale."
    examples:
      - name: CosmosDBCassandraTableMigrateToAutoscale
        text: |-
               az cosmosdb cassandra-resource migrate-cassandra-table-to-autoscale --account-name "ddb1" \
--keyspace-name "keyspaceName" --resource-group "rg1" --table-name "tableName"
"""

helps['cosmosdb cassandra-resource migrate-cassandra-table-to-manual-throughput'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB Cassandra table from autoscale to manual throughput."
    examples:
      - name: CosmosDBCassandraTableMigrateToManualThroughput
        text: |-
               az cosmosdb cassandra-resource migrate-cassandra-table-to-manual-throughput --account-name "ddb1" \
--keyspace-name "keyspaceName" --resource-group "rg1" --table-name "tableName"
"""

helps['cosmosdb cassandra-resource migrate-cassandra-view-to-autoscale'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB Cassandra view from manual throughput to autoscale."
    examples:
      - name: CosmosDBCassandraViewMigrateToAutoscale
        text: |-
               az cosmosdb cassandra-resource migrate-cassandra-view-to-autoscale --account-name "ddb1" \
--keyspace-name "keyspacename" --resource-group "rg1" --view-name "viewname"
"""

helps['cosmosdb cassandra-resource migrate-cassandra-view-to-manual-throughput'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB Cassandra view from autoscale to manual throughput."
    examples:
      - name: CosmosDBCassandraViewMigrateToManualThroughput
        text: |-
               az cosmosdb cassandra-resource migrate-cassandra-view-to-manual-throughput --account-name "ddb1" \
--keyspace-name "keyspacename" --resource-group "rg1" --view-name "viewname"
"""

helps['cosmosdb cassandra-resource show-cassandra-keyspace'] = """
    type: command
    short-summary: "Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided \
name."
    examples:
      - name: CosmosDBCassandraKeyspaceGet
        text: |-
               az cosmosdb cassandra-resource show-cassandra-keyspace --account-name "ddb1" --keyspace-name \
"keyspaceName" --resource-group "rg1"
"""

helps['cosmosdb cassandra-resource show-cassandra-keyspace-throughput'] = """
    type: command
    short-summary: "Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database \
account with the provided name."
    examples:
      - name: CosmosDBCassandraKeyspaceThroughputGet
        text: |-
               az cosmosdb cassandra-resource show-cassandra-keyspace-throughput --account-name "ddb1" --keyspace-name \
"keyspaceName" --resource-group "rg1"
"""

helps['cosmosdb cassandra-resource show-cassandra-table'] = """
    type: command
    short-summary: "Gets the Cassandra table under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBCassandraTableGet
        text: |-
               az cosmosdb cassandra-resource show-cassandra-table --account-name "ddb1" --keyspace-name \
"keyspaceName" --resource-group "rg1" --table-name "tableName"
"""

helps['cosmosdb cassandra-resource show-cassandra-table-throughput'] = """
    type: command
    short-summary: "Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account \
with the provided name."
    examples:
      - name: CosmosDBCassandraTableThroughputGet
        text: |-
               az cosmosdb cassandra-resource show-cassandra-table-throughput --account-name "ddb1" --keyspace-name \
"keyspaceName" --resource-group "rg1" --table-name "tableName"
"""

helps['cosmosdb cassandra-resource show-cassandra-view'] = """
    type: command
    short-summary: "Gets the Cassandra view under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBCassandraViewGet
        text: |-
               az cosmosdb cassandra-resource show-cassandra-view --account-name "ddb1" --keyspace-name "keyspacename" \
--resource-group "rg1" --view-name "viewname"
"""

helps['cosmosdb cassandra-resource show-cassandra-view-throughput'] = """
    type: command
    short-summary: "Gets the RUs per second of the Cassandra view under an existing Azure Cosmos DB database account \
with the provided name."
    examples:
      - name: CosmosDBCassandraViewThroughputGet
        text: |-
               az cosmosdb cassandra-resource show-cassandra-view-throughput --account-name "ddb1" --keyspace-name \
"keyspacename" --resource-group "rg1" --view-name "viewname"
"""

helps['cosmosdb cassandra-resource update-cassandra-keyspace-throughput'] = """
    type: command
    short-summary: "Update RUs per second of an Azure Cosmos DB Cassandra Keyspace."
    parameters:
      - name: --throughput-policy
        short-summary: "Represents throughput policy which service must adhere to for auto-upgrade"
        long-summary: |
            Usage: --throughput-policy is-enabled=XX increment-percent=XX

            is-enabled: Determines whether the ThroughputPolicy is active or not
            increment-percent: Represents the percentage by which throughput can increase every time throughput policy \
kicks in.
    examples:
      - name: CosmosDBCassandraKeyspaceThroughputUpdate
        text: |-
               az cosmosdb cassandra-resource update-cassandra-keyspace-throughput --account-name "ddb1" \
--keyspace-name "keyspaceName" --resource-group "rg1" --location "West US" --throughput 400
"""

helps['cosmosdb cassandra-resource update-cassandra-table-throughput'] = """
    type: command
    short-summary: "Update RUs per second of an Azure Cosmos DB Cassandra table."
    parameters:
      - name: --throughput-policy
        short-summary: "Represents throughput policy which service must adhere to for auto-upgrade"
        long-summary: |
            Usage: --throughput-policy is-enabled=XX increment-percent=XX

            is-enabled: Determines whether the ThroughputPolicy is active or not
            increment-percent: Represents the percentage by which throughput can increase every time throughput policy \
kicks in.
    examples:
      - name: CosmosDBCassandraTableThroughputUpdate
        text: |-
               az cosmosdb cassandra-resource update-cassandra-table-throughput --account-name "ddb1" --keyspace-name \
"keyspaceName" --resource-group "rg1" --table-name "tableName" --location "West US" --throughput 400
"""

helps['cosmosdb cassandra-resource update-cassandra-view-throughput'] = """
    type: command
    short-summary: "Update RUs per second of an Azure Cosmos DB Cassandra view."
    parameters:
      - name: --throughput-policy
        short-summary: "Represents throughput policy which service must adhere to for auto-upgrade"
        long-summary: |
            Usage: --throughput-policy is-enabled=XX increment-percent=XX

            is-enabled: Determines whether the ThroughputPolicy is active or not
            increment-percent: Represents the percentage by which throughput can increase every time throughput policy \
kicks in.
    examples:
      - name: CosmosDBCassandraViewThroughputUpdate
        text: |-
               az cosmosdb cassandra-resource update-cassandra-view-throughput --account-name "ddb1" --keyspace-name \
"keyspacename" --resource-group "rg1" --throughput 400 --view-name "viewname"
"""

helps['cosmosdb gremlin-resource'] = """
    type: group
    short-summary: Manage gremlin resource with cosmosdb
"""

helps['cosmosdb gremlin-resource create-update-gremlin-database'] = """
    type: command
    short-summary: "Create or update an Azure Cosmos DB Gremlin database."
    examples:
      - name: CosmosDBGremlinDatabaseCreateUpdate
        text: |-
               az cosmosdb gremlin-resource create-update-gremlin-database --account-name "ddb1" --location "West US" \
--id "databaseName" --database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb gremlin-resource create-update-gremlin-graph'] = """
    type: command
    short-summary: "Create or update an Azure Cosmos DB Gremlin graph."
    examples:
      - name: CosmosDBGremlinGraphCreateUpdate
        text: |-
               az cosmosdb gremlin-resource create-update-gremlin-graph --account-name "ddb1" \
--create-update-gremlin-graph-parameters "{\\"location\\":\\"West US\\",\\"tags\\":{},\\"resource\\":{\\"conflictResolu\
tionPolicy\\":{\\"conflictResolutionPath\\":\\"/path\\",\\"mode\\":\\"LastWriterWins\\"},\\"defaultTtl\\":100,\\"id\\":\
\\"graphName\\",\\"indexingPolicy\\":{\\"automatic\\":true,\\"excludedPaths\\":[],\\"includedPaths\\":[{\\"path\\":\\"/\
*\\",\\"indexes\\":[{\\"dataType\\":\\"String\\",\\"kind\\":\\"Range\\",\\"precision\\":-1},{\\"dataType\\":\\"Number\\\
",\\"kind\\":\\"Range\\",\\"precision\\":-1}]}],\\"indexingMode\\":\\"consistent\\"},\\"partitionKey\\":{\\"kind\\":\\"\
Hash\\",\\"paths\\":[\\"/AccountNumber\\"]},\\"uniqueKeyPolicy\\":{\\"uniqueKeys\\":[{\\"paths\\":[\\"/testPath\\"]}]}}\
,\\"options\\":{}}" --database-name "databaseName" --graph-name "graphName" --resource-group "rg1"
"""

helps['cosmosdb gremlin-resource delete-gremlin-database'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB Gremlin database."
    examples:
      - name: CosmosDBGremlinDatabaseDelete
        text: |-
               az cosmosdb gremlin-resource delete-gremlin-database --account-name "ddb1" --database-name \
"databaseName" --resource-group "rg1"
"""

helps['cosmosdb gremlin-resource delete-gremlin-graph'] = """
    type: command
    short-summary: "Deletes an existing Azure Cosmos DB Gremlin graph."
    examples:
      - name: CosmosDBGremlinGraphDelete
        text: |-
               az cosmosdb gremlin-resource delete-gremlin-graph --account-name "ddb1" --database-name "databaseName" \
--graph-name "graphName" --resource-group "rg1"
"""

helps['cosmosdb gremlin-resource list-gremlin-database'] = """
    type: command
    short-summary: "Lists the Gremlin databases under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBGremlinDatabaseList
        text: |-
               az cosmosdb gremlin-resource list-gremlin-database --account-name "ddb1" --resource-group "rgName"
"""

helps['cosmosdb gremlin-resource list-gremlin-graph'] = """
    type: command
    short-summary: "Lists the Gremlin graph under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBGremlinGraphList
        text: |-
               az cosmosdb gremlin-resource list-gremlin-graph --account-name "ddb1" --database-name "databaseName" \
--resource-group "rgName"
"""

helps['cosmosdb gremlin-resource migrate-gremlin-database-to-autoscale'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB Gremlin database from manual throughput to autoscale."
    examples:
      - name: CosmosDBGremlinDatabaseMigrateToAutoscale
        text: |-
               az cosmosdb gremlin-resource migrate-gremlin-database-to-autoscale --account-name "ddb1" \
--database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb gremlin-resource migrate-gremlin-database-to-manual-throughput'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB Gremlin database from autoscale to manual throughput."
    examples:
      - name: CosmosDBGremlinDatabaseMigrateToManualThroughput
        text: |-
               az cosmosdb gremlin-resource migrate-gremlin-database-to-manual-throughput --account-name "ddb1" \
--database-name "databaseName" --resource-group "rg1"
"""

helps['cosmosdb gremlin-resource migrate-gremlin-graph-to-autoscale'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB Gremlin graph from manual throughput to autoscale."
    examples:
      - name: CosmosDBGremlinGraphMigrateToAutoscale
        text: |-
               az cosmosdb gremlin-resource migrate-gremlin-graph-to-autoscale --account-name "ddb1" --database-name \
"databaseName" --graph-name "graphName" --resource-group "rg1"
"""

helps['cosmosdb gremlin-resource migrate-gremlin-graph-to-manual-throughput'] = """
    type: command
    short-summary: "Migrate an Azure Cosmos DB Gremlin graph from autoscale to manual throughput."
    examples:
      - name: CosmosDBGremlinGraphMigrateToManualThroughput
        text: |-
               az cosmosdb gremlin-resource migrate-gremlin-graph-to-manual-throughput --account-name "ddb1" \
--database-name "databaseName" --graph-name "graphName" --resource-group "rg1"
"""

helps['cosmosdb gremlin-resource show-gremlin-database'] = """
    type: command
    short-summary: "Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided \
name."
    examples:
      - name: CosmosDBGremlinDatabaseGet
        text: |-
               az cosmosdb gremlin-resource show-gremlin-database --account-name "ddb1" --database-name "databaseName" \
--resource-group "rg1"
"""

helps['cosmosdb gremlin-resource show-gremlin-database-throughput'] = """
    type: command
    short-summary: "Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account \
with the provided name."
    examples:
      - name: CosmosDBGremlinDatabaseThroughputGet
        text: |-
               az cosmosdb gremlin-resource show-gremlin-database-throughput --account-name "ddb1" --database-name \
"databaseName" --resource-group "rg1"
"""

helps['cosmosdb gremlin-resource show-gremlin-graph'] = """
    type: command
    short-summary: "Gets the Gremlin graph under an existing Azure Cosmos DB database account."
    examples:
      - name: CosmosDBGremlinGraphGet
        text: |-
               az cosmosdb gremlin-resource show-gremlin-graph --account-name "ddb1" --database-name "databaseName" \
--graph-name "graphName" --resource-group "rgName"
"""

helps['cosmosdb gremlin-resource show-gremlin-graph-throughput'] = """
    type: command
    short-summary: "Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the \
provided name."
    examples:
      - name: CosmosDBGremlinGraphThroughputGet
        text: |-
               az cosmosdb gremlin-resource show-gremlin-graph-throughput --account-name "ddb1" --database-name \
"databaseName" --graph-name "graphName" --resource-group "rg1"
"""

helps['cosmosdb gremlin-resource update-gremlin-database-throughput'] = """
    type: command
    short-summary: "Update RUs per second of an Azure Cosmos DB Gremlin database."
    parameters:
      - name: --throughput-policy
        short-summary: "Represents throughput policy which service must adhere to for auto-upgrade"
        long-summary: |
            Usage: --throughput-policy is-enabled=XX increment-percent=XX

            is-enabled: Determines whether the ThroughputPolicy is active or not
            increment-percent: Represents the percentage by which throughput can increase every time throughput policy \
kicks in.
    examples:
      - name: CosmosDBGremlinDatabaseThroughputUpdate
        text: |-
               az cosmosdb gremlin-resource update-gremlin-database-throughput --account-name "ddb1" --database-name \
"databaseName" --resource-group "rg1" --location "West US" --throughput 400
"""

helps['cosmosdb gremlin-resource update-gremlin-graph-throughput'] = """
    type: command
    short-summary: "Update RUs per second of an Azure Cosmos DB Gremlin graph."
    parameters:
      - name: --throughput-policy
        short-summary: "Represents throughput policy which service must adhere to for auto-upgrade"
        long-summary: |
            Usage: --throughput-policy is-enabled=XX increment-percent=XX

            is-enabled: Determines whether the ThroughputPolicy is active or not
            increment-percent: Represents the percentage by which throughput can increase every time throughput policy \
kicks in.
    examples:
      - name: CosmosDBGremlinGraphThroughputUpdate
        text: |-
               az cosmosdb gremlin-resource update-gremlin-graph-throughput --account-name "ddb1" --database-name \
"databaseName" --graph-name "graphName" --resource-group "rg1" --location "West US" --throughput 400
"""

helps['cosmosdb location-get'] = """
    type: command
    short-summary: "Get the properties of an existing Cosmos DB location."
    examples:
      - name: CosmosDBLocationGet
        text: |-
               az cosmosdb location-get --location "westus"
"""

helps['cosmosdb location-list'] = """
    type: command
    short-summary: "List Cosmos DB locations and their properties."
    examples:
      - name: CosmosDBLocationList
        text: |-
               az cosmosdb location-list
"""

helps['cosmosdb cassandra-cluster'] = """
    type: group
    short-summary: Manage cassandra cluster with cosmosdb
"""

helps['cosmosdb cassandra-cluster list'] = """
    type: command
    short-summary: "List all managed Cassandra clusters in this resource group. And List all managed Cassandra \
clusters in this subscription."
    examples:
      - name: CosmosDBManagedCassandraClusterListByResourceGroup
        text: |-
               az cosmosdb cassandra-cluster list --resource-group "cassandra-prod-rg"
      - name: CosmosDBManagedCassandraClusterListBySubscription
        text: |-
               az cosmosdb cassandra-cluster list
"""

helps['cosmosdb cassandra-cluster show'] = """
    type: command
    short-summary: "Get the properties of a managed Cassandra cluster."
    examples:
      - name: CosmosDBManagedCassandraClusterGet
        text: |-
               az cosmosdb cassandra-cluster show --cluster-name "cassandra-prod" --resource-group "cassandra-prod-rg"
"""

helps['cosmosdb cassandra-cluster update'] = """
    type: command
    short-summary: "Updates some of the properties of a managed Cassandra cluster."
    parameters:
      - name: --client-certificates
        short-summary: "List of TLS certificates used to authorize clients connecting to the cluster. All connections \
are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra \
cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the \
public certificates in this property."
        long-summary: |
            Usage: --client-certificates pem=XX

            pem: PEM formatted public key.

            Multiple actions can be specified by using more than one --client-certificates argument.
      - name: --external-gossip-certificates
        short-summary: "List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS \
certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this \
property."
        long-summary: |
            Usage: --external-gossip-certificates pem=XX

            pem: PEM formatted public key.

            Multiple actions can be specified by using more than one --external-gossip-certificates argument.
      - name: --external-seed-nodes
        short-summary: "List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed \
node lists of all managed nodes."
        long-summary: |
            Usage: --external-seed-nodes ip-address=XX

            ip-address: IP address of this seed node.

            Multiple actions can be specified by using more than one --external-seed-nodes argument.
    examples:
      - name: CosmosDBManagedCassandraClusterPatch
        text: |-
               az cosmosdb cassandra-cluster update --authentication-method "None" --external-gossip-certificates \
pem="-----BEGIN CERTIFICATE-----\\n...Base64 encoded certificate...\\n-----END CERTIFICATE-----" --external-seed-nodes \
ip-address="10.52.221.2" --external-seed-nodes ip-address="10.52.221.3" --external-seed-nodes ip-address="10.52.221.4" \
--hours-between-backups 12 --tags owner="mike" --cluster-name "cassandra-prod" --resource-group "cassandra-prod-rg"
"""

helps['cosmosdb cassandra-cluster delete'] = """
    type: command
    short-summary: "Deletes a managed Cassandra cluster."
    examples:
      - name: CosmosDBManagedCassandraClusterDelete
        text: |-
               az cosmosdb cassandra-cluster delete --cluster-name "cassandra-prod" --resource-group \
"cassandra-prod-rg"
"""

helps['cosmosdb cassandra-cluster create-update'] = """
    type: command
    short-summary: "Create or update a managed Cassandra cluster. When updating, you must specify all writable \
properties. To update only some properties, use PATCH."
    parameters:
      - name: --client-certificates
        short-summary: "List of TLS certificates used to authorize clients connecting to the cluster. All connections \
are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra \
cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the \
public certificates in this property."
        long-summary: |
            Usage: --client-certificates pem=XX

            pem: PEM formatted public key.

            Multiple actions can be specified by using more than one --client-certificates argument.
      - name: --external-gossip-certificates
        short-summary: "List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS \
certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this \
property."
        long-summary: |
            Usage: --external-gossip-certificates pem=XX

            pem: PEM formatted public key.

            Multiple actions can be specified by using more than one --external-gossip-certificates argument.
      - name: --external-seed-nodes
        short-summary: "List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed \
node lists of all managed nodes."
        long-summary: |
            Usage: --external-seed-nodes ip-address=XX

            ip-address: IP address of this seed node.

            Multiple actions can be specified by using more than one --external-seed-nodes argument.
    examples:
      - name: CosmosDBManagedCassandraClusterCreate
        text: |-
               az cosmosdb cassandra-cluster create-update --location "West US" --authentication-method "Cassandra" \
--cassandra-version "3.11" --client-certificates pem="-----BEGIN CERTIFICATE-----\\n...Base64 encoded \
certificate...\\n-----END CERTIFICATE-----" --cluster-name-override "ClusterNameIllegalForAzureResource" \
--delegated-management-subnet-id "/subscriptions/536e130b-d7d6-4ac7-98a5-de20d69588d2/resourceGroups/customer-vnet-rg/p\
roviders/Microsoft.Network/virtualNetworks/customer-vnet/subnets/management" --external-gossip-certificates \
pem="-----BEGIN CERTIFICATE-----\\n...Base64 encoded certificate...\\n-----END CERTIFICATE-----" --external-seed-nodes \
ip-address="10.52.221.2" --external-seed-nodes ip-address="10.52.221.3" --external-seed-nodes ip-address="10.52.221.4" \
--hours-between-backups 24 --initial-cassandra-admin-password "mypassword" --cluster-name "cassandra-prod" \
--resource-group "cassandra-prod-rg"
"""

helps['cosmosdb cassandra-cluster fetch-node-status'] = """
    type: command
    short-summary: "Request the status of all nodes in the cluster (as returned by 'nodetool status')."
    examples:
      - name: CosmosDBManagedCassandraClusterFetchNodeStatus
        text: |-
               az cosmosdb cassandra-cluster fetch-node-status --cluster-name "cassandra-prod" --resource-group \
"cassandra-prod-rg"
"""

helps['cosmosdb cassandra-cluster list-backup'] = """
    type: command
    short-summary: "List the backups of this cluster that are available to restore."
    examples:
      - name: CosmosDBManagedCassandraBackupsList
        text: |-
               az cosmosdb cassandra-cluster list-backup --cluster-name "cassandra-prod" --resource-group \
"cassandra-prod-rg"
"""

helps['cosmosdb cassandra-cluster request-repair'] = """
    type: command
    short-summary: "Request that repair begin on this cluster as soon as possible."
    examples:
      - name: CosmosDBManagedCassandraRepair
        text: |-
               az cosmosdb cassandra-cluster request-repair --keyspace "my-keyspace" --tables "table1" "table42" \
--cluster-name "cassandra-prod" --resource-group "cassandra-prod-rg"
"""

helps['cosmosdb cassandra-cluster show-backup'] = """
    type: command
    short-summary: "Get the properties of an individual backup of this cluster that is available to restore."
    examples:
      - name: CosmosDBManagedCassandraBackup
        text: |-
               az cosmosdb cassandra-cluster show-backup --backup-id "1611250348" --cluster-name "cassandra-prod" \
--resource-group "cassandra-prod-rg"
"""

helps['cosmosdb cassandra-cluster wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the cosmosdb cassandra-cluster is met.
    examples:
      - name: Pause executing next line of CLI script until the cosmosdb cassandra-cluster is successfully updated.
        text: |-
               az cosmosdb cassandra-cluster wait --cluster-name "cassandra-prod" --resource-group "cassandra-prod-rg" \
--updated
      - name: Pause executing next line of CLI script until the cosmosdb cassandra-cluster is successfully deleted.
        text: |-
               az cosmosdb cassandra-cluster wait --cluster-name "cassandra-prod" --resource-group "cassandra-prod-rg" \
--deleted
      - name: Pause executing next line of CLI script until the cosmosdb cassandra-cluster is successfully created.
        text: |-
               az cosmosdb cassandra-cluster wait --cluster-name "cassandra-prod" --resource-group "cassandra-prod-rg" \
--created
"""

helps['cosmosdb cassandra-data-center'] = """
    type: group
    short-summary: Manage cassandra data center with cosmosdb
"""

helps['cosmosdb cassandra-data-center list'] = """
    type: command
    short-summary: "List all data centers in a particular managed Cassandra cluster."
    examples:
      - name: CosmosDBManagedCassandraDataCenterList
        text: |-
               az cosmosdb cassandra-data-center list --cluster-name "cassandra-prod" --resource-group \
"cassandra-prod-rg"
"""

helps['cosmosdb cassandra-data-center show'] = """
    type: command
    short-summary: "Get the properties of a managed Cassandra data center."
    examples:
      - name: CosmosDBManagedCassandraDataCenterGet
        text: |-
               az cosmosdb cassandra-data-center show --cluster-name "cassandra-prod" --data-center-name "dc1" \
--resource-group "cassandra-prod-rg"
"""

helps['cosmosdb cassandra-data-center update'] = """
    type: command
    short-summary: "Update some of the properties of a managed Cassandra data center."
    examples:
      - name: CosmosDBManagedCassandraDataCenterUpdate
        text: |-
               az cosmosdb cassandra-data-center update --base64-encoded-cassandra-yaml-fragment \
"Y29tcGFjdGlvbl90aHJvdWdocHV0X21iX3Blcl9zZWM6IDMyCmNvbXBhY3Rpb25fbGFyZ2VfcGFydGl0aW9uX3dhcm5pbmdfdGhyZXNob2xkX21iOiAxMD\
A=" --data-center-location "West US 2" --delegated-subnet-id "/subscriptions/536e130b-d7d6-4ac7-98a5-de20d69588d2/resou\
rceGroups/customer-vnet-rg/providers/Microsoft.Network/virtualNetworks/customer-vnet/subnets/dc1-subnet" --node-count \
9 --cluster-name "cassandra-prod" --data-center-name "dc1" --resource-group "cassandra-prod-rg"
"""

helps['cosmosdb cassandra-data-center delete'] = """
    type: command
    short-summary: "Delete a managed Cassandra data center."
    examples:
      - name: CosmosDBManagedCassandraDataCenterDelete
        text: |-
               az cosmosdb cassandra-data-center delete --cluster-name "cassandra-prod" --data-center-name "dc1" \
--resource-group "cassandra-prod-rg"
"""

helps['cosmosdb cassandra-data-center create-update'] = """
    type: command
    short-summary: "Create or update a managed Cassandra data center. When updating, overwrite all properties. To \
update only some properties, use PATCH."
    examples:
      - name: CosmosDBManagedCassandraDataCenterCreate
        text: |-
               az cosmosdb cassandra-data-center create-update --base64-encoded-cassandra-yaml-fragment \
"Y29tcGFjdGlvbl90aHJvdWdocHV0X21iX3Blcl9zZWM6IDMyCmNvbXBhY3Rpb25fbGFyZ2VfcGFydGl0aW9uX3dhcm5pbmdfdGhyZXNob2xkX21iOiAxMD\
A=" --data-center-location "West US 2" --delegated-subnet-id "/subscriptions/536e130b-d7d6-4ac7-98a5-de20d69588d2/resou\
rceGroups/customer-vnet-rg/providers/Microsoft.Network/virtualNetworks/customer-vnet/subnets/dc1-subnet" --node-count \
9 --cluster-name "cassandra-prod" --data-center-name "dc1" --resource-group "cassandra-prod-rg"
"""

helps['cosmosdb cassandra-data-center wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the cosmosdb cassandra-data-center is met.
    examples:
      - name: Pause executing next line of CLI script until the cosmosdb cassandra-data-center is successfully \
updated.
        text: |-
               az cosmosdb cassandra-data-center wait --cluster-name "cassandra-prod" --data-center-name "dc1" \
--resource-group "cassandra-prod-rg" --updated
      - name: Pause executing next line of CLI script until the cosmosdb cassandra-data-center is successfully \
deleted.
        text: |-
               az cosmosdb cassandra-data-center wait --cluster-name "cassandra-prod" --data-center-name "dc1" \
--resource-group "cassandra-prod-rg" --deleted
      - name: Pause executing next line of CLI script until the cosmosdb cassandra-data-center is successfully \
created.
        text: |-
               az cosmosdb cassandra-data-center wait --cluster-name "cassandra-prod" --data-center-name "dc1" \
--resource-group "cassandra-prod-rg" --created
"""

helps['cosmosdb notebook-workspace'] = """
    type: group
    short-summary: Manage notebook workspace with cosmosdb
"""

helps['cosmosdb notebook-workspace list'] = """
    type: command
    short-summary: "Gets the notebook workspace resources of an existing Cosmos DB account."
    examples:
      - name: CosmosDBNotebookWorkspaceList
        text: |-
               az cosmosdb notebook-workspace list --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb notebook-workspace show'] = """
    type: command
    short-summary: "Gets the notebook workspace for a Cosmos DB account."
    examples:
      - name: CosmosDBNotebookWorkspaceGet
        text: |-
               az cosmosdb notebook-workspace show --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb notebook-workspace create'] = """
    type: command
    short-summary: "Creates the notebook workspace for a Cosmos DB account."
    examples:
      - name: CosmosDBNotebookWorkspaceCreate
        text: |-
               az cosmosdb notebook-workspace create --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb notebook-workspace update'] = """
    type: command
    short-summary: "Update the notebook workspace for a Cosmos DB account."
"""

helps['cosmosdb notebook-workspace delete'] = """
    type: command
    short-summary: "Deletes the notebook workspace for a Cosmos DB account."
    examples:
      - name: CosmosDBNotebookWorkspaceDelete
        text: |-
               az cosmosdb notebook-workspace delete --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb notebook-workspace list-connection-info'] = """
    type: command
    short-summary: "Retrieves the connection info for the notebook workspace."
    examples:
      - name: CosmosDBNotebookWorkspaceListConnectionInfo
        text: |-
               az cosmosdb notebook-workspace list-connection-info --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb notebook-workspace regenerate-auth-token'] = """
    type: command
    short-summary: "Regenerates the auth token for the notebook workspace."
    examples:
      - name: CosmosDBNotebookWorkspaceRegenerateAuthToken
        text: |-
               az cosmosdb notebook-workspace regenerate-auth-token --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb notebook-workspace start'] = """
    type: command
    short-summary: "Starts the notebook workspace."
    examples:
      - name: CosmosDBNotebookWorkspaceStart
        text: |-
               az cosmosdb notebook-workspace start --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb notebook-workspace wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the cosmosdb notebook-workspace is met.
    examples:
      - name: Pause executing next line of CLI script until the cosmosdb notebook-workspace is successfully created.
        text: |-
               az cosmosdb notebook-workspace wait --account-name "ddb1" --resource-group "rg1" --created
      - name: Pause executing next line of CLI script until the cosmosdb notebook-workspace is successfully updated.
        text: |-
               az cosmosdb notebook-workspace wait --account-name "ddb1" --resource-group "rg1" --updated
      - name: Pause executing next line of CLI script until the cosmosdb notebook-workspace is successfully deleted.
        text: |-
               az cosmosdb notebook-workspace wait --account-name "ddb1" --resource-group "rg1" --deleted
"""

helps['cosmosdb private-endpoint-connection'] = """
    type: group
    short-summary: Manage private endpoint connection with cosmosdb
"""

helps['cosmosdb private-endpoint-connection list'] = """
    type: command
    short-summary: "List all private endpoint connections on a Cosmos DB account."
    examples:
      - name: Gets private endpoint connection.
        text: |-
               az cosmosdb private-endpoint-connection list --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb private-endpoint-connection show'] = """
    type: command
    short-summary: "Gets a private endpoint connection."
    examples:
      - name: Gets private endpoint connection.
        text: |-
               az cosmosdb private-endpoint-connection show --account-name "ddb1" --name \
"privateEndpointConnectionName" --resource-group "rg1"
"""

helps['cosmosdb private-endpoint-connection create'] = """
    type: command
    short-summary: "Approve or reject a private endpoint connection with a given name."
    parameters:
      - name: --private-link-service-connection-state
        short-summary: "Connection State of the Private Endpoint Connection."
        long-summary: |
            Usage: --private-link-service-connection-state status=XX description=XX

            status: The private link service connection status.
            description: The private link service connection description.
    examples:
      - name: Approve or reject a private endpoint connection with a given name.
        text: |-
               az cosmosdb private-endpoint-connection create --account-name "ddb1" --private-link-service-connection-s\
tate description="Approved by johndoe@contoso.com" status="Approved" --name "privateEndpointConnectionName" \
--resource-group "rg1"
"""

helps['cosmosdb private-endpoint-connection update'] = """
    type: command
    short-summary: "Approve or reject a private endpoint connection with a given name."
    parameters:
      - name: --private-link-service-connection-state
        short-summary: "Connection State of the Private Endpoint Connection."
        long-summary: |
            Usage: --private-link-service-connection-state status=XX description=XX

            status: The private link service connection status.
            description: The private link service connection description.
"""

helps['cosmosdb private-endpoint-connection delete'] = """
    type: command
    short-summary: "Deletes a private endpoint connection with a given name."
    examples:
      - name: Deletes a private endpoint connection with a given name.
        text: |-
               az cosmosdb private-endpoint-connection delete --account-name "ddb1" --name \
"privateEndpointConnectionName" --resource-group "rg1"
"""

helps['cosmosdb private-endpoint-connection wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the cosmosdb private-endpoint-connection is \
met.
    examples:
      - name: Pause executing next line of CLI script until the cosmosdb private-endpoint-connection is successfully \
created.
        text: |-
               az cosmosdb private-endpoint-connection wait --account-name "ddb1" --name \
"privateEndpointConnectionName" --resource-group "rg1" --created
      - name: Pause executing next line of CLI script until the cosmosdb private-endpoint-connection is successfully \
updated.
        text: |-
               az cosmosdb private-endpoint-connection wait --account-name "ddb1" --name \
"privateEndpointConnectionName" --resource-group "rg1" --updated
      - name: Pause executing next line of CLI script until the cosmosdb private-endpoint-connection is successfully \
deleted.
        text: |-
               az cosmosdb private-endpoint-connection wait --account-name "ddb1" --name \
"privateEndpointConnectionName" --resource-group "rg1" --deleted
"""

helps['cosmosdb private-link-resource'] = """
    type: group
    short-summary: Manage private link resource with cosmosdb
"""

helps['cosmosdb private-link-resource list'] = """
    type: command
    short-summary: "Gets the private link resources that need to be created for a Cosmos DB account."
    examples:
      - name: Gets private endpoint connection.
        text: |-
               az cosmosdb private-link-resource list --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb private-link-resource show'] = """
    type: command
    short-summary: "Gets the private link resources that need to be created for a Cosmos DB account."
    examples:
      - name: Gets private endpoint connection.
        text: |-
               az cosmosdb private-link-resource show --account-name "ddb1" --group-name "sql" --resource-group "rg1"
"""

helps['cosmosdb restorable-database-account'] = """
    type: group
    short-summary: Manage restorable database account with cosmosdb
"""

helps['cosmosdb restorable-database-account list'] = """
    type: command
    short-summary: "Lists all the restorable Azure Cosmos DB database accounts available under the subscription and in \
a region.  This call requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read' permission. And Lists \
all the restorable Azure Cosmos DB database accounts available under the subscription. This call requires \
'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read' permission."
    examples:
      - name: CosmosDBRestorableDatabaseAccountList
        text: |-
               az cosmosdb restorable-database-account list --location "West US"
      - name: CosmosDBRestorableDatabaseAccountNoLocationList
        text: |-
               az cosmosdb restorable-database-account list
"""

helps['cosmosdb restorable-database-account show'] = """
    type: command
    short-summary: "Retrieves the properties of an existing Azure Cosmos DB restorable database account.  This call \
requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read/*' permission."
    examples:
      - name: CosmosDBRestorableDatabaseAccountGet
        text: |-
               az cosmosdb restorable-database-account show --instance-id "d9b26648-2f53-4541-b3d8-3044f4f9810d" \
--location "West US"
"""

helps['cosmosdb restorable-sql-database'] = """
    type: group
    short-summary: Manage restorable sql database with cosmosdb
"""

helps['cosmosdb restorable-sql-database list'] = """
    type: command
    short-summary: "Show the event feed of all mutations done on all the Azure Cosmos DB SQL databases under the \
restorable account.  This helps in scenario where database was accidentally deleted to get the deletion time.  This \
API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission."
    examples:
      - name: CosmosDBRestorableSqlDatabaseList
        text: |-
               az cosmosdb restorable-sql-database list --instance-id "d9b26648-2f53-4541-b3d8-3044f4f9810d" \
--location "WestUS"
"""

helps['cosmosdb restorable-sql-container'] = """
    type: group
    short-summary: Manage restorable sql container with cosmosdb
"""

helps['cosmosdb restorable-sql-container list'] = """
    type: command
    short-summary: "Show the event feed of all mutations done on all the Azure Cosmos DB SQL containers under a \
specific database.  This helps in scenario where container was accidentally deleted.  This API requires \
'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission."
    examples:
      - name: CosmosDBRestorableSqlContainerList
        text: |-
               az cosmosdb restorable-sql-container list --instance-id "98a570f2-63db-4117-91f0-366327b7b353" \
--location "WestUS" --restorable-sql-database-rid "3fu-hg=="
"""

helps['cosmosdb restorable-sql-resource'] = """
    type: group
    short-summary: Manage restorable sql resource with cosmosdb
"""

helps['cosmosdb restorable-sql-resource list'] = """
    type: command
    short-summary: "Return a list of database and container combo that exist on the account at the given timestamp and \
location. This helps in scenarios to validate what resources exist at given timestamp and location. This API requires \
'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission."
    examples:
      - name: CosmosDBRestorableSqlResourceList
        text: |-
               az cosmosdb restorable-sql-resource list --instance-id "d9b26648-2f53-4541-b3d8-3044f4f9810d" \
--location "WestUS" --restore-location "WestUS" --restore-timestamp-in-utc "10/13/2020 4:56"
"""

helps['cosmosdb restorable-mongodb-database'] = """
    type: group
    short-summary: Manage restorable mongodb database with cosmosdb
"""

helps['cosmosdb restorable-mongodb-database list'] = """
    type: command
    short-summary: "Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB databases under the \
restorable account.  This helps in scenario where database was accidentally deleted to get the deletion time.  This \
API requires  'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission."
    examples:
      - name: CosmosDBRestorableMongodbDatabaseList
        text: |-
               az cosmosdb restorable-mongodb-database list --instance-id "d9b26648-2f53-4541-b3d8-3044f4f9810d" \
--location "WestUS"
"""

helps['cosmosdb restorable-mongodb-collection'] = """
    type: group
    short-summary: Manage restorable mongodb collection with cosmosdb
"""

helps['cosmosdb restorable-mongodb-collection list'] = """
    type: command
    short-summary: "Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB collections under a \
specific database.  This helps in scenario where container was accidentally deleted.  This API requires \
'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission."
    examples:
      - name: CosmosDBRestorableMongodbCollectionList
        text: |-
               az cosmosdb restorable-mongodb-collection list --instance-id "98a570f2-63db-4117-91f0-366327b7b353" \
--location "WestUS" --restorable-mongodb-database-rid "PD5DALigDgw="
"""

helps['cosmosdb restorable-mongodb-resource'] = """
    type: group
    short-summary: Manage restorable mongodb resource with cosmosdb
"""

helps['cosmosdb restorable-mongodb-resource list'] = """
    type: command
    short-summary: "Return a list of database and collection combo that exist on the account at the given timestamp \
and location. This helps in scenarios to validate what resources exist at given timestamp and location. This API \
requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission."
    examples:
      - name: CosmosDBRestorableMongodbResourceList
        text: |-
               az cosmosdb restorable-mongodb-resource list --instance-id "d9b26648-2f53-4541-b3d8-3044f4f9810d" \
--location "WestUS" --restore-location "WestUS" --restore-timestamp-in-utc "10/13/2020 4:56"
"""

helps['cosmosdb service'] = """
    type: group
    short-summary: Manage service with cosmosdb
"""

helps['cosmosdb service list'] = """
    type: command
    short-summary: "Gets the status of service."
    examples:
      - name: CosmosDBServicesList
        text: |-
               az cosmosdb service list --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb service show'] = """
    type: command
    short-summary: "Gets the status of service."
    examples:
      - name: DataTransferServiceGet
        text: |-
               az cosmosdb service show --account-name "ddb1" --resource-group "rg1" --name "DataTransfer"
      - name: GraphAPIComputeServiceGet
        text: |-
               az cosmosdb service show --account-name "ddb1" --resource-group "rg1" --name "GraphAPICompute"
      - name: SqlDedicatedGatewayServiceGet
        text: |-
               az cosmosdb service show --account-name "ddb1" --resource-group "rg1" --name "SqlDedicatedGateway"
"""

helps['cosmosdb service create'] = """
    type: command
    short-summary: "Creates a service."
    examples:
      - name: DataTransferServiceCreate
        text: |-
               az cosmosdb service create --account-name "ddb1" --instance-count 1 --instance-size "Cosmos.D4s" \
--service-type "DataTransfer" --resource-group "rg1" --name "DataTransfer"
      - name: GraphAPIComputeServiceCreate
        text: |-
               az cosmosdb service create --account-name "ddb1" --instance-count 1 --instance-size "Cosmos.D4s" \
--service-type "GraphAPICompute" --resource-group "rg1" --name "GraphAPICompute"
      - name: SqlDedicatedGatewayServiceCreate
        text: |-
               az cosmosdb service create --account-name "ddb1" --instance-count 1 --instance-size "Cosmos.D4s" \
--service-type "SqlDedicatedGateway" --resource-group "rg1" --name "SqlDedicatedGateway"
"""

helps['cosmosdb service delete'] = """
    type: command
    short-summary: "Deletes service with the given serviceName."
    examples:
      - name: DataTransferServiceDelete
        text: |-
               az cosmosdb service delete --account-name "ddb1" --resource-group "rg1" --name "DataTransfer"
      - name: GraphAPIComputeServiceDelete
        text: |-
               az cosmosdb service delete --account-name "ddb1" --resource-group "rg1" --name "GraphAPICompute"
      - name: SqlDedicatedGatewayServiceDelete
        text: |-
               az cosmosdb service delete --account-name "ddb1" --resource-group "rg1" --name "SqlDedicatedGateway"
"""

helps['cosmosdb service wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the cosmosdb service is met.
    examples:
      - name: Pause executing next line of CLI script until the cosmosdb service is successfully created.
        text: |-
               az cosmosdb service wait --account-name "ddb1" --resource-group "rg1" --name "SqlDedicatedGateway" \
--created
      - name: Pause executing next line of CLI script until the cosmosdb service is successfully deleted.
        text: |-
               az cosmosdb service wait --account-name "ddb1" --resource-group "rg1" --name "SqlDedicatedGateway" \
--deleted
"""

helps['cosmosdb data-transfer-job'] = """
    type: group
    short-summary: Manage data transfer job with cosmosdb
"""

helps['cosmosdb data-transfer-job list'] = """
    type: command
    short-summary: "Get a list of Data Transfer jobs."
    examples:
      - name: CosmosDBDataTransferJobFeed
        text: |-
               az cosmosdb data-transfer-job list --account-name "ddb1" --resource-group "rg1"
"""

helps['cosmosdb data-transfer-job show'] = """
    type: command
    short-summary: "Get a Data Transfer Job."
    examples:
      - name: CosmosDBDataTransferJobGet
        text: |-
               az cosmosdb data-transfer-job show --account-name "ddb1" --job-name "j1" --resource-group "rg1"
"""

helps['cosmosdb data-transfer-job create'] = """
    type: command
    short-summary: "Creates a Data Transfer Job."
    examples:
      - name: CosmosDBDataTransferJobCreate
        text: |-
               az cosmosdb data-transfer-job create --account-name "ddb1" --job-create-parameters \
"{\\"source\\":{\\"component\\":\\"CosmosDBCassandra\\",\\"keyspaceName\\":\\"keyspace\\",\\"tableName\\":\\"table\\"},\
\\"destination\\":{\\"component\\":\\"AzureBlobStorage\\",\\"containerName\\":\\"blob_container\\",\\"endpointUrl\\":\\\
"https://blob.windows.net\\"}}" --job-name "j1" --resource-group "rg1"
"""
