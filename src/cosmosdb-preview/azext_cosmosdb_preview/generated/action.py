# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


# pylint: disable=protected-access

# pylint: disable=no-self-use


import argparse
from collections import defaultdict
from knack.util import CLIError


class AddConsistencyPolicy(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.consistency_policy = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'default-consistency-level':
                d['default_consistency_level'] = v[0]

            elif kl == 'max-staleness-prefix':
                d['max_staleness_prefix'] = v[0]

            elif kl == 'max-interval-in-seconds':
                d['max_interval_in_seconds'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter consistency-policy. All possible keys are:'
                    ' default-consistency-level, max-staleness-prefix, max-interval-in-seconds'.format(k)
                )

        return d


class AddCosmosdbDatabaseAccountUpdateLocations(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCosmosdbDatabaseAccountUpdateLocations, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'location-name':
                d['location_name'] = v[0]

            elif kl == 'failover-priority':
                d['failover_priority'] = v[0]

            elif kl == 'is-zone-redundant':
                d['is_zone_redundant'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter locations. All possible keys are: location-name,'
                    ' failover-priority, is-zone-redundant'.format(k)
                )

        return d


class AddIpRules(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddIpRules, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'ip-address-or-range':
                d['ip_address_or_range'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter ip-rules. All possible keys are: ip-address-or-range'
                    .format(k)
                )

        return d


class AddCosmosdbDatabaseAccountUpdateCapabilities(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCosmosdbDatabaseAccountUpdateCapabilities, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'name':
                d['name'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter capabilities. All possible keys are: name'.format(k)
                )

        return d


class AddCosmosdbDatabaseAccountUpdateVirtualNetworkRules(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCosmosdbDatabaseAccountUpdateVirtualNetworkRules, self).__call__(
            parser, namespace, action, option_string
        )

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'id':
                d['id'] = v[0]

            elif kl == 'ignore-missing-v-net-service-endpoint':
                d['ignore_missing_v_net_service_endpoint'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter virtual-network-rules. All possible keys are: id,'
                    ' ignore-missing-v-net-service-endpoint'.format(k)
                )

        return d


class AddPeriodicModeBackupPolicy(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.periodic_mode_backup_policy = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'backup-interval-in-minutes':
                sub_d = d
                if 'periodic_mode_properties' not in sub_d:
                    sub_d['periodic_mode_properties'] = {}
                sub_d = sub_d['periodic_mode_properties']

                sub_d['backup_interval_in_minutes'] = v[0]

            elif kl == 'backup-retention-interval-in-hours':
                sub_d = d
                if 'periodic_mode_properties' not in sub_d:
                    sub_d['periodic_mode_properties'] = {}
                sub_d = sub_d['periodic_mode_properties']

                sub_d['backup_retention_interval_in_hours'] = v[0]

            elif kl == 'backup-storage-redundancy':
                sub_d = d
                if 'periodic_mode_properties' not in sub_d:
                    sub_d['periodic_mode_properties'] = {}
                sub_d = sub_d['periodic_mode_properties']

                sub_d['backup_storage_redundancy'] = v[0]

            elif kl == 'status':
                sub_d = d
                if 'migration_state' not in sub_d:
                    sub_d['migration_state'] = {}
                sub_d = sub_d['migration_state']

                sub_d['status'] = v[0]

            elif kl == 'target-type':
                sub_d = d
                if 'migration_state' not in sub_d:
                    sub_d['migration_state'] = {}
                sub_d = sub_d['migration_state']

                sub_d['target_type'] = v[0]

            elif kl == 'start-time':
                sub_d = d
                if 'migration_state' not in sub_d:
                    sub_d['migration_state'] = {}
                sub_d = sub_d['migration_state']

                sub_d['start_time'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter periodic-mode-backup-policy. All possible keys are:'
                    ' backup-interval-in-minutes, backup-retention-interval-in-hours, backup-storage-redundancy,'
                    ' status, target-type, start-time'.format(k)
                )

        d['type'] = 'Periodic'

        return d


class AddContinuousModeBackupPolicy(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.continuous_mode_backup_policy = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'status':
                sub_d = d
                if 'migration_state' not in sub_d:
                    sub_d['migration_state'] = {}
                sub_d = sub_d['migration_state']

                sub_d['status'] = v[0]

            elif kl == 'target-type':
                sub_d = d
                if 'migration_state' not in sub_d:
                    sub_d['migration_state'] = {}
                sub_d = sub_d['migration_state']

                sub_d['target_type'] = v[0]

            elif kl == 'start-time':
                sub_d = d
                if 'migration_state' not in sub_d:
                    sub_d['migration_state'] = {}
                sub_d = sub_d['migration_state']

                sub_d['start_time'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter continuous-mode-backup-policy. All possible keys are:'
                    ' status, target-type, start-time'.format(k)
                )

        d['type'] = 'Continuous'

        return d


class AddCosmosdbDatabaseAccountUpdateCors(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCosmosdbDatabaseAccountUpdateCors, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'allowed-origins':
                d['allowed_origins'] = v[0]

            elif kl == 'allowed-methods':
                d['allowed_methods'] = v[0]

            elif kl == 'allowed-headers':
                d['allowed_headers'] = v[0]

            elif kl == 'exposed-headers':
                d['exposed_headers'] = v[0]

            elif kl == 'max-age-in-seconds':
                d['max_age_in_seconds'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter cors. All possible keys are: allowed-origins,'
                    ' allowed-methods, allowed-headers, exposed-headers, max-age-in-seconds'.format(k)
                )

        return d


class AddFailoverPolicies(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddFailoverPolicies, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'location-name':
                d['location_name'] = v[0]

            elif kl == 'failover-priority':
                d['failover_priority'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter failover-policies. All possible keys are:'
                    ' location-name, failover-priority'.format(k)
                )

        return d


class AddCosmosdbDatabaseAccountCreateLocations(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCosmosdbDatabaseAccountCreateLocations, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'location-name':
                d['location_name'] = v[0]

            elif kl == 'failover-priority':
                d['failover_priority'] = v[0]

            elif kl == 'is-zone-redundant':
                d['is_zone_redundant'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter locations. All possible keys are: location-name,'
                    ' failover-priority, is-zone-redundant'.format(k)
                )

        return d


class AddCosmosdbDatabaseAccountCreateCapabilities(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCosmosdbDatabaseAccountCreateCapabilities, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'name':
                d['name'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter capabilities. All possible keys are: name'.format(k)
                )

        return d


class AddCosmosdbDatabaseAccountCreateVirtualNetworkRules(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCosmosdbDatabaseAccountCreateVirtualNetworkRules, self).__call__(
            parser, namespace, action, option_string
        )

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'id':
                d['id'] = v[0]

            elif kl == 'ignore-missing-v-net-service-endpoint':
                d['ignore_missing_v_net_service_endpoint'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter virtual-network-rules. All possible keys are: id,'
                    ' ignore-missing-v-net-service-endpoint'.format(k)
                )

        return d


class AddCosmosdbDatabaseAccountCreateCors(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddCosmosdbDatabaseAccountCreateCors, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'allowed-origins':
                d['allowed_origins'] = v[0]

            elif kl == 'allowed-methods':
                d['allowed_methods'] = v[0]

            elif kl == 'allowed-headers':
                d['allowed_headers'] = v[0]

            elif kl == 'exposed-headers':
                d['exposed_headers'] = v[0]

            elif kl == 'max-age-in-seconds':
                d['max_age_in_seconds'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter cors. All possible keys are: allowed-origins,'
                    ' allowed-methods, allowed-headers, exposed-headers, max-age-in-seconds'.format(k)
                )

        return d


class AddDatabasesToRestore(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddDatabasesToRestore, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'database-name':
                d['database_name'] = v[0]

            elif kl == 'collection-names':
                d['collection_names'] = v

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter databases-to-restore. All possible keys are:'
                    ' database-name, collection-names'.format(k)
                )

        return d


class AddThroughputPolicy(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.throughput_policy = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'is-enabled':
                d['is_enabled'] = v[0]

            elif kl == 'increment-percent':
                d['increment_percent'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter throughput-policy. All possible keys are: is-enabled,'
                    ' increment-percent'.format(k)
                )

        return d


class AddCosmosdbSqlResourceCreateUpdateSqlStoredProcedureResource(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.resource = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'id':
                d['id'] = v[0]

            elif kl == 'body':
                d['body'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter resource. All possible keys are: id, body'.format(k)
                )

        return d


class AddCosmosdbSqlResourceCreateUpdateSqlUserDefinedFunctionResource(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.resource = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'id':
                d['id'] = v[0]

            elif kl == 'body':
                d['body'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter resource. All possible keys are: id, body'.format(k)
                )

        return d


class AddSqlresourcesResource(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.resource = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'id':
                d['id'] = v[0]

            elif kl == 'body':
                d['body'] = v[0]

            elif kl == 'trigger-type':
                d['trigger_type'] = v[0]

            elif kl == 'trigger-operation':
                d['trigger_operation'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter resource. All possible keys are: id, body,'
                    ' trigger-type, trigger-operation'.format(k)
                )

        return d


class AddPermissions(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddPermissions, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'data-actions':
                d['data_actions'] = v

            elif kl == 'not-data-actions':
                d['not_data_actions'] = v

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter permissions. All possible keys are: data-actions,'
                    ' not-data-actions'.format(k)
                )

        return d


class AddShardKey(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.shard_key = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            v = properties[k]

            d[k] = v[0]

        return d


class AddColumns(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddColumns, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'name':
                d['name'] = v[0]

            elif kl == 'type':
                d['type'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter columns. All possible keys are: name, type'.format(k)
                )

        return d


class AddPartitionKeys(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddPartitionKeys, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'name':
                d['name'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter partition-keys. All possible keys are: name'.format(k)
                )

        return d


class AddClusterKeys(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddClusterKeys, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'name':
                d['name'] = v[0]

            elif kl == 'order-by':
                d['order_by'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter cluster-keys. All possible keys are: name, order-by'
                    .format(k)
                )

        return d


class AddCassandraresourcesResource(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.resource = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'id':
                d['id'] = v[0]

            elif kl == 'view-definition':
                d['view_definition'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter resource. All possible keys are: id, view-definition'
                    .format(k)
                )

        return d


class AddClientCertificates(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddClientCertificates, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'pem':
                d['pem'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter client-certificates. All possible keys are: pem'
                    .format(k)
                )

        return d


class AddExternalGossipCertificates(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddExternalGossipCertificates, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'pem':
                d['pem'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter external-gossip-certificates. All possible keys'
                    ' are: pem'.format(k)
                )

        return d


class AddExternalSeedNodes(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddExternalSeedNodes, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'ip-address':
                d['ip_address'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter external-seed-nodes. All possible keys are:'
                    ' ip-address'.format(k)
                )

        return d


class AddPrivateLinkServiceConnectionState(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.private_link_service_connection_state = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'status':
                d['status'] = v[0]

            elif kl == 'description':
                d['description'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter private-link-service-connection-state. All possible'
                    ' keys are: status, description'.format(k)
                )

        return d
