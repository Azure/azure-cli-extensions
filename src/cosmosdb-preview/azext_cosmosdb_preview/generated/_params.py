# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import (
    get_default_location_from_resource_group,
    validate_file_or_dict
)
from azext_cosmosdb_preview.action import (
    AddConsistencyPolicy,
    AddCosmosdbDatabaseAccountCreateLocations,
    AddIpRules,
    AddCosmosdbDatabaseAccountCreateCapabilities,
    AddCosmosdbDatabaseAccountCreateVirtualNetworkRules,
    AddPeriodicModeBackupPolicy,
    AddContinuousModeBackupPolicy,
    AddCosmosdbDatabaseAccountCreateCors,
    AddDatabasesToRestore,
    AddCosmosdbDatabaseAccountUpdateLocations,
    AddCosmosdbDatabaseAccountUpdateCapabilities,
    AddCosmosdbDatabaseAccountUpdateVirtualNetworkRules,
    AddCosmosdbDatabaseAccountUpdateCors,
    AddFailoverPolicies,
    AddPermissions,
    AddCosmosdbSqlResourceCreateUpdateSqlStoredProcedureResource,
    AddSqlresourcesResource,
    AddCosmosdbSqlResourceCreateUpdateSqlUserDefinedFunctionResource,
    AddThroughputPolicy,
    AddShardKey,
    AddColumns,
    AddPartitionKeys,
    AddClusterKeys,
    AddCassandraresourcesResource,
    AddClientCertificates,
    AddExternalGossipCertificates,
    AddExternalSeedNodes,
    AddPrivateLinkServiceConnectionState
)


def load_arguments(self, _):

    with self.argument_context('cosmosdb database-account list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('cosmosdb database-account show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')

    with self.argument_context('cosmosdb database-account create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('kind', arg_type=get_enum_type(['GlobalDocumentDB', 'MongoDB', 'Parse']), help='Indicates the type '
                   'of database account. This can only be set at database account creation.')
        c.argument('consistency_policy', action=AddConsistencyPolicy, nargs='+', help='The consistency policy for the '
                   'Cosmos DB account.')
        c.argument('locations', action=AddCosmosdbDatabaseAccountCreateLocations, nargs='+', help='An array that '
                   'contains the georeplication locations enabled for the Cosmos DB account.')
        c.argument('ip_rules', action=AddIpRules, nargs='+', help='List of IpRules.')
        c.argument('is_virtual_network_filter_enabled', arg_type=get_three_state_flag(), help='Flag to indicate '
                   'whether to enable/disable Virtual Network ACL rules.')
        c.argument('enable_automatic_failover', arg_type=get_three_state_flag(), help='Enables automatic failover of '
                   'the write region in the rare event that the region is unavailable due to an outage. Automatic '
                   'failover will result in a new write region for the account and is chosen based on the failover '
                   'priorities configured for the account.')
        c.argument('capabilities', action=AddCosmosdbDatabaseAccountCreateCapabilities, nargs='+', help='List of '
                   'Cosmos DB capabilities for the account')
        c.argument('virtual_network_rules', action=AddCosmosdbDatabaseAccountCreateVirtualNetworkRules, nargs='+',
                   help='List of Virtual Network ACL rules configured for the Cosmos DB account.')
        c.argument('enable_multiple_write_locations', arg_type=get_three_state_flag(), help='Enables the account to '
                   'write in multiple locations')
        c.argument('enable_cassandra_connector', arg_type=get_three_state_flag(), help='Enables the cassandra '
                   'connector on the Cosmos DB C* account')
        c.argument('disable_key_based_metadata_write_access', arg_type=get_three_state_flag(), help='Disable write '
                   'operations on metadata resources (databases, containers, throughput) via account keys')
        c.argument('key_vault_key_uri', type=str, help='The URI of the key vault')
        c.argument('default_identity', type=str, help='The default identity for accessing key vault used in features '
                   'like customer managed keys. The default identity needs to be explicitly set by the users. It can '
                   'be "FirstPartyIdentity", "SystemAssignedIdentity" and more.')
        c.argument('public_network_access', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Whether requests '
                   'from Public Network are allowed')
        c.argument('enable_free_tier', arg_type=get_three_state_flag(), help='Flag to indicate whether Free Tier is '
                   'enabled.')
        c.argument('enable_analytical_storage', arg_type=get_three_state_flag(), help='Flag to indicate whether to '
                   'enable storage analytics.')
        c.argument('periodic_mode_backup_policy', action=AddPeriodicModeBackupPolicy, nargs='+', help='The object '
                   'representing periodic mode backup policy.', arg_group='BackupPolicy')
        c.argument('continuous_mode_backup_policy', action=AddContinuousModeBackupPolicy, nargs='+', help='The object '
                   'representing continuous mode backup policy.', arg_group='BackupPolicy')
        c.argument('cors', action=AddCosmosdbDatabaseAccountCreateCors, nargs='+', help='The CORS policy for the '
                   'Cosmos DB database account.')
        c.argument('network_acl_bypass', arg_type=get_enum_type(['None', 'AzureServices']), help='Indicates what '
                   'services are allowed to bypass firewall checks.')
        c.argument('network_acl_bypass_resource_ids', nargs='+', help='An array that contains the Resource Ids for '
                   'Network Acl Bypass for the Cosmos DB account.')
        c.argument('disable_local_auth', arg_type=get_three_state_flag(), help='Opt-out of local authentication and '
                   'ensure only MSI and AAD can be used exclusively for authentication.')
        c.argument('restore_source', type=str, help='The id of the restorable database account from which the restore '
                   'has to be initiated. For example: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/lo'
                   'cations/{location}/restorableDatabaseAccounts/{restorableDatabaseAccountName}', arg_group='Restore '
                   'Parameters')
        c.argument('restore_timestamp_in_utc', help='Time to which the account has to be restored (ISO-8601 format).',
                   arg_group='Restore Parameters')
        c.argument('databases_to_restore', action=AddDatabasesToRestore, nargs='+', help='List of specific databases '
                   'available for restore.', arg_group='Restore Parameters')
        c.argument('enable_full_text_query', arg_type=get_enum_type(['None', 'True', 'False']), help='Describe the '
                   'level of detail with which queries are to be logged.', arg_group='Diagnostic Log Settings')
        c.argument('schema_type', arg_type=get_enum_type(['WellDefined', 'FullFidelity']), help='Describes the types '
                   'of schema for analytical storage.', arg_group='Analytical Storage Configuration')
        c.argument('server_version', arg_type=get_enum_type(['3.2', '3.6', '4.0']), help='Describes the ServerVersion '
                   'of an a MongoDB account.', arg_group='Api Properties')

    with self.argument_context('cosmosdb database-account update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('consistency_policy', action=AddConsistencyPolicy, nargs='+', help='The consistency policy for the '
                   'Cosmos DB account.')
        c.argument('locations', action=AddCosmosdbDatabaseAccountUpdateLocations, nargs='+', help='An array that '
                   'contains the georeplication locations enabled for the Cosmos DB account.')
        c.argument('ip_rules', action=AddIpRules, nargs='+', help='List of IpRules.')
        c.argument('is_virtual_network_filter_enabled', arg_type=get_three_state_flag(), help='Flag to indicate '
                   'whether to enable/disable Virtual Network ACL rules.')
        c.argument('enable_automatic_failover', arg_type=get_three_state_flag(), help='Enables automatic failover of '
                   'the write region in the rare event that the region is unavailable due to an outage. Automatic '
                   'failover will result in a new write region for the account and is chosen based on the failover '
                   'priorities configured for the account.')
        c.argument('capabilities', action=AddCosmosdbDatabaseAccountUpdateCapabilities, nargs='+', help='List of '
                   'Cosmos DB capabilities for the account')
        c.argument('virtual_network_rules', action=AddCosmosdbDatabaseAccountUpdateVirtualNetworkRules, nargs='+',
                   help='List of Virtual Network ACL rules configured for the Cosmos DB account.')
        c.argument('enable_multiple_write_locations', arg_type=get_three_state_flag(), help='Enables the account to '
                   'write in multiple locations')
        c.argument('enable_cassandra_connector', arg_type=get_three_state_flag(), help='Enables the cassandra '
                   'connector on the Cosmos DB C* account')
        c.argument('disable_key_based_metadata_write_access', arg_type=get_three_state_flag(), help='Disable write '
                   'operations on metadata resources (databases, containers, throughput) via account keys')
        c.argument('key_vault_key_uri', type=str, help='The URI of the key vault')
        c.argument('default_identity', type=str, help='The default identity for accessing key vault used in features '
                   'like customer managed keys. The default identity needs to be explicitly set by the users. It can '
                   'be "FirstPartyIdentity", "SystemAssignedIdentity" and more.')
        c.argument('public_network_access', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Whether requests '
                   'from Public Network are allowed')
        c.argument('enable_free_tier', arg_type=get_three_state_flag(), help='Flag to indicate whether Free Tier is '
                   'enabled.')
        c.argument('enable_analytical_storage', arg_type=get_three_state_flag(), help='Flag to indicate whether to '
                   'enable storage analytics.')
        c.argument('periodic_mode_backup_policy', action=AddPeriodicModeBackupPolicy, nargs='+', help='The object '
                   'representing periodic mode backup policy.', arg_group='BackupPolicy')
        c.argument('continuous_mode_backup_policy', action=AddContinuousModeBackupPolicy, nargs='+', help='The object '
                   'representing continuous mode backup policy.', arg_group='BackupPolicy')
        c.argument('cors', action=AddCosmosdbDatabaseAccountUpdateCors, nargs='+', help='The CORS policy for the '
                   'Cosmos DB database account.')
        c.argument('network_acl_bypass', arg_type=get_enum_type(['None', 'AzureServices']), help='Indicates what '
                   'services are allowed to bypass firewall checks.')
        c.argument('network_acl_bypass_resource_ids', nargs='+', help='An array that contains the Resource Ids for '
                   'Network Acl Bypass for the Cosmos DB account.')
        c.argument('disable_local_auth', arg_type=get_three_state_flag(), help='Opt-out of local authentication and '
                   'ensure only MSI and AAD can be used exclusively for authentication.')
        c.argument('enable_full_text_query', arg_type=get_enum_type(['None', 'True', 'False']), help='Describe the '
                   'level of detail with which queries are to be logged.', arg_group='Diagnostic Log Settings')
        c.argument('schema_type', arg_type=get_enum_type(['WellDefined', 'FullFidelity']), help='Describes the types '
                   'of schema for analytical storage.', arg_group='Analytical Storage Configuration')
        c.argument('server_version', arg_type=get_enum_type(['3.2', '3.6', '4.0']), help='Describes the ServerVersion '
                   'of an a MongoDB account.', arg_group='Api Properties')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')

    with self.argument_context('cosmosdb database-account delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')

    with self.argument_context('cosmosdb database-account check-name-exist') as c:
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb database-account failover-priority-change') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('failover_policies', action=AddFailoverPolicies, nargs='+', help='List of failover policies.')

    with self.argument_context('cosmosdb database-account list-connection-string') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb database-account list-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb database-account list-metric') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of metrics to return. The parameters that can be filtered are name.value (name of the '
                   'metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported '
                   'operator is eq.')

    with self.argument_context('cosmosdb database-account list-metric-definition') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb database-account list-read-only-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb database-account list-usage') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of usages to return. The supported parameter is name.value (name of the metric, can have an '
                   'or of multiple names).')

    with self.argument_context('cosmosdb database-account offline-region') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('region', type=str, help='Cosmos DB region, with spaces between words and each word capitalized.')

    with self.argument_context('cosmosdb database-account online-region') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('region', type=str, help='Cosmos DB region, with spaces between words and each word capitalized.')

    with self.argument_context('cosmosdb database-account regenerate-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('key_kind', arg_type=get_enum_type(['primary', 'secondary', 'primaryReadonly',
                                                       'secondaryReadonly']), help='The access key to regenerate.')

    with self.argument_context('cosmosdb database-account show-read-only-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')

    with self.argument_context('cosmosdb database-account wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')

    with self.argument_context('cosmosdb database list-metric') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_rid', type=str, help='Cosmos DB database rid.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of metrics to return. The parameters that can be filtered are name.value (name of the '
                   'metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported '
                   'operator is eq.')

    with self.argument_context('cosmosdb database list-metric-definition') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_rid', type=str, help='Cosmos DB database rid.')

    with self.argument_context('cosmosdb database list-usage') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_rid', type=str, help='Cosmos DB database rid.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of usages to return. The supported parameter is name.value (name of the metric, can have an '
                   'or of multiple names).')

    with self.argument_context('cosmosdb collection list-metric') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_rid', type=str, help='Cosmos DB database rid.')
        c.argument('collection_rid', type=str, help='Cosmos DB collection rid.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of metrics to return. The parameters that can be filtered are name.value (name of the '
                   'metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported '
                   'operator is eq.')

    with self.argument_context('cosmosdb collection list-metric-definition') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_rid', type=str, help='Cosmos DB database rid.')
        c.argument('collection_rid', type=str, help='Cosmos DB collection rid.')

    with self.argument_context('cosmosdb collection list-usage') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_rid', type=str, help='Cosmos DB database rid.')
        c.argument('collection_rid', type=str, help='Cosmos DB collection rid.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of usages to return. The supported parameter is name.value (name of the metric, can have an '
                   'or of multiple names).')

    with self.argument_context('cosmosdb collection-region list-metric') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('region', type=str, help='Cosmos DB region, with spaces between words and each word capitalized.')
        c.argument('database_rid', type=str, help='Cosmos DB database rid.')
        c.argument('collection_rid', type=str, help='Cosmos DB collection rid.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of metrics to return. The parameters that can be filtered are name.value (name of the '
                   'metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported '
                   'operator is eq.')

    with self.argument_context('cosmosdb database-account-region list-metric') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('region', type=str, help='Cosmos DB region, with spaces between words and each word capitalized.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of metrics to return. The parameters that can be filtered are name.value (name of the '
                   'metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported '
                   'operator is eq.')

    with self.argument_context('cosmosdb percentile-source-target list-metric') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('source_region', type=str, help='Source region from which data is written. Cosmos DB region, with '
                   'spaces between words and each word capitalized.')
        c.argument('target_region', type=str, help='Target region to which data is written. Cosmos DB region, with '
                   'spaces between words and each word capitalized.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of metrics to return. The parameters that can be filtered are name.value (name of the '
                   'metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported '
                   'operator is eq.')

    with self.argument_context('cosmosdb percentile-target list-metric') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('target_region', type=str, help='Target region to which data is written. Cosmos DB region, with '
                   'spaces between words and each word capitalized.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of metrics to return. The parameters that can be filtered are name.value (name of the '
                   'metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported '
                   'operator is eq.')

    with self.argument_context('cosmosdb percentile list-metric') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of metrics to return. The parameters that can be filtered are name.value (name of the '
                   'metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported '
                   'operator is eq.')

    with self.argument_context('cosmosdb collection-partition-region list-metric') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('region', type=str, help='Cosmos DB region, with spaces between words and each word capitalized.')
        c.argument('database_rid', type=str, help='Cosmos DB database rid.')
        c.argument('collection_rid', type=str, help='Cosmos DB collection rid.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of metrics to return. The parameters that can be filtered are name.value (name of the '
                   'metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported '
                   'operator is eq.')

    with self.argument_context('cosmosdb collection-partition list-metric') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_rid', type=str, help='Cosmos DB database rid.')
        c.argument('collection_rid', type=str, help='Cosmos DB collection rid.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of metrics to return. The parameters that can be filtered are name.value (name of the '
                   'metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported '
                   'operator is eq.')

    with self.argument_context('cosmosdb collection-partition list-usage') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_rid', type=str, help='Cosmos DB database rid.')
        c.argument('collection_rid', type=str, help='Cosmos DB collection rid.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of usages to return. The supported parameter is name.value (name of the metric, can have an '
                   'or of multiple names).')

    with self.argument_context('cosmosdb partition-key-range-id list-metric') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_rid', type=str, help='Cosmos DB database rid.')
        c.argument('collection_rid', type=str, help='Cosmos DB collection rid.')
        c.argument('partition_key_range_id', type=str, help='Partition Key Range Id for which to get data.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of metrics to return. The parameters that can be filtered are name.value (name of the '
                   'metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported '
                   'operator is eq.')

    with self.argument_context('cosmosdb partition-key-range-id-region list-metric') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('region', type=str, help='Cosmos DB region, with spaces between words and each word capitalized.')
        c.argument('database_rid', type=str, help='Cosmos DB database rid.')
        c.argument('collection_rid', type=str, help='Cosmos DB collection rid.')
        c.argument('partition_key_range_id', type=str, help='Partition Key Range Id for which to get data.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter expression that describes a '
                   'subset of metrics to return. The parameters that can be filtered are name.value (name of the '
                   'metric, can have an or of multiple names), startTime, endTime, and timeGrain. The supported '
                   'operator is eq.')

    with self.argument_context('cosmosdb graph-resource create-update-graph') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('graph_name', type=str, help='Cosmos DB graph resource name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Request Units per second. For example, "throughput": 10000.',
                   arg_group='Options')
        c.argument('max_throughput', type=int, help='Represents maximum throughput, the resource can scale up to.',
                   arg_group='Options Autoscale Settings')
        c.argument('id_', options_list=['--id'], type=str, help='Name of the Cosmos DB Graph', arg_group='Resource')

    with self.argument_context('cosmosdb graph-resource delete-graph-resource') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('graph_name', type=str, help='Cosmos DB graph resource name.', id_part='child_name_1')

    with self.argument_context('cosmosdb graph-resource list-graph') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb graph-resource show-graph') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('graph_name', type=str, help='Cosmos DB graph resource name.', id_part='child_name_1')

    with self.argument_context('cosmosdb sql-resource create-update-sql-container') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_name', type=str, help='Cosmos DB database name.')
        c.argument('container_name', type=str, help='Cosmos DB container name.')
        c.argument('create_update_sql_container_parameters', type=validate_file_or_dict, help='The parameters to '
                   'provide for the current SQL container. Expected value: json-string/json-file/@json-file.')

    with self.argument_context('cosmosdb sql-resource create-update-sql-database') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_name', type=str, help='Cosmos DB database name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Request Units per second. For example, "throughput": 10000.',
                   arg_group='Options')
        c.argument('max_throughput', type=int, help='Represents maximum throughput, the resource can scale up to.',
                   arg_group='Options Autoscale Settings')
        c.argument('id_', options_list=['--id'], type=str, help='Name of the Cosmos DB SQL database',
                   arg_group='Resource')

    with self.argument_context('cosmosdb sql-resource create-update-sql-role-assignment') as c:
        c.argument('role_assignment_id', type=str, help='The GUID for the Role Assignment.')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('role_definition_id', type=str, help='The unique identifier for the associated Role Definition.')
        c.argument('scope', type=str, help='The data plane resource path for which access is being granted through '
                   'this Role Assignment.')
        c.argument('principal_id', type=str, help='The unique identifier for the associated AAD principal in the AAD '
                   'graph to which access is being granted through this Role Assignment. Tenant ID for the principal '
                   'is inferred using the tenant associated with the subscription.')

    with self.argument_context('cosmosdb sql-resource create-update-sql-role-definition') as c:
        c.argument('role_definition_id', type=str, help='The GUID for the Role Definition.')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('role_name', type=str, help='A user-friendly name for the Role Definition. Must be unique for the '
                   'database account.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['BuiltInRole', 'CustomRole']),
                   help='Indicates whether the Role Definition was built-in or user created.')
        c.argument('assignable_scopes', nargs='+', help='A set of fully qualified Scopes at or below which Role '
                   'Assignments may be created using this Role Definition. This will allow application of this Role '
                   'Definition on the entire database account or any underlying Database / Collection. Must have at '
                   'least one element. Scopes higher than Database account are not enforceable as assignable Scopes. '
                   'Note that resources referenced in assignable Scopes need not exist.')
        c.argument('permissions', action=AddPermissions, nargs='+', help='The set of operations allowed through this '
                   'Role Definition.')

    with self.argument_context('cosmosdb sql-resource create-update-sql-stored-procedure') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_name', type=str, help='Cosmos DB database name.')
        c.argument('container_name', type=str, help='Cosmos DB container name.')
        c.argument('stored_procedure_name', type=str, help='Cosmos DB storedProcedure name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('resource', action=AddCosmosdbSqlResourceCreateUpdateSqlStoredProcedureResource, nargs='+',
                   help='The standard JSON format of a storedProcedure')
        c.argument('throughput', type=int, help='Request Units per second. For example, "throughput": 10000.',
                   arg_group='Options')
        c.argument('max_throughput', type=int, help='Represents maximum throughput, the resource can scale up to.',
                   arg_group='Options Autoscale Settings')

    with self.argument_context('cosmosdb sql-resource create-update-sql-trigger') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_name', type=str, help='Cosmos DB database name.')
        c.argument('container_name', type=str, help='Cosmos DB container name.')
        c.argument('trigger_name', type=str, help='Cosmos DB trigger name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('resource', action=AddSqlresourcesResource, nargs='+',
                   help='The standard JSON format of a trigger')
        c.argument('throughput', type=int, help='Request Units per second. For example, "throughput": 10000.',
                   arg_group='Options')
        c.argument('max_throughput', type=int, help='Represents maximum throughput, the resource can scale up to.',
                   arg_group='Options Autoscale Settings')

    with self.argument_context('cosmosdb sql-resource create-update-sql-user-defined-function') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_name', type=str, help='Cosmos DB database name.')
        c.argument('container_name', type=str, help='Cosmos DB container name.')
        c.argument('user_defined_function_name', type=str, help='Cosmos DB userDefinedFunction name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('resource', action=AddCosmosdbSqlResourceCreateUpdateSqlUserDefinedFunctionResource, nargs='+',
                   help='The standard JSON format of a userDefinedFunction')
        c.argument('throughput', type=int, help='Request Units per second. For example, "throughput": 10000.',
                   arg_group='Options')
        c.argument('max_throughput', type=int, help='Represents maximum throughput, the resource can scale up to.',
                   arg_group='Options Autoscale Settings')

    with self.argument_context('cosmosdb sql-resource delete-sql-container') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('container_name', type=str, help='Cosmos DB container name.', id_part='child_name_2')

    with self.argument_context('cosmosdb sql-resource delete-sql-database') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')

    with self.argument_context('cosmosdb sql-resource delete-sql-role-assignment') as c:
        c.argument('role_assignment_id', type=str, help='The GUID for the Role Assignment.', id_part='child_name_1')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')

    with self.argument_context('cosmosdb sql-resource delete-sql-role-definition') as c:
        c.argument('role_definition_id', type=str, help='The GUID for the Role Definition.', id_part='child_name_1')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')

    with self.argument_context('cosmosdb sql-resource delete-sql-stored-procedure') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('container_name', type=str, help='Cosmos DB container name.', id_part='child_name_2')
        c.argument('stored_procedure_name', type=str, help='Cosmos DB storedProcedure name.', id_part='child_name_3')

    with self.argument_context('cosmosdb sql-resource delete-sql-trigger') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('container_name', type=str, help='Cosmos DB container name.', id_part='child_name_2')
        c.argument('trigger_name', type=str, help='Cosmos DB trigger name.', id_part='child_name_3')

    with self.argument_context('cosmosdb sql-resource delete-sql-user-defined-function') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('container_name', type=str, help='Cosmos DB container name.', id_part='child_name_2')
        c.argument('user_defined_function_name', type=str, help='Cosmos DB userDefinedFunction name.',
                   id_part='child_name_3')

    with self.argument_context('cosmosdb sql-resource list-sql-container') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_name', type=str, help='Cosmos DB database name.')

    with self.argument_context('cosmosdb sql-resource list-sql-database') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb sql-resource list-sql-role-assignment') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb sql-resource list-sql-role-definition') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb sql-resource list-sql-stored-procedure') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_name', type=str, help='Cosmos DB database name.')
        c.argument('container_name', type=str, help='Cosmos DB container name.')

    with self.argument_context('cosmosdb sql-resource list-sql-trigger') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_name', type=str, help='Cosmos DB database name.')
        c.argument('container_name', type=str, help='Cosmos DB container name.')

    with self.argument_context('cosmosdb sql-resource list-sql-user-defined-function') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_name', type=str, help='Cosmos DB database name.')
        c.argument('container_name', type=str, help='Cosmos DB container name.')

    with self.argument_context('cosmosdb sql-resource migrate-sql-container-to-autoscale') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('container_name', type=str, help='Cosmos DB container name.', id_part='child_name_2')

    with self.argument_context('cosmosdb sql-resource migrate-sql-container-to-manual-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('container_name', type=str, help='Cosmos DB container name.', id_part='child_name_2')

    with self.argument_context('cosmosdb sql-resource migrate-sql-database-to-autoscale') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')

    with self.argument_context('cosmosdb sql-resource migrate-sql-database-to-manual-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')

    with self.argument_context('cosmosdb sql-resource retrieve-continuou-backup-information') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('container_name', type=str, help='Cosmos DB container name.', id_part='child_name_2')
        c.argument('location_', options_list=['--location'], type=str, help='The name of the continuous backup restore '
                   'location.')

    with self.argument_context('cosmosdb sql-resource show-sql-container') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('container_name', type=str, help='Cosmos DB container name.', id_part='child_name_2')

    with self.argument_context('cosmosdb sql-resource show-sql-container-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('container_name', type=str, help='Cosmos DB container name.', id_part='child_name_2')

    with self.argument_context('cosmosdb sql-resource show-sql-database') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')

    with self.argument_context('cosmosdb sql-resource show-sql-database-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')

    with self.argument_context('cosmosdb sql-resource show-sql-role-assignment') as c:
        c.argument('role_assignment_id', type=str, help='The GUID for the Role Assignment.', id_part='child_name_1')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')

    with self.argument_context('cosmosdb sql-resource show-sql-role-definition') as c:
        c.argument('role_definition_id', type=str, help='The GUID for the Role Definition.', id_part='child_name_1')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')

    with self.argument_context('cosmosdb sql-resource show-sql-stored-procedure') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('container_name', type=str, help='Cosmos DB container name.', id_part='child_name_2')
        c.argument('stored_procedure_name', type=str, help='Cosmos DB storedProcedure name.', id_part='child_name_3')

    with self.argument_context('cosmosdb sql-resource show-sql-trigger') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('container_name', type=str, help='Cosmos DB container name.', id_part='child_name_2')
        c.argument('trigger_name', type=str, help='Cosmos DB trigger name.', id_part='child_name_3')

    with self.argument_context('cosmosdb sql-resource show-sql-user-defined-function') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('container_name', type=str, help='Cosmos DB container name.', id_part='child_name_2')
        c.argument('user_defined_function_name', type=str, help='Cosmos DB userDefinedFunction name.',
                   id_part='child_name_3')

    with self.argument_context('cosmosdb sql-resource update-sql-container-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('container_name', type=str, help='Cosmos DB container name.', id_part='child_name_2')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Value of the Cosmos DB resource throughput. Either throughput is '
                   'required or autoscaleSettings is required, but not both.', arg_group='Resource')
        c.argument('max_throughput', type=int, help='Represents maximum throughput container can scale up to.',
                   arg_group='Resource Autoscale Settings')
        c.argument('throughput_policy', action=AddThroughputPolicy, nargs='+', help='Represents throughput policy '
                   'which service must adhere to for auto-upgrade', arg_group='Resource Autoscale Settings Auto '
                   'Upgrade Policy')

    with self.argument_context('cosmosdb sql-resource update-sql-database-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Value of the Cosmos DB resource throughput. Either throughput is '
                   'required or autoscaleSettings is required, but not both.', arg_group='Resource')
        c.argument('max_throughput', type=int, help='Represents maximum throughput container can scale up to.',
                   arg_group='Resource Autoscale Settings')
        c.argument('throughput_policy', action=AddThroughputPolicy, nargs='+', help='Represents throughput policy '
                   'which service must adhere to for auto-upgrade', arg_group='Resource Autoscale Settings Auto '
                   'Upgrade Policy')

    with self.argument_context('cosmosdb mongo-db-resource create-update-mongo-db-collection') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_name', type=str, help='Cosmos DB database name.')
        c.argument('collection_name', type=str, help='Cosmos DB collection name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Request Units per second. For example, "throughput": 10000.',
                   arg_group='Options')
        c.argument('max_throughput', type=int, help='Represents maximum throughput, the resource can scale up to.',
                   arg_group='Options Autoscale Settings')
        c.argument('id_', options_list=['--id'], type=str, help='Name of the Cosmos DB MongoDB collection',
                   arg_group='Resource')
        c.argument('shard_key', action=AddShardKey, nargs='+', help='A key-value pair of shard keys to be applied for '
                   'the request. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...', arg_group='Resource')
        c.argument('indexes', type=validate_file_or_dict, help='List of index keys Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Resource')
        c.argument('analytical_storage_ttl', type=int, help='Analytical TTL.', arg_group='Resource')

    with self.argument_context('cosmosdb mongo-db-resource create-update-mongo-db-database') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_name', type=str, help='Cosmos DB database name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Request Units per second. For example, "throughput": 10000.',
                   arg_group='Options')
        c.argument('max_throughput', type=int, help='Represents maximum throughput, the resource can scale up to.',
                   arg_group='Options Autoscale Settings')
        c.argument('id_', options_list=['--id'], type=str, help='Name of the Cosmos DB MongoDB database',
                   arg_group='Resource')

    with self.argument_context('cosmosdb mongo-db-resource delete-mongo-db-collection') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('collection_name', type=str, help='Cosmos DB collection name.', id_part='child_name_2')

    with self.argument_context('cosmosdb mongo-db-resource delete-mongo-db-database') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')

    with self.argument_context('cosmosdb mongo-db-resource list-mongo-db-collection') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_name', type=str, help='Cosmos DB database name.')

    with self.argument_context('cosmosdb mongo-db-resource list-mongo-db-database') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb mongo-db-resource migrate-mongo-db-collection-to-autoscale') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('collection_name', type=str, help='Cosmos DB collection name.', id_part='child_name_2')

    with self.argument_context('cosmosdb mongo-db-resource migrate-mongo-db-collection-to-manual-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('collection_name', type=str, help='Cosmos DB collection name.', id_part='child_name_2')

    with self.argument_context('cosmosdb mongo-db-resource migrate-mongo-db-database-to-autoscale') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')

    with self.argument_context('cosmosdb mongo-db-resource migrate-mongo-db-database-to-manual-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')

    with self.argument_context('cosmosdb mongo-db-resource show-mongo-db-collection') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('collection_name', type=str, help='Cosmos DB collection name.', id_part='child_name_2')

    with self.argument_context('cosmosdb mongo-db-resource show-mongo-db-collection-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('collection_name', type=str, help='Cosmos DB collection name.', id_part='child_name_2')

    with self.argument_context('cosmosdb mongo-db-resource show-mongo-db-database') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')

    with self.argument_context('cosmosdb mongo-db-resource show-mongo-db-database-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')

    with self.argument_context('cosmosdb mongo-db-resource update-mongo-db-collection-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('collection_name', type=str, help='Cosmos DB collection name.', id_part='child_name_2')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Value of the Cosmos DB resource throughput. Either throughput is '
                   'required or autoscaleSettings is required, but not both.', arg_group='Resource')
        c.argument('max_throughput', type=int, help='Represents maximum throughput container can scale up to.',
                   arg_group='Resource Autoscale Settings')
        c.argument('throughput_policy', action=AddThroughputPolicy, nargs='+', help='Represents throughput policy '
                   'which service must adhere to for auto-upgrade', arg_group='Resource Autoscale Settings Auto '
                   'Upgrade Policy')

    with self.argument_context('cosmosdb mongo-db-resource update-mongo-db-database-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Value of the Cosmos DB resource throughput. Either throughput is '
                   'required or autoscaleSettings is required, but not both.', arg_group='Resource')
        c.argument('max_throughput', type=int, help='Represents maximum throughput container can scale up to.',
                   arg_group='Resource Autoscale Settings')
        c.argument('throughput_policy', action=AddThroughputPolicy, nargs='+', help='Represents throughput policy '
                   'which service must adhere to for auto-upgrade', arg_group='Resource Autoscale Settings Auto '
                   'Upgrade Policy')

    with self.argument_context('cosmosdb table-resource create-update-table') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('table_name', type=str, help='Cosmos DB table name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Request Units per second. For example, "throughput": 10000.',
                   arg_group='Options')
        c.argument('max_throughput', type=int, help='Represents maximum throughput, the resource can scale up to.',
                   arg_group='Options Autoscale Settings')
        c.argument('id_', options_list=['--id'], type=str, help='Name of the Cosmos DB table', arg_group='Resource')

    with self.argument_context('cosmosdb table-resource delete-table') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('table_name', type=str, help='Cosmos DB table name.', id_part='child_name_1')

    with self.argument_context('cosmosdb table-resource list-table') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb table-resource migrate-table-to-autoscale') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('table_name', type=str, help='Cosmos DB table name.', id_part='child_name_1')

    with self.argument_context('cosmosdb table-resource migrate-table-to-manual-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('table_name', type=str, help='Cosmos DB table name.', id_part='child_name_1')

    with self.argument_context('cosmosdb table-resource show-table') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('table_name', type=str, help='Cosmos DB table name.', id_part='child_name_1')

    with self.argument_context('cosmosdb table-resource show-table-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('table_name', type=str, help='Cosmos DB table name.', id_part='child_name_1')

    with self.argument_context('cosmosdb table-resource update-table-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('table_name', type=str, help='Cosmos DB table name.', id_part='child_name_1')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Value of the Cosmos DB resource throughput. Either throughput is '
                   'required or autoscaleSettings is required, but not both.', arg_group='Resource')
        c.argument('max_throughput', type=int, help='Represents maximum throughput container can scale up to.',
                   arg_group='Resource Autoscale Settings')
        c.argument('throughput_policy', action=AddThroughputPolicy, nargs='+', help='Represents throughput policy '
                   'which service must adhere to for auto-upgrade', arg_group='Resource Autoscale Settings Auto '
                   'Upgrade Policy')

    with self.argument_context('cosmosdb cassandra-resource create-update-cassandra-keyspace') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Request Units per second. For example, "throughput": 10000.',
                   arg_group='Options')
        c.argument('max_throughput', type=int, help='Represents maximum throughput, the resource can scale up to.',
                   arg_group='Options Autoscale Settings')
        c.argument('id_', options_list=['--id'], type=str, help='Name of the Cosmos DB Cassandra keyspace',
                   arg_group='Resource')

    with self.argument_context('cosmosdb cassandra-resource create-update-cassandra-table') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.')
        c.argument('table_name', type=str, help='Cosmos DB table name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Request Units per second. For example, "throughput": 10000.',
                   arg_group='Options')
        c.argument('max_throughput', type=int, help='Represents maximum throughput, the resource can scale up to.',
                   arg_group='Options Autoscale Settings')
        c.argument('id_', options_list=['--id'], type=str, help='Name of the Cosmos DB Cassandra table',
                   arg_group='Resource')
        c.argument('default_ttl', type=int, help='Time to live of the Cosmos DB Cassandra table',
                   arg_group='Resource')
        c.argument('analytical_storage_ttl', type=int, help='Analytical TTL.', arg_group='Resource')
        c.argument('columns', action=AddColumns, nargs='+', help='List of Cassandra table columns.',
                   arg_group='Resource Schema')
        c.argument('partition_keys', action=AddPartitionKeys, nargs='+', help='List of partition key.',
                   arg_group='Resource Schema')
        c.argument('cluster_keys', action=AddClusterKeys, nargs='+', help='List of cluster key.', arg_group='Resource '
                   'Schema')

    with self.argument_context('cosmosdb cassandra-resource create-update-cassandra-view') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.')
        c.argument('view_name', type=str, help='Cosmos DB view name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('resource', action=AddCassandraresourcesResource, nargs='+', help='The standard JSON format of a '
                   'Cassandra view')
        c.argument('throughput', type=int, help='Request Units per second. For example, "throughput": 10000.',
                   arg_group='Options')
        c.argument('max_throughput', type=int, help='Represents maximum throughput, the resource can scale up to.',
                   arg_group='Options Autoscale Settings')

    with self.argument_context('cosmosdb cassandra-resource delete-cassandra-keyspace') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')

    with self.argument_context('cosmosdb cassandra-resource delete-cassandra-table') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')
        c.argument('table_name', type=str, help='Cosmos DB table name.', id_part='child_name_2')

    with self.argument_context('cosmosdb cassandra-resource delete-cassandra-view') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')
        c.argument('view_name', type=str, help='Cosmos DB view name.', id_part='child_name_2')

    with self.argument_context('cosmosdb cassandra-resource list-cassandra-keyspace') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb cassandra-resource list-cassandra-table') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.')

    with self.argument_context('cosmosdb cassandra-resource list-cassandra-view') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.')

    with self.argument_context('cosmosdb cassandra-resource migrate-cassandra-keyspace-to-autoscale') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')

    with self.argument_context('cosmosdb cassandra-resource migrate-cassandra-keyspace-to-manual-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')

    with self.argument_context('cosmosdb cassandra-resource migrate-cassandra-table-to-autoscale') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')
        c.argument('table_name', type=str, help='Cosmos DB table name.', id_part='child_name_2')

    with self.argument_context('cosmosdb cassandra-resource migrate-cassandra-table-to-manual-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')
        c.argument('table_name', type=str, help='Cosmos DB table name.', id_part='child_name_2')

    with self.argument_context('cosmosdb cassandra-resource migrate-cassandra-view-to-autoscale') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')
        c.argument('view_name', type=str, help='Cosmos DB view name.', id_part='child_name_2')

    with self.argument_context('cosmosdb cassandra-resource migrate-cassandra-view-to-manual-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')
        c.argument('view_name', type=str, help='Cosmos DB view name.', id_part='child_name_2')

    with self.argument_context('cosmosdb cassandra-resource show-cassandra-keyspace') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')

    with self.argument_context('cosmosdb cassandra-resource show-cassandra-keyspace-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')

    with self.argument_context('cosmosdb cassandra-resource show-cassandra-table') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')
        c.argument('table_name', type=str, help='Cosmos DB table name.', id_part='child_name_2')

    with self.argument_context('cosmosdb cassandra-resource show-cassandra-table-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')
        c.argument('table_name', type=str, help='Cosmos DB table name.', id_part='child_name_2')

    with self.argument_context('cosmosdb cassandra-resource show-cassandra-view') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')
        c.argument('view_name', type=str, help='Cosmos DB view name.', id_part='child_name_2')

    with self.argument_context('cosmosdb cassandra-resource show-cassandra-view-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')
        c.argument('view_name', type=str, help='Cosmos DB view name.', id_part='child_name_2')

    with self.argument_context('cosmosdb cassandra-resource update-cassandra-keyspace-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Value of the Cosmos DB resource throughput. Either throughput is '
                   'required or autoscaleSettings is required, but not both.', arg_group='Resource')
        c.argument('max_throughput', type=int, help='Represents maximum throughput container can scale up to.',
                   arg_group='Resource Autoscale Settings')
        c.argument('throughput_policy', action=AddThroughputPolicy, nargs='+', help='Represents throughput policy '
                   'which service must adhere to for auto-upgrade', arg_group='Resource Autoscale Settings Auto '
                   'Upgrade Policy')

    with self.argument_context('cosmosdb cassandra-resource update-cassandra-table-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')
        c.argument('table_name', type=str, help='Cosmos DB table name.', id_part='child_name_2')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Value of the Cosmos DB resource throughput. Either throughput is '
                   'required or autoscaleSettings is required, but not both.', arg_group='Resource')
        c.argument('max_throughput', type=int, help='Represents maximum throughput container can scale up to.',
                   arg_group='Resource Autoscale Settings')
        c.argument('throughput_policy', action=AddThroughputPolicy, nargs='+', help='Represents throughput policy '
                   'which service must adhere to for auto-upgrade', arg_group='Resource Autoscale Settings Auto '
                   'Upgrade Policy')

    with self.argument_context('cosmosdb cassandra-resource update-cassandra-view-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('keyspace_name', type=str, help='Cosmos DB keyspace name.', id_part='child_name_1')
        c.argument('view_name', type=str, help='Cosmos DB view name.', id_part='child_name_2')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Value of the Cosmos DB resource throughput. Either throughput is '
                   'required or autoscaleSettings is required, but not both.', arg_group='Resource')
        c.argument('max_throughput', type=int, help='Represents maximum throughput container can scale up to.',
                   arg_group='Resource Autoscale Settings')
        c.argument('throughput_policy', action=AddThroughputPolicy, nargs='+', help='Represents throughput policy '
                   'which service must adhere to for auto-upgrade', arg_group='Resource Autoscale Settings Auto '
                   'Upgrade Policy')

    with self.argument_context('cosmosdb gremlin-resource create-update-gremlin-database') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_name', type=str, help='Cosmos DB database name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Request Units per second. For example, "throughput": 10000.',
                   arg_group='Options')
        c.argument('max_throughput', type=int, help='Represents maximum throughput, the resource can scale up to.',
                   arg_group='Options Autoscale Settings')
        c.argument('id_', options_list=['--id'], type=str, help='Name of the Cosmos DB Gremlin database',
                   arg_group='Resource')

    with self.argument_context('cosmosdb gremlin-resource create-update-gremlin-graph') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_name', type=str, help='Cosmos DB database name.')
        c.argument('graph_name', type=str, help='Cosmos DB graph name.')
        c.argument('create_update_gremlin_graph_parameters', type=validate_file_or_dict, help='The parameters to '
                   'provide for the current Gremlin graph. Expected value: json-string/json-file/@json-file.')

    with self.argument_context('cosmosdb gremlin-resource delete-gremlin-database') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')

    with self.argument_context('cosmosdb gremlin-resource delete-gremlin-graph') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('graph_name', type=str, help='Cosmos DB graph name.', id_part='child_name_2')

    with self.argument_context('cosmosdb gremlin-resource list-gremlin-database') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb gremlin-resource list-gremlin-graph') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('database_name', type=str, help='Cosmos DB database name.')

    with self.argument_context('cosmosdb gremlin-resource migrate-gremlin-database-to-autoscale') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')

    with self.argument_context('cosmosdb gremlin-resource migrate-gremlin-database-to-manual-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')

    with self.argument_context('cosmosdb gremlin-resource migrate-gremlin-graph-to-autoscale') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('graph_name', type=str, help='Cosmos DB graph name.', id_part='child_name_2')

    with self.argument_context('cosmosdb gremlin-resource migrate-gremlin-graph-to-manual-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('graph_name', type=str, help='Cosmos DB graph name.', id_part='child_name_2')

    with self.argument_context('cosmosdb gremlin-resource show-gremlin-database') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')

    with self.argument_context('cosmosdb gremlin-resource show-gremlin-database-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')

    with self.argument_context('cosmosdb gremlin-resource show-gremlin-graph') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('graph_name', type=str, help='Cosmos DB graph name.', id_part='child_name_2')

    with self.argument_context('cosmosdb gremlin-resource show-gremlin-graph-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('graph_name', type=str, help='Cosmos DB graph name.', id_part='child_name_2')

    with self.argument_context('cosmosdb gremlin-resource update-gremlin-database-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Value of the Cosmos DB resource throughput. Either throughput is '
                   'required or autoscaleSettings is required, but not both.', arg_group='Resource')
        c.argument('max_throughput', type=int, help='Represents maximum throughput container can scale up to.',
                   arg_group='Resource Autoscale Settings')
        c.argument('throughput_policy', action=AddThroughputPolicy, nargs='+', help='Represents throughput policy '
                   'which service must adhere to for auto-upgrade', arg_group='Resource Autoscale Settings Auto '
                   'Upgrade Policy')

    with self.argument_context('cosmosdb gremlin-resource update-gremlin-graph-throughput') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('database_name', type=str, help='Cosmos DB database name.', id_part='child_name_1')
        c.argument('graph_name', type=str, help='Cosmos DB graph name.', id_part='child_name_2')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('throughput', type=int, help='Value of the Cosmos DB resource throughput. Either throughput is '
                   'required or autoscaleSettings is required, but not both.', arg_group='Resource')
        c.argument('max_throughput', type=int, help='Represents maximum throughput container can scale up to.',
                   arg_group='Resource Autoscale Settings')
        c.argument('throughput_policy', action=AddThroughputPolicy, nargs='+', help='Represents throughput policy '
                   'which service must adhere to for auto-upgrade', arg_group='Resource Autoscale Settings Auto '
                   'Upgrade Policy')

    with self.argument_context('cosmosdb location-get') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='name')

    with self.argument_context('cosmosdb cassandra-cluster list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('cosmosdb cassandra-cluster show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='Managed Cassandra cluster name.', id_part='name')

    with self.argument_context('cosmosdb cassandra-cluster update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='Managed Cassandra cluster name.', id_part='name')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('provisioning_state', arg_type=get_enum_type(['Creating', 'Updating', 'Deleting', 'Succeeded',
                                                                 'Failed', 'Canceled']), help='The status of the '
                   'resource at the time the operation was called.')
        c.argument('restore_from_backup_id', type=str, help='To create an empty cluster, omit this field or set it to '
                   'null. To restore a backup into a new cluster, set this field to the resource id of the backup.')
        c.argument('delegated_management_subnet_id', type=str, help='Resource id of a subnet that this cluster\'s '
                   'management service should have its network interface attached to. The subnet must be routable to '
                   'all subnets that will be delegated to data centers. The resource id must be of the form '
                   '\'/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virt'
                   'ualNetworks/<virtual network>/subnets/<subnet>\'')
        c.argument('cassandra_version', type=str, help='Which version of Cassandra should this cluster converge to '
                   'running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version.')
        c.argument('cluster_name_override', type=str, help='If you need to set the clusterName property in '
                   'cassandra.yaml to something besides the resource name of the cluster, set the value to use on this '
                   'property.')
        c.argument('authentication_method', arg_type=get_enum_type(['None', 'Cassandra']), help='Which authentication '
                   'method Cassandra should use to authenticate clients. \'None\' turns off authentication, so should '
                   'not be used except in emergencies. \'Cassandra\' is the default password based authentication. The '
                   'default is \'Cassandra\'.')
        c.argument('initial_cassandra_admin_password', type=str, help='Initial password for clients connecting as '
                   'admin to the cluster. Should be changed after cluster creation. Returns null on GET. This field '
                   'only applies when the authenticationMethod field is \'Cassandra\'.')
        c.argument('hours_between_backups', type=int, help='Number of hours to wait between taking a backup of the '
                   'cluster. To disable backups, set this property to 0.')
        c.argument('repair_enabled', arg_type=get_three_state_flag(), help='Should automatic repairs run on this '
                   'cluster? If omitted, this is true, and should stay true unless you are running a hybrid cluster '
                   'where you are already doing your own repairs.')
        c.argument('client_certificates', action=AddClientCertificates, nargs='+', help='List of TLS certificates used '
                   'to authorize clients connecting to the cluster. All connections are TLS encrypted whether '
                   'clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster '
                   'will reject all connections not bearing a TLS client certificate that can be validated from one or '
                   'more of the public certificates in this property.')
        c.argument('external_gossip_certificates', action=AddExternalGossipCertificates, nargs='+', help='List of TLS '
                   'certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all '
                   'nodes in unmanaged data centers must be verifiable using one of the certificates provided in this '
                   'property.')
        c.argument('external_seed_nodes', action=AddExternalSeedNodes, nargs='+', help='List of IP addresses of seed '
                   'nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes.')
        c.argument('ip_address', type=str, help='IP address of this seed node.', arg_group='Prometheus Endpoint')

    with self.argument_context('cosmosdb cassandra-cluster delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='Managed Cassandra cluster name.', id_part='name')

    with self.argument_context('cosmosdb cassandra-cluster create-update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='Managed Cassandra cluster name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'SystemAssigned,UserAssigned', 'None']),
                   help='The type of identity used for the resource. The type \'SystemAssigned,UserAssigned\' includes '
                   'both an implicitly created identity and a set of user assigned identities. The type \'None\' will '
                   'remove any identities from the service.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with resource. The user identity dictionary key references will be ARM resource ids in '
                   'the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.'
                   'ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/json-file/@json-file.', arg_group='Identity')
        c.argument('provisioning_state', arg_type=get_enum_type(['Creating', 'Updating', 'Deleting', 'Succeeded',
                                                                 'Failed', 'Canceled']), help='The status of the '
                   'resource at the time the operation was called.')
        c.argument('restore_from_backup_id', type=str, help='To create an empty cluster, omit this field or set it to '
                   'null. To restore a backup into a new cluster, set this field to the resource id of the backup.')
        c.argument('delegated_management_subnet_id', type=str, help='Resource id of a subnet that this cluster\'s '
                   'management service should have its network interface attached to. The subnet must be routable to '
                   'all subnets that will be delegated to data centers. The resource id must be of the form '
                   '\'/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virt'
                   'ualNetworks/<virtual network>/subnets/<subnet>\'')
        c.argument('cassandra_version', type=str, help='Which version of Cassandra should this cluster converge to '
                   'running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version.')
        c.argument('cluster_name_override', type=str, help='If you need to set the clusterName property in '
                   'cassandra.yaml to something besides the resource name of the cluster, set the value to use on this '
                   'property.')
        c.argument('authentication_method', arg_type=get_enum_type(['None', 'Cassandra']), help='Which authentication '
                   'method Cassandra should use to authenticate clients. \'None\' turns off authentication, so should '
                   'not be used except in emergencies. \'Cassandra\' is the default password based authentication. The '
                   'default is \'Cassandra\'.')
        c.argument('initial_cassandra_admin_password', type=str, help='Initial password for clients connecting as '
                   'admin to the cluster. Should be changed after cluster creation. Returns null on GET. This field '
                   'only applies when the authenticationMethod field is \'Cassandra\'.')
        c.argument('hours_between_backups', type=int, help='Number of hours to wait between taking a backup of the '
                   'cluster. To disable backups, set this property to 0.')
        c.argument('repair_enabled', arg_type=get_three_state_flag(), help='Should automatic repairs run on this '
                   'cluster? If omitted, this is true, and should stay true unless you are running a hybrid cluster '
                   'where you are already doing your own repairs.')
        c.argument('client_certificates', action=AddClientCertificates, nargs='+', help='List of TLS certificates used '
                   'to authorize clients connecting to the cluster. All connections are TLS encrypted whether '
                   'clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster '
                   'will reject all connections not bearing a TLS client certificate that can be validated from one or '
                   'more of the public certificates in this property.')
        c.argument('external_gossip_certificates', action=AddExternalGossipCertificates, nargs='+', help='List of TLS '
                   'certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all '
                   'nodes in unmanaged data centers must be verifiable using one of the certificates provided in this '
                   'property.')
        c.argument('external_seed_nodes', action=AddExternalSeedNodes, nargs='+', help='List of IP addresses of seed '
                   'nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes.')
        c.argument('ip_address', type=str, help='IP address of this seed node.', arg_group='Prometheus Endpoint')

    with self.argument_context('cosmosdb cassandra-cluster fetch-node-status') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='Managed Cassandra cluster name.', id_part='name')

    with self.argument_context('cosmosdb cassandra-cluster list-backup') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='Managed Cassandra cluster name.')

    with self.argument_context('cosmosdb cassandra-cluster request-repair') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='Managed Cassandra cluster name.', id_part='name')
        c.argument('keyspace', type=str, help='The name of the keyspace that repair should be run on.')
        c.argument('tables', nargs='+', help='List of tables in the keyspace to repair. If omitted, repair all tables '
                   'in the keyspace.')

    with self.argument_context('cosmosdb cassandra-cluster show-backup') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='Managed Cassandra cluster name.', id_part='name')
        c.argument('backup_id', type=str, help='Id of a restorable backup of a Cassandra cluster.',
                   id_part='child_name_1')

    with self.argument_context('cosmosdb cassandra-cluster wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='Managed Cassandra cluster name.', id_part='name')

    with self.argument_context('cosmosdb cassandra-data-center list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='Managed Cassandra cluster name.')

    with self.argument_context('cosmosdb cassandra-data-center show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='Managed Cassandra cluster name.', id_part='name')
        c.argument('data_center_name', type=str, help='Data center name in a managed Cassandra cluster.',
                   id_part='child_name_1')

    with self.argument_context('cosmosdb cassandra-data-center update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='Managed Cassandra cluster name.', id_part='name')
        c.argument('data_center_name', type=str, help='Data center name in a managed Cassandra cluster.',
                   id_part='child_name_1')
        c.argument('provisioning_state', arg_type=get_enum_type(['Creating', 'Updating', 'Deleting', 'Succeeded',
                                                                 'Failed', 'Canceled']), help='The status of the '
                   'resource at the time the operation was called.')
        c.argument('data_center_location', type=str, help='The region this data center should be created in.')
        c.argument('delegated_subnet_id', type=str, help='Resource id of a subnet the nodes in this data center should '
                   'have their network interfaces connected to. The subnet must be in the same region specified in '
                   '\'dataCenterLocation\' and must be able to route to the subnet specified in the cluster\'s '
                   '\'delegatedManagementSubnetId\' property. This resource id will be of the form '
                   '\'/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virt'
                   'ualNetworks/<virtual network>/subnets/<subnet>\'.')
        c.argument('node_count', type=int, help='The number of nodes the data center should have. This is the desired '
                   'number. After it is set, it may take some time for the data center to be scaled to match. To '
                   'monitor the number of nodes and their status, use the fetchNodeStatus method on the cluster.')
        c.argument('base64_encoded_cassandra_yaml_fragment', type=str, help='A fragment of a cassandra.yaml '
                   'configuration file to be included in the cassandra.yaml for all nodes in this data center. The '
                   'fragment should be Base64 encoded, and only a subset of keys are allowed.')

    with self.argument_context('cosmosdb cassandra-data-center delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='Managed Cassandra cluster name.', id_part='name')
        c.argument('data_center_name', type=str, help='Data center name in a managed Cassandra cluster.',
                   id_part='child_name_1')

    with self.argument_context('cosmosdb cassandra-data-center create-update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='Managed Cassandra cluster name.')
        c.argument('data_center_name', type=str, help='Data center name in a managed Cassandra cluster.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Creating', 'Updating', 'Deleting', 'Succeeded',
                                                                 'Failed', 'Canceled']), help='The status of the '
                   'resource at the time the operation was called.')
        c.argument('data_center_location', type=str, help='The region this data center should be created in.')
        c.argument('delegated_subnet_id', type=str, help='Resource id of a subnet the nodes in this data center should '
                   'have their network interfaces connected to. The subnet must be in the same region specified in '
                   '\'dataCenterLocation\' and must be able to route to the subnet specified in the cluster\'s '
                   '\'delegatedManagementSubnetId\' property. This resource id will be of the form '
                   '\'/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virt'
                   'ualNetworks/<virtual network>/subnets/<subnet>\'.')
        c.argument('node_count', type=int, help='The number of nodes the data center should have. This is the desired '
                   'number. After it is set, it may take some time for the data center to be scaled to match. To '
                   'monitor the number of nodes and their status, use the fetchNodeStatus method on the cluster.')
        c.argument('base64_encoded_cassandra_yaml_fragment', type=str, help='A fragment of a cassandra.yaml '
                   'configuration file to be included in the cassandra.yaml for all nodes in this data center. The '
                   'fragment should be Base64 encoded, and only a subset of keys are allowed.')

    with self.argument_context('cosmosdb cassandra-data-center wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', type=str, help='Managed Cassandra cluster name.', id_part='name')
        c.argument('data_center_name', type=str, help='Data center name in a managed Cassandra cluster.',
                   id_part='child_name_1')

    with self.argument_context('cosmosdb notebook-workspace list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb notebook-workspace show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')

    with self.argument_context('cosmosdb notebook-workspace create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb notebook-workspace update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')

    with self.argument_context('cosmosdb notebook-workspace delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')

    with self.argument_context('cosmosdb notebook-workspace list-connection-info') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb notebook-workspace regenerate-auth-token') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')

    with self.argument_context('cosmosdb notebook-workspace start') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')

    with self.argument_context('cosmosdb notebook-workspace wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')

    with self.argument_context('cosmosdb private-endpoint-connection list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb private-endpoint-connection show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n', '--private-endpoint-connection-nam'
                                                                     'e'], type=str, help='The name of the private '
                   'endpoint connection.', id_part='child_name_1')

    with self.argument_context('cosmosdb private-endpoint-connection create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n', '--private-endpoint-connection-nam'
                                                                     'e'], type=str, help='The name of the private '
                   'endpoint connection.')
        c.argument('private_link_service_connection_state', action=AddPrivateLinkServiceConnectionState, nargs='+',
                   help='Connection State of the Private Endpoint Connection.')
        c.argument('group_id', type=str, help='Group id of the private endpoint.')
        c.argument('provisioning_state', type=str, help='Provisioning state of the private endpoint.')
        c.argument('id_', options_list=['--id'], type=str, help='Resource id of the private endpoint.',
                   arg_group='Private Endpoint')

    with self.argument_context('cosmosdb private-endpoint-connection update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n', '--private-endpoint-connection-nam'
                                                                     'e'], type=str, help='The name of the private '
                   'endpoint connection.', id_part='child_name_1')
        c.argument('private_link_service_connection_state', action=AddPrivateLinkServiceConnectionState, nargs='+',
                   help='Connection State of the Private Endpoint Connection.')
        c.argument('group_id', type=str, help='Group id of the private endpoint.')
        c.argument('provisioning_state', type=str, help='Provisioning state of the private endpoint.')
        c.argument('id_', options_list=['--id'], type=str, help='Resource id of the private endpoint.',
                   arg_group='Private Endpoint')
        c.ignore('parameters')

    with self.argument_context('cosmosdb private-endpoint-connection delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n', '--private-endpoint-connection-nam'
                                                                     'e'], type=str, help='The name of the private '
                   'endpoint connection.', id_part='child_name_1')

    with self.argument_context('cosmosdb private-endpoint-connection wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n', '--private-endpoint-connection-nam'
                                                                     'e'], type=str, help='The name of the private '
                   'endpoint connection.', id_part='child_name_1')

    with self.argument_context('cosmosdb private-link-resource list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb private-link-resource show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('group_name', type=str, help='The name of the private link resource.', id_part='child_name_1')

    with self.argument_context('cosmosdb restorable-database-account list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))

    with self.argument_context('cosmosdb restorable-database-account show') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='name')
        c.argument('instance_id', type=str, help='The instanceId GUID of a restorable database account.',
                   id_part='child_name_1')

    with self.argument_context('cosmosdb restorable-sql-database list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('instance_id', type=str, help='The instanceId GUID of a restorable database account.')

    with self.argument_context('cosmosdb restorable-sql-container list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('instance_id', type=str, help='The instanceId GUID of a restorable database account.')
        c.argument('restorable_sql_database_rid', type=str, help='The resource ID of the SQL database.')
        c.argument('start_time', type=str, help='The snapshot create timestamp after which snapshots need to be '
                   'listed.')
        c.argument('end_time', type=str,
                   help='The snapshot create timestamp before which snapshots need to be listed.')

    with self.argument_context('cosmosdb restorable-sql-resource list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('instance_id', type=str, help='The instanceId GUID of a restorable database account.')
        c.argument('restore_location', type=str, help='The location where the restorable resources are located.')
        c.argument('restore_timestamp_in_utc', type=str, help='The timestamp when the restorable resources existed.')

    with self.argument_context('cosmosdb restorable-mongodb-database list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('instance_id', type=str, help='The instanceId GUID of a restorable database account.')

    with self.argument_context('cosmosdb restorable-mongodb-collection list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('instance_id', type=str, help='The instanceId GUID of a restorable database account.')
        c.argument('restorable_mongodb_database_rid', type=str, help='The resource ID of the MongoDB database.')

    with self.argument_context('cosmosdb restorable-mongodb-resource list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('instance_id', type=str, help='The instanceId GUID of a restorable database account.')
        c.argument('restore_location', type=str, help='The location where the restorable resources are located.')
        c.argument('restore_timestamp_in_utc', type=str, help='The timestamp when the restorable resources existed.')

    with self.argument_context('cosmosdb service list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb service show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('service_name', options_list=['--name', '-n', '--service-name'], type=str, help='Cosmos DB service '
                   'name.', id_part='child_name_1')

    with self.argument_context('cosmosdb service create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('service_name', options_list=['--name', '-n', '--service-name'], type=str, help='Cosmos DB service '
                   'name.')
        c.argument('instance_size', arg_type=get_enum_type(['Cosmos.D4s', 'Cosmos.D8s', 'Cosmos.D16s']),
                   help='Instance type for the service.')
        c.argument('instance_count', type=int, help='Instance count for the service.')
        c.argument('service_type', arg_type=get_enum_type(['SqlDedicatedGateway', 'DataTransferService',
                                                           'GraphAPICompute']), help='ServiceType for the service.')

    with self.argument_context('cosmosdb service delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('service_name', options_list=['--name', '-n', '--service-name'], type=str, help='Cosmos DB service '
                   'name.', id_part='child_name_1')

    with self.argument_context('cosmosdb service wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('service_name', options_list=['--name', '-n', '--service-name'], type=str, help='Cosmos DB service '
                   'name.', id_part='child_name_1')

    with self.argument_context('cosmosdb data-transfer-job list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')

    with self.argument_context('cosmosdb data-transfer-job show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.', id_part='name')
        c.argument('job_name', type=str, help='Name of the Data Transfer Job', id_part='child_name_1')

    with self.argument_context('cosmosdb data-transfer-job create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Cosmos DB database account name.')
        c.argument('job_name', type=str, help='Name of the Data Transfer Job')
        c.argument('job_create_parameters', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/json-file/@json-file.')
