# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .arm_proxy_resource import ARMProxyResource


class SqlRoleDefinitionGetResults(ARMProxyResource):
    """An Azure Cosmos DB SQL Role Definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The unique resource identifier of the database account.
    :vartype id: str
    :ivar name: The name of the database account.
    :vartype name: str
    :ivar type: The type of Azure resource.
    :vartype type: str
    :param role_name: A user-friendly name for the Role Definition. Must be
     unique for the database account.
    :type role_name: str
    :param sql_role_definition_get_results_type: Indicates whether the Role
     Definition was built-in or user created. Possible values include:
     'BuiltInRole', 'CustomRole'
    :type sql_role_definition_get_results_type: str or
     ~azure.mgmt.cosmosdb.models.RoleDefinitionType
    :param assignable_scopes: A set of fully qualified Scopes at or below
     which Role Assignments may be created using this Role Definition. This
     will allow application of this Role Definition on the entire database
     account or any underlying Database / Collection. Must have at least one
     element. Scopes higher than Database account are not enforceable as
     assignable Scopes. Note that resources referenced in assignable Scopes
     need not exist.
    :type assignable_scopes: list[str]
    :param permissions: The set of operations allowed through this Role
     Definition.
    :type permissions: list[~azure.mgmt.cosmosdb.models.Permission]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'role_name': {'key': 'properties.roleName', 'type': 'str'},
        'sql_role_definition_get_results_type': {'key': 'properties.type', 'type': 'RoleDefinitionType'},
        'assignable_scopes': {'key': 'properties.assignableScopes', 'type': '[str]'},
        'permissions': {'key': 'properties.permissions', 'type': '[Permission]'},
    }

    def __init__(self, **kwargs):
        super(SqlRoleDefinitionGetResults, self).__init__(**kwargs)
        self.role_name = kwargs.get('role_name', None)
        self.sql_role_definition_get_results_type = kwargs.get('sql_role_definition_get_results_type', None)
        self.assignable_scopes = kwargs.get('assignable_scopes', None)
        self.permissions = kwargs.get('permissions', None)
