# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .database_account_create_update_properties_py3 import DatabaseAccountCreateUpdateProperties


class DefaultRequestDatabaseAccountCreateUpdateProperties(DatabaseAccountCreateUpdateProperties):
    """Properties for non-restore Azure Cosmos DB database account requests.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param consistency_policy: The consistency policy for the Cosmos DB
     account.
    :type consistency_policy: ~azure.mgmt.cosmosdb.models.ConsistencyPolicy
    :param locations: Required. An array that contains the georeplication
     locations enabled for the Cosmos DB account.
    :type locations: list[~azure.mgmt.cosmosdb.models.Location]
    :ivar database_account_offer_type: Required. The offer type for the
     database. Default value: "Standard" .
    :vartype database_account_offer_type: str
    :param ip_rules: List of IpRules.
    :type ip_rules: list[~azure.mgmt.cosmosdb.models.IpAddressOrRange]
    :param is_virtual_network_filter_enabled: Flag to indicate whether to
     enable/disable Virtual Network ACL rules.
    :type is_virtual_network_filter_enabled: bool
    :param enable_automatic_failover: Enables automatic failover of the write
     region in the rare event that the region is unavailable due to an outage.
     Automatic failover will result in a new write region for the account and
     is chosen based on the failover priorities configured for the account.
    :type enable_automatic_failover: bool
    :param capabilities: List of Cosmos DB capabilities for the account
    :type capabilities: list[~azure.mgmt.cosmosdb.models.Capability]
    :param virtual_network_rules: List of Virtual Network ACL rules configured
     for the Cosmos DB account.
    :type virtual_network_rules:
     list[~azure.mgmt.cosmosdb.models.VirtualNetworkRule]
    :param enable_multiple_write_locations: Enables the account to write in
     multiple locations
    :type enable_multiple_write_locations: bool
    :param enable_cassandra_connector: Enables the cassandra connector on the
     Cosmos DB C* account
    :type enable_cassandra_connector: bool
    :param connector_offer: The cassandra connector offer type for the Cosmos
     DB database C* account. Possible values include: 'Small'
    :type connector_offer: str or ~azure.mgmt.cosmosdb.models.ConnectorOffer
    :param disable_key_based_metadata_write_access: Disable write operations
     on metadata resources (databases, containers, throughput) via account keys
    :type disable_key_based_metadata_write_access: bool
    :param key_vault_key_uri: The URI of the key vault
    :type key_vault_key_uri: str
    :param public_network_access: Whether requests from Public Network are
     allowed. Possible values include: 'Enabled', 'Disabled'
    :type public_network_access: str or
     ~azure.mgmt.cosmosdb.models.PublicNetworkAccess
    :param enable_free_tier: Flag to indicate whether Free Tier is enabled.
    :type enable_free_tier: bool
    :param api_properties: API specific properties. Currently, supported only
     for MongoDB API.
    :type api_properties: ~azure.mgmt.cosmosdb.models.ApiProperties
    :param enable_analytical_storage: Flag to indicate whether to enable
     storage analytics.
    :type enable_analytical_storage: bool
    :param backup_policy: The object representing the policy for taking
     backups on an account.
    :type backup_policy: ~azure.mgmt.cosmosdb.models.BackupPolicy
    :param cors: The CORS policy for the Cosmos DB database account.
    :type cors: list[~azure.mgmt.cosmosdb.models.CorsPolicy]
    :param create_mode: Required. Constant filled by server.
    :type create_mode: str
    """

    _validation = {
        'locations': {'required': True},
        'database_account_offer_type': {'required': True, 'constant': True},
        'create_mode': {'required': True},
    }

    _attribute_map = {
        'consistency_policy': {'key': 'consistencyPolicy', 'type': 'ConsistencyPolicy'},
        'locations': {'key': 'locations', 'type': '[Location]'},
        'database_account_offer_type': {'key': 'databaseAccountOfferType', 'type': 'str'},
        'ip_rules': {'key': 'ipRules', 'type': '[IpAddressOrRange]'},
        'is_virtual_network_filter_enabled': {'key': 'isVirtualNetworkFilterEnabled', 'type': 'bool'},
        'enable_automatic_failover': {'key': 'enableAutomaticFailover', 'type': 'bool'},
        'capabilities': {'key': 'capabilities', 'type': '[Capability]'},
        'virtual_network_rules': {'key': 'virtualNetworkRules', 'type': '[VirtualNetworkRule]'},
        'enable_multiple_write_locations': {'key': 'enableMultipleWriteLocations', 'type': 'bool'},
        'enable_cassandra_connector': {'key': 'enableCassandraConnector', 'type': 'bool'},
        'connector_offer': {'key': 'connectorOffer', 'type': 'str'},
        'disable_key_based_metadata_write_access': {'key': 'disableKeyBasedMetadataWriteAccess', 'type': 'bool'},
        'key_vault_key_uri': {'key': 'keyVaultKeyUri', 'type': 'str'},
        'public_network_access': {'key': 'publicNetworkAccess', 'type': 'str'},
        'enable_free_tier': {'key': 'enableFreeTier', 'type': 'bool'},
        'api_properties': {'key': 'apiProperties', 'type': 'ApiProperties'},
        'enable_analytical_storage': {'key': 'enableAnalyticalStorage', 'type': 'bool'},
        'backup_policy': {'key': 'backupPolicy', 'type': 'BackupPolicy'},
        'cors': {'key': 'cors', 'type': '[CorsPolicy]'},
        'create_mode': {'key': 'createMode', 'type': 'str'},
    }

    def __init__(self, *, locations, consistency_policy=None, ip_rules=None, is_virtual_network_filter_enabled: bool=None, enable_automatic_failover: bool=None, capabilities=None, virtual_network_rules=None, enable_multiple_write_locations: bool=None, enable_cassandra_connector: bool=None, connector_offer=None, disable_key_based_metadata_write_access: bool=None, key_vault_key_uri: str=None, public_network_access=None, enable_free_tier: bool=None, api_properties=None, enable_analytical_storage: bool=None, backup_policy=None, cors=None, **kwargs) -> None:
        super(DefaultRequestDatabaseAccountCreateUpdateProperties, self).__init__(consistency_policy=consistency_policy, locations=locations, ip_rules=ip_rules, is_virtual_network_filter_enabled=is_virtual_network_filter_enabled, enable_automatic_failover=enable_automatic_failover, capabilities=capabilities, virtual_network_rules=virtual_network_rules, enable_multiple_write_locations=enable_multiple_write_locations, enable_cassandra_connector=enable_cassandra_connector, connector_offer=connector_offer, disable_key_based_metadata_write_access=disable_key_based_metadata_write_access, key_vault_key_uri=key_vault_key_uri, public_network_access=public_network_access, enable_free_tier=enable_free_tier, api_properties=api_properties, enable_analytical_storage=enable_analytical_storage, backup_policy=backup_policy, cors=cors, **kwargs)
        self.create_mode = 'Default'
