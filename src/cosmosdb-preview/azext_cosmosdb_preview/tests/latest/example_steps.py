# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /CassandraClusters/put/CosmosDBManagedCassandraClusterCreate
@try_manual
def step_cassandra_cluster_create_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-cluster create-update '
             '--location "West US" '
             '--authentication-method "Cassandra" '
             '--cassandra-version "3.11" '
             '--client-certificates pem="-----BEGIN CERTIFICATE-----\\n...Base64 encoded certificate...\\n-----END '
             'CERTIFICATE-----" '
             '--cluster-name-override "ClusterNameIllegalForAzureResource" '
             '--delegated-management-subnet-id "/subscriptions/{subscription_id}/resourceGroups/{rg_6}/providers/Micros'
             'oft.Network/virtualNetworks/{vn_2}/subnets/{subnets_2}" '
             '--external-gossip-certificates pem="-----BEGIN CERTIFICATE-----\\n...Base64 encoded '
             'certificate...\\n-----END CERTIFICATE-----" '
             '--external-seed-nodes ip-address="10.52.221.2" '
             '--external-seed-nodes ip-address="10.52.221.3" '
             '--external-seed-nodes ip-address="10.52.221.4" '
             '--hours-between-backups 24 '
             '--initial-cassandra-admin-password "mypassword" '
             '--cluster-name "cassandra-prod" '
             '--resource-group "{rg_5}"',
             checks=checks)


# EXAMPLE: /CassandraClusters/get/CosmosDBManagedCassandraBackup
@try_manual
def step_cassandra_cluster_show_backup(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-cluster show-backup '
             '--backup-id "1611250348" '
             '--cluster-name "cassandra-prod" '
             '--resource-group "{rg_5}"',
             checks=checks)


# EXAMPLE: /CassandraClusters/get/CosmosDBManagedCassandraBackupsList
@try_manual
def step_cassandra_cluster_list_backup(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-cluster list-backup '
             '--cluster-name "cassandra-prod" '
             '--resource-group "{rg_5}"',
             checks=checks)


# EXAMPLE: /CassandraClusters/get/CosmosDBManagedCassandraClusterGet
@try_manual
def step_cassandra_cluster_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-cluster show '
             '--cluster-name "cassandra-prod" '
             '--resource-group "{rg_5}"',
             checks=checks)


# EXAMPLE: /CassandraClusters/get/CosmosDBManagedCassandraClusterListByResourceGroup
@try_manual
def step_cassandra_cluster_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-cluster list '
             '--resource-group "{rg_5}"',
             checks=checks)


# EXAMPLE: /CassandraClusters/get/CosmosDBManagedCassandraClusterListBySubscription
@try_manual
def step_cassandra_cluster_list2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-cluster list '
             '-g ""',
             checks=checks)


# EXAMPLE: /CassandraClusters/patch/CosmosDBManagedCassandraClusterPatch
@try_manual
def step_cassandra_cluster_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-cluster update '
             '--authentication-method "None" '
             '--external-gossip-certificates pem="-----BEGIN CERTIFICATE-----\\n...Base64 encoded '
             'certificate...\\n-----END CERTIFICATE-----" '
             '--external-seed-nodes ip-address="10.52.221.2" '
             '--external-seed-nodes ip-address="10.52.221.3" '
             '--external-seed-nodes ip-address="10.52.221.4" '
             '--hours-between-backups 12 '
             '--tags owner="mike" '
             '--cluster-name "cassandra-prod" '
             '--resource-group "{rg_5}"',
             checks=checks)


# EXAMPLE: /CassandraClusters/post/CosmosDBManagedCassandraClusterFetchNodeStatus
@try_manual
def step_cassandra_cluster_fetch_node_status(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-cluster fetch-node-status '
             '--cluster-name "cassandra-prod" '
             '--resource-group "{rg_5}"',
             checks=checks)


# EXAMPLE: /CassandraClusters/post/CosmosDBManagedCassandraRepair
@try_manual
def step_cassandra_cluster_request_repair(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-cluster request-repair '
             '--keyspace "my-keyspace" '
             '--tables "table1" "table42" '
             '--cluster-name "cassandra-prod" '
             '--resource-group "{rg_5}"',
             checks=checks)


# EXAMPLE: /CassandraClusters/delete/CosmosDBManagedCassandraClusterDelete
@try_manual
def step_cassandra_cluster_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-cluster delete -y '
             '--cluster-name "cassandra-prod" '
             '--resource-group "{rg_5}"',
             checks=checks)


# EXAMPLE: /CassandraDataCenters/put/CosmosDBManagedCassandraDataCenterCreate
@try_manual
def step_cassandra_data_center_create_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-data-center create-update '
             '--base64-encoded-cassandra-yaml-fragment "Y29tcGFjdGlvbl90aHJvdWdocHV0X21iX3Blcl9zZWM6IDMyCmNvbXBhY3Rpb25'
             'fbGFyZ2VfcGFydGl0aW9uX3dhcm5pbmdfdGhyZXNob2xkX21iOiAxMDA=" '
             '--data-center-location "West US 2" '
             '--delegated-subnet-id "/subscriptions/{subscription_id}/resourceGroups/{rg_6}/providers/Microsoft.Network'
             '/virtualNetworks/{vn_2}/subnets/{subnets_3}" '
             '--node-count 9 '
             '--cluster-name "cassandra-prod" '
             '--data-center-name "dc1" '
             '--resource-group "{rg_5}"',
             checks=checks)


# EXAMPLE: /CassandraDataCenters/get/CosmosDBManagedCassandraDataCenterGet
@try_manual
def step_cassandra_data_center_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-data-center show '
             '--cluster-name "cassandra-prod" '
             '--data-center-name "dc1" '
             '--resource-group "{rg_5}"',
             checks=checks)


# EXAMPLE: /CassandraDataCenters/get/CosmosDBManagedCassandraDataCenterList
@try_manual
def step_cassandra_data_center_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-data-center list '
             '--cluster-name "cassandra-prod" '
             '--resource-group "{rg_5}"',
             checks=checks)


# EXAMPLE: /CassandraDataCenters/patch/CosmosDBManagedCassandraDataCenterUpdate
@try_manual
def step_cassandra_data_center_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-data-center update '
             '--base64-encoded-cassandra-yaml-fragment "Y29tcGFjdGlvbl90aHJvdWdocHV0X21iX3Blcl9zZWM6IDMyCmNvbXBhY3Rpb25'
             'fbGFyZ2VfcGFydGl0aW9uX3dhcm5pbmdfdGhyZXNob2xkX21iOiAxMDA=" '
             '--data-center-location "West US 2" '
             '--delegated-subnet-id "/subscriptions/{subscription_id}/resourceGroups/{rg_6}/providers/Microsoft.Network'
             '/virtualNetworks/{vn_2}/subnets/{subnets_3}" '
             '--node-count 9 '
             '--cluster-name "cassandra-prod" '
             '--data-center-name "dc1" '
             '--resource-group "{rg_5}"',
             checks=checks)


# EXAMPLE: /CassandraDataCenters/delete/CosmosDBManagedCassandraDataCenterDelete
@try_manual
def step_cassandra_data_center_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-data-center delete -y '
             '--cluster-name "cassandra-prod" '
             '--data-center-name "dc1" '
             '--resource-group "{rg_5}"',
             checks=checks)


# EXAMPLE: /CassandraResources/put/CosmosDBCassandraKeyspaceCreateUpdate
@try_manual
def step_cassandra_resource_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource create-update-cassandra-keyspace '
             '--account-name "ddb1" '
             '--location "West US" '
             '--id "keyspaceName" '
             '--keyspace-name "keyspaceName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /CassandraResources/put/CosmosDBCassandraKeyspaceThroughputUpdate
@try_manual
def step_cassandra_resource_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource update-cassandra-keyspace-throughput '
             '--account-name "ddb1" '
             '--keyspace-name "keyspaceName" '
             '--resource-group "{rg}" '
             '--location "West US" '
             '--throughput 400',
             checks=checks)


# EXAMPLE: /CassandraResources/put/CosmosDBCassandraTableCreateUpdate
@try_manual
def step_cassandra_resource_create2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource create-update-cassandra-table '
             '--account-name "ddb1" '
             '--location "West US" '
             '--cluster-keys name="columnA" order-by="Asc" '
             '--columns name="columnA" type="Ascii" '
             '--partition-keys name="columnA" '
             '--analytical-storage-ttl 500 '
             '--default-ttl 100 '
             '--id "tableName" '
             '--keyspace-name "keyspaceName" '
             '--resource-group "{rg}" '
             '--table-name "tableName"',
             checks=checks)


# EXAMPLE: /CassandraResources/put/CosmosDBCassandraTableThroughputUpdate
@try_manual
def step_cassandra_resource_update2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource update-cassandra-table-throughput '
             '--account-name "ddb1" '
             '--keyspace-name "keyspaceName" '
             '--resource-group "{rg}" '
             '--table-name "tableName" '
             '--location "West US" '
             '--throughput 400',
             checks=checks)


# EXAMPLE: /CassandraResources/put/CosmosDBCassandraViewCreateUpdate
@try_manual
def step_cassandra_resource_create3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource create-update-cassandra-view '
             '--account-name "ddb1" '
             '--resource id="viewname" view-definition="SELECT columna, columnb, columnc FROM '
             'keyspacename.srctablename WHERE columna IS NOT NULL AND columnc IS NOT NULL PRIMARY (columnc, columna)" '
             '--keyspace-name "keyspacename" '
             '--resource-group "{rg}" '
             '--view-name "viewname"',
             checks=checks)


# EXAMPLE: /CassandraResources/put/CosmosDBCassandraViewThroughputUpdate
@try_manual
def step_cassandra_resource_update3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource update-cassandra-view-throughput '
             '--account-name "ddb1" '
             '--keyspace-name "keyspacename" '
             '--resource-group "{rg}" '
             '--throughput 400 '
             '--view-name "viewname"',
             checks=checks)


# EXAMPLE: /CassandraResources/get/CosmosDBCassandraKeyspaceGet
@try_manual
def step_cassandra_resource_show_cassandra_keyspace(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource show-cassandra-keyspace '
             '--account-name "ddb1" '
             '--keyspace-name "keyspaceName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /CassandraResources/get/CosmosDBCassandraKeyspaceList
@try_manual
def step_cassandra_resource_list_cassandra_keyspace(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource list-cassandra-keyspace '
             '--account-name "ddb1" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /CassandraResources/get/CosmosDBCassandraKeyspaceThroughputGet
@try_manual
def step_cassandra_resource_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource show-cassandra-keyspace-throughput '
             '--account-name "ddb1" '
             '--keyspace-name "keyspaceName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /CassandraResources/get/CosmosDBCassandraTableGet
@try_manual
def step_cassandra_resource_show_cassandra_table(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource show-cassandra-table '
             '--account-name "ddb1" '
             '--keyspace-name "keyspaceName" '
             '--resource-group "{rg}" '
             '--table-name "tableName"',
             checks=checks)


# EXAMPLE: /CassandraResources/get/CosmosDBCassandraTableList
@try_manual
def step_cassandra_resource_list_cassandra_table(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource list-cassandra-table '
             '--account-name "ddb1" '
             '--keyspace-name "keyspaceName" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /CassandraResources/get/CosmosDBCassandraTableThroughputGet
@try_manual
def step_cassandra_resource_show2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource show-cassandra-table-throughput '
             '--account-name "ddb1" '
             '--keyspace-name "keyspaceName" '
             '--resource-group "{rg}" '
             '--table-name "tableName"',
             checks=checks)


# EXAMPLE: /CassandraResources/get/CosmosDBCassandraViewGet
@try_manual
def step_cassandra_resource_show_cassandra_view(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource show-cassandra-view '
             '--account-name "ddb1" '
             '--keyspace-name "keyspacename" '
             '--resource-group "{rg}" '
             '--view-name "viewname"',
             checks=checks)


# EXAMPLE: /CassandraResources/get/CosmosDBCassandraViewList
@try_manual
def step_cassandra_resource_list_cassandra_view(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource list-cassandra-view '
             '--account-name "ddb1" '
             '--keyspace-name "keyspacename" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /CassandraResources/get/CosmosDBCassandraViewThroughputGet
@try_manual
def step_cassandra_resource_show3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource show-cassandra-view-throughput '
             '--account-name "ddb1" '
             '--keyspace-name "keyspacename" '
             '--resource-group "{rg}" '
             '--view-name "viewname"',
             checks=checks)


# EXAMPLE: /CassandraResources/post/CosmosDBCassandraKeyspaceMigrateToAutoscale
@try_manual
def step_cassandra_resource_migrate(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource migrate-cassandra-keyspace-to-autoscale '
             '--account-name "ddb1" '
             '--keyspace-name "keyspaceName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /CassandraResources/post/CosmosDBCassandraKeyspaceMigrateToManualThroughput
@try_manual
def step_cassandra_resource_migrate2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource migrate-cassandra-keyspace-to-manual-throughput '
             '--account-name "ddb1" '
             '--keyspace-name "keyspaceName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /CassandraResources/post/CosmosDBCassandraTableMigrateToAutoscale
@try_manual
def step_cassandra_resource_migrate3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource migrate-cassandra-table-to-autoscale '
             '--account-name "ddb1" '
             '--keyspace-name "keyspaceName" '
             '--resource-group "{rg}" '
             '--table-name "tableName"',
             checks=checks)


# EXAMPLE: /CassandraResources/post/CosmosDBCassandraTableMigrateToManualThroughput
@try_manual
def step_cassandra_resource_migrate4(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource migrate-cassandra-table-to-manual-throughput '
             '--account-name "ddb1" '
             '--keyspace-name "keyspaceName" '
             '--resource-group "{rg}" '
             '--table-name "tableName"',
             checks=checks)


# EXAMPLE: /CassandraResources/post/CosmosDBCassandraViewMigrateToAutoscale
@try_manual
def step_cassandra_resource_migrate5(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource migrate-cassandra-view-to-autoscale '
             '--account-name "ddb1" '
             '--keyspace-name "keyspacename" '
             '--resource-group "{rg}" '
             '--view-name "viewname"',
             checks=checks)


# EXAMPLE: /CassandraResources/post/CosmosDBCassandraViewMigrateToManualThroughput
@try_manual
def step_cassandra_resource_migrate6(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource migrate-cassandra-view-to-manual-throughput '
             '--account-name "ddb1" '
             '--keyspace-name "keyspacename" '
             '--resource-group "{rg}" '
             '--view-name "viewname"',
             checks=checks)


# EXAMPLE: /CassandraResources/delete/CosmosDBCassandraKeyspaceDelete
@try_manual
def step_cassandra_resource_delete_cassandra_keyspace(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource delete-cassandra-keyspace '
             '--account-name "ddb1" '
             '--keyspace-name "keyspaceName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /CassandraResources/delete/CosmosDBCassandraTableDelete
@try_manual
def step_cassandra_resource_delete_cassandra_table(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource delete-cassandra-table '
             '--account-name "ddb1" '
             '--keyspace-name "keyspaceName" '
             '--resource-group "{rg}" '
             '--table-name "tableName"',
             checks=checks)


# EXAMPLE: /CassandraResources/delete/CosmosDBCassandraViewDelete
@try_manual
def step_cassandra_resource_delete_cassandra_view(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb cassandra-resource delete-cassandra-view '
             '--account-name "ddb1" '
             '--keyspace-name "keyspacename" '
             '--resource-group "{rg}" '
             '--view-name "viewname"',
             checks=checks)


# EXAMPLE: /Collection/get/CosmosDBCollectionGetMetricDefinitions
@try_manual
def step_collection_list_metric_definition(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb collection list-metric-definition '
             '--account-name "ddb1" '
             '--collection-rid "collectionRid" '
             '--database-rid "databaseRid" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Collection/get/CosmosDBCollectionGetMetrics
@try_manual
def step_collection_list_metric(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb collection list-metric '
             '--filter "$filter=(name.value eq \'Total Requests\') and timeGrain eq duration\'PT5M\' and startTime eq '
             '\'2017-11-19T23:53:55.2780000Z\' and endTime eq \'2017-11-20T00:13:55.2780000Z" '
             '--account-name "ddb1" '
             '--collection-rid "collectionRid" '
             '--database-rid "databaseRid" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Collection/get/CosmosDBCollectionGetUsages
@try_manual
def step_collection_list_usage(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb collection list-usage '
             '--filter "$filter=name.value eq \'Storage\'" '
             '--account-name "ddb1" '
             '--collection-rid "collectionRid" '
             '--database-rid "databaseRid" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /CollectionPartition/get/CosmosDBCollectionGetUsages
@try_manual
def step_collection_partition_list_usage(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb collection-partition list-usage '
             '--filter "$filter=name.value eq \'Partition Storage\'" '
             '--account-name "ddb1" '
             '--collection-rid "collectionRid" '
             '--database-rid "databaseRid" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /CollectionPartition/get/CosmosDBDatabaseAccountRegionGetMetrics
@try_manual
def step_collection_partition_list_metric(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb collection-partition list-metric '
             '--filter "$filter=(name.value eq \'Max RUs Per Second\') and timeGrain eq duration\'PT1M\' and startTime '
             'eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \'2017-11-20T23:58:55.2780000Z" '
             '--account-name "ddb1" '
             '--collection-rid "collectionRid" '
             '--database-rid "databaseRid" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /CollectionPartitionRegion/get/CosmosDBDatabaseAccountRegionGetMetrics
@try_manual
def step_collection_partition_region_list_metric(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb collection-partition-region list-metric '
             '--filter "$filter=(name.value eq \'Max RUs Per Second\') and timeGrain eq duration\'PT1M\' and startTime '
             'eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \'2017-11-20T23:58:55.2780000Z" '
             '--account-name "ddb1" '
             '--collection-rid "collectionRid" '
             '--database-rid "databaseRid" '
             '--region "North Europe" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /CollectionRegion/get/CosmosDBRegionCollectionGetMetrics
@try_manual
def step_collection_region_list_metric(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb collection-region list-metric '
             '--filter "$filter=(name.value eq \'Total Requests\') and timeGrain eq duration\'PT5M\' and startTime eq '
             '\'2017-11-19T23:53:55.2780000Z\' and endTime eq \'2017-11-20T00:13:55.2780000Z" '
             '--account-name "ddb1" '
             '--collection-rid "collectionRid" '
             '--database-rid "databaseRid" '
             '--region "North Europe" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /cosmosdb/get/CosmosDBLocationGet
@try_manual
def step_location_get(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb location-get '
             '--location "westus"',
             checks=checks)


# EXAMPLE: /cosmosdb/get/CosmosDBLocationList
@try_manual
def step_location_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb location-list',
             checks=checks)


# EXAMPLE: /Database/get/CosmosDBDatabaseGetMetricDefinitions
@try_manual
def step_database_list_metric_definition(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database list-metric-definition '
             '--account-name "ddb1" '
             '--database-rid "databaseRid" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Database/get/CosmosDBDatabaseGetMetrics
@try_manual
def step_database_list_metric(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database list-metric '
             '--filter "$filter=(name.value eq \'Total Requests\') and timeGrain eq duration\'PT5M\' and startTime eq '
             '\'2017-11-19T23:53:55.2780000Z\' and endTime eq \'2017-11-20T00:13:55.2780000Z" '
             '--account-name "ddb1" '
             '--database-rid "rid" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Database/get/CosmosDBDatabaseGetUsages
@try_manual
def step_database_list_usage(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database list-usage '
             '--filter "$filter=name.value eq \'Storage\'" '
             '--account-name "ddb1" '
             '--database-rid "databaseRid" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccountRegion/get/CosmosDBDatabaseAccountRegionGetMetrics
@try_manual
def step_database_account_region_list_metric(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account-region list-metric '
             '--filter "$filter=(name.value eq \'Total Requests\') and timeGrain eq duration\'PT5M\' and startTime eq '
             '\'2017-11-19T23:53:55.2780000Z\' and endTime eq \'2017-11-20T00:13:55.2780000Z" '
             '--account-name "ddb1" '
             '--region "North Europe" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/put/CosmosDBDatabaseAccountCreateMax
@try_manual
def step_database_account_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account create '
             '--account-name "ddb1" '
             '--type "SystemAssigned,UserAssigned" '
             '--user-assigned-identities "{{\\"/subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/eu2cg'
             'roup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1\\":{{}}}}" '
             '--kind "MongoDB" '
             '--location "westus" '
             '--schema-type "WellDefined" '
             '--server-version "3.2" '
             '--periodic-mode-backup-policy backup-interval-in-minutes=240 backup-retention-interval-in-hours=8 '
             'backup-storage-redundancy="Geo" '
             '--consistency-policy default-consistency-level="BoundedStaleness" max-interval-in-seconds=10 '
             'max-staleness-prefix=200 '
             '--cors allowed-origins="https://test" '
             '--default-identity "FirstPartyIdentity" '
             '--enable-analytical-storage true '
             '--enable-free-tier false '
             '--ip-rules ip-address-or-range="23.43.230.120" '
             '--ip-rules ip-address-or-range="110.12.240.0/12" '
             '--is-virtual-network-filter-enabled true '
             '--key-vault-key-uri "https://myKeyVault.vault.azure.net" '
             '--locations failover-priority={myPartitionKeyRangeId} is-zone-redundant=false '
             'location-name="southcentralus" '
             '--locations failover-priority=1 is-zone-redundant=false location-name="eastus" '
             '--network-acl-bypass "AzureServices" '
             '--network-acl-bypass-resource-ids "/subscriptions/{subscription_id}/resourcegroups/{rg_2}/providers/Micro'
             'soft.Synapse/workspaces/workspaceName" '
             '--public-network-access "Enabled" '
             '--virtual-network-rules id="/subscriptions/{subscription_id}/resourceGroups/{rg_3}/providers/Microsoft.Ne'
             'twork/virtualNetworks/{vn}/subnets/{subnets}" ignore-missing-v-net-service-endpoint=false '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/put/CosmosDBDatabaseAccountCreateMin
@try_manual
def step_database_account_create2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account create '
             '--account-name "ddb1" '
             '--location "westus" '
             '--locations failover-priority={myPartitionKeyRangeId} is-zone-redundant=false '
             'location-name="southcentralus" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/get/CosmosDBDatabaseAccountGet
@try_manual
def step_database_account_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account show '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/get/CosmosDBDatabaseAccountGetMetricDefinitions
@try_manual
def step_database_account_list_metric_definition(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account list-metric-definition '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/get/CosmosDBDatabaseAccountGetMetrics
@try_manual
def step_database_account_list_metric(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account list-metric '
             '--filter "$filter=(name.value eq \'Total Requests\') and timeGrain eq duration\'PT5M\' and startTime eq '
             '\'2017-11-19T23:53:55.2780000Z\' and endTime eq \'2017-11-20T00:13:55.2780000Z" '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/get/CosmosDBDatabaseAccountGetUsages
@try_manual
def step_database_account_list_usage(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account list-usage '
             '--filter "$filter=name.value eq \'Storage\'" '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/get/CosmosDBDatabaseAccountList
@try_manual
def step_database_account_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account list '
             '-g ""',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/get/CosmosDBDatabaseAccountListByResourceGroup
@try_manual
def step_database_account_list2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/get/CosmosDBDatabaseAccountListReadOnlyKeys
@try_manual
def step_database_account_show_read_only_key(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account show-read-only-key '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/head/CosmosDBDatabaseAccountCheckNameExists
@try_manual
def step_database_account_check_name_exist(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account check-name-exist '
             '--account-name "ddb1"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/patch/CosmosDBDatabaseAccountPatch
@try_manual
def step_database_account_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account update '
             '--account-name "ddb1" '
             '--resource-group "{rg}" '
             '--type "SystemAssigned,UserAssigned" '
             '--user-assigned-identities "{{\\"/subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/eu2cg'
             'roup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1\\":{{}}}}" '
             '--location "westus" '
             '--schema-type "WellDefined" '
             '--periodic-mode-backup-policy backup-interval-in-minutes=240 backup-retention-interval-in-hours=720 '
             'backup-storage-redundancy="Geo" '
             '--consistency-policy default-consistency-level="BoundedStaleness" max-interval-in-seconds=10 '
             'max-staleness-prefix=200 '
             '--default-identity "FirstPartyIdentity" '
             '--enable-full-text-query "True" '
             '--enable-analytical-storage true '
             '--enable-free-tier false '
             '--ip-rules ip-address-or-range="23.43.230.120" '
             '--ip-rules ip-address-or-range="110.12.240.0/12" '
             '--is-virtual-network-filter-enabled true '
             '--network-acl-bypass "AzureServices" '
             '--network-acl-bypass-resource-ids "/subscriptions/{subscription_id}/resourcegroups/{rg_2}/providers/Micro'
             'soft.Synapse/workspaces/workspaceName" '
             '--virtual-network-rules id="/subscriptions/{subscription_id}/resourceGroups/{rg_3}/providers/Microsoft.Ne'
             'twork/virtualNetworks/{vn}/subnets/{subnets}" ignore-missing-v-net-service-endpoint=false '
             '--tags dept="finance"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/post/CosmosDBDatabaseAccountFailoverPriorityChange
@try_manual
def step_database_account_failover_priority_change(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account failover-priority-change '
             '--account-name "ddb1-failover" '
             '--failover-policies failover-priority={myPartitionKeyRangeId} location-name="eastus" '
             '--failover-policies failover-priority=1 location-name="westus" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/post/CosmosDBDatabaseAccountListConnectionStrings
@try_manual
def step_database_account_list_connection_string(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account list-connection-string '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/post/CosmosDBDatabaseAccountListConnectionStringsMongo
@try_manual
def step_database_account_list_connection_string2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account list-connection-string '
             '--account-name "mongo-ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/post/CosmosDBDatabaseAccountListKeys
@try_manual
def step_database_account_list_key(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account list-key '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/post/CosmosDBDatabaseAccountListReadOnlyKeys
@try_manual
def step_database_account_list_read_only_key(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account list-read-only-key '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/post/CosmosDBDatabaseAccountOfflineRegion
@try_manual
def step_database_account_offline_region(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account offline-region '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/post/CosmosDBDatabaseAccountOnlineRegion
@try_manual
def step_database_account_online_region(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account online-region '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/post/CosmosDBDatabaseAccountRegenerateKey
@try_manual
def step_database_account_regenerate_key(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account regenerate-key '
             '--account-name "ddb1" '
             '--key-kind "primary" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DatabaseAccounts/delete/CosmosDBDatabaseAccountDelete
@try_manual
def step_database_account_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb database-account delete -y '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DataTransferJobs/put/CosmosDBDataTransferJobCreate
@try_manual
def step_data_transfer_job_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb data-transfer-job create '
             '--account-name "ddb1" '
             '--job-create-parameters "{{\\"source\\":{{\\"component\\":\\"CosmosDBCassandra\\",\\"keyspaceName\\":\\"k'
             'eyspace\\",\\"tableName\\":\\"table\\"}},\\"destination\\":{{\\"component\\":\\"AzureBlobStorage\\",\\"co'
             'ntainerName\\":\\"blob_container\\",\\"endpointUrl\\":\\"https://blob.windows.net\\"}}}}" '
             '--job-name "j1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DataTransferJobs/get/CosmosDBDataTransferJobFeed
@try_manual
def step_data_transfer_job_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb data-transfer-job list '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DataTransferJobs/get/CosmosDBDataTransferJobGet
@try_manual
def step_data_transfer_job_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb data-transfer-job show '
             '--account-name "ddb1" '
             '--job-name "j1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GraphResources/put/CosmosDBGraphCreateUpdate
@try_manual
def step_graph_resource_create_update_graph(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb graph-resource create-update-graph '
             '--account-name "ddb1" '
             '--location "West US" '
             '--id "graphName" '
             '--graph-name "graphName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GraphResources/get/CosmosDBSqlDatabaseGet
@try_manual
def step_graph_resource_show_graph(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb graph-resource show-graph '
             '--account-name "ddb1" '
             '--graph-name "graphName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GraphResources/get/CosmosDBSqlDatabaseList
@try_manual
def step_graph_resource_list_graph(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb graph-resource list-graph '
             '--account-name "ddb1" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /GraphResources/delete/CosmosDBSqlDatabaseDelete
@try_manual
def step_graph_resource_delete_graph_resource(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb graph-resource delete-graph-resource '
             '--account-name "ddb1" '
             '--graph-name "graphName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GremlinResources/put/CosmosDBGremlinDatabaseCreateUpdate
@try_manual
def step_gremlin_resource_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource create-update-gremlin-database '
             '--account-name "ddb1" '
             '--location "West US" '
             '--id "{myDatabase}" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GremlinResources/put/CosmosDBGremlinDatabaseThroughputUpdate
@try_manual
def step_gremlin_resource_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource update-gremlin-database-throughput '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}" '
             '--location "West US" '
             '--throughput 400',
             checks=checks)


# EXAMPLE: /GremlinResources/put/CosmosDBGremlinGraphCreateUpdate
@try_manual
def step_gremlin_resource_create_update_gremlin_graph(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource create-update-gremlin-graph '
             '--account-name "ddb1" '
             '--create-update-gremlin-graph-parameters "{{\\"location\\":\\"West US\\",\\"tags\\":{{}},\\"resource\\":{'
             '{\\"conflictResolutionPolicy\\":{{\\"conflictResolutionPath\\":\\"/path\\",\\"mode\\":\\"LastWriterWins\\'
             '"}},\\"defaultTtl\\":100,\\"id\\":\\"graphName\\",\\"indexingPolicy\\":{{\\"automatic\\":true,\\"excluded'
             'Paths\\":[],\\"includedPaths\\":[{{\\"path\\":\\"/*\\",\\"indexes\\":[{{\\"dataType\\":\\"String\\",\\"ki'
             'nd\\":\\"Range\\",\\"precision\\":-1}},{{\\"dataType\\":\\"Number\\",\\"kind\\":\\"Range\\",\\"precision'
             '\\":-1}}]}}],\\"indexingMode\\":\\"consistent\\"}},\\"partitionKey\\":{{\\"kind\\":\\"Hash\\",\\"paths\\"'
             ':[\\"/AccountNumber\\"]}},\\"uniqueKeyPolicy\\":{{\\"uniqueKeys\\":[{{\\"paths\\":[\\"/testPath\\"]}}]}}}'
             '},\\"options\\":{{}}}}" '
             '--database-name "{myDatabase}" '
             '--graph-name "graphName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GremlinResources/put/CosmosDBGremlinGraphThroughputUpdate
@try_manual
def step_gremlin_resource_update2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource update-gremlin-graph-throughput '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--graph-name "graphName" '
             '--resource-group "{rg}" '
             '--location "West US" '
             '--throughput 400',
             checks=checks)


# EXAMPLE: /GremlinResources/get/CosmosDBGremlinDatabaseGet
@try_manual
def step_gremlin_resource_show_gremlin_database(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource show-gremlin-database '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GremlinResources/get/CosmosDBGremlinDatabaseList
@try_manual
def step_gremlin_resource_list_gremlin_database(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource list-gremlin-database '
             '--account-name "ddb1" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /GremlinResources/get/CosmosDBGremlinDatabaseThroughputGet
@try_manual
def step_gremlin_resource_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource show-gremlin-database-throughput '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GremlinResources/get/CosmosDBGremlinGraphGet
@try_manual
def step_gremlin_resource_show_gremlin_graph(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource show-gremlin-graph '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--graph-name "graphName" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /GremlinResources/get/CosmosDBGremlinGraphList
@try_manual
def step_gremlin_resource_list_gremlin_graph(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource list-gremlin-graph '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /GremlinResources/get/CosmosDBGremlinGraphThroughputGet
@try_manual
def step_gremlin_resource_show2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource show-gremlin-graph-throughput '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--graph-name "graphName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GremlinResources/post/CosmosDBGremlinDatabaseMigrateToAutoscale
@try_manual
def step_gremlin_resource_migrate(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource migrate-gremlin-database-to-autoscale '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GremlinResources/post/CosmosDBGremlinDatabaseMigrateToManualThroughput
@try_manual
def step_gremlin_resource_migrate2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource migrate-gremlin-database-to-manual-throughput '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GremlinResources/post/CosmosDBGremlinGraphMigrateToAutoscale
@try_manual
def step_gremlin_resource_migrate3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource migrate-gremlin-graph-to-autoscale '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--graph-name "graphName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GremlinResources/post/CosmosDBGremlinGraphMigrateToManualThroughput
@try_manual
def step_gremlin_resource_migrate4(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource migrate-gremlin-graph-to-manual-throughput '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--graph-name "graphName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GremlinResources/delete/CosmosDBGremlinDatabaseDelete
@try_manual
def step_gremlin_resource_delete_gremlin_database(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource delete-gremlin-database '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /GremlinResources/delete/CosmosDBGremlinGraphDelete
@try_manual
def step_gremlin_resource_delete_gremlin_graph(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb gremlin-resource delete-gremlin-graph '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--graph-name "graphName" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /MongoDBResources/put/CosmosDBMongoDBCollectionCreateUpdate
@try_manual
def step_mongo_db_resource(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource create-update-mongo-db-collection '
             '--account-name "ddb1" '
             '--collection-name "{myCollection}" '
             '--location "West US" '
             '--analytical-storage-ttl 500 '
             '--id "{myCollection}" '
             '--indexes "[{{\\"key\\":{{\\"keys\\":[\\"_ts\\"]}},\\"options\\":{{\\"expireAfterSeconds\\":100,\\"unique'
             '\\":true}}}},{{\\"key\\":{{\\"keys\\":[\\"_id\\"]}}}}]" '
             '--shard-key testKey="Hash" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /MongoDBResources/put/CosmosDBMongoDBCollectionThroughputUpdate
@try_manual
def step_mongo_db_resource2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource update-mongo-db-collection-throughput '
             '--account-name "ddb1" '
             '--collection-name "{myCollection}" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}" '
             '--location "West US" '
             '--throughput 400',
             checks=checks)


# EXAMPLE: /MongoDBResources/put/CosmosDBMongoDBDatabaseCreateUpdate
@try_manual
def step_mongo_db_resource3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource create-update-mongo-db-database '
             '--account-name "ddb1" '
             '--location "West US" '
             '--id "{myDatabase}" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /MongoDBResources/put/CosmosDBMongoDBDatabaseThroughputUpdate
@try_manual
def step_mongo_db_resource4(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource update-mongo-db-database-throughput '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}" '
             '--location "West US" '
             '--throughput 400',
             checks=checks)


# EXAMPLE: /MongoDBResources/get/CosmosDBMongoDBCollectionGet
@try_manual
def step_mongo_db_resource_show_mongo_db_collection(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource show-mongo-db-collection '
             '--account-name "ddb1" '
             '--collection-name "{myCollection}" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /MongoDBResources/get/CosmosDBMongoDBCollectionList
@try_manual
def step_mongo_db_resource_list_mongo_db_collection(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource list-mongo-db-collection '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /MongoDBResources/get/CosmosDBMongoDBCollectionThroughputGet
@try_manual
def step_mongo_db_resource5(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource show-mongo-db-collection-throughput '
             '--account-name "ddb1" '
             '--collection-name "{myCollection}" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /MongoDBResources/get/CosmosDBMongoDBDatabaseGet
@try_manual
def step_mongo_db_resource_show_mongo_db_database(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource show-mongo-db-database '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /MongoDBResources/get/CosmosDBMongoDBDatabaseList
@try_manual
def step_mongo_db_resource_list_mongo_db_database(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource list-mongo-db-database '
             '--account-name "ddb1" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /MongoDBResources/get/CosmosDBMongoDBDatabaseThroughputGet
@try_manual
def step_mongo_db_resource6(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource show-mongo-db-database-throughput '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /MongoDBResources/post/CosmosDBMongoDBCollectionMigrateToAutoscale
@try_manual
def step_mongo_db_resource7(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource migrate-mongo-db-collection-to-autoscale '
             '--account-name "ddb1" '
             '--collection-name "{myCollection}" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /MongoDBResources/post/CosmosDBMongoDBCollectionMigrateToManualThroughput
@try_manual
def step_mongo_db_resource8(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource migrate-mongo-db-collection-to-manual-throughput '
             '--account-name "ddb1" '
             '--collection-name "{myCollection}" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /MongoDBResources/post/CosmosDBMongoDBDatabaseMigrateToAutoscale
@try_manual
def step_mongo_db_resource9(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource migrate-mongo-db-database-to-autoscale '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /MongoDBResources/post/CosmosDBMongoDBDatabaseMigrateToManualThroughput
@try_manual
def step_mongo_db_resource10(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource migrate-mongo-db-database-to-manual-throughput '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /MongoDBResources/delete/CosmosDBMongoDBCollectionDelete
@try_manual
def step_mongo_db_resource_delete_mongo_db_collection(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource delete-mongo-db-collection '
             '--account-name "ddb1" '
             '--collection-name "{myCollection}" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /MongoDBResources/delete/CosmosDBMongoDBDatabaseDelete
@try_manual
def step_mongo_db_resource_delete_mongo_db_database(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb mongo-db-resource delete-mongo-db-database '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /NotebookWorkspaces/put/CosmosDBNotebookWorkspaceCreate
@try_manual
def step_notebook_workspace_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb notebook-workspace create '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /NotebookWorkspaces/get/CosmosDBNotebookWorkspaceGet
@try_manual
def step_notebook_workspace_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb notebook-workspace show '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /NotebookWorkspaces/get/CosmosDBNotebookWorkspaceList
@try_manual
def step_notebook_workspace_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb notebook-workspace list '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /NotebookWorkspaces/post/CosmosDBNotebookWorkspaceListConnectionInfo
@try_manual
def step_notebook_workspace_list_connection_info(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb notebook-workspace list-connection-info '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /NotebookWorkspaces/post/CosmosDBNotebookWorkspaceRegenerateAuthToken
@try_manual
def step_notebook_workspace_regenerate_auth_token(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb notebook-workspace regenerate-auth-token '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /NotebookWorkspaces/post/CosmosDBNotebookWorkspaceStart
@try_manual
def step_notebook_workspace_start(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb notebook-workspace start '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /NotebookWorkspaces/delete/CosmosDBNotebookWorkspaceDelete
@try_manual
def step_notebook_workspace_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb notebook-workspace delete -y '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /PartitionKeyRangeId/get/CosmosDBDatabaseAccountRegionGetMetrics
@try_manual
def step_partition_key_range_id_list_metric(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb partition-key-range-id list-metric '
             '--filter "$filter=(name.value eq \'Max RUs Per Second\') and timeGrain eq duration\'PT1M\' and startTime '
             'eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \'2017-11-20T23:58:55.2780000Z" '
             '--account-name "ddb1" '
             '--collection-rid "collectionRid" '
             '--database-rid "databaseRid" '
             '--partition-key-range-id "{myPartitionKeyRangeId}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /PartitionKeyRangeIdRegion/get/CosmosDBDatabaseAccountRegionGetMetrics
@try_manual
def step_partition_key_range_id_region_list_metric(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb partition-key-range-id-region list-metric '
             '--filter "$filter=(name.value eq \'Max RUs Per Second\') and timeGrain eq duration\'PT1M\' and startTime '
             'eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \'2017-11-20T23:58:55.2780000Z" '
             '--account-name "ddb1" '
             '--collection-rid "collectionRid" '
             '--database-rid "databaseRid" '
             '--partition-key-range-id "{myPartitionKeyRangeId}" '
             '--region "West US" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Percentile/get/CosmosDBDatabaseAccountRegionGetMetrics
@try_manual
def step_percentile_list_metric(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb percentile list-metric '
             '--filter "$filter=(name.value eq \'Probabilistic Bounded Staleness\') and timeGrain eq duration\'PT5M\' '
             'and startTime eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \'2017-11-20T00:13:55.2780000Z" '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /PercentileSourceTarget/get/CosmosDBDatabaseAccountRegionGetMetrics
@try_manual
def step_percentile_source_target_list_metric(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb percentile-source-target list-metric '
             '--filter "$filter=(name.value eq \'Probabilistic Bounded Staleness\') and timeGrain eq duration\'PT5M\' '
             'and startTime eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \'2017-11-20T00:13:55.2780000Z" '
             '--account-name "ddb1" '
             '--resource-group "{rg}" '
             '--source-region "West Central US" '
             '--target-region "East US"',
             checks=checks)


# EXAMPLE: /PercentileTarget/get/CosmosDBDatabaseAccountRegionGetMetrics
@try_manual
def step_percentile_target_list_metric(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb percentile-target list-metric '
             '--filter "$filter=(name.value eq \'Probabilistic Bounded Staleness\') and timeGrain eq duration\'PT5M\' '
             'and startTime eq \'2017-11-19T23:53:55.2780000Z\' and endTime eq \'2017-11-20T00:13:55.2780000Z" '
             '--account-name "ddb1" '
             '--resource-group "{rg}" '
             '--target-region "East US"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/put/Approve or reject a private endpoint connection with a given name.
@try_manual
def step_private_endpoint_connection_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb private-endpoint-connection create '
             '--account-name "ddb1" '
             '--private-link-service-connection-state description="Approved by johndoe@contoso.com" status="Approved" '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az cosmosdb private-endpoint-connection wait --created '
             '--account-name "ddb1" '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/get/Gets private endpoint connection.
@try_manual
def step_private_endpoint_connection_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb private-endpoint-connection list '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/delete/Deletes a private endpoint connection with a given name.
@try_manual
def step_private_endpoint_connection_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb private-endpoint-connection delete -y '
             '--account-name "ddb1" '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /PrivateLinkResources/get/Gets private endpoint connection.
@try_manual
def step_private_link_resource_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb private-link-resource list '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /RestorableDatabaseAccounts/get/CosmosDBRestorableDatabaseAccountGet
@try_manual
def step_restorable_database_account_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb restorable-database-account show '
             '--instance-id "d9b26648-2f53-4541-b3d8-3044f4f9810d" '
             '--location "West US"',
             checks=checks)


# EXAMPLE: /RestorableDatabaseAccounts/get/CosmosDBRestorableDatabaseAccountList
@try_manual
def step_restorable_database_account_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb restorable-database-account list '
             '--location "West US"',
             checks=checks)


# EXAMPLE: /RestorableDatabaseAccounts/get/CosmosDBRestorableDatabaseAccountNoLocationList
@try_manual
def step_restorable_database_account_list2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb restorable-database-account list',
             checks=checks)


# EXAMPLE: /RestorableMongodbCollections/get/CosmosDBRestorableMongodbCollectionList
@try_manual
def step_restorable_mongodb_collection_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb restorable-mongodb-collection list '
             '--instance-id "98a570f2-63db-4117-91f0-366327b7b353" '
             '--location "WestUS" '
             '--restorable-mongodb-database-rid "PD5DALigDgw="',
             checks=checks)


# EXAMPLE: /RestorableMongodbDatabases/get/CosmosDBRestorableMongodbDatabaseList
@try_manual
def step_restorable_mongodb_database_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb restorable-mongodb-database list '
             '--instance-id "d9b26648-2f53-4541-b3d8-3044f4f9810d" '
             '--location "WestUS"',
             checks=checks)


# EXAMPLE: /RestorableMongodbResources/get/CosmosDBRestorableMongodbResourceList
@try_manual
def step_restorable_mongodb_resource_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb restorable-mongodb-resource list '
             '--instance-id "d9b26648-2f53-4541-b3d8-3044f4f9810d" '
             '--location "WestUS" '
             '--restore-location "WestUS" '
             '--restore-timestamp-in-utc "10/13/2020 4:56"',
             checks=checks)


# EXAMPLE: /RestorableSqlContainers/get/CosmosDBRestorableSqlContainerList
@try_manual
def step_restorable_sql_container_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb restorable-sql-container list '
             '--instance-id "98a570f2-63db-4117-91f0-366327b7b353" '
             '--location "WestUS" '
             '--restorable-sql-database-rid "3fu-hg=="',
             checks=checks)


# EXAMPLE: /RestorableSqlDatabases/get/CosmosDBRestorableSqlDatabaseList
@try_manual
def step_restorable_sql_database_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb restorable-sql-database list '
             '--instance-id "d9b26648-2f53-4541-b3d8-3044f4f9810d" '
             '--location "WestUS"',
             checks=checks)


# EXAMPLE: /RestorableSqlResources/get/CosmosDBRestorableSqlResourceList
@try_manual
def step_restorable_sql_resource_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb restorable-sql-resource list '
             '--instance-id "d9b26648-2f53-4541-b3d8-3044f4f9810d" '
             '--location "WestUS" '
             '--restore-location "WestUS" '
             '--restore-timestamp-in-utc "10/13/2020 4:56"',
             checks=checks)


# EXAMPLE: /Service/put/DataTransferServiceCreate
@try_manual
def step_service_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb service create '
             '--account-name "ddb1" '
             '--instance-count 1 '
             '--instance-size "Cosmos.D4s" '
             '--service-type "{myService}" '
             '--resource-group "{rg}" '
             '--name "{myService}"',
             checks=checks)


# EXAMPLE: /Service/put/GraphAPIComputeServiceCreate
@try_manual
def step_service_create2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb service create '
             '--account-name "ddb1" '
             '--instance-count 1 '
             '--instance-size "Cosmos.D4s" '
             '--service-type "{myService2}" '
             '--resource-group "{rg}" '
             '--name "{myService2}"',
             checks=checks)


# EXAMPLE: /Service/put/SqlDedicatedGatewayServiceCreate
@try_manual
def step_service_create3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb service create '
             '--account-name "ddb1" '
             '--instance-count 1 '
             '--instance-size "Cosmos.D4s" '
             '--service-type "{myService3}" '
             '--resource-group "{rg}" '
             '--name "{myService3}"',
             checks=checks)


# EXAMPLE: /Service/get/CosmosDBServicesList
@try_manual
def step_service_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb service list '
             '--account-name "ddb1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Service/get/DataTransferServiceGet
@try_manual
def step_service_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb service show '
             '--account-name "ddb1" '
             '--resource-group "{rg}" '
             '--name "{myService}"',
             checks=checks)


# EXAMPLE: /Service/get/GraphAPIComputeServiceGet
@try_manual
def step_service_show2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb service show '
             '--account-name "ddb1" '
             '--resource-group "{rg}" '
             '--name "{myService2}"',
             checks=checks)


# EXAMPLE: /Service/get/SqlDedicatedGatewayServiceGet
@try_manual
def step_service_show3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb service show '
             '--account-name "ddb1" '
             '--resource-group "{rg}" '
             '--name "{myService3}"',
             checks=checks)


# EXAMPLE: /Service/delete/DataTransferServiceDelete
@try_manual
def step_service_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb service delete -y '
             '--account-name "ddb1" '
             '--resource-group "{rg}" '
             '--name "{myService}"',
             checks=checks)


# EXAMPLE: /Service/delete/GraphAPIComputeServiceDelete
@try_manual
def step_service_delete2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb service delete -y '
             '--account-name "ddb1" '
             '--resource-group "{rg}" '
             '--name "{myService2}"',
             checks=checks)


# EXAMPLE: /Service/delete/SqlDedicatedGatewayServiceDelete
@try_manual
def step_service_delete3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb service delete -y '
             '--account-name "ddb1" '
             '--resource-group "{rg}" '
             '--name "{myService3}"',
             checks=checks)


# EXAMPLE: /SqlResources/put/CosmosDBSqlContainerCreateUpdate
@try_manual
def step_sql_resource_create_update_sql_container(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource create-update-sql-container '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--create-update-sql-container-parameters "{{\\"location\\":\\"West US\\",\\"tags\\":{{}},\\"resource\\":{'
             '{\\"conflictResolutionPolicy\\":{{\\"conflictResolutionPath\\":\\"/path\\",\\"mode\\":\\"LastWriterWins\\'
             '"}},\\"defaultTtl\\":100,\\"id\\":\\"containerName\\",\\"indexingPolicy\\":{{\\"automatic\\":true,\\"excl'
             'udedPaths\\":[],\\"includedPaths\\":[{{\\"path\\":\\"/*\\",\\"indexes\\":[{{\\"dataType\\":\\"String\\",'
             '\\"kind\\":\\"Range\\",\\"precision\\":-1}},{{\\"dataType\\":\\"Number\\",\\"kind\\":\\"Range\\",\\"preci'
             'sion\\":-1}}]}}],\\"indexingMode\\":\\"consistent\\"}},\\"partitionKey\\":{{\\"kind\\":\\"Hash\\",\\"path'
             's\\":[\\"/AccountNumber\\"]}},\\"uniqueKeyPolicy\\":{{\\"uniqueKeys\\":[{{\\"paths\\":[\\"/testPath\\"]}}'
             ']}}}},\\"options\\":{{}}}}" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SqlResources/put/CosmosDBSqlContainerThroughputUpdate
@try_manual
def step_sql_resource_update_sql_container_throughput(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource update-sql-container-throughput '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}" '
             '--location "West US" '
             '--throughput 400',
             checks=checks)


# EXAMPLE: /SqlResources/put/CosmosDBSqlDatabaseCreateUpdate
@try_manual
def step_sql_resource_create_update_sql_database(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource create-update-sql-database '
             '--account-name "ddb1" '
             '--location "West US" '
             '--id "{myDatabase}" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SqlResources/put/CosmosDBSqlDatabaseThroughputUpdate
@try_manual
def step_sql_resource_update_sql_database_throughput(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource update-sql-database-throughput '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}" '
             '--location "West US" '
             '--throughput 400',
             checks=checks)


# EXAMPLE: /SqlResources/put/CosmosDBSqlRoleAssignmentCreateUpdate
@try_manual
def step_sql_resource_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource create-update-sql-role-assignment '
             '--account-name "{myDatabaseAccount}" '
             '--principal-id "myPrincipalId" '
             '--role-definition-id "/subscriptions/{subscription_id}/resourceGroups/{rg_4}/providers/Microsoft.Document'
             'DB/databaseAccounts/{myDatabaseAccount}/sqlRoleDefinitions/myRoleDefinitionId" '
             '--scope "/subscriptions/{subscription_id}/resourceGroups/{rg_4}/providers/Microsoft.DocumentDB/databaseAc'
             'counts/{myDatabaseAccount}/dbs/purchases/colls/redmond-purchases" '
             '--resource-group "{rg_4}" '
             '--role-assignment-id "myRoleAssignmentId"',
             checks=checks)


# EXAMPLE: /SqlResources/put/CosmosDBSqlRoleDefinitionCreateUpdate
@try_manual
def step_sql_resource_create2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource create-update-sql-role-definition '
             '--account-name "{myDatabaseAccount}" '
             '--type "CustomRole" '
             '--assignable-scopes "/subscriptions/{subscription_id}/resourceGroups/{rg_4}/providers/Microsoft.DocumentD'
             'B/databaseAccounts/{myDatabaseAccount}/dbs/sales" "/subscriptions/{subscription_id}/resourceGroups/{rg_4}'
             '/providers/Microsoft.DocumentDB/databaseAccounts/{myDatabaseAccount}/dbs/purchases" '
             '--permissions data-actions="Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/create" '
             'data-actions="Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/read" '
             '--role-name "myRoleName" '
             '--resource-group "{rg_4}" '
             '--role-definition-id "myRoleDefinitionId"',
             checks=checks)


# EXAMPLE: /SqlResources/put/CosmosDBSqlStoredProcedureCreateUpdate
@try_manual
def step_sql_resource_create3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource create-update-sql-stored-procedure '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--resource body="body" id="storedProcedureName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}" '
             '--stored-procedure-name "storedProcedureName"',
             checks=checks)


# EXAMPLE: /SqlResources/put/CosmosDBSqlTriggerCreateUpdate
@try_manual
def step_sql_resource_create_update_sql_trigger(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource create-update-sql-trigger '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--resource body="body" id="triggerName" trigger-operation="triggerOperation" trigger-type="triggerType" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}" '
             '--trigger-name "triggerName"',
             checks=checks)


# EXAMPLE: /SqlResources/put/CosmosDBSqlUserDefinedFunctionCreateUpdate
@try_manual
def step_sql_resource_create4(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource create-update-sql-user-defined-function '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--resource body="body" id="userDefinedFunctionName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}" '
             '--user-defined-function-name "userDefinedFunctionName"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlContainerGet
@try_manual
def step_sql_resource_show_sql_container(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource show-sql-container '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlContainerList
@try_manual
def step_sql_resource_list_sql_container(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource list-sql-container '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlContainerThroughputGet
@try_manual
def step_sql_resource_show_sql_container_throughput(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource show-sql-container-throughput '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlDatabaseGet
@try_manual
def step_sql_resource_show_sql_database(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource show-sql-database '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlDatabaseList
@try_manual
def step_sql_resource_list_sql_database(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource list-sql-database '
             '--account-name "ddb1" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlDatabaseThroughputGet
@try_manual
def step_sql_resource_show_sql_database_throughput(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource show-sql-database-throughput '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlRoleAssignmentGet
@try_manual
def step_sql_resource_show_sql_role_assignment(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource show-sql-role-assignment '
             '--account-name "{myDatabaseAccount}" '
             '--resource-group "{rg_4}" '
             '--role-assignment-id "myRoleAssignmentId"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlRoleAssignmentList
@try_manual
def step_sql_resource_list_sql_role_assignment(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource list-sql-role-assignment '
             '--account-name "{myDatabaseAccount}" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlRoleDefinitionGet
@try_manual
def step_sql_resource_show_sql_role_definition(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource show-sql-role-definition '
             '--account-name "{myDatabaseAccount}" '
             '--resource-group "{rg_4}" '
             '--role-definition-id "myRoleDefinitionId"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlRoleDefinitionList
@try_manual
def step_sql_resource_list_sql_role_definition(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource list-sql-role-definition '
             '--account-name "{myDatabaseAccount}" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlStoredProcedureGet
@try_manual
def step_sql_resource_show_sql_stored_procedure(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource show-sql-stored-procedure '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg_2}" '
             '--stored-procedure-name "storedProcedureName"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlStoredProcedureList
@try_manual
def step_sql_resource_list_sql_stored_procedure(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource list-sql-stored-procedure '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlTriggerGet
@try_manual
def step_sql_resource_show_sql_trigger(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource show-sql-trigger '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg_2}" '
             '--trigger-name "triggerName"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlTriggerList
@try_manual
def step_sql_resource_list_sql_trigger(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource list-sql-trigger '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlUserDefinedFunctionGet
@try_manual
def step_sql_resource_show_sql_user_defined_function(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource show-sql-user-defined-function '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg_2}" '
             '--user-defined-function-name "userDefinedFunctionName"',
             checks=checks)


# EXAMPLE: /SqlResources/get/CosmosDBSqlUserDefinedFunctionList
@try_manual
def step_sql_resource_list_sql_user_defined_function(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource list-sql-user-defined-function '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /SqlResources/post/CosmosDBSqlContainerBackupInformation
@try_manual
def step_sql_resource_retrieve(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource retrieve-continuou-backup-information '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--location "North Europe" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /SqlResources/post/CosmosDBSqlContainerMigrateToAutoscale
@try_manual
def step_sql_resource_migrate(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource migrate-sql-container-to-autoscale '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SqlResources/post/CosmosDBSqlContainerMigrateToManualThroughput
@try_manual
def step_sql_resource_migrate2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource migrate-sql-container-to-manual-throughput '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SqlResources/post/CosmosDBSqlDatabaseMigrateToAutoscale
@try_manual
def step_sql_resource_migrate3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource migrate-sql-database-to-autoscale '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SqlResources/post/CosmosDBSqlDatabaseMigrateToManualThroughput
@try_manual
def step_sql_resource_migrate4(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource migrate-sql-database-to-manual-throughput '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SqlResources/delete/CosmosDBSqlContainerDelete
@try_manual
def step_sql_resource_delete_sql_container(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource delete-sql-container '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SqlResources/delete/CosmosDBSqlDatabaseDelete
@try_manual
def step_sql_resource_delete_sql_database(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource delete-sql-database '
             '--account-name "ddb1" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SqlResources/delete/CosmosDBSqlRoleAssignmentDelete
@try_manual
def step_sql_resource_delete_sql_role_assignment(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource delete-sql-role-assignment '
             '--account-name "{myDatabaseAccount}" '
             '--resource-group "{rg_4}" '
             '--role-assignment-id "myRoleAssignmentId"',
             checks=checks)


# EXAMPLE: /SqlResources/delete/CosmosDBSqlRoleDefinitionDelete
@try_manual
def step_sql_resource_delete_sql_role_definition(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource delete-sql-role-definition '
             '--account-name "{myDatabaseAccount}" '
             '--resource-group "{rg_4}" '
             '--role-definition-id "myRoleDefinitionId"',
             checks=checks)


# EXAMPLE: /SqlResources/delete/CosmosDBSqlStoredProcedureDelete
@try_manual
def step_sql_resource_delete_sql_stored_procedure(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource delete-sql-stored-procedure '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}" '
             '--stored-procedure-name "storedProcedureName"',
             checks=checks)


# EXAMPLE: /SqlResources/delete/CosmosDBSqlTriggerDelete
@try_manual
def step_sql_resource_delete_sql_trigger(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource delete-sql-trigger '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}" '
             '--trigger-name "triggerName"',
             checks=checks)


# EXAMPLE: /SqlResources/delete/CosmosDBSqlUserDefinedFunctionDelete
@try_manual
def step_sql_resource_delete_sql_user_defined_function(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb sql-resource delete-sql-user-defined-function '
             '--account-name "ddb1" '
             '--container-name "containerName" '
             '--database-name "{myDatabase}" '
             '--resource-group "{rg}" '
             '--user-defined-function-name "userDefinedFunctionName"',
             checks=checks)


# EXAMPLE: /TableResources/put/CosmosDBTableReplace
@try_manual
def step_table_resource_create_update_table(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb table-resource create-update-table '
             '--account-name "ddb1" '
             '--location "West US" '
             '--id "tableName" '
             '--resource-group "{rg}" '
             '--table-name "tableName"',
             checks=checks)


# EXAMPLE: /TableResources/put/CosmosDBTableThroughputUpdate
@try_manual
def step_table_resource_update_table_throughput(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb table-resource update-table-throughput '
             '--account-name "ddb1" '
             '--resource-group "{rg}" '
             '--table-name "tableName" '
             '--location "West US" '
             '--throughput 400',
             checks=checks)


# EXAMPLE: /TableResources/get/CosmosDBTableGet
@try_manual
def step_table_resource_show_table(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb table-resource show-table '
             '--account-name "ddb1" '
             '--resource-group "{rg}" '
             '--table-name "tableName"',
             checks=checks)


# EXAMPLE: /TableResources/get/CosmosDBTableList
@try_manual
def step_table_resource_list_table(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb table-resource list-table '
             '--account-name "ddb1" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /TableResources/get/CosmosDBTableThroughputGet
@try_manual
def step_table_resource_show_table_throughput(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb table-resource show-table-throughput '
             '--account-name "ddb1" '
             '--resource-group "{rg}" '
             '--table-name "tableName"',
             checks=checks)


# EXAMPLE: /TableResources/post/CosmosDBTableMigrateToAutoscale
@try_manual
def step_table_resource_migrate_table_to_autoscale(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb table-resource migrate-table-to-autoscale '
             '--account-name "ddb1" '
             '--resource-group "{rg}" '
             '--table-name "tableName"',
             checks=checks)


# EXAMPLE: /TableResources/post/CosmosDBTableMigrateToManualThroughput
@try_manual
def step_table_resource_migrate(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb table-resource migrate-table-to-manual-throughput '
             '--account-name "ddb1" '
             '--resource-group "{rg}" '
             '--table-name "tableName"',
             checks=checks)


# EXAMPLE: /TableResources/delete/CosmosDBTableDelete
@try_manual
def step_table_resource_delete_table(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cosmosdb table-resource delete-table '
             '--account-name "ddb1" '
             '--resource-group "{rg}" '
             '--table-name "tableName"',
             checks=checks)
