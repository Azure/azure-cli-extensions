# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.3, generator: @autorest/python@5.16.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.core.configuration import Configuration
from azure.core.pipeline import policies

from ._version import VERSION

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any


class AzureArcDataManagementClientConfiguration(
    Configuration
):  # pylint: disable=too-many-instance-attributes
    """Configuration for AzureArcDataManagementClient.

    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param subscription_id: The ID of the Azure subscription.
    :type subscription_id: str
    :keyword api_version: Api Version. Default value is "2022-03-01-preview". Note that overriding
     this default value may result in unsupported behavior.
    :paramtype api_version: str
    """

    def __init__(
        self,
        subscription_id,  # type: str
        **kwargs,  # type: Any
    ):
        # type: (...) -> None
        super(AzureArcDataManagementClientConfiguration, self).__init__(
            **kwargs
        )
        api_version = kwargs.pop(
            "api_version", "2022-03-01-preview"
        )  # type: str

        if subscription_id is None:
            raise ValueError("Parameter 'subscription_id' must not be None.")

        self.subscription_id = subscription_id
        self.api_version = api_version
        kwargs.setdefault(
            "sdk_moniker", "azurearcdatamanagementclient/{}".format(VERSION)
        )
        self._configure(**kwargs)

    def _configure(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        self.user_agent_policy = kwargs.get(
            "user_agent_policy"
        ) or policies.UserAgentPolicy(**kwargs)
        self.headers_policy = kwargs.get(
            "headers_policy"
        ) or policies.HeadersPolicy(**kwargs)
        self.proxy_policy = kwargs.get("proxy_policy") or policies.ProxyPolicy(
            **kwargs
        )
        self.logging_policy = kwargs.get(
            "logging_policy"
        ) or policies.NetworkTraceLoggingPolicy(**kwargs)
        self.http_logging_policy = kwargs.get(
            "http_logging_policy"
        ) or policies.HttpLoggingPolicy(**kwargs)
        self.retry_policy = kwargs.get("retry_policy") or policies.RetryPolicy(
            **kwargs
        )
        self.custom_hook_policy = kwargs.get(
            "custom_hook_policy"
        ) or policies.CustomHookPolicy(**kwargs)
        self.redirect_policy = kwargs.get(
            "redirect_policy"
        ) or policies.RedirectPolicy(**kwargs)
        self.authentication_policy = kwargs.get("authentication_policy")
