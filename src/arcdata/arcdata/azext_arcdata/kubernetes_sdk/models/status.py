# coding: utf-8

"""
    Microsoft SQL Server Controller Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Status(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"state": "str", "health_status": "str", "details": "str"}

    attribute_map = {
        "state": "State",
        "health_status": "HealthStatus",
        "details": "Details",
    }

    def __init__(
        self, state=None, health_status=None, details=None
    ):  # noqa: E501
        """Status - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._health_status = None
        self._details = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if health_status is not None:
            self.health_status = health_status
        if details is not None:
            self.details = details

    @property
    def state(self):
        """Gets the state of this Status.  # noqa: E501


        :return: The state of this Status.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Status.


        :param state: The state of this Status.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def health_status(self):
        """Gets the health_status of this Status.  # noqa: E501


        :return: The health_status of this Status.  # noqa: E501
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this Status.


        :param health_status: The health_status of this Status.  # noqa: E501
        :type: str
        """

        self._health_status = health_status

    @property
    def details(self):
        """Gets the details of this Status.  # noqa: E501


        :return: The details of this Status.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Status.


        :param details: The details of this Status.  # noqa: E501
        :type: str
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value,
                    )
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Status, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Status):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
