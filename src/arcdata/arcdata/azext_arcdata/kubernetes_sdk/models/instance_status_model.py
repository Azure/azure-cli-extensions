# coding: utf-8

"""
    Microsoft SQL Server Controller Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from azext_arcdata.kubernetes_sdk.models.dashboards import (
    Dashboards,
)  # noqa: F401,E501
from azext_arcdata.kubernetes_sdk.models.status import Status  # noqa: F401,E501


class InstanceStatusModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "instance_name": "str",
        "status": "Status",
        "dashboards": "Dashboards",
    }

    attribute_map = {
        "instance_name": "InstanceName",
        "status": "Status",
        "dashboards": "Dashboards",
    }

    def __init__(
        self, instance_name=None, status=None, dashboards=None
    ):  # noqa: E501
        """InstanceStatusModel - a model defined in Swagger"""  # noqa: E501

        self._instance_name = None
        self._status = None
        self._dashboards = None
        self.discriminator = None

        if instance_name is not None:
            self.instance_name = instance_name
        if status is not None:
            self.status = status
        if dashboards is not None:
            self.dashboards = dashboards

    @property
    def instance_name(self):
        """Gets the instance_name of this InstanceStatusModel.  # noqa: E501


        :return: The instance_name of this InstanceStatusModel.  # noqa: E501
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this InstanceStatusModel.


        :param instance_name: The instance_name of this InstanceStatusModel.  # noqa: E501
        :type: str
        """

        self._instance_name = instance_name

    @property
    def status(self):
        """Gets the status of this InstanceStatusModel.  # noqa: E501


        :return: The status of this InstanceStatusModel.  # noqa: E501
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InstanceStatusModel.


        :param status: The status of this InstanceStatusModel.  # noqa: E501
        :type: Status
        """

        self._status = status

    @property
    def dashboards(self):
        """Gets the dashboards of this InstanceStatusModel.  # noqa: E501


        :return: The dashboards of this InstanceStatusModel.  # noqa: E501
        :rtype: Dashboards
        """
        return self._dashboards

    @dashboards.setter
    def dashboards(self, dashboards):
        """Sets the dashboards of this InstanceStatusModel.


        :param dashboards: The dashboards of this InstanceStatusModel.  # noqa: E501
        :type: Dashboards
        """

        self._dashboards = dashboards

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value,
                    )
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(InstanceStatusModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceStatusModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
