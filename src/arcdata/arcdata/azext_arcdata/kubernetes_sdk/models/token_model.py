# coding: utf-8

"""
    Controller API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TokenModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "token_type": "str",
        "access_token": "str",
        "expires_in": "int",
        "expires_on": "int",
        "token_id": "str",
        "namespace": "str",
        "context_type": "str",
    }

    attribute_map = {
        "token_type": "token_type",
        "access_token": "access_token",
        "expires_in": "expires_in",
        "expires_on": "expires_on",
        "token_id": "token_id",
        "namespace": "namespace",
        "context_type": "context_type",
    }

    def __init__(
        self,
        token_type=None,
        access_token=None,
        expires_in=None,
        expires_on=None,
        token_id=None,
        namespace=None,
        context_type=None,
    ):  # noqa: E501
        """TokenModel - a model defined in Swagger"""  # noqa: E501
        self._token_type = None
        self._access_token = None
        self._expires_in = None
        self._expires_on = None
        self._token_id = None
        self._namespace = None
        self._context_type = None
        self.discriminator = None
        if token_type is not None:
            self.token_type = token_type
        if access_token is not None:
            self.access_token = access_token
        if expires_in is not None:
            self.expires_in = expires_in
        if expires_on is not None:
            self.expires_on = expires_on
        if token_id is not None:
            self.token_id = token_id
        if namespace is not None:
            self.namespace = namespace
        if context_type is not None:
            self.context_type = context_type

    @property
    def token_type(self):
        """Gets the token_type of this TokenModel.  # noqa: E501


        :return: The token_type of this TokenModel.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this TokenModel.


        :param token_type: The token_type of this TokenModel.  # noqa: E501
        :type: str
        """

        self._token_type = token_type

    @property
    def access_token(self):
        """Gets the access_token of this TokenModel.  # noqa: E501


        :return: The access_token of this TokenModel.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this TokenModel.


        :param access_token: The access_token of this TokenModel.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def expires_in(self):
        """Gets the expires_in of this TokenModel.  # noqa: E501


        :return: The expires_in of this TokenModel.  # noqa: E501
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this TokenModel.


        :param expires_in: The expires_in of this TokenModel.  # noqa: E501
        :type: int
        """

        self._expires_in = expires_in

    @property
    def expires_on(self):
        """Gets the expires_on of this TokenModel.  # noqa: E501


        :return: The expires_on of this TokenModel.  # noqa: E501
        :rtype: int
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this TokenModel.


        :param expires_on: The expires_on of this TokenModel.  # noqa: E501
        :type: int
        """

        self._expires_on = expires_on

    @property
    def token_id(self):
        """Gets the token_id of this TokenModel.  # noqa: E501


        :return: The token_id of this TokenModel.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this TokenModel.


        :param token_id: The token_id of this TokenModel.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    @property
    def namespace(self):
        """Gets the namespace of this TokenModel.  # noqa: E501


        :return: The namespace of this TokenModel.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this TokenModel.


        :param namespace: The namespace of this TokenModel.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def context_type(self):
        """Gets the context_type of this TokenModel.  # noqa: E501


        :return: The context_type of this TokenModel.  # noqa: E501
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """Sets the context_type of this TokenModel.


        :param context_type: The context_type of this TokenModel.  # noqa: E501
        :type: str
        """

        self._context_type = context_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value,
                    )
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(TokenModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
