# coding: utf-8

"""
    Microsoft SQL Server Controller Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class EndpointModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "description": "str",
        "endpoint": "str",
        "ip": "str",
        "port": "int",
        "path": "str",
        "protocol": "str",
        "service": "str",
    }

    attribute_map = {
        "name": "name",
        "description": "description",
        "endpoint": "endpoint",
        "ip": "ip",
        "port": "port",
        "path": "path",
        "protocol": "protocol",
        "service": "service",
    }

    def __init__(
        self,
        name=None,
        description=None,
        endpoint=None,
        ip=None,
        port=None,
        path=None,
        protocol=None,
        service=None,
    ):  # noqa: E501
        """EndpointModel - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._endpoint = None
        self._ip = None
        self._port = None
        self._path = None
        self._protocol = None
        self._service = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if endpoint is not None:
            self.endpoint = endpoint
        if ip is not None:
            self.ip = ip
        if port is not None:
            self.port = port
        if path is not None:
            self.path = path
        if protocol is not None:
            self.protocol = protocol
        if service is not None:
            self.service = service

    @property
    def name(self):
        """Gets the name of this EndpointModel.  # noqa: E501


        :return: The name of this EndpointModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EndpointModel.


        :param name: The name of this EndpointModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this EndpointModel.  # noqa: E501


        :return: The description of this EndpointModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EndpointModel.


        :param description: The description of this EndpointModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def endpoint(self):
        """Gets the endpoint of this EndpointModel.  # noqa: E501


        :return: The endpoint of this EndpointModel.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this EndpointModel.


        :param endpoint: The endpoint of this EndpointModel.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def ip(self):
        """Gets the ip of this EndpointModel.  # noqa: E501


        :return: The ip of this EndpointModel.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this EndpointModel.


        :param ip: The ip of this EndpointModel.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def port(self):
        """Gets the port of this EndpointModel.  # noqa: E501


        :return: The port of this EndpointModel.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this EndpointModel.


        :param port: The port of this EndpointModel.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def path(self):
        """Gets the path of this EndpointModel.  # noqa: E501


        :return: The path of this EndpointModel.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this EndpointModel.


        :param path: The path of this EndpointModel.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def protocol(self):
        """Gets the protocol of this EndpointModel.  # noqa: E501


        :return: The protocol of this EndpointModel.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this EndpointModel.


        :param protocol: The protocol of this EndpointModel.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def service(self):
        """Gets the service of this EndpointModel.  # noqa: E501


        :return: The service of this EndpointModel.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this EndpointModel.


        :param service: The service of this EndpointModel.  # noqa: E501
        :type: str
        """

        self._service = service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value,
                    )
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(EndpointModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
