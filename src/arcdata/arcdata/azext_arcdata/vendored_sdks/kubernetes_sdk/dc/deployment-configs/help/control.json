{
  "apiVersion": {
    "name": "API Version",
    "description": "The API version"
  },
  "metadata": {
    "kind": {
      "name": "Deployment Type",
      "description": "The type of deployment - in this case a 'Cluster'"
    },
    "name": {
      "name": "Cluster Name",
      "description": "SQL Server big data cluster name. This is also the name of the Kubernetes namespace to deploy SQLServer big data cluster into."
    }
  },
  "spec": {
        "docker": {
          "registry": {
            "name": "Docker Registry",
            "description": "The private Docker registry where the images used to deploy the SQL Server big data cluster are stored."
          },
          "repository": {
            "name": "Docker Repository",
            "description": "The private Docker repository within the above registry where images used to deploy the big data cluster are stored."
          },
          "imageTag": {
            "name": "Docker Image Tag",
            "description": "The Docker image tag used for the Docker images used for deploying the SQL Server big data cluster."
          },
          "imagePullPolicy": {
            "name": "Docker Image Pull Policy",
            "description": "The Docker image pull policy."
          }
        },
        "storage": {
          "backups": {
            "className": {
              "name": "Kubernetes Storage Class",
              "description": "This indicates the name of the Kubernetes Storage Class to use. You must pre-provision the storage class and the persistent volumes or you can use a built in storage class if the platform you are deploying provides this capability."
            },
            "accessMode": {
              "name": "Kubernetes Persistent Volume Access Mode",
              "description": "Access mode for the Persistent Volume. Default value is ReadWriteOnce."
            },
            "size": {
              "name": "Kubernetes Persistent Volume Claim Size",
              "description": "The size of each Persisted Volume Claim created. Default value is 15Gi."
            }
          },
          "data": {
            "className": {
              "name": "Kubernetes Storage Class",
              "description": "This indicates the name of the Kubernetes Storage Class to use. You must pre-provision the storage class and the persistent volumes or you can use a built in storage class if the platform you are deploying provides this capability."
            },
            "accessMode": {
              "name": "Kubernetes Persistent Volume Access Mode",
              "description": "Access mode for the Persistent Volume. Default value is ReadWriteOnce."
            },
            "size": {
              "name": "Kubernetes Persistent Volume Claim Size",
              "description": "The size of each Persisted Volume Claim created. Default value is 15Gi."
            }
          },
          "logs": {
            "className": {
              "name": "Kubernetes Storage Class",
              "description": "This indicates the name of the Kubernetes Storage Class to use. You must pre-provision the storage class and the persistent volumes or you can use a built in storage class if the platform you are deploying provides this capability."
            },
            "accessMode": {
              "name": "Kubernetes Persistent Volume Access Mode",
              "description": "Access mode for the Persistent Volume. Default value is ReadWriteOnce."
            },
            "size": {
              "name": "Kubernetes Persistent Volume Claim Size",
              "description": "The size of each Persisted Volume Claim created. Default value is 10Gi."
            }
          }
        },
        "endpoints": [
          {
            "name": {
              "name": "Controller Endpoint Name",
              "description": "Name of Kubernetes service created for controller endpoint."
            },
            "serviceType": {
              "name": "Controller Service Type",
              "description": "Kubernetes service type for controller service. Possible values are LoadBalancer or NodePort."
            },
            "port": {
              "name": "Controller Service Port",
              "description": "The TCP/IP port that the controller service listens on the public network."
            }
          },
          {
            "name": {
              "name": "Management Proxy Endpoint Name",
              "description": "Name of Kubernetes service created for management proxy endpoint."
            },
            "serviceType": {
              "name": "Management Proxy Service Type",
              "description": "Kubernetes service type for management proxy service. Possible values are LoadBalancer or NodePort."
            },
            "port": {
              "name": "Management Proxy Service Port",
              "description": "The TCP/IP port that proxy service listens on the public network."
            }
          },
          {
            "name": {
              "name": "App Proxy Endpoint Name",
              "description": "Name of Kubernetes service created for app proxy endpoint."
            },
            "serviceType": {
              "name": "App Proxy Service Type",
              "description": "Kubernetes service type for proxy service. Possible values are LoadBalancer or NodePort."
            },
            "port": {
              "name": "App Proxy Service Port",
              "description": "The TCP/IP port that proxy service listens on the public network."
            }
          },
          {
            "name": {
              "name": "Gateway Endpoint Name",
              "description": "Name of Kubernetes service created for gateway endpoint."
            },
            "serviceType": {
              "name": "Gateway Service Type",
              "description": "Kubernetes service type for gateway service. Possible values are LoadBalancer or NodePort."
            },
            "port": {
              "name": "Gateway Service Port",
              "description": "The TCP/IP port that gateway service listens on the public network."
            }
          }
        ],
        "settings": {
          "controldb": {
            "backupCount": "The number of controldb backups to keep. As new backups are created, older backups are deleted once this number is exceeded."
          },
          "controller": {
            "logs.rotation.size": {
              "name": "Log Storage Size",
              "description": "Maximum size allowed for controller logs in MB. Oldest logs will be deleted to maintain size limit."
            },
            "logs.rotation.days": {
              "name": "Days of Logs Kept",
              "description": "Maximum days allowed for controller logs. Logs older than the maximum allowed days will be deleted."
            }
          }
        }
      },
      "sparkHead": {
        "replicas": {
          "name": "Spark Head Replicas",
          "description": "The number of replicas for the spark head node."
        },
        "storage": {
          "className": {
            "name": "Kubernetes Storage Class",
            "description": "This indicates the name of the Kubernetes Storage Class to use. You must pre-provision the storage class and the persistent volumes or you can use a built in storage class if the platform you are deploying provides this capability."
          },
          "accessMode": {
            "name": "Kubernetes Persistent Volume Access Mode",
            "description": "Access mode for the Persistent Volume. Default value is ReadWriteOnce."
          },
          "size": {
            "name": "Kubernetes Persistent Volume Claim Size",
            "description": "The size of each Persisted Volume Claim created. Default value is 10Gi."
          }
        }
      },
      "namenode": {
        "replicas": {
          "name": "Hadoop Replicas",
          "description": "The number of replicas for hadoop"
        },
        "spec": {
          "storage": {
            "className": {
              "name": "Kubernetes Storage Class",
              "description": "This indicates the name of the Kubernetes Storage Class to use. You must pre-provision the storage class and the persistent volumes or you can use a built in storage class if the platform you are deploying provides this capability."
            },
            "accessMode": {
              "name": "Kubernetes Persistent Volume Access Mode",
              "description": "Access mode for the Persistent Volume. Default value is ReadWriteOnce."
            },
            "size": {
              "name": "Kubernetes Persistent Volume Claim Size",
              "description": "The size of each Persisted Volume Claim created. Default value is 10Gi."
            }
          }
        }
      },
      "zookeeper": {
        "replicas": {
          "name": "Zookeeper Replicas",
          "description": "The number of replicas for zookeeper."
        },
        "storage": {
          "className": {
            "name": "Kubernetes Storage Class",
            "description": "This indicates the name of the Kubernetes Storage Class to use. You must pre-provision the storage class and the persistent volumes or you can use a built in storage class if the platform you are deploying provides this capability."
          },
          "accessMode": {
            "name": "Kubernetes Persistent Volume Access Mode",
            "description": "Access mode for the Persistent Volume. Default value is ReadWriteOnce."
          },
          "size": {
            "name": "Kubernetes Persistent Volume Claim Size",
            "description": "The size of each Persisted Volume Claim created. Default value is 10Gi."
          }
        }
      },
      "hadoop": {
        "imageName": {
          "name": "Hadoop Image Name",
          "description": "The name of the hadoop image - mssql-hadoop"
        },
        "yarn": {
          "nodeManager": {
            "memory": {
              "name": "Yarn Node Manager Memory",
              "description": "The standard memory is 18432"
            },
            "vcores": {
              "name": "Yarn Node Manager Virtual Cores",
              "description": "The standard virtual cores is 6"
            }
          },
          "schedulerMax": {
            "memory": {
              "name": "Yarn Scheduler Max Memory",
              "description": "The standard memory is 18432"
            },
            "vcores": {
              "name": "Yarn Scheduler Max Virtual Cores",
              "description": "The standard virtual cores is 6"
            }
          },
          "capacityScheduler": {
            "maxAmPercent": {
              "name": "Capacity Scheduler Max Percent",
              "description": "The standard max percentage is 0.3"
            }
          }
        },
        "spark": {
          "driverMemory": {
            "name": "Spark Driver Memory",
            "description": "The standard Spark driver memory is 2g"
          },
          "driverCores": {
            "name": "Spark Driver Cores",
            "description": "The standard Spark driverCores is 1"
          },
          "executorInstances": {
            "name": "Spark Executor Instances",
            "description": "The standard Spark executor instances is 3"
          },
          "executorMemory": {
            "name": "Spark Executor Memory",
            "description": "The standard Spark executor memory is 1536m"
          },
          "executorCores": {
            "name": "Spark Executor Cores",
            "description": "The standard Spark executor cores is 1"
          }
        }
      },
      "domainController": {
        "realm": {
          "name": "Domain Controller Realm",
          "description": "Standard is AZDATA.LOCAL"
        },
        "domain": {
          "name": "Domain Controller Domain",
          "description": "Standard is azdata.local"
        },
        "workgroup": {
          "name": "Domain Controller Workgroup",
          "description": "Standard is AZDATA"
        }
      }
}
