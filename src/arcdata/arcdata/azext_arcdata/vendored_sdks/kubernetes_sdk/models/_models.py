# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.4, generator: @autorest/python@6.4.3)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTask(
    _serialization.Model
):
    """ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTask.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpec
    :ivar status:
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpec
        :keyword status:
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskList(
    _serialization.Model
):
    """PostgreSqlRestoreTaskList is a list of PostgreSqlRestoreTask.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of postgresqlrestoretasks. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTask]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTask]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[
            "_models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTask"
        ],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of postgresqlrestoretasks. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTask]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpec(
    _serialization.Model
):
    """ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpec.

    All required parameters must be populated in order to send to Azure.

    :ivar destination_name: The name of the PostgreSql resource to restore to. Required.
    :vartype destination_name: str
    :ivar destination_storage:
    :vartype destination_storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorage
    :ivar dry_run: If true, the restore operation will be validated but not executed.
    :vartype dry_run: bool
    :ivar restore_point: Restore point in time. Required.
    :vartype restore_point: ~datetime.datetime
    :ivar source_name: The name of the PostgreSql resource to restore from. Required.
    :vartype source_name: str
    """

    _validation = {
        "destination_name": {"required": True},
        "restore_point": {"required": True},
        "source_name": {"required": True},
    }

    _attribute_map = {
        "destination_name": {"key": "destinationName", "type": "str"},
        "destination_storage": {
            "key": "destinationStorage",
            "type": "ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorage",
        },
        "dry_run": {"key": "dryRun", "type": "bool"},
        "restore_point": {"key": "restorePoint", "type": "iso-8601"},
        "source_name": {"key": "sourceName", "type": "str"},
    }

    def __init__(
        self,
        *,
        destination_name: str,
        restore_point: datetime.datetime,
        source_name: str,
        destination_storage: Optional[
            "_models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorage"
        ] = None,
        dry_run: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword destination_name: The name of the PostgreSql resource to restore to. Required.
        :paramtype destination_name: str
        :keyword destination_storage:
        :paramtype destination_storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorage
        :keyword dry_run: If true, the restore operation will be validated but not executed.
        :paramtype dry_run: bool
        :keyword restore_point: Restore point in time. Required.
        :paramtype restore_point: ~datetime.datetime
        :keyword source_name: The name of the PostgreSql resource to restore from. Required.
        :paramtype source_name: str
        """
        super().__init__(**kwargs)
        self.destination_name = destination_name
        self.destination_storage = destination_storage
        self.dry_run = dry_run
        self.restore_point = restore_point
        self.source_name = source_name


class ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorage(
    _serialization.Model
):
    """ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorage.

    :ivar backups:
    :vartype backups:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageBackups
    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageData
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageLogs
    """

    _attribute_map = {
        "backups": {
            "key": "backups",
            "type": "ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageBackups",
        },
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageData",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        backups: Optional[
            "_models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageBackups"
        ] = None,
        data: Optional[
            "_models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageData"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword backups:
        :paramtype backups:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageBackups
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageData
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageLogs
        """
        super().__init__(**kwargs)
        self.backups = backups
        self.data = data
        self.logs = logs


class ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageBackups(
    _serialization.Model
):
    """ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageBackups.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageBackupsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageBackupsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageBackupsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageBackupsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageBackupsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageBackupsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageData(
    _serialization.Model
):
    """ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageData.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageDataVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageDataVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageDataVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageDataVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageDataVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageDataVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageLogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageLogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageLogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageLogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageLogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageLogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskSpecDestinationStorageLogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar earliest_restore_time: The earliest time that the instance can be restored to.
    :vartype earliest_restore_time: ~datetime.datetime
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar latest_restore_time: The latest time that the instance can be restored to.
    :vartype latest_restore_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar percent_complete:
    :vartype percent_complete: int
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatusReleasedVersions
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "earliest_restore_time": {
            "key": "earliestRestoreTime",
            "type": "iso-8601",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "latest_restore_time": {"key": "latestRestoreTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "percent_complete": {"key": "percentComplete", "type": "int"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatusReleasedVersions",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        earliest_restore_time: Optional[datetime.datetime] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        latest_restore_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        observed_generation: Optional[int] = None,
        percent_complete: Optional[int] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatusReleasedVersions"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword earliest_restore_time: The earliest time that the instance can be restored to.
        :paramtype earliest_restore_time: ~datetime.datetime
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword latest_restore_time: The latest time that the instance can be restored to.
        :paramtype latest_restore_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword percent_complete:
        :paramtype percent_complete: int
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatusReleasedVersions
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.earliest_restore_time = earliest_restore_time
        self.endpoints = endpoints
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.latest_restore_time = latest_restore_time
        self.message = message
        self.observed_generation = observed_generation
        self.percent_complete = percent_complete
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataPostgresqlTasksV1Beta1PostgreSqlRestoreTaskStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTask(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTask.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTaskSpec
    :ivar status:
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTaskStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTaskSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTaskStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTaskSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTaskStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTaskSpec
        :keyword status:
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTaskStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTaskList(
    _serialization.Model
):
    """SqlManagedInstanceReprovisionReplicaTaskList is a list of
    SqlManagedInstanceReprovisionReplicaTask.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstancereprovisionreplicatasks. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTask]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTask]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[
            "_models.ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTask"
        ],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstancereprovisionreplicatasks. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTask]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTaskSpec(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTaskSpec.

    :ivar replica_name:
    :vartype replica_name: str
    """

    _attribute_map = {
        "replica_name": {"key": "replicaName", "type": "str"},
    }

    def __init__(
        self, *, replica_name: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword replica_name:
        :paramtype replica_name: str
        """
        super().__init__(**kwargs)
        self.replica_name = replica_name


class ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTaskStatus(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceReprovisionReplicaTaskStatus.

    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar percent_complete:
    :vartype percent_complete: int
    :ivar reason:
    :vartype reason: str
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "percent_complete": {"key": "percentComplete", "type": "int"},
        "reason": {"key": "reason", "type": "str"},
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        observed_generation: Optional[int] = None,
        percent_complete: Optional[int] = None,
        reason: Optional[str] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword percent_complete:
        :paramtype percent_complete: int
        :keyword reason:
        :paramtype reason: str
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.endpoints = endpoints
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.observed_generation = observed_generation
        self.percent_complete = percent_complete
        self.reason = reason
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataSqlTasksV1Beta1SqlManagedInstanceRestoreTaskList(
    _serialization.Model
):
    """SqlManagedInstanceRestoreTaskList is a list of SqlManagedInstanceRestoreTask.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstancerestoretasks. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstancerestoretasks. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlTasksV1SqlManagedInstanceRestoreTaskList(
    _serialization.Model
):
    """SqlManagedInstanceRestoreTaskList is a list of SqlManagedInstanceRestoreTask.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstancerestoretasks. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstancerestoretasks. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV10SqlManagedInstance(_serialization.Model):
    """ComMicrosoftArcdataSqlV10SqlManagedInstance.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpec
    :ivar status:
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpec
        :keyword status:
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataSqlV10SqlManagedInstanceList(_serialization.Model):
    """SqlManagedInstanceList is a list of SqlManagedInstance.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstances. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstance]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstance]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ComMicrosoftArcdataSqlV10SqlManagedInstance"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstances. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstance]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpec(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpec.

    :ivar backup:
    :vartype backup:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecBackup
    :ivar dev:
    :vartype dev: bool
    :ivar license_type:
    :vartype license_type: str
    :ivar monitoring_profile:
    :vartype monitoring_profile: str
    :ivar orchestrator_replicas:
    :vartype orchestrator_replicas: int
    :ivar parent_resource:
    :vartype parent_resource:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecParentResource
    :ivar preferred_primary_replica_spec:
    :vartype preferred_primary_replica_spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecPreferredPrimaryReplicaSpec
    :ivar readable_secondaries:
    :vartype readable_secondaries: int
    :ivar replicas:
    :vartype replicas: int
    :ivar scheduling:
    :vartype scheduling:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecScheduling
    :ivar security:
    :vartype security:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurity
    :ivar services:
    :vartype services:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServices
    :ivar settings: Configure SQL Server on Linux with the mssql-conf tool. All supported
     properties:
     https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-configure-mssql-conf?view=sql-server-ver16.
    :vartype settings: any
    :ivar storage:
    :vartype storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorage
    :ivar sync_secondary_to_commit:
    :vartype sync_secondary_to_commit: int
    :ivar tier:
    :vartype tier: str
    :ivar update:
    :vartype update:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecUpdate
    """

    _attribute_map = {
        "backup": {
            "key": "backup",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecBackup",
        },
        "dev": {"key": "dev", "type": "bool"},
        "license_type": {"key": "licenseType", "type": "str"},
        "monitoring_profile": {"key": "monitoringProfile", "type": "str"},
        "orchestrator_replicas": {"key": "orchestratorReplicas", "type": "int"},
        "parent_resource": {
            "key": "parentResource",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecParentResource",
        },
        "preferred_primary_replica_spec": {
            "key": "preferredPrimaryReplicaSpec",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecPreferredPrimaryReplicaSpec",
        },
        "readable_secondaries": {"key": "readableSecondaries", "type": "int"},
        "replicas": {"key": "replicas", "type": "int"},
        "scheduling": {
            "key": "scheduling",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecScheduling",
        },
        "security": {
            "key": "security",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurity",
        },
        "services": {
            "key": "services",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServices",
        },
        "settings": {"key": "settings", "type": "object"},
        "storage": {
            "key": "storage",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorage",
        },
        "sync_secondary_to_commit": {
            "key": "syncSecondaryToCommit",
            "type": "int",
        },
        "tier": {"key": "tier", "type": "str"},
        "update": {
            "key": "update",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecUpdate",
        },
    }

    def __init__(
        self,
        *,
        backup: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecBackup"
        ] = None,
        dev: Optional[bool] = None,
        license_type: Optional[str] = None,
        monitoring_profile: Optional[str] = None,
        orchestrator_replicas: Optional[int] = None,
        parent_resource: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecParentResource"
        ] = None,
        preferred_primary_replica_spec: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecPreferredPrimaryReplicaSpec"
        ] = None,
        readable_secondaries: Optional[int] = None,
        replicas: Optional[int] = None,
        scheduling: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecScheduling"
        ] = None,
        security: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurity"
        ] = None,
        services: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServices"
        ] = None,
        settings: Optional[Any] = None,
        storage: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorage"
        ] = None,
        sync_secondary_to_commit: Optional[int] = None,
        tier: Optional[str] = None,
        update: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecUpdate"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword backup:
        :paramtype backup:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecBackup
        :keyword dev:
        :paramtype dev: bool
        :keyword license_type:
        :paramtype license_type: str
        :keyword monitoring_profile:
        :paramtype monitoring_profile: str
        :keyword orchestrator_replicas:
        :paramtype orchestrator_replicas: int
        :keyword parent_resource:
        :paramtype parent_resource:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecParentResource
        :keyword preferred_primary_replica_spec:
        :paramtype preferred_primary_replica_spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecPreferredPrimaryReplicaSpec
        :keyword readable_secondaries:
        :paramtype readable_secondaries: int
        :keyword replicas:
        :paramtype replicas: int
        :keyword scheduling:
        :paramtype scheduling:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecScheduling
        :keyword security:
        :paramtype security:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurity
        :keyword services:
        :paramtype services:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServices
        :keyword settings: Configure SQL Server on Linux with the mssql-conf tool. All supported
         properties:
         https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-configure-mssql-conf?view=sql-server-ver16.
        :paramtype settings: any
        :keyword storage:
        :paramtype storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorage
        :keyword sync_secondary_to_commit:
        :paramtype sync_secondary_to_commit: int
        :keyword tier:
        :paramtype tier: str
        :keyword update:
        :paramtype update:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecUpdate
        """
        super().__init__(**kwargs)
        self.backup = backup
        self.dev = dev
        self.license_type = license_type
        self.monitoring_profile = monitoring_profile
        self.orchestrator_replicas = orchestrator_replicas
        self.parent_resource = parent_resource
        self.preferred_primary_replica_spec = preferred_primary_replica_spec
        self.readable_secondaries = readable_secondaries
        self.replicas = replicas
        self.scheduling = scheduling
        self.security = security
        self.services = services
        self.settings = settings
        self.storage = storage
        self.sync_secondary_to_commit = sync_secondary_to_commit
        self.tier = tier
        self.update = update


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecBackup(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecBackup.

    :ivar retention_period_in_days: Anything.
    :vartype retention_period_in_days: any
    """

    _attribute_map = {
        "retention_period_in_days": {
            "key": "retentionPeriodInDays",
            "type": "object",
        },
    }

    def __init__(
        self, *, retention_period_in_days: Optional[Any] = None, **kwargs: Any
    ) -> None:
        """
        :keyword retention_period_in_days: Anything.
        :paramtype retention_period_in_days: any
        """
        super().__init__(**kwargs)
        self.retention_period_in_days = retention_period_in_days


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecParentResource(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecParentResource.

    :ivar api_group:
    :vartype api_group: str
    :ivar kind:
    :vartype kind: str
    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    """

    _attribute_map = {
        "api_group": {"key": "apiGroup", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        api_group: Optional[str] = None,
        kind: Optional[str] = None,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_group:
        :paramtype api_group: str
        :keyword kind:
        :paramtype kind: str
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.api_group = api_group
        self.kind = kind
        self.name = name
        self.namespace = namespace


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecPreferredPrimaryReplicaSpec(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecPreferredPrimaryReplicaSpec.

    :ivar preferred_primary_replica:
    :vartype preferred_primary_replica: str
    :ivar primary_replica_failover_interval:
    :vartype primary_replica_failover_interval: int
    """

    _attribute_map = {
        "preferred_primary_replica": {
            "key": "preferredPrimaryReplica",
            "type": "str",
        },
        "primary_replica_failover_interval": {
            "key": "primaryReplicaFailoverInterval",
            "type": "int",
        },
    }

    def __init__(
        self,
        *,
        preferred_primary_replica: Optional[str] = None,
        primary_replica_failover_interval: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_primary_replica:
        :paramtype preferred_primary_replica: str
        :keyword primary_replica_failover_interval:
        :paramtype primary_replica_failover_interval: int
        """
        super().__init__(**kwargs)
        self.preferred_primary_replica = preferred_primary_replica
        self.primary_replica_failover_interval = (
            primary_replica_failover_interval
        )


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecScheduling(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecScheduling.

    :ivar affinity:
    :vartype affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinity
    :ivar default:
    :vartype default:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefault
    :ivar node_selector: Dictionary of :code:`<string>`.
    :vartype node_selector: dict[str, str]
    :ivar topology_spread_constraints:
    :vartype topology_spread_constraints:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem]
    """

    _attribute_map = {
        "affinity": {
            "key": "affinity",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinity",
        },
        "default": {
            "key": "default",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefault",
        },
        "node_selector": {"key": "nodeSelector", "type": "{str}"},
        "topology_spread_constraints": {
            "key": "topologySpreadConstraints",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem]",
        },
    }

    def __init__(
        self,
        *,
        affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinity"
        ] = None,
        default: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefault"
        ] = None,
        node_selector: Optional[Dict[str, str]] = None,
        topology_spread_constraints: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword affinity:
        :paramtype affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinity
        :keyword default:
        :paramtype default:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefault
        :keyword node_selector: Dictionary of :code:`<string>`.
        :paramtype node_selector: dict[str, str]
        :keyword topology_spread_constraints:
        :paramtype topology_spread_constraints:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem]
        """
        super().__init__(**kwargs)
        self.affinity = affinity
        self.default = default
        self.node_selector = node_selector
        self.topology_spread_constraints = topology_spread_constraints


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinity.

    :ivar node_affinity:
    :vartype node_affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinity
    :ivar pod_affinity:
    :vartype pod_affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinity
    :ivar pod_anti_affinity:
    :vartype pod_anti_affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity
    """

    _attribute_map = {
        "node_affinity": {
            "key": "nodeAffinity",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinity",
        },
        "pod_affinity": {
            "key": "podAffinity",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinity",
        },
        "pod_anti_affinity": {
            "key": "podAntiAffinity",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity",
        },
    }

    def __init__(
        self,
        *,
        node_affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinity"
        ] = None,
        pod_affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinity"
        ] = None,
        pod_anti_affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword node_affinity:
        :paramtype node_affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinity
        :keyword pod_affinity:
        :paramtype pod_affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinity
        :keyword pod_anti_affinity:
        :paramtype pod_anti_affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity
        """
        super().__init__(**kwargs)
        self.node_affinity = node_affinity
        self.pod_affinity = pod_affinity
        self.pod_anti_affinity = pod_anti_affinity


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinity.

    :ivar preferred_during_scheduling_ignored_during_execution:
    :vartype preferred_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
    :ivar required_during_scheduling_ignored_during_execution:
    :vartype required_during_scheduling_ignored_during_execution:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
    """

    _attribute_map = {
        "preferred_during_scheduling_ignored_during_execution": {
            "key": "preferredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]",
        },
        "required_during_scheduling_ignored_during_execution": {
            "key": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution",
        },
    }

    def __init__(
        self,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_during_scheduling_ignored_during_execution:
        :paramtype preferred_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
        :keyword required_during_scheduling_ignored_during_execution:
        :paramtype required_during_scheduling_ignored_during_execution:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
        """
        super().__init__(**kwargs)
        self.preferred_during_scheduling_ignored_during_execution = (
            preferred_during_scheduling_ignored_during_execution
        )
        self.required_during_scheduling_ignored_during_execution = (
            required_during_scheduling_ignored_during_execution
        )


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar preference:
    :vartype preference:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference
    :ivar weight:
    :vartype weight: int
    """

    _attribute_map = {
        "preference": {
            "key": "preference",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference",
        },
        "weight": {"key": "weight", "type": "int"},
    }

    def __init__(
        self,
        *,
        preference: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference"
        ] = None,
        weight: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preference:
        :paramtype preference:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference
        :keyword weight:
        :paramtype weight: int
        """
        super().__init__(**kwargs)
        self.preference = preference
        self.weight = weight


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_fields:
    :vartype match_fields:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components20VruaSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_fields": {
            "key": "matchFields",
            "type": "[Components20VruaSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems]",
        },
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_fields: Optional[
            List[
                "_models.Components20VruaSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_fields:
        :paramtype match_fields:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components20VruaSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_fields = match_fields


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.

    :ivar node_selector_terms:
    :vartype node_selector_terms:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem]
    """

    _attribute_map = {
        "node_selector_terms": {
            "key": "nodeSelectorTerms",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem]",
        },
    }

    def __init__(
        self,
        *,
        node_selector_terms: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword node_selector_terms:
        :paramtype node_selector_terms:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem]
        """
        super().__init__(**kwargs)
        self.node_selector_terms = node_selector_terms


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem]
    :ivar match_fields:
    :vartype match_fields:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsMikldbSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem]",
        },
        "match_fields": {
            "key": "matchFields",
            "type": "[ComponentsMikldbSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems]",
        },
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem"
            ]
        ] = None,
        match_fields: Optional[
            List[
                "_models.ComponentsMikldbSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem]
        :keyword match_fields:
        :paramtype match_fields:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsMikldbSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_fields = match_fields


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinity.

    :ivar preferred_during_scheduling_ignored_during_execution:
    :vartype preferred_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
    :ivar required_during_scheduling_ignored_during_execution:
    :vartype required_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
    """

    _attribute_map = {
        "preferred_during_scheduling_ignored_during_execution": {
            "key": "preferredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]",
        },
        "required_during_scheduling_ignored_during_execution": {
            "key": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]",
        },
    }

    def __init__(
        self,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_during_scheduling_ignored_during_execution:
        :paramtype preferred_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
        :keyword required_during_scheduling_ignored_during_execution:
        :paramtype required_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
        """
        super().__init__(**kwargs)
        self.preferred_during_scheduling_ignored_during_execution = (
            preferred_during_scheduling_ignored_during_execution
        )
        self.required_during_scheduling_ignored_during_execution = (
            required_during_scheduling_ignored_during_execution
        )


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar pod_affinity_term:
    :vartype pod_affinity_term:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
    :ivar weight:
    :vartype weight: int
    """

    _attribute_map = {
        "pod_affinity_term": {
            "key": "podAffinityTerm",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm",
        },
        "weight": {"key": "weight", "type": "int"},
    }

    def __init__(
        self,
        *,
        pod_affinity_term: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm"
        ] = None,
        weight: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword pod_affinity_term:
        :paramtype pod_affinity_term:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
        :keyword weight:
        :paramtype weight: int
        """
        super().__init__(**kwargs)
        self.pod_affinity_term = pod_affinity_term
        self.weight = weight


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsNp0KvbSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "ComponentsNp0KvbSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties"
        ] = None,
        namespace_selector: Optional[
            "_models.ComponentsNp0KvbSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsNp0KvbSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector"
        ] = None,
        namespace_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsWou0LwSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComponentsWou0LwSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComponentsWou0LwSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsWou0LwSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity.

    :ivar preferred_during_scheduling_ignored_during_execution:
    :vartype preferred_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
    :ivar required_during_scheduling_ignored_during_execution:
    :vartype required_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
    """

    _attribute_map = {
        "preferred_during_scheduling_ignored_during_execution": {
            "key": "preferredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]",
        },
        "required_during_scheduling_ignored_during_execution": {
            "key": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]",
        },
    }

    def __init__(
        self,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_during_scheduling_ignored_during_execution:
        :paramtype preferred_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
        :keyword required_during_scheduling_ignored_during_execution:
        :paramtype required_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
        """
        super().__init__(**kwargs)
        self.preferred_during_scheduling_ignored_during_execution = (
            preferred_during_scheduling_ignored_during_execution
        )
        self.required_during_scheduling_ignored_during_execution = (
            required_during_scheduling_ignored_during_execution
        )


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar pod_affinity_term:
    :vartype pod_affinity_term:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
    :ivar weight:
    :vartype weight: int
    """

    _attribute_map = {
        "pod_affinity_term": {
            "key": "podAffinityTerm",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm",
        },
        "weight": {"key": "weight", "type": "int"},
    }

    def __init__(
        self,
        *,
        pod_affinity_term: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm"
        ] = None,
        weight: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword pod_affinity_term:
        :paramtype pod_affinity_term:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
        :keyword weight:
        :paramtype weight: int
        """
        super().__init__(**kwargs)
        self.pod_affinity_term = pod_affinity_term
        self.weight = weight


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsJpz3I7SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "ComponentsJpz3I7SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties"
        ] = None,
        namespace_selector: Optional[
            "_models.ComponentsJpz3I7SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsJpz3I7SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector"
        ] = None,
        namespace_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1S5A2D2SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[Components1S5A2D2SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.Components1S5A2D2SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1S5A2D2SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefault(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefault.

    :ivar resources:
    :vartype resources:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResources
    """

    _attribute_map = {
        "resources": {
            "key": "resources",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResources",
        },
    }

    def __init__(
        self,
        *,
        resources: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResources"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword resources:
        :paramtype resources:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResources
        """
        super().__init__(**kwargs)
        self.resources = resources


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResources(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResources.

    :ivar limits:
    :vartype limits:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResourcesLimits
    :ivar requests:
    :vartype requests:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResourcesRequests
    """

    _attribute_map = {
        "limits": {
            "key": "limits",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResourcesLimits",
        },
        "requests": {
            "key": "requests",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResourcesRequests",
        },
    }

    def __init__(
        self,
        *,
        limits: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResourcesLimits"
        ] = None,
        requests: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResourcesRequests"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits:
        :paramtype limits:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResourcesLimits
        :keyword requests:
        :paramtype requests:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResourcesRequests
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.requests = requests


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResourcesLimits(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResourcesLimits.

    :ivar cpu:
    :vartype cpu: str
    :ivar memory:
    :vartype memory: str
    """

    _attribute_map = {
        "cpu": {"key": "cpu", "type": "str"},
        "memory": {"key": "memory", "type": "str"},
    }

    def __init__(
        self,
        *,
        cpu: Optional[str] = None,
        memory: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword cpu:
        :paramtype cpu: str
        :keyword memory:
        :paramtype memory: str
        """
        super().__init__(**kwargs)
        self.cpu = cpu
        self.memory = memory


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResourcesRequests(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingDefaultResourcesRequests.

    :ivar cpu:
    :vartype cpu: str
    :ivar memory:
    :vartype memory: str
    """

    _attribute_map = {
        "cpu": {"key": "cpu", "type": "str"},
        "memory": {"key": "memory", "type": "str"},
    }

    def __init__(
        self,
        *,
        cpu: Optional[str] = None,
        memory: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword cpu:
        :paramtype cpu: str
        :keyword memory:
        :paramtype memory: str
        """
        super().__init__(**kwargs)
        self.cpu = cpu
        self.memory = memory


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector
    :ivar max_skew:
    :vartype max_skew: int
    :ivar topology_key:
    :vartype topology_key: str
    :ivar when_unsatisfiable:
    :vartype when_unsatisfiable: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector",
        },
        "max_skew": {"key": "maxSkew", "type": "int"},
        "topology_key": {"key": "topologyKey", "type": "str"},
        "when_unsatisfiable": {"key": "whenUnsatisfiable", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector"
        ] = None,
        max_skew: Optional[int] = None,
        topology_key: Optional[str] = None,
        when_unsatisfiable: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector
        :keyword max_skew:
        :paramtype max_skew: int
        :keyword topology_key:
        :paramtype topology_key: str
        :keyword when_unsatisfiable:
        :paramtype when_unsatisfiable: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.max_skew = max_skew
        self.topology_key = topology_key
        self.when_unsatisfiable = when_unsatisfiable


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurity.

    :ivar active_directory:
    :vartype active_directory:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityActiveDirectory
    :ivar admin_login_secret:
    :vartype admin_login_secret: str
    :ivar service_certificate_secret:
    :vartype service_certificate_secret: str
    :ivar transparent_data_encryption:
    :vartype transparent_data_encryption:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityTransparentDataEncryption
    """

    _attribute_map = {
        "active_directory": {
            "key": "activeDirectory",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityActiveDirectory",
        },
        "admin_login_secret": {"key": "adminLoginSecret", "type": "str"},
        "service_certificate_secret": {
            "key": "serviceCertificateSecret",
            "type": "str",
        },
        "transparent_data_encryption": {
            "key": "transparentDataEncryption",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityTransparentDataEncryption",
        },
    }

    def __init__(
        self,
        *,
        active_directory: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityActiveDirectory"
        ] = None,
        admin_login_secret: Optional[str] = None,
        service_certificate_secret: Optional[str] = None,
        transparent_data_encryption: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityTransparentDataEncryption"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword active_directory:
        :paramtype active_directory:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityActiveDirectory
        :keyword admin_login_secret:
        :paramtype admin_login_secret: str
        :keyword service_certificate_secret:
        :paramtype service_certificate_secret: str
        :keyword transparent_data_encryption:
        :paramtype transparent_data_encryption:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityTransparentDataEncryption
        """
        super().__init__(**kwargs)
        self.active_directory = active_directory
        self.admin_login_secret = admin_login_secret
        self.service_certificate_secret = service_certificate_secret
        self.transparent_data_encryption = transparent_data_encryption


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityActiveDirectory(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityActiveDirectory.

    :ivar account_name:
    :vartype account_name: str
    :ivar connector:
    :vartype connector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityActiveDirectoryConnector
    :ivar encryption_types:
    :vartype encryption_types: list[str]
    :ivar keytab_secret:
    :vartype keytab_secret: str
    """

    _attribute_map = {
        "account_name": {"key": "accountName", "type": "str"},
        "connector": {
            "key": "connector",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityActiveDirectoryConnector",
        },
        "encryption_types": {"key": "encryptionTypes", "type": "[str]"},
        "keytab_secret": {"key": "keytabSecret", "type": "str"},
    }

    def __init__(
        self,
        *,
        account_name: Optional[str] = None,
        connector: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityActiveDirectoryConnector"
        ] = None,
        encryption_types: Optional[List[str]] = None,
        keytab_secret: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword account_name:
        :paramtype account_name: str
        :keyword connector:
        :paramtype connector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityActiveDirectoryConnector
        :keyword encryption_types:
        :paramtype encryption_types: list[str]
        :keyword keytab_secret:
        :paramtype keytab_secret: str
        """
        super().__init__(**kwargs)
        self.account_name = account_name
        self.connector = connector
        self.encryption_types = encryption_types
        self.keytab_secret = keytab_secret


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityActiveDirectoryConnector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityActiveDirectoryConnector.

    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.namespace = namespace


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityTransparentDataEncryption(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecSecurityTransparentDataEncryption.

    :ivar mode:
    :vartype mode: str
    """

    _attribute_map = {
        "mode": {"key": "mode", "type": "str"},
    }

    def __init__(self, *, mode: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword mode:
        :paramtype mode: str
        """
        super().__init__(**kwargs)
        self.mode = mode


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServices(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServices.

    :ivar primary:
    :vartype primary:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServicesPrimary
    :ivar readable_secondaries:
    :vartype readable_secondaries:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServicesReadableSecondaries
    """

    _attribute_map = {
        "primary": {
            "key": "primary",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServicesPrimary",
        },
        "readable_secondaries": {
            "key": "readableSecondaries",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServicesReadableSecondaries",
        },
    }

    def __init__(
        self,
        *,
        primary: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServicesPrimary"
        ] = None,
        readable_secondaries: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServicesReadableSecondaries"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword primary:
        :paramtype primary:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServicesPrimary
        :keyword readable_secondaries:
        :paramtype readable_secondaries:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServicesReadableSecondaries
        """
        super().__init__(**kwargs)
        self.primary = primary
        self.readable_secondaries = readable_secondaries


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServicesPrimary(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServicesPrimary.

    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar dns_name:
    :vartype dns_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar port:
    :vartype port: int
    :ivar type:
    :vartype type: str
    """

    _attribute_map = {
        "annotations": {"key": "annotations", "type": "{str}"},
        "dns_name": {"key": "dnsName", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "port": {"key": "port", "type": "int"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        annotations: Optional[Dict[str, str]] = None,
        dns_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        port: Optional[int] = None,
        type: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword dns_name:
        :paramtype dns_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword port:
        :paramtype port: int
        :keyword type:
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.annotations = annotations
        self.dns_name = dns_name
        self.labels = labels
        self.port = port
        self.type = type


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServicesReadableSecondaries(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecServicesReadableSecondaries.

    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar dns_name:
    :vartype dns_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar port:
    :vartype port: int
    :ivar type:
    :vartype type: str
    """

    _attribute_map = {
        "annotations": {"key": "annotations", "type": "{str}"},
        "dns_name": {"key": "dnsName", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "port": {"key": "port", "type": "int"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        annotations: Optional[Dict[str, str]] = None,
        dns_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        port: Optional[int] = None,
        type: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword dns_name:
        :paramtype dns_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword port:
        :paramtype port: int
        :keyword type:
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.annotations = annotations
        self.dns_name = dns_name
        self.labels = labels
        self.port = port
        self.type = type


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorage(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorage.

    :ivar backups:
    :vartype backups:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageBackups
    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageData
    :ivar datalogs:
    :vartype datalogs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDatalogs
    :ivar ha_orchestrator_data:
    :vartype ha_orchestrator_data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorData
    :ivar ha_orchestrator_logs:
    :vartype ha_orchestrator_logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorLogs
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageLogs
    """

    _attribute_map = {
        "backups": {
            "key": "backups",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageBackups",
        },
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageData",
        },
        "datalogs": {
            "key": "datalogs",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDatalogs",
        },
        "ha_orchestrator_data": {
            "key": "haOrchestratorData",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorData",
        },
        "ha_orchestrator_logs": {
            "key": "haOrchestratorLogs",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorLogs",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        backups: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageBackups"
        ] = None,
        data: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageData"
        ] = None,
        datalogs: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDatalogs"
        ] = None,
        ha_orchestrator_data: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorData"
        ] = None,
        ha_orchestrator_logs: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorLogs"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword backups:
        :paramtype backups:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageBackups
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageData
        :keyword datalogs:
        :paramtype datalogs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDatalogs
        :keyword ha_orchestrator_data:
        :paramtype ha_orchestrator_data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorData
        :keyword ha_orchestrator_logs:
        :paramtype ha_orchestrator_logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorLogs
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageLogs
        """
        super().__init__(**kwargs)
        self.backups = backups
        self.data = data
        self.datalogs = datalogs
        self.ha_orchestrator_data = ha_orchestrator_data
        self.ha_orchestrator_logs = ha_orchestrator_logs
        self.logs = logs


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageBackups(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageBackups.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageBackupsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageBackupsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageBackupsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageBackupsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageBackupsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageBackupsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageData(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageData.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDataVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDataVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDataVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDataVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDatalogs(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDatalogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDatalogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDatalogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDatalogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDatalogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDatalogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDatalogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDataVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageDataVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorData(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorData.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorLogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageLogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageLogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageLogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageLogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageLogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageLogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecStorageLogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecUpdate(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceSpecUpdate.

    :ivar desired_version:
    :vartype desired_version: str
    """

    _attribute_map = {
        "desired_version": {"key": "desiredVersion", "type": "str"},
    }

    def __init__(
        self, *, desired_version: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword desired_version:
        :paramtype desired_version: str
        """
        super().__init__(**kwargs)
        self.desired_version = desired_version


class ComMicrosoftArcdataSqlV10SqlManagedInstanceStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar high_availability:
    :vartype high_availability:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusHighAvailability
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusReleasedVersions
    :ivar roles:
    :vartype roles:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRoles
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "high_availability": {
            "key": "highAvailability",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusHighAvailability",
        },
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusReleasedVersions",
        },
        "roles": {
            "key": "roles",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRoles",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        high_availability: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusHighAvailability"
        ] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        observed_generation: Optional[int] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusReleasedVersions"
        ] = None,
        roles: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRoles"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword high_availability:
        :paramtype high_availability:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusHighAvailability
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusReleasedVersions
        :keyword roles:
        :paramtype roles:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRoles
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.high_availability = high_availability
        self.last_update_time = last_update_time
        self.message = message
        self.observed_generation = observed_generation
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.roles = roles
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusHighAvailability(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusHighAvailability.

    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar mirroring_certificate:
    :vartype mirroring_certificate: str
    :ivar reason:
    :vartype reason: str
    :ivar replicas:
    :vartype replicas:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusHighAvailabilityReplicasItem]
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "mirroring_certificate": {"key": "mirroringCertificate", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "replicas": {
            "key": "replicas",
            "type": "[ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusHighAvailabilityReplicasItem]",
        },
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        mirroring_certificate: Optional[str] = None,
        reason: Optional[str] = None,
        replicas: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusHighAvailabilityReplicasItem"
            ]
        ] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword mirroring_certificate:
        :paramtype mirroring_certificate: str
        :keyword reason:
        :paramtype reason: str
        :keyword replicas:
        :paramtype replicas:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusHighAvailabilityReplicasItem]
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.mirroring_certificate = mirroring_certificate
        self.reason = reason
        self.replicas = replicas
        self.state = state


class ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusHighAvailabilityReplicasItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusHighAvailabilityReplicasItem.

    :ivar availability_mode:
    :vartype availability_mode: str
    :ivar connected_state:
    :vartype connected_state: str
    :ivar health_state:
    :vartype health_state: str
    :ivar replica_name:
    :vartype replica_name: str
    :ivar role:
    :vartype role: str
    :ivar secondary_role_allow_connections:
    :vartype secondary_role_allow_connections: str
    :ivar synchronization_state:
    :vartype synchronization_state: str
    """

    _attribute_map = {
        "availability_mode": {"key": "availabilityMode", "type": "str"},
        "connected_state": {"key": "connectedState", "type": "str"},
        "health_state": {"key": "healthState", "type": "str"},
        "replica_name": {"key": "replicaName", "type": "str"},
        "role": {"key": "role", "type": "str"},
        "secondary_role_allow_connections": {
            "key": "secondaryRoleAllowConnections",
            "type": "str",
        },
        "synchronization_state": {"key": "synchronizationState", "type": "str"},
    }

    def __init__(
        self,
        *,
        availability_mode: Optional[str] = None,
        connected_state: Optional[str] = None,
        health_state: Optional[str] = None,
        replica_name: Optional[str] = None,
        role: Optional[str] = None,
        secondary_role_allow_connections: Optional[str] = None,
        synchronization_state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword availability_mode:
        :paramtype availability_mode: str
        :keyword connected_state:
        :paramtype connected_state: str
        :keyword health_state:
        :paramtype health_state: str
        :keyword replica_name:
        :paramtype replica_name: str
        :keyword role:
        :paramtype role: str
        :keyword secondary_role_allow_connections:
        :paramtype secondary_role_allow_connections: str
        :keyword synchronization_state:
        :paramtype synchronization_state: str
        """
        super().__init__(**kwargs)
        self.availability_mode = availability_mode
        self.connected_state = connected_state
        self.health_state = health_state
        self.replica_name = replica_name
        self.role = role
        self.secondary_role_allow_connections = secondary_role_allow_connections
        self.synchronization_state = synchronization_state


class ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRoles(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRoles.

    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar reason:
    :vartype reason: str
    :ivar sql:
    :vartype sql:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRolesSql
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "sql": {
            "key": "sql",
            "type": "ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRolesSql",
        },
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        reason: Optional[str] = None,
        sql: Optional[
            "_models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRolesSql"
        ] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword reason:
        :paramtype reason: str
        :keyword sql:
        :paramtype sql:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRolesSql
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.reason = reason
        self.sql = sql
        self.state = state


class ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRolesSql(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV10SqlManagedInstanceStatusRolesSql.

    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar ready_replicas:
    :vartype ready_replicas: int
    :ivar reason:
    :vartype reason: str
    :ivar replicas:
    :vartype replicas: int
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "ready_replicas": {"key": "readyReplicas", "type": "int"},
        "reason": {"key": "reason", "type": "str"},
        "replicas": {"key": "replicas", "type": "int"},
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        ready_replicas: Optional[int] = None,
        reason: Optional[str] = None,
        replicas: Optional[int] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword ready_replicas:
        :paramtype ready_replicas: int
        :keyword reason:
        :paramtype reason: str
        :keyword replicas:
        :paramtype replicas: int
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.ready_replicas = ready_replicas
        self.reason = reason
        self.replicas = replicas
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataSqlV11SqlManagedInstance(_serialization.Model):
    """ComMicrosoftArcdataSqlV11SqlManagedInstance.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpec
    :ivar status:
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpec
        :keyword status:
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataSqlV11SqlManagedInstanceList(_serialization.Model):
    """SqlManagedInstanceList is a list of SqlManagedInstance.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstances. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstance]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstance]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ComMicrosoftArcdataSqlV11SqlManagedInstance"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstances. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstance]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpec(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpec.

    :ivar backup:
    :vartype backup:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecBackup
    :ivar dev:
    :vartype dev: bool
    :ivar license_type:
    :vartype license_type: str
    :ivar monitoring_profile:
    :vartype monitoring_profile: str
    :ivar orchestrator_replicas:
    :vartype orchestrator_replicas: int
    :ivar parent_resource:
    :vartype parent_resource:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecParentResource
    :ivar preferred_primary_replica_spec:
    :vartype preferred_primary_replica_spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecPreferredPrimaryReplicaSpec
    :ivar readable_secondaries:
    :vartype readable_secondaries: int
    :ivar replicas:
    :vartype replicas: int
    :ivar scheduling:
    :vartype scheduling:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecScheduling
    :ivar security:
    :vartype security:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurity
    :ivar services:
    :vartype services:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServices
    :ivar settings: Configure SQL Server on Linux with the mssql-conf tool. All supported
     properties:
     https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-configure-mssql-conf?view=sql-server-ver16.
    :vartype settings: any
    :ivar storage:
    :vartype storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorage
    :ivar sync_secondary_to_commit:
    :vartype sync_secondary_to_commit: int
    :ivar tier:
    :vartype tier: str
    :ivar update:
    :vartype update:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecUpdate
    """

    _attribute_map = {
        "backup": {
            "key": "backup",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecBackup",
        },
        "dev": {"key": "dev", "type": "bool"},
        "license_type": {"key": "licenseType", "type": "str"},
        "monitoring_profile": {"key": "monitoringProfile", "type": "str"},
        "orchestrator_replicas": {"key": "orchestratorReplicas", "type": "int"},
        "parent_resource": {
            "key": "parentResource",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecParentResource",
        },
        "preferred_primary_replica_spec": {
            "key": "preferredPrimaryReplicaSpec",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecPreferredPrimaryReplicaSpec",
        },
        "readable_secondaries": {"key": "readableSecondaries", "type": "int"},
        "replicas": {"key": "replicas", "type": "int"},
        "scheduling": {
            "key": "scheduling",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecScheduling",
        },
        "security": {
            "key": "security",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurity",
        },
        "services": {
            "key": "services",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServices",
        },
        "settings": {"key": "settings", "type": "object"},
        "storage": {
            "key": "storage",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorage",
        },
        "sync_secondary_to_commit": {
            "key": "syncSecondaryToCommit",
            "type": "int",
        },
        "tier": {"key": "tier", "type": "str"},
        "update": {
            "key": "update",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecUpdate",
        },
    }

    def __init__(
        self,
        *,
        backup: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecBackup"
        ] = None,
        dev: Optional[bool] = None,
        license_type: Optional[str] = None,
        monitoring_profile: Optional[str] = None,
        orchestrator_replicas: Optional[int] = None,
        parent_resource: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecParentResource"
        ] = None,
        preferred_primary_replica_spec: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecPreferredPrimaryReplicaSpec"
        ] = None,
        readable_secondaries: Optional[int] = None,
        replicas: Optional[int] = None,
        scheduling: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecScheduling"
        ] = None,
        security: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurity"
        ] = None,
        services: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServices"
        ] = None,
        settings: Optional[Any] = None,
        storage: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorage"
        ] = None,
        sync_secondary_to_commit: Optional[int] = None,
        tier: Optional[str] = None,
        update: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecUpdate"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword backup:
        :paramtype backup:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecBackup
        :keyword dev:
        :paramtype dev: bool
        :keyword license_type:
        :paramtype license_type: str
        :keyword monitoring_profile:
        :paramtype monitoring_profile: str
        :keyword orchestrator_replicas:
        :paramtype orchestrator_replicas: int
        :keyword parent_resource:
        :paramtype parent_resource:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecParentResource
        :keyword preferred_primary_replica_spec:
        :paramtype preferred_primary_replica_spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecPreferredPrimaryReplicaSpec
        :keyword readable_secondaries:
        :paramtype readable_secondaries: int
        :keyword replicas:
        :paramtype replicas: int
        :keyword scheduling:
        :paramtype scheduling:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecScheduling
        :keyword security:
        :paramtype security:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurity
        :keyword services:
        :paramtype services:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServices
        :keyword settings: Configure SQL Server on Linux with the mssql-conf tool. All supported
         properties:
         https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-configure-mssql-conf?view=sql-server-ver16.
        :paramtype settings: any
        :keyword storage:
        :paramtype storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorage
        :keyword sync_secondary_to_commit:
        :paramtype sync_secondary_to_commit: int
        :keyword tier:
        :paramtype tier: str
        :keyword update:
        :paramtype update:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecUpdate
        """
        super().__init__(**kwargs)
        self.backup = backup
        self.dev = dev
        self.license_type = license_type
        self.monitoring_profile = monitoring_profile
        self.orchestrator_replicas = orchestrator_replicas
        self.parent_resource = parent_resource
        self.preferred_primary_replica_spec = preferred_primary_replica_spec
        self.readable_secondaries = readable_secondaries
        self.replicas = replicas
        self.scheduling = scheduling
        self.security = security
        self.services = services
        self.settings = settings
        self.storage = storage
        self.sync_secondary_to_commit = sync_secondary_to_commit
        self.tier = tier
        self.update = update


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecBackup(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecBackup.

    :ivar retention_period_in_days: Anything.
    :vartype retention_period_in_days: any
    """

    _attribute_map = {
        "retention_period_in_days": {
            "key": "retentionPeriodInDays",
            "type": "object",
        },
    }

    def __init__(
        self, *, retention_period_in_days: Optional[Any] = None, **kwargs: Any
    ) -> None:
        """
        :keyword retention_period_in_days: Anything.
        :paramtype retention_period_in_days: any
        """
        super().__init__(**kwargs)
        self.retention_period_in_days = retention_period_in_days


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecParentResource(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecParentResource.

    :ivar api_group:
    :vartype api_group: str
    :ivar kind:
    :vartype kind: str
    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    """

    _attribute_map = {
        "api_group": {"key": "apiGroup", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        api_group: Optional[str] = None,
        kind: Optional[str] = None,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_group:
        :paramtype api_group: str
        :keyword kind:
        :paramtype kind: str
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.api_group = api_group
        self.kind = kind
        self.name = name
        self.namespace = namespace


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecPreferredPrimaryReplicaSpec(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecPreferredPrimaryReplicaSpec.

    :ivar preferred_primary_replica:
    :vartype preferred_primary_replica: str
    :ivar primary_replica_failover_interval:
    :vartype primary_replica_failover_interval: int
    """

    _attribute_map = {
        "preferred_primary_replica": {
            "key": "preferredPrimaryReplica",
            "type": "str",
        },
        "primary_replica_failover_interval": {
            "key": "primaryReplicaFailoverInterval",
            "type": "int",
        },
    }

    def __init__(
        self,
        *,
        preferred_primary_replica: Optional[str] = None,
        primary_replica_failover_interval: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_primary_replica:
        :paramtype preferred_primary_replica: str
        :keyword primary_replica_failover_interval:
        :paramtype primary_replica_failover_interval: int
        """
        super().__init__(**kwargs)
        self.preferred_primary_replica = preferred_primary_replica
        self.primary_replica_failover_interval = (
            primary_replica_failover_interval
        )


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecScheduling(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecScheduling.

    :ivar affinity:
    :vartype affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinity
    :ivar default:
    :vartype default:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefault
    :ivar node_selector: Dictionary of :code:`<string>`.
    :vartype node_selector: dict[str, str]
    :ivar topology_spread_constraints:
    :vartype topology_spread_constraints:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem]
    """

    _attribute_map = {
        "affinity": {
            "key": "affinity",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinity",
        },
        "default": {
            "key": "default",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefault",
        },
        "node_selector": {"key": "nodeSelector", "type": "{str}"},
        "topology_spread_constraints": {
            "key": "topologySpreadConstraints",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem]",
        },
    }

    def __init__(
        self,
        *,
        affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinity"
        ] = None,
        default: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefault"
        ] = None,
        node_selector: Optional[Dict[str, str]] = None,
        topology_spread_constraints: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword affinity:
        :paramtype affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinity
        :keyword default:
        :paramtype default:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefault
        :keyword node_selector: Dictionary of :code:`<string>`.
        :paramtype node_selector: dict[str, str]
        :keyword topology_spread_constraints:
        :paramtype topology_spread_constraints:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem]
        """
        super().__init__(**kwargs)
        self.affinity = affinity
        self.default = default
        self.node_selector = node_selector
        self.topology_spread_constraints = topology_spread_constraints


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinity.

    :ivar node_affinity:
    :vartype node_affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinity
    :ivar pod_affinity:
    :vartype pod_affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinity
    :ivar pod_anti_affinity:
    :vartype pod_anti_affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity
    """

    _attribute_map = {
        "node_affinity": {
            "key": "nodeAffinity",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinity",
        },
        "pod_affinity": {
            "key": "podAffinity",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinity",
        },
        "pod_anti_affinity": {
            "key": "podAntiAffinity",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity",
        },
    }

    def __init__(
        self,
        *,
        node_affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinity"
        ] = None,
        pod_affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinity"
        ] = None,
        pod_anti_affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword node_affinity:
        :paramtype node_affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinity
        :keyword pod_affinity:
        :paramtype pod_affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinity
        :keyword pod_anti_affinity:
        :paramtype pod_anti_affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity
        """
        super().__init__(**kwargs)
        self.node_affinity = node_affinity
        self.pod_affinity = pod_affinity
        self.pod_anti_affinity = pod_anti_affinity


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinity.

    :ivar preferred_during_scheduling_ignored_during_execution:
    :vartype preferred_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
    :ivar required_during_scheduling_ignored_during_execution:
    :vartype required_during_scheduling_ignored_during_execution:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
    """

    _attribute_map = {
        "preferred_during_scheduling_ignored_during_execution": {
            "key": "preferredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]",
        },
        "required_during_scheduling_ignored_during_execution": {
            "key": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution",
        },
    }

    def __init__(
        self,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_during_scheduling_ignored_during_execution:
        :paramtype preferred_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
        :keyword required_during_scheduling_ignored_during_execution:
        :paramtype required_during_scheduling_ignored_during_execution:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
        """
        super().__init__(**kwargs)
        self.preferred_during_scheduling_ignored_during_execution = (
            preferred_during_scheduling_ignored_during_execution
        )
        self.required_during_scheduling_ignored_during_execution = (
            required_during_scheduling_ignored_during_execution
        )


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar preference:
    :vartype preference:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference
    :ivar weight:
    :vartype weight: int
    """

    _attribute_map = {
        "preference": {
            "key": "preference",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference",
        },
        "weight": {"key": "weight", "type": "int"},
    }

    def __init__(
        self,
        *,
        preference: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference"
        ] = None,
        weight: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preference:
        :paramtype preference:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference
        :keyword weight:
        :paramtype weight: int
        """
        super().__init__(**kwargs)
        self.preference = preference
        self.weight = weight


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_fields:
    :vartype match_fields:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1WkpwpSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_fields": {
            "key": "matchFields",
            "type": "[Components1WkpwpSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems]",
        },
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_fields: Optional[
            List[
                "_models.Components1WkpwpSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_fields:
        :paramtype match_fields:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1WkpwpSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_fields = match_fields


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.

    :ivar node_selector_terms:
    :vartype node_selector_terms:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem]
    """

    _attribute_map = {
        "node_selector_terms": {
            "key": "nodeSelectorTerms",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem]",
        },
    }

    def __init__(
        self,
        *,
        node_selector_terms: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword node_selector_terms:
        :paramtype node_selector_terms:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem]
        """
        super().__init__(**kwargs)
        self.node_selector_terms = node_selector_terms


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem]
    :ivar match_fields:
    :vartype match_fields:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components10FjageSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem]",
        },
        "match_fields": {
            "key": "matchFields",
            "type": "[Components10FjageSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems]",
        },
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem"
            ]
        ] = None,
        match_fields: Optional[
            List[
                "_models.Components10FjageSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem]
        :keyword match_fields:
        :paramtype match_fields:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components10FjageSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_fields = match_fields


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinity.

    :ivar preferred_during_scheduling_ignored_during_execution:
    :vartype preferred_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
    :ivar required_during_scheduling_ignored_during_execution:
    :vartype required_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
    """

    _attribute_map = {
        "preferred_during_scheduling_ignored_during_execution": {
            "key": "preferredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]",
        },
        "required_during_scheduling_ignored_during_execution": {
            "key": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]",
        },
    }

    def __init__(
        self,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_during_scheduling_ignored_during_execution:
        :paramtype preferred_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
        :keyword required_during_scheduling_ignored_during_execution:
        :paramtype required_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
        """
        super().__init__(**kwargs)
        self.preferred_during_scheduling_ignored_during_execution = (
            preferred_during_scheduling_ignored_during_execution
        )
        self.required_during_scheduling_ignored_during_execution = (
            required_during_scheduling_ignored_during_execution
        )


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar pod_affinity_term:
    :vartype pod_affinity_term:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
    :ivar weight:
    :vartype weight: int
    """

    _attribute_map = {
        "pod_affinity_term": {
            "key": "podAffinityTerm",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm",
        },
        "weight": {"key": "weight", "type": "int"},
    }

    def __init__(
        self,
        *,
        pod_affinity_term: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm"
        ] = None,
        weight: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword pod_affinity_term:
        :paramtype pod_affinity_term:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
        :keyword weight:
        :paramtype weight: int
        """
        super().__init__(**kwargs)
        self.pod_affinity_term = pod_affinity_term
        self.weight = weight


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsKoh7F8SchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "ComponentsKoh7F8SchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties"
        ] = None,
        namespace_selector: Optional[
            "_models.ComponentsKoh7F8SchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsKoh7F8SchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector"
        ] = None,
        namespace_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsB6A7TdSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComponentsB6A7TdSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComponentsB6A7TdSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsB6A7TdSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity.

    :ivar preferred_during_scheduling_ignored_during_execution:
    :vartype preferred_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
    :ivar required_during_scheduling_ignored_during_execution:
    :vartype required_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
    """

    _attribute_map = {
        "preferred_during_scheduling_ignored_during_execution": {
            "key": "preferredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]",
        },
        "required_during_scheduling_ignored_during_execution": {
            "key": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]",
        },
    }

    def __init__(
        self,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_during_scheduling_ignored_during_execution:
        :paramtype preferred_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
        :keyword required_during_scheduling_ignored_during_execution:
        :paramtype required_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
        """
        super().__init__(**kwargs)
        self.preferred_during_scheduling_ignored_during_execution = (
            preferred_during_scheduling_ignored_during_execution
        )
        self.required_during_scheduling_ignored_during_execution = (
            required_during_scheduling_ignored_during_execution
        )


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar pod_affinity_term:
    :vartype pod_affinity_term:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
    :ivar weight:
    :vartype weight: int
    """

    _attribute_map = {
        "pod_affinity_term": {
            "key": "podAffinityTerm",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm",
        },
        "weight": {"key": "weight", "type": "int"},
    }

    def __init__(
        self,
        *,
        pod_affinity_term: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm"
        ] = None,
        weight: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword pod_affinity_term:
        :paramtype pod_affinity_term:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
        :keyword weight:
        :paramtype weight: int
        """
        super().__init__(**kwargs)
        self.pod_affinity_term = pod_affinity_term
        self.weight = weight


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Nn5M1VSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "Components1Nn5M1VSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties"
        ] = None,
        namespace_selector: Optional[
            "_models.Components1Nn5M1VSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Nn5M1VSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector"
        ] = None,
        namespace_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1N7U0B8SchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[Components1N7U0B8SchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.Components1N7U0B8SchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1N7U0B8SchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefault(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefault.

    :ivar resources:
    :vartype resources:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResources
    """

    _attribute_map = {
        "resources": {
            "key": "resources",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResources",
        },
    }

    def __init__(
        self,
        *,
        resources: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResources"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword resources:
        :paramtype resources:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResources
        """
        super().__init__(**kwargs)
        self.resources = resources


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResources(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResources.

    :ivar limits:
    :vartype limits:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResourcesLimits
    :ivar requests:
    :vartype requests:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResourcesRequests
    """

    _attribute_map = {
        "limits": {
            "key": "limits",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResourcesLimits",
        },
        "requests": {
            "key": "requests",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResourcesRequests",
        },
    }

    def __init__(
        self,
        *,
        limits: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResourcesLimits"
        ] = None,
        requests: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResourcesRequests"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits:
        :paramtype limits:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResourcesLimits
        :keyword requests:
        :paramtype requests:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResourcesRequests
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.requests = requests


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResourcesLimits(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResourcesLimits.

    :ivar cpu:
    :vartype cpu: str
    :ivar memory:
    :vartype memory: str
    """

    _attribute_map = {
        "cpu": {"key": "cpu", "type": "str"},
        "memory": {"key": "memory", "type": "str"},
    }

    def __init__(
        self,
        *,
        cpu: Optional[str] = None,
        memory: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword cpu:
        :paramtype cpu: str
        :keyword memory:
        :paramtype memory: str
        """
        super().__init__(**kwargs)
        self.cpu = cpu
        self.memory = memory


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResourcesRequests(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingDefaultResourcesRequests.

    :ivar cpu:
    :vartype cpu: str
    :ivar memory:
    :vartype memory: str
    """

    _attribute_map = {
        "cpu": {"key": "cpu", "type": "str"},
        "memory": {"key": "memory", "type": "str"},
    }

    def __init__(
        self,
        *,
        cpu: Optional[str] = None,
        memory: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword cpu:
        :paramtype cpu: str
        :keyword memory:
        :paramtype memory: str
        """
        super().__init__(**kwargs)
        self.cpu = cpu
        self.memory = memory


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector
    :ivar max_skew:
    :vartype max_skew: int
    :ivar topology_key:
    :vartype topology_key: str
    :ivar when_unsatisfiable:
    :vartype when_unsatisfiable: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector",
        },
        "max_skew": {"key": "maxSkew", "type": "int"},
        "topology_key": {"key": "topologyKey", "type": "str"},
        "when_unsatisfiable": {"key": "whenUnsatisfiable", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector"
        ] = None,
        max_skew: Optional[int] = None,
        topology_key: Optional[str] = None,
        when_unsatisfiable: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector
        :keyword max_skew:
        :paramtype max_skew: int
        :keyword topology_key:
        :paramtype topology_key: str
        :keyword when_unsatisfiable:
        :paramtype when_unsatisfiable: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.max_skew = max_skew
        self.topology_key = topology_key
        self.when_unsatisfiable = when_unsatisfiable


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurity.

    :ivar active_directory:
    :vartype active_directory:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityActiveDirectory
    :ivar admin_login_secret:
    :vartype admin_login_secret: str
    :ivar service_certificate_secret:
    :vartype service_certificate_secret: str
    :ivar transparent_data_encryption:
    :vartype transparent_data_encryption:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityTransparentDataEncryption
    """

    _attribute_map = {
        "active_directory": {
            "key": "activeDirectory",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityActiveDirectory",
        },
        "admin_login_secret": {"key": "adminLoginSecret", "type": "str"},
        "service_certificate_secret": {
            "key": "serviceCertificateSecret",
            "type": "str",
        },
        "transparent_data_encryption": {
            "key": "transparentDataEncryption",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityTransparentDataEncryption",
        },
    }

    def __init__(
        self,
        *,
        active_directory: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityActiveDirectory"
        ] = None,
        admin_login_secret: Optional[str] = None,
        service_certificate_secret: Optional[str] = None,
        transparent_data_encryption: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityTransparentDataEncryption"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword active_directory:
        :paramtype active_directory:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityActiveDirectory
        :keyword admin_login_secret:
        :paramtype admin_login_secret: str
        :keyword service_certificate_secret:
        :paramtype service_certificate_secret: str
        :keyword transparent_data_encryption:
        :paramtype transparent_data_encryption:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityTransparentDataEncryption
        """
        super().__init__(**kwargs)
        self.active_directory = active_directory
        self.admin_login_secret = admin_login_secret
        self.service_certificate_secret = service_certificate_secret
        self.transparent_data_encryption = transparent_data_encryption


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityActiveDirectory(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityActiveDirectory.

    :ivar account_name:
    :vartype account_name: str
    :ivar connector:
    :vartype connector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityActiveDirectoryConnector
    :ivar encryption_types:
    :vartype encryption_types: list[str]
    :ivar keytab_secret:
    :vartype keytab_secret: str
    """

    _attribute_map = {
        "account_name": {"key": "accountName", "type": "str"},
        "connector": {
            "key": "connector",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityActiveDirectoryConnector",
        },
        "encryption_types": {"key": "encryptionTypes", "type": "[str]"},
        "keytab_secret": {"key": "keytabSecret", "type": "str"},
    }

    def __init__(
        self,
        *,
        account_name: Optional[str] = None,
        connector: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityActiveDirectoryConnector"
        ] = None,
        encryption_types: Optional[List[str]] = None,
        keytab_secret: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword account_name:
        :paramtype account_name: str
        :keyword connector:
        :paramtype connector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityActiveDirectoryConnector
        :keyword encryption_types:
        :paramtype encryption_types: list[str]
        :keyword keytab_secret:
        :paramtype keytab_secret: str
        """
        super().__init__(**kwargs)
        self.account_name = account_name
        self.connector = connector
        self.encryption_types = encryption_types
        self.keytab_secret = keytab_secret


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityActiveDirectoryConnector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityActiveDirectoryConnector.

    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.namespace = namespace


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityTransparentDataEncryption(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecSecurityTransparentDataEncryption.

    :ivar mode:
    :vartype mode: str
    """

    _attribute_map = {
        "mode": {"key": "mode", "type": "str"},
    }

    def __init__(self, *, mode: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword mode:
        :paramtype mode: str
        """
        super().__init__(**kwargs)
        self.mode = mode


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServices(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServices.

    :ivar primary:
    :vartype primary:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServicesPrimary
    :ivar readable_secondaries:
    :vartype readable_secondaries:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServicesReadableSecondaries
    """

    _attribute_map = {
        "primary": {
            "key": "primary",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServicesPrimary",
        },
        "readable_secondaries": {
            "key": "readableSecondaries",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServicesReadableSecondaries",
        },
    }

    def __init__(
        self,
        *,
        primary: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServicesPrimary"
        ] = None,
        readable_secondaries: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServicesReadableSecondaries"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword primary:
        :paramtype primary:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServicesPrimary
        :keyword readable_secondaries:
        :paramtype readable_secondaries:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServicesReadableSecondaries
        """
        super().__init__(**kwargs)
        self.primary = primary
        self.readable_secondaries = readable_secondaries


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServicesPrimary(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServicesPrimary.

    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar dns_name:
    :vartype dns_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar port:
    :vartype port: int
    :ivar type:
    :vartype type: str
    """

    _attribute_map = {
        "annotations": {"key": "annotations", "type": "{str}"},
        "dns_name": {"key": "dnsName", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "port": {"key": "port", "type": "int"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        annotations: Optional[Dict[str, str]] = None,
        dns_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        port: Optional[int] = None,
        type: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword dns_name:
        :paramtype dns_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword port:
        :paramtype port: int
        :keyword type:
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.annotations = annotations
        self.dns_name = dns_name
        self.labels = labels
        self.port = port
        self.type = type


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServicesReadableSecondaries(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecServicesReadableSecondaries.

    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar dns_name:
    :vartype dns_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar port:
    :vartype port: int
    :ivar type:
    :vartype type: str
    """

    _attribute_map = {
        "annotations": {"key": "annotations", "type": "{str}"},
        "dns_name": {"key": "dnsName", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "port": {"key": "port", "type": "int"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        annotations: Optional[Dict[str, str]] = None,
        dns_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        port: Optional[int] = None,
        type: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword dns_name:
        :paramtype dns_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword port:
        :paramtype port: int
        :keyword type:
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.annotations = annotations
        self.dns_name = dns_name
        self.labels = labels
        self.port = port
        self.type = type


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorage(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorage.

    :ivar backups:
    :vartype backups:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageBackups
    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageData
    :ivar datalogs:
    :vartype datalogs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDatalogs
    :ivar ha_orchestrator_data:
    :vartype ha_orchestrator_data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorData
    :ivar ha_orchestrator_logs:
    :vartype ha_orchestrator_logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorLogs
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageLogs
    """

    _attribute_map = {
        "backups": {
            "key": "backups",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageBackups",
        },
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageData",
        },
        "datalogs": {
            "key": "datalogs",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDatalogs",
        },
        "ha_orchestrator_data": {
            "key": "haOrchestratorData",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorData",
        },
        "ha_orchestrator_logs": {
            "key": "haOrchestratorLogs",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorLogs",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        backups: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageBackups"
        ] = None,
        data: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageData"
        ] = None,
        datalogs: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDatalogs"
        ] = None,
        ha_orchestrator_data: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorData"
        ] = None,
        ha_orchestrator_logs: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorLogs"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword backups:
        :paramtype backups:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageBackups
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageData
        :keyword datalogs:
        :paramtype datalogs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDatalogs
        :keyword ha_orchestrator_data:
        :paramtype ha_orchestrator_data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorData
        :keyword ha_orchestrator_logs:
        :paramtype ha_orchestrator_logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorLogs
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageLogs
        """
        super().__init__(**kwargs)
        self.backups = backups
        self.data = data
        self.datalogs = datalogs
        self.ha_orchestrator_data = ha_orchestrator_data
        self.ha_orchestrator_logs = ha_orchestrator_logs
        self.logs = logs


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageBackups(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageBackups.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageBackupsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageBackupsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageBackupsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageBackupsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageBackupsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageBackupsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageData(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageData.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDataVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDataVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDataVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDataVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDatalogs(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDatalogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDatalogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDatalogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDatalogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDatalogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDatalogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDatalogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDataVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageDataVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorData(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorData.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorLogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageLogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageLogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageLogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageLogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageLogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageLogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecStorageLogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecUpdate(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceSpecUpdate.

    :ivar desired_version:
    :vartype desired_version: str
    :ivar managed_credentials_generation:
    :vartype managed_credentials_generation: int
    """

    _attribute_map = {
        "desired_version": {"key": "desiredVersion", "type": "str"},
        "managed_credentials_generation": {
            "key": "managedCredentialsGeneration",
            "type": "int",
        },
    }

    def __init__(
        self,
        *,
        desired_version: Optional[str] = None,
        managed_credentials_generation: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword desired_version:
        :paramtype desired_version: str
        :keyword managed_credentials_generation:
        :paramtype managed_credentials_generation: int
        """
        super().__init__(**kwargs)
        self.desired_version = desired_version
        self.managed_credentials_generation = managed_credentials_generation


class ComMicrosoftArcdataSqlV11SqlManagedInstanceStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar high_availability:
    :vartype high_availability:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusHighAvailability
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusReleasedVersions
    :ivar roles:
    :vartype roles:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRoles
    :ivar running_managed_credentials_generation:
    :vartype running_managed_credentials_generation: int
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "high_availability": {
            "key": "highAvailability",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusHighAvailability",
        },
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusReleasedVersions",
        },
        "roles": {
            "key": "roles",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRoles",
        },
        "running_managed_credentials_generation": {
            "key": "runningManagedCredentialsGeneration",
            "type": "int",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        high_availability: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusHighAvailability"
        ] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        observed_generation: Optional[int] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusReleasedVersions"
        ] = None,
        roles: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRoles"
        ] = None,
        running_managed_credentials_generation: Optional[int] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword high_availability:
        :paramtype high_availability:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusHighAvailability
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusReleasedVersions
        :keyword roles:
        :paramtype roles:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRoles
        :keyword running_managed_credentials_generation:
        :paramtype running_managed_credentials_generation: int
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.high_availability = high_availability
        self.last_update_time = last_update_time
        self.message = message
        self.observed_generation = observed_generation
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.roles = roles
        self.running_managed_credentials_generation = (
            running_managed_credentials_generation
        )
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusHighAvailability(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusHighAvailability.

    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar mirroring_certificate:
    :vartype mirroring_certificate: str
    :ivar reason:
    :vartype reason: str
    :ivar replicas:
    :vartype replicas:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusHighAvailabilityReplicasItem]
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "mirroring_certificate": {"key": "mirroringCertificate", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "replicas": {
            "key": "replicas",
            "type": "[ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusHighAvailabilityReplicasItem]",
        },
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        mirroring_certificate: Optional[str] = None,
        reason: Optional[str] = None,
        replicas: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusHighAvailabilityReplicasItem"
            ]
        ] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword mirroring_certificate:
        :paramtype mirroring_certificate: str
        :keyword reason:
        :paramtype reason: str
        :keyword replicas:
        :paramtype replicas:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusHighAvailabilityReplicasItem]
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.mirroring_certificate = mirroring_certificate
        self.reason = reason
        self.replicas = replicas
        self.state = state


class ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusHighAvailabilityReplicasItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusHighAvailabilityReplicasItem.

    :ivar availability_mode:
    :vartype availability_mode: str
    :ivar connected_state:
    :vartype connected_state: str
    :ivar health_state:
    :vartype health_state: str
    :ivar replica_name:
    :vartype replica_name: str
    :ivar role:
    :vartype role: str
    :ivar secondary_role_allow_connections:
    :vartype secondary_role_allow_connections: str
    :ivar synchronization_state:
    :vartype synchronization_state: str
    """

    _attribute_map = {
        "availability_mode": {"key": "availabilityMode", "type": "str"},
        "connected_state": {"key": "connectedState", "type": "str"},
        "health_state": {"key": "healthState", "type": "str"},
        "replica_name": {"key": "replicaName", "type": "str"},
        "role": {"key": "role", "type": "str"},
        "secondary_role_allow_connections": {
            "key": "secondaryRoleAllowConnections",
            "type": "str",
        },
        "synchronization_state": {"key": "synchronizationState", "type": "str"},
    }

    def __init__(
        self,
        *,
        availability_mode: Optional[str] = None,
        connected_state: Optional[str] = None,
        health_state: Optional[str] = None,
        replica_name: Optional[str] = None,
        role: Optional[str] = None,
        secondary_role_allow_connections: Optional[str] = None,
        synchronization_state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword availability_mode:
        :paramtype availability_mode: str
        :keyword connected_state:
        :paramtype connected_state: str
        :keyword health_state:
        :paramtype health_state: str
        :keyword replica_name:
        :paramtype replica_name: str
        :keyword role:
        :paramtype role: str
        :keyword secondary_role_allow_connections:
        :paramtype secondary_role_allow_connections: str
        :keyword synchronization_state:
        :paramtype synchronization_state: str
        """
        super().__init__(**kwargs)
        self.availability_mode = availability_mode
        self.connected_state = connected_state
        self.health_state = health_state
        self.replica_name = replica_name
        self.role = role
        self.secondary_role_allow_connections = secondary_role_allow_connections
        self.synchronization_state = synchronization_state


class ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRoles(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRoles.

    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar reason:
    :vartype reason: str
    :ivar sql:
    :vartype sql:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRolesSql
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "sql": {
            "key": "sql",
            "type": "ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRolesSql",
        },
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        reason: Optional[str] = None,
        sql: Optional[
            "_models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRolesSql"
        ] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword reason:
        :paramtype reason: str
        :keyword sql:
        :paramtype sql:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRolesSql
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.reason = reason
        self.sql = sql
        self.state = state


class ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRolesSql(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV11SqlManagedInstanceStatusRolesSql.

    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar ready_replicas:
    :vartype ready_replicas: int
    :ivar reason:
    :vartype reason: str
    :ivar replicas:
    :vartype replicas: int
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "ready_replicas": {"key": "readyReplicas", "type": "int"},
        "reason": {"key": "reason", "type": "str"},
        "replicas": {"key": "replicas", "type": "int"},
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        ready_replicas: Optional[int] = None,
        reason: Optional[str] = None,
        replicas: Optional[int] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword ready_replicas:
        :paramtype ready_replicas: int
        :keyword reason:
        :paramtype reason: str
        :keyword replicas:
        :paramtype replicas: int
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.ready_replicas = ready_replicas
        self.reason = reason
        self.replicas = replicas
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataSqlV1Beta1FailoverGroupList(_serialization.Model):
    """FailoverGroupList is a list of FailoverGroup.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of failovergroups. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of failovergroups. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV1Beta1SqlManagedInstanceList(_serialization.Model):
    """SqlManagedInstanceList is a list of SqlManagedInstance.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstances. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstances. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV1Beta2FailoverGroupList(_serialization.Model):
    """FailoverGroupList is a list of FailoverGroup.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of failovergroups. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of failovergroups. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV1FailoverGroupList(_serialization.Model):
    """FailoverGroupList is a list of FailoverGroup.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of failovergroups. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of failovergroups. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV1SqlManagedInstanceList(_serialization.Model):
    """SqlManagedInstanceList is a list of SqlManagedInstance.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstances. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstances. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV2FailoverGroupList(_serialization.Model):
    """FailoverGroupList is a list of FailoverGroup.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of failovergroups. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of failovergroups. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV2SqlManagedInstanceList(_serialization.Model):
    """SqlManagedInstanceList is a list of SqlManagedInstance.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstances. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstances. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV3SqlManagedInstanceList(_serialization.Model):
    """SqlManagedInstanceList is a list of SqlManagedInstance.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstances. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstances. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV4SqlManagedInstanceList(_serialization.Model):
    """SqlManagedInstanceList is a list of SqlManagedInstance.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstances. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstances. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV5SqlManagedInstanceList(_serialization.Model):
    """SqlManagedInstanceList is a list of SqlManagedInstance.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstances. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstances. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV6SqlManagedInstanceList(_serialization.Model):
    """SqlManagedInstanceList is a list of SqlManagedInstance.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstances. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstances. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV7SqlManagedInstanceList(_serialization.Model):
    """SqlManagedInstanceList is a list of SqlManagedInstance.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstances. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstances. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV8SqlManagedInstance(_serialization.Model):
    """ComMicrosoftArcdataSqlV8SqlManagedInstance.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpec
    :ivar status:
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpec
        :keyword status:
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataSqlV8SqlManagedInstanceList(_serialization.Model):
    """SqlManagedInstanceList is a list of SqlManagedInstance.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstances. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstance]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstance]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ComMicrosoftArcdataSqlV8SqlManagedInstance"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstances. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstance]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpec(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpec.

    :ivar backup:
    :vartype backup:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecBackup
    :ivar dev:
    :vartype dev: bool
    :ivar license_type:
    :vartype license_type: str
    :ivar monitoring_profile:
    :vartype monitoring_profile: str
    :ivar orchestrator_replicas:
    :vartype orchestrator_replicas: int
    :ivar parent_resource:
    :vartype parent_resource:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecParentResource
    :ivar preferred_primary_replica_spec:
    :vartype preferred_primary_replica_spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecPreferredPrimaryReplicaSpec
    :ivar readable_secondaries:
    :vartype readable_secondaries: int
    :ivar replicas:
    :vartype replicas: int
    :ivar scheduling:
    :vartype scheduling:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecScheduling
    :ivar security:
    :vartype security:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurity
    :ivar services:
    :vartype services:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServices
    :ivar settings: Configure SQL Server on Linux with the mssql-conf tool. All supported
     properties:
     https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-configure-mssql-conf?view=sql-server-ver16.
    :vartype settings: any
    :ivar storage:
    :vartype storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorage
    :ivar sync_secondary_to_commit:
    :vartype sync_secondary_to_commit: int
    :ivar tier:
    :vartype tier: str
    :ivar update:
    :vartype update:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecUpdate
    """

    _attribute_map = {
        "backup": {
            "key": "backup",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecBackup",
        },
        "dev": {"key": "dev", "type": "bool"},
        "license_type": {"key": "licenseType", "type": "str"},
        "monitoring_profile": {"key": "monitoringProfile", "type": "str"},
        "orchestrator_replicas": {"key": "orchestratorReplicas", "type": "int"},
        "parent_resource": {
            "key": "parentResource",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecParentResource",
        },
        "preferred_primary_replica_spec": {
            "key": "preferredPrimaryReplicaSpec",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecPreferredPrimaryReplicaSpec",
        },
        "readable_secondaries": {"key": "readableSecondaries", "type": "int"},
        "replicas": {"key": "replicas", "type": "int"},
        "scheduling": {
            "key": "scheduling",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecScheduling",
        },
        "security": {
            "key": "security",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurity",
        },
        "services": {
            "key": "services",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServices",
        },
        "settings": {"key": "settings", "type": "object"},
        "storage": {
            "key": "storage",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorage",
        },
        "sync_secondary_to_commit": {
            "key": "syncSecondaryToCommit",
            "type": "int",
        },
        "tier": {"key": "tier", "type": "str"},
        "update": {
            "key": "update",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecUpdate",
        },
    }

    def __init__(
        self,
        *,
        backup: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecBackup"
        ] = None,
        dev: Optional[bool] = None,
        license_type: Optional[str] = None,
        monitoring_profile: Optional[str] = None,
        orchestrator_replicas: Optional[int] = None,
        parent_resource: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecParentResource"
        ] = None,
        preferred_primary_replica_spec: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecPreferredPrimaryReplicaSpec"
        ] = None,
        readable_secondaries: Optional[int] = None,
        replicas: Optional[int] = None,
        scheduling: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecScheduling"
        ] = None,
        security: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurity"
        ] = None,
        services: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServices"
        ] = None,
        settings: Optional[Any] = None,
        storage: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorage"
        ] = None,
        sync_secondary_to_commit: Optional[int] = None,
        tier: Optional[str] = None,
        update: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecUpdate"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword backup:
        :paramtype backup:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecBackup
        :keyword dev:
        :paramtype dev: bool
        :keyword license_type:
        :paramtype license_type: str
        :keyword monitoring_profile:
        :paramtype monitoring_profile: str
        :keyword orchestrator_replicas:
        :paramtype orchestrator_replicas: int
        :keyword parent_resource:
        :paramtype parent_resource:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecParentResource
        :keyword preferred_primary_replica_spec:
        :paramtype preferred_primary_replica_spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecPreferredPrimaryReplicaSpec
        :keyword readable_secondaries:
        :paramtype readable_secondaries: int
        :keyword replicas:
        :paramtype replicas: int
        :keyword scheduling:
        :paramtype scheduling:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecScheduling
        :keyword security:
        :paramtype security:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurity
        :keyword services:
        :paramtype services:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServices
        :keyword settings: Configure SQL Server on Linux with the mssql-conf tool. All supported
         properties:
         https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-configure-mssql-conf?view=sql-server-ver16.
        :paramtype settings: any
        :keyword storage:
        :paramtype storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorage
        :keyword sync_secondary_to_commit:
        :paramtype sync_secondary_to_commit: int
        :keyword tier:
        :paramtype tier: str
        :keyword update:
        :paramtype update:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecUpdate
        """
        super().__init__(**kwargs)
        self.backup = backup
        self.dev = dev
        self.license_type = license_type
        self.monitoring_profile = monitoring_profile
        self.orchestrator_replicas = orchestrator_replicas
        self.parent_resource = parent_resource
        self.preferred_primary_replica_spec = preferred_primary_replica_spec
        self.readable_secondaries = readable_secondaries
        self.replicas = replicas
        self.scheduling = scheduling
        self.security = security
        self.services = services
        self.settings = settings
        self.storage = storage
        self.sync_secondary_to_commit = sync_secondary_to_commit
        self.tier = tier
        self.update = update


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecBackup(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecBackup.

    :ivar retention_period_in_days: Anything.
    :vartype retention_period_in_days: any
    """

    _attribute_map = {
        "retention_period_in_days": {
            "key": "retentionPeriodInDays",
            "type": "object",
        },
    }

    def __init__(
        self, *, retention_period_in_days: Optional[Any] = None, **kwargs: Any
    ) -> None:
        """
        :keyword retention_period_in_days: Anything.
        :paramtype retention_period_in_days: any
        """
        super().__init__(**kwargs)
        self.retention_period_in_days = retention_period_in_days


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecParentResource(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecParentResource.

    :ivar api_group:
    :vartype api_group: str
    :ivar kind:
    :vartype kind: str
    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    """

    _attribute_map = {
        "api_group": {"key": "apiGroup", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        api_group: Optional[str] = None,
        kind: Optional[str] = None,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_group:
        :paramtype api_group: str
        :keyword kind:
        :paramtype kind: str
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.api_group = api_group
        self.kind = kind
        self.name = name
        self.namespace = namespace


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecPreferredPrimaryReplicaSpec(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecPreferredPrimaryReplicaSpec.

    :ivar preferred_primary_replica:
    :vartype preferred_primary_replica: str
    :ivar primary_replica_failover_interval:
    :vartype primary_replica_failover_interval: int
    """

    _attribute_map = {
        "preferred_primary_replica": {
            "key": "preferredPrimaryReplica",
            "type": "str",
        },
        "primary_replica_failover_interval": {
            "key": "primaryReplicaFailoverInterval",
            "type": "int",
        },
    }

    def __init__(
        self,
        *,
        preferred_primary_replica: Optional[str] = None,
        primary_replica_failover_interval: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_primary_replica:
        :paramtype preferred_primary_replica: str
        :keyword primary_replica_failover_interval:
        :paramtype primary_replica_failover_interval: int
        """
        super().__init__(**kwargs)
        self.preferred_primary_replica = preferred_primary_replica
        self.primary_replica_failover_interval = (
            primary_replica_failover_interval
        )


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecScheduling(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecScheduling.

    :ivar affinity:
    :vartype affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinity
    :ivar default:
    :vartype default:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefault
    :ivar node_selector: Dictionary of :code:`<string>`.
    :vartype node_selector: dict[str, str]
    :ivar topology_spread_constraints:
    :vartype topology_spread_constraints:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem]
    """

    _attribute_map = {
        "affinity": {
            "key": "affinity",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinity",
        },
        "default": {
            "key": "default",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefault",
        },
        "node_selector": {"key": "nodeSelector", "type": "{str}"},
        "topology_spread_constraints": {
            "key": "topologySpreadConstraints",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem]",
        },
    }

    def __init__(
        self,
        *,
        affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinity"
        ] = None,
        default: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefault"
        ] = None,
        node_selector: Optional[Dict[str, str]] = None,
        topology_spread_constraints: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword affinity:
        :paramtype affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinity
        :keyword default:
        :paramtype default:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefault
        :keyword node_selector: Dictionary of :code:`<string>`.
        :paramtype node_selector: dict[str, str]
        :keyword topology_spread_constraints:
        :paramtype topology_spread_constraints:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem]
        """
        super().__init__(**kwargs)
        self.affinity = affinity
        self.default = default
        self.node_selector = node_selector
        self.topology_spread_constraints = topology_spread_constraints


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinity.

    :ivar node_affinity:
    :vartype node_affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinity
    :ivar pod_affinity:
    :vartype pod_affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinity
    :ivar pod_anti_affinity:
    :vartype pod_anti_affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity
    """

    _attribute_map = {
        "node_affinity": {
            "key": "nodeAffinity",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinity",
        },
        "pod_affinity": {
            "key": "podAffinity",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinity",
        },
        "pod_anti_affinity": {
            "key": "podAntiAffinity",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity",
        },
    }

    def __init__(
        self,
        *,
        node_affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinity"
        ] = None,
        pod_affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinity"
        ] = None,
        pod_anti_affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword node_affinity:
        :paramtype node_affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinity
        :keyword pod_affinity:
        :paramtype pod_affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinity
        :keyword pod_anti_affinity:
        :paramtype pod_anti_affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity
        """
        super().__init__(**kwargs)
        self.node_affinity = node_affinity
        self.pod_affinity = pod_affinity
        self.pod_anti_affinity = pod_anti_affinity


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinity.

    :ivar preferred_during_scheduling_ignored_during_execution:
    :vartype preferred_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
    :ivar required_during_scheduling_ignored_during_execution:
    :vartype required_during_scheduling_ignored_during_execution:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
    """

    _attribute_map = {
        "preferred_during_scheduling_ignored_during_execution": {
            "key": "preferredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]",
        },
        "required_during_scheduling_ignored_during_execution": {
            "key": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution",
        },
    }

    def __init__(
        self,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_during_scheduling_ignored_during_execution:
        :paramtype preferred_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
        :keyword required_during_scheduling_ignored_during_execution:
        :paramtype required_during_scheduling_ignored_during_execution:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
        """
        super().__init__(**kwargs)
        self.preferred_during_scheduling_ignored_during_execution = (
            preferred_during_scheduling_ignored_during_execution
        )
        self.required_during_scheduling_ignored_during_execution = (
            required_during_scheduling_ignored_during_execution
        )


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar preference:
    :vartype preference:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference
    :ivar weight:
    :vartype weight: int
    """

    _attribute_map = {
        "preference": {
            "key": "preference",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference",
        },
        "weight": {"key": "weight", "type": "int"},
    }

    def __init__(
        self,
        *,
        preference: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference"
        ] = None,
        weight: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preference:
        :paramtype preference:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference
        :keyword weight:
        :paramtype weight: int
        """
        super().__init__(**kwargs)
        self.preference = preference
        self.weight = weight


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_fields:
    :vartype match_fields:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Bvsse9SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_fields": {
            "key": "matchFields",
            "type": "[Components1Bvsse9SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems]",
        },
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_fields: Optional[
            List[
                "_models.Components1Bvsse9SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_fields:
        :paramtype match_fields:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Bvsse9SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_fields = match_fields


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.

    :ivar node_selector_terms:
    :vartype node_selector_terms:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem]
    """

    _attribute_map = {
        "node_selector_terms": {
            "key": "nodeSelectorTerms",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem]",
        },
    }

    def __init__(
        self,
        *,
        node_selector_terms: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword node_selector_terms:
        :paramtype node_selector_terms:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem]
        """
        super().__init__(**kwargs)
        self.node_selector_terms = node_selector_terms


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem]
    :ivar match_fields:
    :vartype match_fields:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Ix2FauSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem]",
        },
        "match_fields": {
            "key": "matchFields",
            "type": "[Components1Ix2FauSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems]",
        },
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem"
            ]
        ] = None,
        match_fields: Optional[
            List[
                "_models.Components1Ix2FauSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem]
        :keyword match_fields:
        :paramtype match_fields:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Ix2FauSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_fields = match_fields


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinity.

    :ivar preferred_during_scheduling_ignored_during_execution:
    :vartype preferred_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
    :ivar required_during_scheduling_ignored_during_execution:
    :vartype required_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
    """

    _attribute_map = {
        "preferred_during_scheduling_ignored_during_execution": {
            "key": "preferredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]",
        },
        "required_during_scheduling_ignored_during_execution": {
            "key": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]",
        },
    }

    def __init__(
        self,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_during_scheduling_ignored_during_execution:
        :paramtype preferred_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
        :keyword required_during_scheduling_ignored_during_execution:
        :paramtype required_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
        """
        super().__init__(**kwargs)
        self.preferred_during_scheduling_ignored_during_execution = (
            preferred_during_scheduling_ignored_during_execution
        )
        self.required_during_scheduling_ignored_during_execution = (
            required_during_scheduling_ignored_during_execution
        )


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar pod_affinity_term:
    :vartype pod_affinity_term:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
    :ivar weight:
    :vartype weight: int
    """

    _attribute_map = {
        "pod_affinity_term": {
            "key": "podAffinityTerm",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm",
        },
        "weight": {"key": "weight", "type": "int"},
    }

    def __init__(
        self,
        *,
        pod_affinity_term: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm"
        ] = None,
        weight: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword pod_affinity_term:
        :paramtype pod_affinity_term:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
        :keyword weight:
        :paramtype weight: int
        """
        super().__init__(**kwargs)
        self.pod_affinity_term = pod_affinity_term
        self.weight = weight


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsPdt5H3SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "ComponentsPdt5H3SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties"
        ] = None,
        namespace_selector: Optional[
            "_models.ComponentsPdt5H3SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsPdt5H3SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector"
        ] = None,
        namespace_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsMg9X4ISchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComponentsMg9X4ISchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComponentsMg9X4ISchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsMg9X4ISchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity.

    :ivar preferred_during_scheduling_ignored_during_execution:
    :vartype preferred_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
    :ivar required_during_scheduling_ignored_during_execution:
    :vartype required_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
    """

    _attribute_map = {
        "preferred_during_scheduling_ignored_during_execution": {
            "key": "preferredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]",
        },
        "required_during_scheduling_ignored_during_execution": {
            "key": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]",
        },
    }

    def __init__(
        self,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_during_scheduling_ignored_during_execution:
        :paramtype preferred_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
        :keyword required_during_scheduling_ignored_during_execution:
        :paramtype required_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
        """
        super().__init__(**kwargs)
        self.preferred_during_scheduling_ignored_during_execution = (
            preferred_during_scheduling_ignored_during_execution
        )
        self.required_during_scheduling_ignored_during_execution = (
            required_during_scheduling_ignored_during_execution
        )


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar pod_affinity_term:
    :vartype pod_affinity_term:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
    :ivar weight:
    :vartype weight: int
    """

    _attribute_map = {
        "pod_affinity_term": {
            "key": "podAffinityTerm",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm",
        },
        "weight": {"key": "weight", "type": "int"},
    }

    def __init__(
        self,
        *,
        pod_affinity_term: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm"
        ] = None,
        weight: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword pod_affinity_term:
        :paramtype pod_affinity_term:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
        :keyword weight:
        :paramtype weight: int
        """
        super().__init__(**kwargs)
        self.pod_affinity_term = pod_affinity_term
        self.weight = weight


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsYj3GcjSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "ComponentsYj3GcjSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties"
        ] = None,
        namespace_selector: Optional[
            "_models.ComponentsYj3GcjSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsYj3GcjSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector"
        ] = None,
        namespace_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsTfehc7SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComponentsTfehc7SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComponentsTfehc7SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsTfehc7SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefault(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefault.

    :ivar resources:
    :vartype resources:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResources
    """

    _attribute_map = {
        "resources": {
            "key": "resources",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResources",
        },
    }

    def __init__(
        self,
        *,
        resources: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResources"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword resources:
        :paramtype resources:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResources
        """
        super().__init__(**kwargs)
        self.resources = resources


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResources(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResources.

    :ivar limits:
    :vartype limits:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResourcesLimits
    :ivar requests:
    :vartype requests:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResourcesRequests
    """

    _attribute_map = {
        "limits": {
            "key": "limits",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResourcesLimits",
        },
        "requests": {
            "key": "requests",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResourcesRequests",
        },
    }

    def __init__(
        self,
        *,
        limits: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResourcesLimits"
        ] = None,
        requests: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResourcesRequests"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits:
        :paramtype limits:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResourcesLimits
        :keyword requests:
        :paramtype requests:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResourcesRequests
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.requests = requests


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResourcesLimits(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResourcesLimits.

    :ivar cpu:
    :vartype cpu: str
    :ivar memory:
    :vartype memory: str
    """

    _attribute_map = {
        "cpu": {"key": "cpu", "type": "str"},
        "memory": {"key": "memory", "type": "str"},
    }

    def __init__(
        self,
        *,
        cpu: Optional[str] = None,
        memory: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword cpu:
        :paramtype cpu: str
        :keyword memory:
        :paramtype memory: str
        """
        super().__init__(**kwargs)
        self.cpu = cpu
        self.memory = memory


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResourcesRequests(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingDefaultResourcesRequests.

    :ivar cpu:
    :vartype cpu: str
    :ivar memory:
    :vartype memory: str
    """

    _attribute_map = {
        "cpu": {"key": "cpu", "type": "str"},
        "memory": {"key": "memory", "type": "str"},
    }

    def __init__(
        self,
        *,
        cpu: Optional[str] = None,
        memory: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword cpu:
        :paramtype cpu: str
        :keyword memory:
        :paramtype memory: str
        """
        super().__init__(**kwargs)
        self.cpu = cpu
        self.memory = memory


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector
    :ivar max_skew:
    :vartype max_skew: int
    :ivar topology_key:
    :vartype topology_key: str
    :ivar when_unsatisfiable:
    :vartype when_unsatisfiable: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector",
        },
        "max_skew": {"key": "maxSkew", "type": "int"},
        "topology_key": {"key": "topologyKey", "type": "str"},
        "when_unsatisfiable": {"key": "whenUnsatisfiable", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector"
        ] = None,
        max_skew: Optional[int] = None,
        topology_key: Optional[str] = None,
        when_unsatisfiable: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector
        :keyword max_skew:
        :paramtype max_skew: int
        :keyword topology_key:
        :paramtype topology_key: str
        :keyword when_unsatisfiable:
        :paramtype when_unsatisfiable: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.max_skew = max_skew
        self.topology_key = topology_key
        self.when_unsatisfiable = when_unsatisfiable


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurity.

    :ivar active_directory:
    :vartype active_directory:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurityActiveDirectory
    :ivar admin_login_secret:
    :vartype admin_login_secret: str
    :ivar service_certificate_secret:
    :vartype service_certificate_secret: str
    """

    _attribute_map = {
        "active_directory": {
            "key": "activeDirectory",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurityActiveDirectory",
        },
        "admin_login_secret": {"key": "adminLoginSecret", "type": "str"},
        "service_certificate_secret": {
            "key": "serviceCertificateSecret",
            "type": "str",
        },
    }

    def __init__(
        self,
        *,
        active_directory: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurityActiveDirectory"
        ] = None,
        admin_login_secret: Optional[str] = None,
        service_certificate_secret: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword active_directory:
        :paramtype active_directory:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurityActiveDirectory
        :keyword admin_login_secret:
        :paramtype admin_login_secret: str
        :keyword service_certificate_secret:
        :paramtype service_certificate_secret: str
        """
        super().__init__(**kwargs)
        self.active_directory = active_directory
        self.admin_login_secret = admin_login_secret
        self.service_certificate_secret = service_certificate_secret


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurityActiveDirectory(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurityActiveDirectory.

    :ivar account_name:
    :vartype account_name: str
    :ivar connector:
    :vartype connector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurityActiveDirectoryConnector
    :ivar encryption_types:
    :vartype encryption_types: list[str]
    :ivar keytab_secret:
    :vartype keytab_secret: str
    """

    _attribute_map = {
        "account_name": {"key": "accountName", "type": "str"},
        "connector": {
            "key": "connector",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurityActiveDirectoryConnector",
        },
        "encryption_types": {"key": "encryptionTypes", "type": "[str]"},
        "keytab_secret": {"key": "keytabSecret", "type": "str"},
    }

    def __init__(
        self,
        *,
        account_name: Optional[str] = None,
        connector: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurityActiveDirectoryConnector"
        ] = None,
        encryption_types: Optional[List[str]] = None,
        keytab_secret: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword account_name:
        :paramtype account_name: str
        :keyword connector:
        :paramtype connector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurityActiveDirectoryConnector
        :keyword encryption_types:
        :paramtype encryption_types: list[str]
        :keyword keytab_secret:
        :paramtype keytab_secret: str
        """
        super().__init__(**kwargs)
        self.account_name = account_name
        self.connector = connector
        self.encryption_types = encryption_types
        self.keytab_secret = keytab_secret


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurityActiveDirectoryConnector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecSecurityActiveDirectoryConnector.

    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.namespace = namespace


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServices(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServices.

    :ivar primary:
    :vartype primary:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServicesPrimary
    :ivar readable_secondaries:
    :vartype readable_secondaries:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServicesReadableSecondaries
    """

    _attribute_map = {
        "primary": {
            "key": "primary",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServicesPrimary",
        },
        "readable_secondaries": {
            "key": "readableSecondaries",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServicesReadableSecondaries",
        },
    }

    def __init__(
        self,
        *,
        primary: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServicesPrimary"
        ] = None,
        readable_secondaries: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServicesReadableSecondaries"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword primary:
        :paramtype primary:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServicesPrimary
        :keyword readable_secondaries:
        :paramtype readable_secondaries:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServicesReadableSecondaries
        """
        super().__init__(**kwargs)
        self.primary = primary
        self.readable_secondaries = readable_secondaries


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServicesPrimary(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServicesPrimary.

    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar dns_name:
    :vartype dns_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar port:
    :vartype port: int
    :ivar type:
    :vartype type: str
    """

    _attribute_map = {
        "annotations": {"key": "annotations", "type": "{str}"},
        "dns_name": {"key": "dnsName", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "port": {"key": "port", "type": "int"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        annotations: Optional[Dict[str, str]] = None,
        dns_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        port: Optional[int] = None,
        type: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword dns_name:
        :paramtype dns_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword port:
        :paramtype port: int
        :keyword type:
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.annotations = annotations
        self.dns_name = dns_name
        self.labels = labels
        self.port = port
        self.type = type


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServicesReadableSecondaries(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecServicesReadableSecondaries.

    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar dns_name:
    :vartype dns_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar port:
    :vartype port: int
    :ivar type:
    :vartype type: str
    """

    _attribute_map = {
        "annotations": {"key": "annotations", "type": "{str}"},
        "dns_name": {"key": "dnsName", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "port": {"key": "port", "type": "int"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        annotations: Optional[Dict[str, str]] = None,
        dns_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        port: Optional[int] = None,
        type: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword dns_name:
        :paramtype dns_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword port:
        :paramtype port: int
        :keyword type:
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.annotations = annotations
        self.dns_name = dns_name
        self.labels = labels
        self.port = port
        self.type = type


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorage(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorage.

    :ivar backups:
    :vartype backups:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageBackups
    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageData
    :ivar datalogs:
    :vartype datalogs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDatalogs
    :ivar ha_orchestrator_data:
    :vartype ha_orchestrator_data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorData
    :ivar ha_orchestrator_logs:
    :vartype ha_orchestrator_logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorLogs
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageLogs
    """

    _attribute_map = {
        "backups": {
            "key": "backups",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageBackups",
        },
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageData",
        },
        "datalogs": {
            "key": "datalogs",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDatalogs",
        },
        "ha_orchestrator_data": {
            "key": "haOrchestratorData",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorData",
        },
        "ha_orchestrator_logs": {
            "key": "haOrchestratorLogs",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorLogs",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        backups: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageBackups"
        ] = None,
        data: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageData"
        ] = None,
        datalogs: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDatalogs"
        ] = None,
        ha_orchestrator_data: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorData"
        ] = None,
        ha_orchestrator_logs: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorLogs"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword backups:
        :paramtype backups:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageBackups
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageData
        :keyword datalogs:
        :paramtype datalogs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDatalogs
        :keyword ha_orchestrator_data:
        :paramtype ha_orchestrator_data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorData
        :keyword ha_orchestrator_logs:
        :paramtype ha_orchestrator_logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorLogs
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageLogs
        """
        super().__init__(**kwargs)
        self.backups = backups
        self.data = data
        self.datalogs = datalogs
        self.ha_orchestrator_data = ha_orchestrator_data
        self.ha_orchestrator_logs = ha_orchestrator_logs
        self.logs = logs


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageBackups(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageBackups.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageBackupsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageBackupsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageBackupsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageBackupsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageBackupsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageBackupsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageData(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageData.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDataVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDataVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDataVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDataVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDatalogs(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDatalogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDatalogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDatalogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDatalogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDatalogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDatalogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDatalogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDataVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageDataVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorData(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorData.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorLogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageLogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageLogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageLogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageLogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageLogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageLogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecStorageLogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecUpdate(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceSpecUpdate.

    :ivar desired_version:
    :vartype desired_version: str
    """

    _attribute_map = {
        "desired_version": {"key": "desiredVersion", "type": "str"},
    }

    def __init__(
        self, *, desired_version: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword desired_version:
        :paramtype desired_version: str
        """
        super().__init__(**kwargs)
        self.desired_version = desired_version


class ComMicrosoftArcdataSqlV8SqlManagedInstanceStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar high_availability:
    :vartype high_availability:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusHighAvailability
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar log_search_dashboard:
    :vartype log_search_dashboard: str
    :ivar message:
    :vartype message: str
    :ivar metrics_dashboard:
    :vartype metrics_dashboard: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar primary_endpoint:
    :vartype primary_endpoint: str
    :ivar ready_replicas:
    :vartype ready_replicas: str
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusReleasedVersions
    :ivar roles:
    :vartype roles:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRoles
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "high_availability": {
            "key": "highAvailability",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusHighAvailability",
        },
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "log_search_dashboard": {"key": "logSearchDashboard", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "metrics_dashboard": {"key": "metricsDashboard", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "primary_endpoint": {"key": "primaryEndpoint", "type": "str"},
        "ready_replicas": {"key": "readyReplicas", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusReleasedVersions",
        },
        "roles": {
            "key": "roles",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRoles",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        high_availability: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusHighAvailability"
        ] = None,
        last_update_time: Optional[datetime.datetime] = None,
        log_search_dashboard: Optional[str] = None,
        message: Optional[str] = None,
        metrics_dashboard: Optional[str] = None,
        observed_generation: Optional[int] = None,
        primary_endpoint: Optional[str] = None,
        ready_replicas: Optional[str] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusReleasedVersions"
        ] = None,
        roles: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRoles"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword high_availability:
        :paramtype high_availability:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusHighAvailability
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword log_search_dashboard:
        :paramtype log_search_dashboard: str
        :keyword message:
        :paramtype message: str
        :keyword metrics_dashboard:
        :paramtype metrics_dashboard: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword primary_endpoint:
        :paramtype primary_endpoint: str
        :keyword ready_replicas:
        :paramtype ready_replicas: str
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusReleasedVersions
        :keyword roles:
        :paramtype roles:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRoles
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.high_availability = high_availability
        self.last_update_time = last_update_time
        self.log_search_dashboard = log_search_dashboard
        self.message = message
        self.metrics_dashboard = metrics_dashboard
        self.observed_generation = observed_generation
        self.primary_endpoint = primary_endpoint
        self.ready_replicas = ready_replicas
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.roles = roles
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusHighAvailability(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusHighAvailability.

    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar mirroring_certificate:
    :vartype mirroring_certificate: str
    :ivar reason:
    :vartype reason: str
    :ivar replicas:
    :vartype replicas:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusHighAvailabilityReplicasItem]
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "mirroring_certificate": {"key": "mirroringCertificate", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "replicas": {
            "key": "replicas",
            "type": "[ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusHighAvailabilityReplicasItem]",
        },
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        mirroring_certificate: Optional[str] = None,
        reason: Optional[str] = None,
        replicas: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusHighAvailabilityReplicasItem"
            ]
        ] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword mirroring_certificate:
        :paramtype mirroring_certificate: str
        :keyword reason:
        :paramtype reason: str
        :keyword replicas:
        :paramtype replicas:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusHighAvailabilityReplicasItem]
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.mirroring_certificate = mirroring_certificate
        self.reason = reason
        self.replicas = replicas
        self.state = state


class ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusHighAvailabilityReplicasItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusHighAvailabilityReplicasItem.

    :ivar availability_mode:
    :vartype availability_mode: str
    :ivar connected_state:
    :vartype connected_state: str
    :ivar health_state:
    :vartype health_state: str
    :ivar replica_name:
    :vartype replica_name: str
    :ivar role:
    :vartype role: str
    :ivar secondary_role_allow_connections:
    :vartype secondary_role_allow_connections: str
    :ivar synchronization_state:
    :vartype synchronization_state: str
    """

    _attribute_map = {
        "availability_mode": {"key": "availabilityMode", "type": "str"},
        "connected_state": {"key": "connectedState", "type": "str"},
        "health_state": {"key": "healthState", "type": "str"},
        "replica_name": {"key": "replicaName", "type": "str"},
        "role": {"key": "role", "type": "str"},
        "secondary_role_allow_connections": {
            "key": "secondaryRoleAllowConnections",
            "type": "str",
        },
        "synchronization_state": {"key": "synchronizationState", "type": "str"},
    }

    def __init__(
        self,
        *,
        availability_mode: Optional[str] = None,
        connected_state: Optional[str] = None,
        health_state: Optional[str] = None,
        replica_name: Optional[str] = None,
        role: Optional[str] = None,
        secondary_role_allow_connections: Optional[str] = None,
        synchronization_state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword availability_mode:
        :paramtype availability_mode: str
        :keyword connected_state:
        :paramtype connected_state: str
        :keyword health_state:
        :paramtype health_state: str
        :keyword replica_name:
        :paramtype replica_name: str
        :keyword role:
        :paramtype role: str
        :keyword secondary_role_allow_connections:
        :paramtype secondary_role_allow_connections: str
        :keyword synchronization_state:
        :paramtype synchronization_state: str
        """
        super().__init__(**kwargs)
        self.availability_mode = availability_mode
        self.connected_state = connected_state
        self.health_state = health_state
        self.replica_name = replica_name
        self.role = role
        self.secondary_role_allow_connections = secondary_role_allow_connections
        self.synchronization_state = synchronization_state


class ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRoles(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRoles.

    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar reason:
    :vartype reason: str
    :ivar sql:
    :vartype sql:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRolesSql
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "sql": {
            "key": "sql",
            "type": "ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRolesSql",
        },
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        reason: Optional[str] = None,
        sql: Optional[
            "_models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRolesSql"
        ] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword reason:
        :paramtype reason: str
        :keyword sql:
        :paramtype sql:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRolesSql
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.reason = reason
        self.sql = sql
        self.state = state


class ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRolesSql(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV8SqlManagedInstanceStatusRolesSql.

    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar ready_replicas:
    :vartype ready_replicas: int
    :ivar reason:
    :vartype reason: str
    :ivar replicas:
    :vartype replicas: int
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "ready_replicas": {"key": "readyReplicas", "type": "int"},
        "reason": {"key": "reason", "type": "str"},
        "replicas": {"key": "replicas", "type": "int"},
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        ready_replicas: Optional[int] = None,
        reason: Optional[str] = None,
        replicas: Optional[int] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword ready_replicas:
        :paramtype ready_replicas: int
        :keyword reason:
        :paramtype reason: str
        :keyword replicas:
        :paramtype replicas: int
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.ready_replicas = ready_replicas
        self.reason = reason
        self.replicas = replicas
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataSqlV9SqlManagedInstance(_serialization.Model):
    """ComMicrosoftArcdataSqlV9SqlManagedInstance.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpec
    :ivar status:
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpec
        :keyword status:
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataSqlV9SqlManagedInstanceList(_serialization.Model):
    """SqlManagedInstanceList is a list of SqlManagedInstance.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstances. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstance]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstance]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ComMicrosoftArcdataSqlV9SqlManagedInstance"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstances. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstance]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpec(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpec.

    :ivar backup:
    :vartype backup:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecBackup
    :ivar dev:
    :vartype dev: bool
    :ivar license_type:
    :vartype license_type: str
    :ivar monitoring_profile:
    :vartype monitoring_profile: str
    :ivar orchestrator_replicas:
    :vartype orchestrator_replicas: int
    :ivar parent_resource:
    :vartype parent_resource:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecParentResource
    :ivar preferred_primary_replica_spec:
    :vartype preferred_primary_replica_spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecPreferredPrimaryReplicaSpec
    :ivar readable_secondaries:
    :vartype readable_secondaries: int
    :ivar replicas:
    :vartype replicas: int
    :ivar scheduling:
    :vartype scheduling:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecScheduling
    :ivar security:
    :vartype security:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurity
    :ivar services:
    :vartype services:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServices
    :ivar settings: Configure SQL Server on Linux with the mssql-conf tool. All supported
     properties:
     https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-configure-mssql-conf?view=sql-server-ver16.
    :vartype settings: any
    :ivar storage:
    :vartype storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorage
    :ivar sync_secondary_to_commit:
    :vartype sync_secondary_to_commit: int
    :ivar tier:
    :vartype tier: str
    :ivar update:
    :vartype update:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecUpdate
    """

    _attribute_map = {
        "backup": {
            "key": "backup",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecBackup",
        },
        "dev": {"key": "dev", "type": "bool"},
        "license_type": {"key": "licenseType", "type": "str"},
        "monitoring_profile": {"key": "monitoringProfile", "type": "str"},
        "orchestrator_replicas": {"key": "orchestratorReplicas", "type": "int"},
        "parent_resource": {
            "key": "parentResource",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecParentResource",
        },
        "preferred_primary_replica_spec": {
            "key": "preferredPrimaryReplicaSpec",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecPreferredPrimaryReplicaSpec",
        },
        "readable_secondaries": {"key": "readableSecondaries", "type": "int"},
        "replicas": {"key": "replicas", "type": "int"},
        "scheduling": {
            "key": "scheduling",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecScheduling",
        },
        "security": {
            "key": "security",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurity",
        },
        "services": {
            "key": "services",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServices",
        },
        "settings": {"key": "settings", "type": "object"},
        "storage": {
            "key": "storage",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorage",
        },
        "sync_secondary_to_commit": {
            "key": "syncSecondaryToCommit",
            "type": "int",
        },
        "tier": {"key": "tier", "type": "str"},
        "update": {
            "key": "update",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecUpdate",
        },
    }

    def __init__(
        self,
        *,
        backup: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecBackup"
        ] = None,
        dev: Optional[bool] = None,
        license_type: Optional[str] = None,
        monitoring_profile: Optional[str] = None,
        orchestrator_replicas: Optional[int] = None,
        parent_resource: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecParentResource"
        ] = None,
        preferred_primary_replica_spec: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecPreferredPrimaryReplicaSpec"
        ] = None,
        readable_secondaries: Optional[int] = None,
        replicas: Optional[int] = None,
        scheduling: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecScheduling"
        ] = None,
        security: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurity"
        ] = None,
        services: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServices"
        ] = None,
        settings: Optional[Any] = None,
        storage: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorage"
        ] = None,
        sync_secondary_to_commit: Optional[int] = None,
        tier: Optional[str] = None,
        update: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecUpdate"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword backup:
        :paramtype backup:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecBackup
        :keyword dev:
        :paramtype dev: bool
        :keyword license_type:
        :paramtype license_type: str
        :keyword monitoring_profile:
        :paramtype monitoring_profile: str
        :keyword orchestrator_replicas:
        :paramtype orchestrator_replicas: int
        :keyword parent_resource:
        :paramtype parent_resource:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecParentResource
        :keyword preferred_primary_replica_spec:
        :paramtype preferred_primary_replica_spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecPreferredPrimaryReplicaSpec
        :keyword readable_secondaries:
        :paramtype readable_secondaries: int
        :keyword replicas:
        :paramtype replicas: int
        :keyword scheduling:
        :paramtype scheduling:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecScheduling
        :keyword security:
        :paramtype security:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurity
        :keyword services:
        :paramtype services:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServices
        :keyword settings: Configure SQL Server on Linux with the mssql-conf tool. All supported
         properties:
         https://learn.microsoft.com/en-us/sql/linux/sql-server-linux-configure-mssql-conf?view=sql-server-ver16.
        :paramtype settings: any
        :keyword storage:
        :paramtype storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorage
        :keyword sync_secondary_to_commit:
        :paramtype sync_secondary_to_commit: int
        :keyword tier:
        :paramtype tier: str
        :keyword update:
        :paramtype update:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecUpdate
        """
        super().__init__(**kwargs)
        self.backup = backup
        self.dev = dev
        self.license_type = license_type
        self.monitoring_profile = monitoring_profile
        self.orchestrator_replicas = orchestrator_replicas
        self.parent_resource = parent_resource
        self.preferred_primary_replica_spec = preferred_primary_replica_spec
        self.readable_secondaries = readable_secondaries
        self.replicas = replicas
        self.scheduling = scheduling
        self.security = security
        self.services = services
        self.settings = settings
        self.storage = storage
        self.sync_secondary_to_commit = sync_secondary_to_commit
        self.tier = tier
        self.update = update


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecBackup(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecBackup.

    :ivar retention_period_in_days: Anything.
    :vartype retention_period_in_days: any
    """

    _attribute_map = {
        "retention_period_in_days": {
            "key": "retentionPeriodInDays",
            "type": "object",
        },
    }

    def __init__(
        self, *, retention_period_in_days: Optional[Any] = None, **kwargs: Any
    ) -> None:
        """
        :keyword retention_period_in_days: Anything.
        :paramtype retention_period_in_days: any
        """
        super().__init__(**kwargs)
        self.retention_period_in_days = retention_period_in_days


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecParentResource(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecParentResource.

    :ivar api_group:
    :vartype api_group: str
    :ivar kind:
    :vartype kind: str
    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    """

    _attribute_map = {
        "api_group": {"key": "apiGroup", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        api_group: Optional[str] = None,
        kind: Optional[str] = None,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_group:
        :paramtype api_group: str
        :keyword kind:
        :paramtype kind: str
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.api_group = api_group
        self.kind = kind
        self.name = name
        self.namespace = namespace


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecPreferredPrimaryReplicaSpec(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecPreferredPrimaryReplicaSpec.

    :ivar preferred_primary_replica:
    :vartype preferred_primary_replica: str
    :ivar primary_replica_failover_interval:
    :vartype primary_replica_failover_interval: int
    """

    _attribute_map = {
        "preferred_primary_replica": {
            "key": "preferredPrimaryReplica",
            "type": "str",
        },
        "primary_replica_failover_interval": {
            "key": "primaryReplicaFailoverInterval",
            "type": "int",
        },
    }

    def __init__(
        self,
        *,
        preferred_primary_replica: Optional[str] = None,
        primary_replica_failover_interval: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_primary_replica:
        :paramtype preferred_primary_replica: str
        :keyword primary_replica_failover_interval:
        :paramtype primary_replica_failover_interval: int
        """
        super().__init__(**kwargs)
        self.preferred_primary_replica = preferred_primary_replica
        self.primary_replica_failover_interval = (
            primary_replica_failover_interval
        )


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecScheduling(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecScheduling.

    :ivar affinity:
    :vartype affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinity
    :ivar default:
    :vartype default:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefault
    :ivar node_selector: Dictionary of :code:`<string>`.
    :vartype node_selector: dict[str, str]
    :ivar topology_spread_constraints:
    :vartype topology_spread_constraints:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem]
    """

    _attribute_map = {
        "affinity": {
            "key": "affinity",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinity",
        },
        "default": {
            "key": "default",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefault",
        },
        "node_selector": {"key": "nodeSelector", "type": "{str}"},
        "topology_spread_constraints": {
            "key": "topologySpreadConstraints",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem]",
        },
    }

    def __init__(
        self,
        *,
        affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinity"
        ] = None,
        default: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefault"
        ] = None,
        node_selector: Optional[Dict[str, str]] = None,
        topology_spread_constraints: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword affinity:
        :paramtype affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinity
        :keyword default:
        :paramtype default:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefault
        :keyword node_selector: Dictionary of :code:`<string>`.
        :paramtype node_selector: dict[str, str]
        :keyword topology_spread_constraints:
        :paramtype topology_spread_constraints:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem]
        """
        super().__init__(**kwargs)
        self.affinity = affinity
        self.default = default
        self.node_selector = node_selector
        self.topology_spread_constraints = topology_spread_constraints


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinity.

    :ivar node_affinity:
    :vartype node_affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinity
    :ivar pod_affinity:
    :vartype pod_affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinity
    :ivar pod_anti_affinity:
    :vartype pod_anti_affinity:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity
    """

    _attribute_map = {
        "node_affinity": {
            "key": "nodeAffinity",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinity",
        },
        "pod_affinity": {
            "key": "podAffinity",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinity",
        },
        "pod_anti_affinity": {
            "key": "podAntiAffinity",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity",
        },
    }

    def __init__(
        self,
        *,
        node_affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinity"
        ] = None,
        pod_affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinity"
        ] = None,
        pod_anti_affinity: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword node_affinity:
        :paramtype node_affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinity
        :keyword pod_affinity:
        :paramtype pod_affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinity
        :keyword pod_anti_affinity:
        :paramtype pod_anti_affinity:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity
        """
        super().__init__(**kwargs)
        self.node_affinity = node_affinity
        self.pod_affinity = pod_affinity
        self.pod_anti_affinity = pod_anti_affinity


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinity.

    :ivar preferred_during_scheduling_ignored_during_execution:
    :vartype preferred_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
    :ivar required_during_scheduling_ignored_during_execution:
    :vartype required_during_scheduling_ignored_during_execution:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
    """

    _attribute_map = {
        "preferred_during_scheduling_ignored_during_execution": {
            "key": "preferredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]",
        },
        "required_during_scheduling_ignored_during_execution": {
            "key": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution",
        },
    }

    def __init__(
        self,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_during_scheduling_ignored_during_execution:
        :paramtype preferred_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
        :keyword required_during_scheduling_ignored_during_execution:
        :paramtype required_during_scheduling_ignored_during_execution:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution
        """
        super().__init__(**kwargs)
        self.preferred_during_scheduling_ignored_during_execution = (
            preferred_during_scheduling_ignored_during_execution
        )
        self.required_during_scheduling_ignored_during_execution = (
            required_during_scheduling_ignored_during_execution
        )


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar preference:
    :vartype preference:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference
    :ivar weight:
    :vartype weight: int
    """

    _attribute_map = {
        "preference": {
            "key": "preference",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference",
        },
        "weight": {"key": "weight", "type": "int"},
    }

    def __init__(
        self,
        *,
        preference: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference"
        ] = None,
        weight: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preference:
        :paramtype preference:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference
        :keyword weight:
        :paramtype weight: int
        """
        super().__init__(**kwargs)
        self.preference = preference
        self.weight = weight


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPreference.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_fields:
    :vartype match_fields:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components4E2Hg1SchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_fields": {
            "key": "matchFields",
            "type": "[Components4E2Hg1SchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems]",
        },
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_fields: Optional[
            List[
                "_models.Components4E2Hg1SchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_fields:
        :paramtype match_fields:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components4E2Hg1SchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_fields = match_fields


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution.

    :ivar node_selector_terms:
    :vartype node_selector_terms:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem]
    """

    _attribute_map = {
        "node_selector_terms": {
            "key": "nodeSelectorTerms",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem]",
        },
    }

    def __init__(
        self,
        *,
        node_selector_terms: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword node_selector_terms:
        :paramtype node_selector_terms:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem]
        """
        super().__init__(**kwargs)
        self.node_selector_terms = node_selector_terms


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItem.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem]
    :ivar match_fields:
    :vartype match_fields:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components15Vg7IqSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem]",
        },
        "match_fields": {
            "key": "matchFields",
            "type": "[Components15Vg7IqSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems]",
        },
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem"
            ]
        ] = None,
        match_fields: Optional[
            List[
                "_models.Components15Vg7IqSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem]
        :keyword match_fields:
        :paramtype match_fields:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components15Vg7IqSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_fields = match_fields


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinity.

    :ivar preferred_during_scheduling_ignored_during_execution:
    :vartype preferred_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
    :ivar required_during_scheduling_ignored_during_execution:
    :vartype required_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
    """

    _attribute_map = {
        "preferred_during_scheduling_ignored_during_execution": {
            "key": "preferredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]",
        },
        "required_during_scheduling_ignored_during_execution": {
            "key": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]",
        },
    }

    def __init__(
        self,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_during_scheduling_ignored_during_execution:
        :paramtype preferred_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
        :keyword required_during_scheduling_ignored_during_execution:
        :paramtype required_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
        """
        super().__init__(**kwargs)
        self.preferred_during_scheduling_ignored_during_execution = (
            preferred_during_scheduling_ignored_during_execution
        )
        self.required_during_scheduling_ignored_during_execution = (
            required_during_scheduling_ignored_during_execution
        )


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar pod_affinity_term:
    :vartype pod_affinity_term:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
    :ivar weight:
    :vartype weight: int
    """

    _attribute_map = {
        "pod_affinity_term": {
            "key": "podAffinityTerm",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm",
        },
        "weight": {"key": "weight", "type": "int"},
    }

    def __init__(
        self,
        *,
        pod_affinity_term: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm"
        ] = None,
        weight: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword pod_affinity_term:
        :paramtype pod_affinity_term:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
        :keyword weight:
        :paramtype weight: int
        """
        super().__init__(**kwargs)
        self.pod_affinity_term = pod_affinity_term
        self.weight = weight


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Bvas7BSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "Components1Bvas7BSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties"
        ] = None,
        namespace_selector: Optional[
            "_models.Components1Bvas7BSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Bvas7BSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector"
        ] = None,
        namespace_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components17TzfedSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[Components17TzfedSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.Components17TzfedSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components17TzfedSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinity.

    :ivar preferred_during_scheduling_ignored_during_execution:
    :vartype preferred_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
    :ivar required_during_scheduling_ignored_during_execution:
    :vartype required_during_scheduling_ignored_during_execution:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
    """

    _attribute_map = {
        "preferred_during_scheduling_ignored_during_execution": {
            "key": "preferredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]",
        },
        "required_during_scheduling_ignored_during_execution": {
            "key": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]",
        },
    }

    def __init__(
        self,
        *,
        preferred_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        required_during_scheduling_ignored_during_execution: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword preferred_during_scheduling_ignored_during_execution:
        :paramtype preferred_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem]
        :keyword required_during_scheduling_ignored_during_execution:
        :paramtype required_during_scheduling_ignored_during_execution:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem]
        """
        super().__init__(**kwargs)
        self.preferred_during_scheduling_ignored_during_execution = (
            preferred_during_scheduling_ignored_during_execution
        )
        self.required_during_scheduling_ignored_during_execution = (
            required_during_scheduling_ignored_during_execution
        )


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar pod_affinity_term:
    :vartype pod_affinity_term:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
    :ivar weight:
    :vartype weight: int
    """

    _attribute_map = {
        "pod_affinity_term": {
            "key": "podAffinityTerm",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm",
        },
        "weight": {"key": "weight", "type": "int"},
    }

    def __init__(
        self,
        *,
        pod_affinity_term: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm"
        ] = None,
        weight: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword pod_affinity_term:
        :paramtype pod_affinity_term:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm
        :keyword weight:
        :paramtype weight: int
        """
        super().__init__(**kwargs)
        self.pod_affinity_term = pod_affinity_term
        self.weight = weight


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItemPodAffinityTerm.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1U1FxmjSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "Components1U1FxmjSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties"
        ] = None,
        namespace_selector: Optional[
            "_models.Components1U1FxmjSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1U1FxmjSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionProperties.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItem.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
    :ivar namespace_selector:
    :vartype namespace_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
    :ivar namespaces:
    :vartype namespaces: list[str]
    :ivar topology_key:
    :vartype topology_key: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector",
        },
        "namespace_selector": {
            "key": "namespaceSelector",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector",
        },
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "topology_key": {"key": "topologyKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector"
        ] = None,
        namespace_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector"
        ] = None,
        namespaces: Optional[List[str]] = None,
        topology_key: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector
        :keyword namespace_selector:
        :paramtype namespace_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector
        :keyword namespaces:
        :paramtype namespaces: list[str]
        :keyword topology_key:
        :paramtype topology_key: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.namespace_selector = namespace_selector
        self.namespaces = namespaces
        self.topology_key = topology_key


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemLabelSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItemNamespaceSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Khndo7SchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[Components1Khndo7SchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.Components1Khndo7SchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Khndo7SchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefault(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefault.

    :ivar resources:
    :vartype resources:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResources
    """

    _attribute_map = {
        "resources": {
            "key": "resources",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResources",
        },
    }

    def __init__(
        self,
        *,
        resources: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResources"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword resources:
        :paramtype resources:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResources
        """
        super().__init__(**kwargs)
        self.resources = resources


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResources(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResources.

    :ivar limits:
    :vartype limits:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResourcesLimits
    :ivar requests:
    :vartype requests:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResourcesRequests
    """

    _attribute_map = {
        "limits": {
            "key": "limits",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResourcesLimits",
        },
        "requests": {
            "key": "requests",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResourcesRequests",
        },
    }

    def __init__(
        self,
        *,
        limits: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResourcesLimits"
        ] = None,
        requests: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResourcesRequests"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits:
        :paramtype limits:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResourcesLimits
        :keyword requests:
        :paramtype requests:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResourcesRequests
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.requests = requests


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResourcesLimits(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResourcesLimits.

    :ivar cpu:
    :vartype cpu: str
    :ivar memory:
    :vartype memory: str
    """

    _attribute_map = {
        "cpu": {"key": "cpu", "type": "str"},
        "memory": {"key": "memory", "type": "str"},
    }

    def __init__(
        self,
        *,
        cpu: Optional[str] = None,
        memory: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword cpu:
        :paramtype cpu: str
        :keyword memory:
        :paramtype memory: str
        """
        super().__init__(**kwargs)
        self.cpu = cpu
        self.memory = memory


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResourcesRequests(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingDefaultResourcesRequests.

    :ivar cpu:
    :vartype cpu: str
    :ivar memory:
    :vartype memory: str
    """

    _attribute_map = {
        "cpu": {"key": "cpu", "type": "str"},
        "memory": {"key": "memory", "type": "str"},
    }

    def __init__(
        self,
        *,
        cpu: Optional[str] = None,
        memory: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword cpu:
        :paramtype cpu: str
        :keyword memory:
        :paramtype memory: str
        """
        super().__init__(**kwargs)
        self.cpu = cpu
        self.memory = memory


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItem.

    :ivar label_selector:
    :vartype label_selector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector
    :ivar max_skew:
    :vartype max_skew: int
    :ivar topology_key:
    :vartype topology_key: str
    :ivar when_unsatisfiable:
    :vartype when_unsatisfiable: str
    """

    _attribute_map = {
        "label_selector": {
            "key": "labelSelector",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector",
        },
        "max_skew": {"key": "maxSkew", "type": "int"},
        "topology_key": {"key": "topologyKey", "type": "str"},
        "when_unsatisfiable": {"key": "whenUnsatisfiable", "type": "str"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector"
        ] = None,
        max_skew: Optional[int] = None,
        topology_key: Optional[str] = None,
        when_unsatisfiable: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword label_selector:
        :paramtype label_selector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector
        :keyword max_skew:
        :paramtype max_skew: int
        :keyword topology_key:
        :paramtype topology_key: str
        :keyword when_unsatisfiable:
        :paramtype when_unsatisfiable: str
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.max_skew = max_skew
        self.topology_key = topology_key
        self.when_unsatisfiable = when_unsatisfiable


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsItemLabelSelector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSchedulingTopologySpreadConstraintsPropertiesItemsItem.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurity(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurity.

    :ivar active_directory:
    :vartype active_directory:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurityActiveDirectory
    :ivar admin_login_secret:
    :vartype admin_login_secret: str
    :ivar service_certificate_secret:
    :vartype service_certificate_secret: str
    """

    _attribute_map = {
        "active_directory": {
            "key": "activeDirectory",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurityActiveDirectory",
        },
        "admin_login_secret": {"key": "adminLoginSecret", "type": "str"},
        "service_certificate_secret": {
            "key": "serviceCertificateSecret",
            "type": "str",
        },
    }

    def __init__(
        self,
        *,
        active_directory: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurityActiveDirectory"
        ] = None,
        admin_login_secret: Optional[str] = None,
        service_certificate_secret: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword active_directory:
        :paramtype active_directory:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurityActiveDirectory
        :keyword admin_login_secret:
        :paramtype admin_login_secret: str
        :keyword service_certificate_secret:
        :paramtype service_certificate_secret: str
        """
        super().__init__(**kwargs)
        self.active_directory = active_directory
        self.admin_login_secret = admin_login_secret
        self.service_certificate_secret = service_certificate_secret


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurityActiveDirectory(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurityActiveDirectory.

    :ivar account_name:
    :vartype account_name: str
    :ivar connector:
    :vartype connector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurityActiveDirectoryConnector
    :ivar encryption_types:
    :vartype encryption_types: list[str]
    :ivar keytab_secret:
    :vartype keytab_secret: str
    """

    _attribute_map = {
        "account_name": {"key": "accountName", "type": "str"},
        "connector": {
            "key": "connector",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurityActiveDirectoryConnector",
        },
        "encryption_types": {"key": "encryptionTypes", "type": "[str]"},
        "keytab_secret": {"key": "keytabSecret", "type": "str"},
    }

    def __init__(
        self,
        *,
        account_name: Optional[str] = None,
        connector: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurityActiveDirectoryConnector"
        ] = None,
        encryption_types: Optional[List[str]] = None,
        keytab_secret: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword account_name:
        :paramtype account_name: str
        :keyword connector:
        :paramtype connector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurityActiveDirectoryConnector
        :keyword encryption_types:
        :paramtype encryption_types: list[str]
        :keyword keytab_secret:
        :paramtype keytab_secret: str
        """
        super().__init__(**kwargs)
        self.account_name = account_name
        self.connector = connector
        self.encryption_types = encryption_types
        self.keytab_secret = keytab_secret


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurityActiveDirectoryConnector(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecSecurityActiveDirectoryConnector.

    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.namespace = namespace


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServices(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServices.

    :ivar primary:
    :vartype primary:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServicesPrimary
    :ivar readable_secondaries:
    :vartype readable_secondaries:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServicesReadableSecondaries
    """

    _attribute_map = {
        "primary": {
            "key": "primary",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServicesPrimary",
        },
        "readable_secondaries": {
            "key": "readableSecondaries",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServicesReadableSecondaries",
        },
    }

    def __init__(
        self,
        *,
        primary: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServicesPrimary"
        ] = None,
        readable_secondaries: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServicesReadableSecondaries"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword primary:
        :paramtype primary:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServicesPrimary
        :keyword readable_secondaries:
        :paramtype readable_secondaries:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServicesReadableSecondaries
        """
        super().__init__(**kwargs)
        self.primary = primary
        self.readable_secondaries = readable_secondaries


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServicesPrimary(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServicesPrimary.

    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar dns_name:
    :vartype dns_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar port:
    :vartype port: int
    :ivar type:
    :vartype type: str
    """

    _attribute_map = {
        "annotations": {"key": "annotations", "type": "{str}"},
        "dns_name": {"key": "dnsName", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "port": {"key": "port", "type": "int"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        annotations: Optional[Dict[str, str]] = None,
        dns_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        port: Optional[int] = None,
        type: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword dns_name:
        :paramtype dns_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword port:
        :paramtype port: int
        :keyword type:
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.annotations = annotations
        self.dns_name = dns_name
        self.labels = labels
        self.port = port
        self.type = type


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServicesReadableSecondaries(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecServicesReadableSecondaries.

    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar dns_name:
    :vartype dns_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar port:
    :vartype port: int
    :ivar type:
    :vartype type: str
    """

    _attribute_map = {
        "annotations": {"key": "annotations", "type": "{str}"},
        "dns_name": {"key": "dnsName", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "port": {"key": "port", "type": "int"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        annotations: Optional[Dict[str, str]] = None,
        dns_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        port: Optional[int] = None,
        type: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword dns_name:
        :paramtype dns_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword port:
        :paramtype port: int
        :keyword type:
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.annotations = annotations
        self.dns_name = dns_name
        self.labels = labels
        self.port = port
        self.type = type


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorage(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorage.

    :ivar backups:
    :vartype backups:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageBackups
    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageData
    :ivar datalogs:
    :vartype datalogs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDatalogs
    :ivar ha_orchestrator_data:
    :vartype ha_orchestrator_data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorData
    :ivar ha_orchestrator_logs:
    :vartype ha_orchestrator_logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorLogs
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageLogs
    """

    _attribute_map = {
        "backups": {
            "key": "backups",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageBackups",
        },
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageData",
        },
        "datalogs": {
            "key": "datalogs",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDatalogs",
        },
        "ha_orchestrator_data": {
            "key": "haOrchestratorData",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorData",
        },
        "ha_orchestrator_logs": {
            "key": "haOrchestratorLogs",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorLogs",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        backups: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageBackups"
        ] = None,
        data: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageData"
        ] = None,
        datalogs: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDatalogs"
        ] = None,
        ha_orchestrator_data: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorData"
        ] = None,
        ha_orchestrator_logs: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorLogs"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword backups:
        :paramtype backups:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageBackups
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageData
        :keyword datalogs:
        :paramtype datalogs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDatalogs
        :keyword ha_orchestrator_data:
        :paramtype ha_orchestrator_data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorData
        :keyword ha_orchestrator_logs:
        :paramtype ha_orchestrator_logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorLogs
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageLogs
        """
        super().__init__(**kwargs)
        self.backups = backups
        self.data = data
        self.datalogs = datalogs
        self.ha_orchestrator_data = ha_orchestrator_data
        self.ha_orchestrator_logs = ha_orchestrator_logs
        self.logs = logs


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageBackups(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageBackups.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageBackupsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageBackupsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageBackupsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageBackupsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageBackupsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageBackupsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageData(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageData.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDataVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDataVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDataVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDataVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDatalogs(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDatalogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDatalogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDatalogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDatalogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDatalogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDatalogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDatalogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDataVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageDataVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorData(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorData.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorDataVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorLogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageHaOrchestratorLogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageLogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageLogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageLogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageLogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageLogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageLogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecStorageLogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecUpdate(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceSpecUpdate.

    :ivar desired_version:
    :vartype desired_version: str
    """

    _attribute_map = {
        "desired_version": {"key": "desiredVersion", "type": "str"},
    }

    def __init__(
        self, *, desired_version: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword desired_version:
        :paramtype desired_version: str
        """
        super().__init__(**kwargs)
        self.desired_version = desired_version


class ComMicrosoftArcdataSqlV9SqlManagedInstanceStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar high_availability:
    :vartype high_availability:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusHighAvailability
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusReleasedVersions
    :ivar roles:
    :vartype roles:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRoles
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "high_availability": {
            "key": "highAvailability",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusHighAvailability",
        },
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusReleasedVersions",
        },
        "roles": {
            "key": "roles",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRoles",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        high_availability: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusHighAvailability"
        ] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        observed_generation: Optional[int] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusReleasedVersions"
        ] = None,
        roles: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRoles"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword high_availability:
        :paramtype high_availability:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusHighAvailability
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusReleasedVersions
        :keyword roles:
        :paramtype roles:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRoles
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.high_availability = high_availability
        self.last_update_time = last_update_time
        self.message = message
        self.observed_generation = observed_generation
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.roles = roles
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusHighAvailability(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusHighAvailability.

    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar mirroring_certificate:
    :vartype mirroring_certificate: str
    :ivar reason:
    :vartype reason: str
    :ivar replicas:
    :vartype replicas:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusHighAvailabilityReplicasItem]
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "mirroring_certificate": {"key": "mirroringCertificate", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "replicas": {
            "key": "replicas",
            "type": "[ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusHighAvailabilityReplicasItem]",
        },
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        mirroring_certificate: Optional[str] = None,
        reason: Optional[str] = None,
        replicas: Optional[
            List[
                "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusHighAvailabilityReplicasItem"
            ]
        ] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword mirroring_certificate:
        :paramtype mirroring_certificate: str
        :keyword reason:
        :paramtype reason: str
        :keyword replicas:
        :paramtype replicas:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusHighAvailabilityReplicasItem]
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.mirroring_certificate = mirroring_certificate
        self.reason = reason
        self.replicas = replicas
        self.state = state


class ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusHighAvailabilityReplicasItem(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusHighAvailabilityReplicasItem.

    :ivar availability_mode:
    :vartype availability_mode: str
    :ivar connected_state:
    :vartype connected_state: str
    :ivar health_state:
    :vartype health_state: str
    :ivar replica_name:
    :vartype replica_name: str
    :ivar role:
    :vartype role: str
    :ivar secondary_role_allow_connections:
    :vartype secondary_role_allow_connections: str
    :ivar synchronization_state:
    :vartype synchronization_state: str
    """

    _attribute_map = {
        "availability_mode": {"key": "availabilityMode", "type": "str"},
        "connected_state": {"key": "connectedState", "type": "str"},
        "health_state": {"key": "healthState", "type": "str"},
        "replica_name": {"key": "replicaName", "type": "str"},
        "role": {"key": "role", "type": "str"},
        "secondary_role_allow_connections": {
            "key": "secondaryRoleAllowConnections",
            "type": "str",
        },
        "synchronization_state": {"key": "synchronizationState", "type": "str"},
    }

    def __init__(
        self,
        *,
        availability_mode: Optional[str] = None,
        connected_state: Optional[str] = None,
        health_state: Optional[str] = None,
        replica_name: Optional[str] = None,
        role: Optional[str] = None,
        secondary_role_allow_connections: Optional[str] = None,
        synchronization_state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword availability_mode:
        :paramtype availability_mode: str
        :keyword connected_state:
        :paramtype connected_state: str
        :keyword health_state:
        :paramtype health_state: str
        :keyword replica_name:
        :paramtype replica_name: str
        :keyword role:
        :paramtype role: str
        :keyword secondary_role_allow_connections:
        :paramtype secondary_role_allow_connections: str
        :keyword synchronization_state:
        :paramtype synchronization_state: str
        """
        super().__init__(**kwargs)
        self.availability_mode = availability_mode
        self.connected_state = connected_state
        self.health_state = health_state
        self.replica_name = replica_name
        self.role = role
        self.secondary_role_allow_connections = secondary_role_allow_connections
        self.synchronization_state = synchronization_state


class ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRoles(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRoles.

    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar reason:
    :vartype reason: str
    :ivar sql:
    :vartype sql:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRolesSql
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "sql": {
            "key": "sql",
            "type": "ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRolesSql",
        },
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        reason: Optional[str] = None,
        sql: Optional[
            "_models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRolesSql"
        ] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword reason:
        :paramtype reason: str
        :keyword sql:
        :paramtype sql:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRolesSql
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.reason = reason
        self.sql = sql
        self.state = state


class ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRolesSql(
    _serialization.Model
):
    """ComMicrosoftArcdataSqlV9SqlManagedInstanceStatusRolesSql.

    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar ready_replicas:
    :vartype ready_replicas: int
    :ivar reason:
    :vartype reason: str
    :ivar replicas:
    :vartype replicas: int
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "ready_replicas": {"key": "readyReplicas", "type": "int"},
        "reason": {"key": "reason", "type": "str"},
        "replicas": {"key": "replicas", "type": "int"},
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        ready_replicas: Optional[int] = None,
        reason: Optional[str] = None,
        replicas: Optional[int] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword ready_replicas:
        :paramtype ready_replicas: int
        :keyword reason:
        :paramtype reason: str
        :keyword replicas:
        :paramtype replicas: int
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.ready_replicas = ready_replicas
        self.reason = reason
        self.replicas = replicas
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataTasksV1Beta1ExportTaskList(_serialization.Model):
    """ExportTaskList is a list of ExportTask.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of exporttasks. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of exporttasks. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataTasksV1ExportTaskList(_serialization.Model):
    """ExportTaskList is a list of ExportTask.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of exporttasks. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of exporttasks. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataTasksV2ExportTaskList(_serialization.Model):
    """ExportTaskList is a list of ExportTask.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of exporttasks. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of exporttasks. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1ActiveDirectoryConnectorList(_serialization.Model):
    """ActiveDirectoryConnectorList is a list of ActiveDirectoryConnector.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of activedirectoryconnectors. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of activedirectoryconnectors. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta1ActiveDirectoryConnectorList(
    _serialization.Model
):
    """ActiveDirectoryConnectorList is a list of ActiveDirectoryConnector.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of activedirectoryconnectors. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of activedirectoryconnectors. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta1DataControllerList(_serialization.Model):
    """DataControllerList is a list of DataController.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of datacontrollers. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of datacontrollers. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta1KafkaList(_serialization.Model):
    """KafkaList is a list of Kafka.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of kafkas. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of kafkas. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta1MonitorList(_serialization.Model):
    """MonitorList is a list of Monitor.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of monitors. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of monitors. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta1PostgreSqlList(_serialization.Model):
    """PostgreSqlList is a list of PostgreSql.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of postgresqls. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of postgresqls. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfile(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfile.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpec
    :ivar status:
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpec
        :keyword status:
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileList(
    _serialization.Model
):
    """SqlManagedInstanceMonitoringProfileList is a list of SqlManagedInstanceMonitoringProfile.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstancemonitoringprofiles. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfile]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfile]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfile"
        ],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstancemonitoringprofiles. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfile]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpec(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpec.

    :ivar datasets:
    :vartype datasets:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasets
    :ivar xevents: Any object.
    :vartype xevents: JSON
    """

    _attribute_map = {
        "datasets": {
            "key": "datasets",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasets",
        },
        "xevents": {"key": "xevents", "type": "object"},
    }

    def __init__(
        self,
        *,
        datasets: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasets"
        ] = None,
        xevents: Optional[JSON] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword datasets:
        :paramtype datasets:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasets
        :keyword xevents: Any object.
        :paramtype xevents: JSON
        """
        super().__init__(**kwargs)
        self.datasets = datasets
        self.xevents = xevents


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasets(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasets.

    :ivar active_sessions:
    :vartype active_sessions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsActiveSessions
    :ivar cpu_utilization:
    :vartype cpu_utilization:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsCpuUtilization
    :ivar database_properties:
    :vartype database_properties:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseProperties
    :ivar database_replicas:
    :vartype database_replicas:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseReplicas
    :ivar database_storage_utilization:
    :vartype database_storage_utilization:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseStorageUtilization
    :ivar health_diagnostics:
    :vartype health_diagnostics:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsHealthDiagnostics
    :ivar memory_utilization:
    :vartype memory_utilization:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsMemoryUtilization
    :ivar performance_counters:
    :vartype performance_counters:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsPerformanceCounters
    :ivar query_runtime_stats:
    :vartype query_runtime_stats:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsQueryRuntimeStats
    :ivar query_wait_stats:
    :vartype query_wait_stats:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsQueryWaitStats
    :ivar server_properties:
    :vartype server_properties:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsServerProperties
    :ivar sql_agent_job_history:
    :vartype sql_agent_job_history:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobHistory
    :ivar sql_agent_job_state:
    :vartype sql_agent_job_state:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobState
    :ivar storage_io:
    :vartype storage_io:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsStorageIo
    :ivar volume_storage_utilization:
    :vartype volume_storage_utilization:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsVolumeStorageUtilization
    :ivar wait_stats:
    :vartype wait_stats:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsWaitStats
    """

    _attribute_map = {
        "active_sessions": {
            "key": "activeSessions",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsActiveSessions",
        },
        "cpu_utilization": {
            "key": "cpuUtilization",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsCpuUtilization",
        },
        "database_properties": {
            "key": "databaseProperties",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseProperties",
        },
        "database_replicas": {
            "key": "databaseReplicas",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseReplicas",
        },
        "database_storage_utilization": {
            "key": "databaseStorageUtilization",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseStorageUtilization",
        },
        "health_diagnostics": {
            "key": "healthDiagnostics",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsHealthDiagnostics",
        },
        "memory_utilization": {
            "key": "memoryUtilization",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsMemoryUtilization",
        },
        "performance_counters": {
            "key": "performanceCounters",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsPerformanceCounters",
        },
        "query_runtime_stats": {
            "key": "queryRuntimeStats",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsQueryRuntimeStats",
        },
        "query_wait_stats": {
            "key": "queryWaitStats",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsQueryWaitStats",
        },
        "server_properties": {
            "key": "serverProperties",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsServerProperties",
        },
        "sql_agent_job_history": {
            "key": "sqlAgentJobHistory",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobHistory",
        },
        "sql_agent_job_state": {
            "key": "sqlAgentJobState",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobState",
        },
        "storage_io": {
            "key": "storageIo",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsStorageIo",
        },
        "volume_storage_utilization": {
            "key": "volumeStorageUtilization",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsVolumeStorageUtilization",
        },
        "wait_stats": {
            "key": "waitStats",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsWaitStats",
        },
    }

    def __init__(
        self,
        *,
        active_sessions: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsActiveSessions"
        ] = None,
        cpu_utilization: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsCpuUtilization"
        ] = None,
        database_properties: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseProperties"
        ] = None,
        database_replicas: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseReplicas"
        ] = None,
        database_storage_utilization: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseStorageUtilization"
        ] = None,
        health_diagnostics: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsHealthDiagnostics"
        ] = None,
        memory_utilization: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsMemoryUtilization"
        ] = None,
        performance_counters: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsPerformanceCounters"
        ] = None,
        query_runtime_stats: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsQueryRuntimeStats"
        ] = None,
        query_wait_stats: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsQueryWaitStats"
        ] = None,
        server_properties: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsServerProperties"
        ] = None,
        sql_agent_job_history: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobHistory"
        ] = None,
        sql_agent_job_state: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobState"
        ] = None,
        storage_io: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsStorageIo"
        ] = None,
        volume_storage_utilization: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsVolumeStorageUtilization"
        ] = None,
        wait_stats: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsWaitStats"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword active_sessions:
        :paramtype active_sessions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsActiveSessions
        :keyword cpu_utilization:
        :paramtype cpu_utilization:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsCpuUtilization
        :keyword database_properties:
        :paramtype database_properties:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseProperties
        :keyword database_replicas:
        :paramtype database_replicas:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseReplicas
        :keyword database_storage_utilization:
        :paramtype database_storage_utilization:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseStorageUtilization
        :keyword health_diagnostics:
        :paramtype health_diagnostics:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsHealthDiagnostics
        :keyword memory_utilization:
        :paramtype memory_utilization:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsMemoryUtilization
        :keyword performance_counters:
        :paramtype performance_counters:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsPerformanceCounters
        :keyword query_runtime_stats:
        :paramtype query_runtime_stats:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsQueryRuntimeStats
        :keyword query_wait_stats:
        :paramtype query_wait_stats:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsQueryWaitStats
        :keyword server_properties:
        :paramtype server_properties:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsServerProperties
        :keyword sql_agent_job_history:
        :paramtype sql_agent_job_history:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobHistory
        :keyword sql_agent_job_state:
        :paramtype sql_agent_job_state:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobState
        :keyword storage_io:
        :paramtype storage_io:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsStorageIo
        :keyword volume_storage_utilization:
        :paramtype volume_storage_utilization:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsVolumeStorageUtilization
        :keyword wait_stats:
        :paramtype wait_stats:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsWaitStats
        """
        super().__init__(**kwargs)
        self.active_sessions = active_sessions
        self.cpu_utilization = cpu_utilization
        self.database_properties = database_properties
        self.database_replicas = database_replicas
        self.database_storage_utilization = database_storage_utilization
        self.health_diagnostics = health_diagnostics
        self.memory_utilization = memory_utilization
        self.performance_counters = performance_counters
        self.query_runtime_stats = query_runtime_stats
        self.query_wait_stats = query_wait_stats
        self.server_properties = server_properties
        self.sql_agent_job_history = sql_agent_job_history
        self.sql_agent_job_state = sql_agent_job_state
        self.storage_io = storage_io
        self.volume_storage_utilization = volume_storage_utilization
        self.wait_stats = wait_stats


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsActiveSessions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsActiveSessions.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsCpuUtilization(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsCpuUtilization.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseProperties(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseProperties.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseReplicas(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseReplicas.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseStorageUtilization(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseStorageUtilization.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsHealthDiagnostics(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsHealthDiagnostics.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsMemoryUtilization(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsMemoryUtilization.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsPerformanceCounters(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsPerformanceCounters.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsQueryRuntimeStats(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsQueryRuntimeStats.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsQueryWaitStats(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsQueryWaitStats.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsServerProperties(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsServerProperties.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobHistory(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobHistory.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobState(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobState.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsStorageIo(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsStorageIo.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsVolumeStorageUtilization(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsVolumeStorageUtilization.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsWaitStats(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileSpecDatasetsWaitStats.

    :ivar frequency:
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency:
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatusReleasedVersions
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatusReleasedVersions",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        observed_generation: Optional[int] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatusReleasedVersions"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatusReleasedVersions
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.observed_generation = observed_generation
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta1SqlManagedInstanceMonitoringProfileStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta1TelemetryCollectorList(_serialization.Model):
    """TelemetryCollectorList is a list of TelemetryCollector.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of telemetrycollectors. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of telemetrycollectors. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta1TelemetryRouterList(_serialization.Model):
    """TelemetryRouterList is a list of TelemetryRouter.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of telemetryrouters. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of telemetryrouters. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta2ActiveDirectoryConnectorList(
    _serialization.Model
):
    """ActiveDirectoryConnectorList is a list of ActiveDirectoryConnector.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of activedirectoryconnectors. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of activedirectoryconnectors. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta2KafkaList(_serialization.Model):
    """KafkaList is a list of Kafka.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of kafkas. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of kafkas. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta2PostgreSqlList(_serialization.Model):
    """PostgreSqlList is a list of PostgreSql.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of postgresqls. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of postgresqls. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfile(
    _serialization.Model
):
    """A Sql Managed Instance Monitoring Profile is a resource that specifies what monitoring data to
    collect for a SQL Managed Instances. The data specified in this profile will be collected and
    sent to the Telemetry Router on the SQL instances that reference this profile.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec: Specification of the desired monitoring data to be collected for any SQL instance
     that references this profile.
    :vartype spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpec
    :ivar status: Most recently observed status of the monitoring profile.
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec: Specification of the desired monitoring data to be collected for any SQL
         instance that references this profile.
        :paramtype spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpec
        :keyword status: Most recently observed status of the monitoring profile.
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileList(
    _serialization.Model
):
    """SqlManagedInstanceMonitoringProfileList is a list of SqlManagedInstanceMonitoringProfile.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of sqlmanagedinstancemonitoringprofiles. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfile]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfile]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfile"
        ],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of sqlmanagedinstancemonitoringprofiles. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfile]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpec(
    _serialization.Model
):
    """Specification of the desired monitoring data to be collected for any SQL instance that
    references this profile.

    :ivar datasets: List of datasets available for collection.
    :vartype datasets:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasets
    :ivar xevents: List of Extended Events sessions to collect.
    :vartype xevents:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecXeventsItem]
    """

    _attribute_map = {
        "datasets": {
            "key": "datasets",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasets",
        },
        "xevents": {
            "key": "xevents",
            "type": "[ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecXeventsItem]",
        },
    }

    def __init__(
        self,
        *,
        datasets: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasets"
        ] = None,
        xevents: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecXeventsItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword datasets: List of datasets available for collection.
        :paramtype datasets:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasets
        :keyword xevents: List of Extended Events sessions to collect.
        :paramtype xevents:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecXeventsItem]
        """
        super().__init__(**kwargs)
        self.datasets = datasets
        self.xevents = xevents


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasets(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """List of datasets available for collection.

    :ivar active_sessions: Configuration for the datasets.
    :vartype active_sessions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsActiveSessions
    :ivar cpu_utilization: Configuration for the datasets.
    :vartype cpu_utilization:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsCpuUtilization
    :ivar database_properties: Configuration for the datasets.
    :vartype database_properties:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseProperties
    :ivar database_replicas: Configuration for the datasets.
    :vartype database_replicas:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseReplicas
    :ivar database_storage_utilization: Configuration for the datasets.
    :vartype database_storage_utilization:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseStorageUtilization
    :ivar health_diagnostics: Configuration for the datasets.
    :vartype health_diagnostics:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsHealthDiagnostics
    :ivar memory_utilization: Configuration for the datasets.
    :vartype memory_utilization:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsMemoryUtilization
    :ivar performance_counters: Configuration for the datasets.
    :vartype performance_counters:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsPerformanceCounters
    :ivar query_runtime_stats: Configuration for the datasets.
    :vartype query_runtime_stats:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsQueryRuntimeStats
    :ivar query_wait_stats: Configuration for the datasets.
    :vartype query_wait_stats:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsQueryWaitStats
    :ivar server_properties: Configuration for the datasets.
    :vartype server_properties:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsServerProperties
    :ivar sql_agent_job_history: Configuration for the datasets.
    :vartype sql_agent_job_history:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobHistory
    :ivar sql_agent_job_state: Configuration for the datasets.
    :vartype sql_agent_job_state:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobState
    :ivar storage_io: Configuration for the datasets.
    :vartype storage_io:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsStorageIo
    :ivar volume_storage_utilization: Configuration for the datasets.
    :vartype volume_storage_utilization:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsVolumeStorageUtilization
    :ivar wait_stats: Configuration for the datasets.
    :vartype wait_stats:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsWaitStats
    """

    _attribute_map = {
        "active_sessions": {
            "key": "activeSessions",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsActiveSessions",
        },
        "cpu_utilization": {
            "key": "cpuUtilization",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsCpuUtilization",
        },
        "database_properties": {
            "key": "databaseProperties",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseProperties",
        },
        "database_replicas": {
            "key": "databaseReplicas",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseReplicas",
        },
        "database_storage_utilization": {
            "key": "databaseStorageUtilization",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseStorageUtilization",
        },
        "health_diagnostics": {
            "key": "healthDiagnostics",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsHealthDiagnostics",
        },
        "memory_utilization": {
            "key": "memoryUtilization",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsMemoryUtilization",
        },
        "performance_counters": {
            "key": "performanceCounters",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsPerformanceCounters",
        },
        "query_runtime_stats": {
            "key": "queryRuntimeStats",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsQueryRuntimeStats",
        },
        "query_wait_stats": {
            "key": "queryWaitStats",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsQueryWaitStats",
        },
        "server_properties": {
            "key": "serverProperties",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsServerProperties",
        },
        "sql_agent_job_history": {
            "key": "sqlAgentJobHistory",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobHistory",
        },
        "sql_agent_job_state": {
            "key": "sqlAgentJobState",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobState",
        },
        "storage_io": {
            "key": "storageIo",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsStorageIo",
        },
        "volume_storage_utilization": {
            "key": "volumeStorageUtilization",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsVolumeStorageUtilization",
        },
        "wait_stats": {
            "key": "waitStats",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsWaitStats",
        },
    }

    def __init__(
        self,
        *,
        active_sessions: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsActiveSessions"
        ] = None,
        cpu_utilization: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsCpuUtilization"
        ] = None,
        database_properties: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseProperties"
        ] = None,
        database_replicas: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseReplicas"
        ] = None,
        database_storage_utilization: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseStorageUtilization"
        ] = None,
        health_diagnostics: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsHealthDiagnostics"
        ] = None,
        memory_utilization: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsMemoryUtilization"
        ] = None,
        performance_counters: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsPerformanceCounters"
        ] = None,
        query_runtime_stats: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsQueryRuntimeStats"
        ] = None,
        query_wait_stats: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsQueryWaitStats"
        ] = None,
        server_properties: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsServerProperties"
        ] = None,
        sql_agent_job_history: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobHistory"
        ] = None,
        sql_agent_job_state: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobState"
        ] = None,
        storage_io: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsStorageIo"
        ] = None,
        volume_storage_utilization: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsVolumeStorageUtilization"
        ] = None,
        wait_stats: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsWaitStats"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword active_sessions: Configuration for the datasets.
        :paramtype active_sessions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsActiveSessions
        :keyword cpu_utilization: Configuration for the datasets.
        :paramtype cpu_utilization:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsCpuUtilization
        :keyword database_properties: Configuration for the datasets.
        :paramtype database_properties:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseProperties
        :keyword database_replicas: Configuration for the datasets.
        :paramtype database_replicas:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseReplicas
        :keyword database_storage_utilization: Configuration for the datasets.
        :paramtype database_storage_utilization:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseStorageUtilization
        :keyword health_diagnostics: Configuration for the datasets.
        :paramtype health_diagnostics:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsHealthDiagnostics
        :keyword memory_utilization: Configuration for the datasets.
        :paramtype memory_utilization:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsMemoryUtilization
        :keyword performance_counters: Configuration for the datasets.
        :paramtype performance_counters:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsPerformanceCounters
        :keyword query_runtime_stats: Configuration for the datasets.
        :paramtype query_runtime_stats:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsQueryRuntimeStats
        :keyword query_wait_stats: Configuration for the datasets.
        :paramtype query_wait_stats:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsQueryWaitStats
        :keyword server_properties: Configuration for the datasets.
        :paramtype server_properties:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsServerProperties
        :keyword sql_agent_job_history: Configuration for the datasets.
        :paramtype sql_agent_job_history:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobHistory
        :keyword sql_agent_job_state: Configuration for the datasets.
        :paramtype sql_agent_job_state:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobState
        :keyword storage_io: Configuration for the datasets.
        :paramtype storage_io:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsStorageIo
        :keyword volume_storage_utilization: Configuration for the datasets.
        :paramtype volume_storage_utilization:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsVolumeStorageUtilization
        :keyword wait_stats: Configuration for the datasets.
        :paramtype wait_stats:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsWaitStats
        """
        super().__init__(**kwargs)
        self.active_sessions = active_sessions
        self.cpu_utilization = cpu_utilization
        self.database_properties = database_properties
        self.database_replicas = database_replicas
        self.database_storage_utilization = database_storage_utilization
        self.health_diagnostics = health_diagnostics
        self.memory_utilization = memory_utilization
        self.performance_counters = performance_counters
        self.query_runtime_stats = query_runtime_stats
        self.query_wait_stats = query_wait_stats
        self.server_properties = server_properties
        self.sql_agent_job_history = sql_agent_job_history
        self.sql_agent_job_state = sql_agent_job_state
        self.storage_io = storage_io
        self.volume_storage_utilization = volume_storage_utilization
        self.wait_stats = wait_stats


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsActiveSessions(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsCpuUtilization(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseProperties(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseReplicas(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsDatabaseStorageUtilization(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsHealthDiagnostics(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsMemoryUtilization(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsPerformanceCounters(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsQueryRuntimeStats(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsQueryWaitStats(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsServerProperties(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobHistory(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsSqlAgentJobState(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsStorageIo(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsVolumeStorageUtilization(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecDatasetsWaitStats(
    _serialization.Model
):
    """Configuration for the datasets.

    :ivar frequency: Frequency desc.
    :vartype frequency: str
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
    }

    def __init__(
        self, *, frequency: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword frequency: Frequency desc.
        :paramtype frequency: str
        """
        super().__init__(**kwargs)
        self.frequency = frequency


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecXeventsItem(
    _serialization.Model
):
    """Represents and extended event session and target.

    :ivar name: The name of the Extended Events session.
    :vartype name: str
    :ivar target: The extended event session target to collect events from.
    :vartype target:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecXeventsItemTarget
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "target": {
            "key": "target",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecXeventsItemTarget",
        },
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        target: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecXeventsItemTarget"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword name: The name of the Extended Events session.
        :paramtype name: str
        :keyword target: The extended event session target to collect events from.
        :paramtype target:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecXeventsItemTarget
        """
        super().__init__(**kwargs)
        self.name = name
        self.target = target


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileSpecXeventsItemTarget(
    _serialization.Model
):
    """The extended event session target to collect events from.

    :ivar filename: For EventFile targets, this is the filename without a path specified when the
     target was created (e.g: "MySessionFile.xel").
    :vartype filename: str
    :ivar type: The target type. Currently only EventFile is supported. Known values are: "None"
     and "EventFile".
    :vartype type: str or ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Enum0
    """

    _attribute_map = {
        "filename": {"key": "filename", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        filename: Optional[str] = None,
        type: Optional[Union[str, "_models.Enum0"]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword filename: For EventFile targets, this is the filename without a path specified when
         the target was created (e.g: "MySessionFile.xel").
        :paramtype filename: str
        :keyword type: The target type. Currently only EventFile is supported. Known values are: "None"
         and "EventFile".
        :paramtype type: str or ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Enum0
        """
        super().__init__(**kwargs)
        self.filename = filename
        self.type = type


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """Most recently observed status of the monitoring profile.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatusReleasedVersions
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatusReleasedVersions",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        observed_generation: Optional[int] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatusReleasedVersions"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatusReleasedVersions
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.observed_generation = observed_generation
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta2SqlManagedInstanceMonitoringProfileStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta2TelemetryCollectorList(_serialization.Model):
    """TelemetryCollectorList is a list of TelemetryCollector.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of telemetrycollectors. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of telemetrycollectors. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta2TelemetryRouterList(_serialization.Model):
    """TelemetryRouterList is a list of TelemetryRouter.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of telemetryrouters. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of telemetryrouters. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta3Kafka(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3Kafka.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpec
    :ivar status:
    :vartype status: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {"key": "spec", "type": "ComMicrosoftArcdataV1Beta3KafkaSpec"},
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataV1Beta3KafkaStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional["_models.ComMicrosoftArcdataV1Beta3KafkaSpec"] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataV1Beta3KafkaStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpec
        :keyword status:
        :paramtype status: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataV1Beta3KafkaList(_serialization.Model):
    """KafkaList is a list of Kafka.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of kafkas. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3Kafka]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[ComMicrosoftArcdataV1Beta3Kafka]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ComMicrosoftArcdataV1Beta3Kafka"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of kafkas. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3Kafka]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta3KafkaSpec(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3KafkaSpec.

    :ivar broker:
    :vartype broker: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecBroker
    :ivar kraft_controller_mode: Known values are: "Combined" and "Separate".
    :vartype kraft_controller_mode: str or
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecKraftControllerMode
    :ivar security:
    :vartype security:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecSecurity
    :ivar update:
    :vartype update: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecUpdate
    """

    _attribute_map = {
        "broker": {
            "key": "broker",
            "type": "ComMicrosoftArcdataV1Beta3KafkaSpecBroker",
        },
        "kraft_controller_mode": {"key": "kraftControllerMode", "type": "str"},
        "security": {
            "key": "security",
            "type": "ComMicrosoftArcdataV1Beta3KafkaSpecSecurity",
        },
        "update": {
            "key": "update",
            "type": "ComMicrosoftArcdataV1Beta3KafkaSpecUpdate",
        },
    }

    def __init__(
        self,
        *,
        broker: Optional[
            "_models.ComMicrosoftArcdataV1Beta3KafkaSpecBroker"
        ] = None,
        kraft_controller_mode: Optional[
            Union[
                str,
                "_models.ComMicrosoftArcdataV1Beta3KafkaSpecKraftControllerMode",
            ]
        ] = None,
        security: Optional[
            "_models.ComMicrosoftArcdataV1Beta3KafkaSpecSecurity"
        ] = None,
        update: Optional[
            "_models.ComMicrosoftArcdataV1Beta3KafkaSpecUpdate"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword broker:
        :paramtype broker:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecBroker
        :keyword kraft_controller_mode: Known values are: "Combined" and "Separate".
        :paramtype kraft_controller_mode: str or
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecKraftControllerMode
        :keyword security:
        :paramtype security:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecSecurity
        :keyword update:
        :paramtype update:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecUpdate
        """
        super().__init__(**kwargs)
        self.broker = broker
        self.kraft_controller_mode = kraft_controller_mode
        self.security = security
        self.update = update


class ComMicrosoftArcdataV1Beta3KafkaSpecBroker(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3KafkaSpecBroker.

    :ivar limits:
    :vartype limits:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecBrokerLimits
    :ivar replicas:
    :vartype replicas: int
    :ivar requests:
    :vartype requests:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecBrokerRequests
    :ivar storage:
    :vartype storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorage
    """

    _attribute_map = {
        "limits": {
            "key": "limits",
            "type": "ComMicrosoftArcdataV1Beta3KafkaSpecBrokerLimits",
        },
        "replicas": {"key": "replicas", "type": "int"},
        "requests": {
            "key": "requests",
            "type": "ComMicrosoftArcdataV1Beta3KafkaSpecBrokerRequests",
        },
        "storage": {
            "key": "storage",
            "type": "ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorage",
        },
    }

    def __init__(
        self,
        *,
        limits: Optional[
            "_models.ComMicrosoftArcdataV1Beta3KafkaSpecBrokerLimits"
        ] = None,
        replicas: Optional[int] = None,
        requests: Optional[
            "_models.ComMicrosoftArcdataV1Beta3KafkaSpecBrokerRequests"
        ] = None,
        storage: Optional[
            "_models.ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorage"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits:
        :paramtype limits:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecBrokerLimits
        :keyword replicas:
        :paramtype replicas: int
        :keyword requests:
        :paramtype requests:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecBrokerRequests
        :keyword storage:
        :paramtype storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorage
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.replicas = replicas
        self.requests = requests
        self.storage = storage


class ComMicrosoftArcdataV1Beta3KafkaSpecBrokerLimits(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3KafkaSpecBrokerLimits.

    :ivar memory:
    :vartype memory: str
    :ivar vcores:
    :vartype vcores: int
    """

    _attribute_map = {
        "memory": {"key": "memory", "type": "str"},
        "vcores": {"key": "vcores", "type": "int"},
    }

    def __init__(
        self,
        *,
        memory: Optional[str] = None,
        vcores: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword memory:
        :paramtype memory: str
        :keyword vcores:
        :paramtype vcores: int
        """
        super().__init__(**kwargs)
        self.memory = memory
        self.vcores = vcores


class ComMicrosoftArcdataV1Beta3KafkaSpecBrokerRequests(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3KafkaSpecBrokerRequests.

    :ivar memory:
    :vartype memory: str
    :ivar vcores:
    :vartype vcores: int
    """

    _attribute_map = {
        "memory": {"key": "memory", "type": "str"},
        "vcores": {"key": "vcores", "type": "int"},
    }

    def __init__(
        self,
        *,
        memory: Optional[str] = None,
        vcores: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword memory:
        :paramtype memory: str
        :keyword vcores:
        :paramtype vcores: int
        """
        super().__init__(**kwargs)
        self.memory = memory
        self.vcores = vcores


class ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorage(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorage.

    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorageData
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorageLogs
    """

    _attribute_map = {
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorageData",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        data: Optional[
            "_models.ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorageData"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorageData
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorageLogs
        """
        super().__init__(**kwargs)
        self.data = data
        self.logs = logs


class ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorageData(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorageData.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorageLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3KafkaSpecBrokerStorageLogs.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta3KafkaSpecSecurity(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3KafkaSpecSecurity.

    :ivar super_users:
    :vartype super_users: list[str]
    """

    _attribute_map = {
        "super_users": {"key": "superUsers", "type": "[str]"},
    }

    def __init__(
        self, *, super_users: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword super_users:
        :paramtype super_users: list[str]
        """
        super().__init__(**kwargs)
        self.super_users = super_users


class ComMicrosoftArcdataV1Beta3KafkaSpecUpdate(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3KafkaSpecUpdate.

    :ivar desired_version:
    :vartype desired_version: str
    """

    _attribute_map = {
        "desired_version": {"key": "desiredVersion", "type": "str"},
    }

    def __init__(
        self, *, desired_version: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword desired_version:
        :paramtype desired_version: str
        """
        super().__init__(**kwargs)
        self.desired_version = desired_version


class ComMicrosoftArcdataV1Beta3KafkaStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataV1Beta3KafkaStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar ready_replicas:
    :vartype ready_replicas: str
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaStatusReleasedVersions
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "ready_replicas": {"key": "readyReplicas", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataV1Beta3KafkaStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataV1Beta3KafkaStatusReleasedVersions",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        observed_generation: Optional[int] = None,
        ready_replicas: Optional[str] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta3KafkaStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta3KafkaStatusReleasedVersions"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword ready_replicas:
        :paramtype ready_replicas: str
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3KafkaStatusReleasedVersions
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.observed_generation = observed_generation
        self.ready_replicas = ready_replicas
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataV1Beta3KafkaStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3KafkaStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta3KafkaStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3KafkaStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta3PostgreSql(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3PostgreSql.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpec
    :ivar status:
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpec
        :keyword status:
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataV1Beta3PostgreSqlList(_serialization.Model):
    """PostgreSqlList is a list of PostgreSql.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of postgresqls. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSql]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataV1Beta3PostgreSql]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ComMicrosoftArcdataV1Beta3PostgreSql"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of postgresqls. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSql]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta3PostgreSqlSpec(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpec.

    :ivar dev:
    :vartype dev: bool
    :ivar parent_resource:
    :vartype parent_resource:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecParentResource
    :ivar scheduling:
    :vartype scheduling:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecScheduling
    :ivar security:
    :vartype security:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecSecurity
    :ivar services:
    :vartype services:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecServices
    :ivar storage:
    :vartype storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorage
    :ivar update:
    :vartype update:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecUpdate
    """

    _attribute_map = {
        "dev": {"key": "dev", "type": "bool"},
        "parent_resource": {
            "key": "parentResource",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlSpecParentResource",
        },
        "scheduling": {
            "key": "scheduling",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlSpecScheduling",
        },
        "security": {
            "key": "security",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlSpecSecurity",
        },
        "services": {
            "key": "services",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlSpecServices",
        },
        "storage": {
            "key": "storage",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorage",
        },
        "update": {
            "key": "update",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlSpecUpdate",
        },
    }

    def __init__(
        self,
        *,
        dev: Optional[bool] = None,
        parent_resource: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecParentResource"
        ] = None,
        scheduling: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecScheduling"
        ] = None,
        security: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecSecurity"
        ] = None,
        services: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecServices"
        ] = None,
        storage: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorage"
        ] = None,
        update: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecUpdate"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword dev:
        :paramtype dev: bool
        :keyword parent_resource:
        :paramtype parent_resource:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecParentResource
        :keyword scheduling:
        :paramtype scheduling:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecScheduling
        :keyword security:
        :paramtype security:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecSecurity
        :keyword services:
        :paramtype services:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecServices
        :keyword storage:
        :paramtype storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorage
        :keyword update:
        :paramtype update:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecUpdate
        """
        super().__init__(**kwargs)
        self.dev = dev
        self.parent_resource = parent_resource
        self.scheduling = scheduling
        self.security = security
        self.services = services
        self.storage = storage
        self.update = update


class ComMicrosoftArcdataV1Beta3PostgreSqlSpecParentResource(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpecParentResource.

    :ivar api_group:
    :vartype api_group: str
    :ivar kind:
    :vartype kind: str
    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    """

    _attribute_map = {
        "api_group": {"key": "apiGroup", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        api_group: Optional[str] = None,
        kind: Optional[str] = None,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_group:
        :paramtype api_group: str
        :keyword kind:
        :paramtype kind: str
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.api_group = api_group
        self.kind = kind
        self.name = name
        self.namespace = namespace


class ComMicrosoftArcdataV1Beta3PostgreSqlSpecScheduling(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpecScheduling.

    :ivar default:
    :vartype default:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecSchedulingDefault
    """

    _attribute_map = {
        "default": {
            "key": "default",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlSpecSchedulingDefault",
        },
    }

    def __init__(
        self,
        *,
        default: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecSchedulingDefault"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword default:
        :paramtype default:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecSchedulingDefault
        """
        super().__init__(**kwargs)
        self.default = default


class ComMicrosoftArcdataV1Beta3PostgreSqlSpecSchedulingDefault(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpecSchedulingDefault.

    :ivar resources:
    :vartype resources:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecSchedulingDefaultResources
    """

    _attribute_map = {
        "resources": {
            "key": "resources",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlSpecSchedulingDefaultResources",
        },
    }

    def __init__(
        self,
        *,
        resources: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecSchedulingDefaultResources"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword resources:
        :paramtype resources:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecSchedulingDefaultResources
        """
        super().__init__(**kwargs)
        self.resources = resources


class ComMicrosoftArcdataV1Beta3PostgreSqlSpecSchedulingDefaultResources(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpecSchedulingDefaultResources.

    :ivar limits: Dictionary of :code:`<string>`.
    :vartype limits: dict[str, str]
    :ivar requests: Dictionary of :code:`<string>`.
    :vartype requests: dict[str, str]
    """

    _attribute_map = {
        "limits": {"key": "limits", "type": "{str}"},
        "requests": {"key": "requests", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        limits: Optional[Dict[str, str]] = None,
        requests: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits: Dictionary of :code:`<string>`.
        :paramtype limits: dict[str, str]
        :keyword requests: Dictionary of :code:`<string>`.
        :paramtype requests: dict[str, str]
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.requests = requests


class ComMicrosoftArcdataV1Beta3PostgreSqlSpecSecurity(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpecSecurity.

    :ivar admin_login_secret:
    :vartype admin_login_secret: str
    """

    _attribute_map = {
        "admin_login_secret": {"key": "adminLoginSecret", "type": "str"},
    }

    def __init__(
        self, *, admin_login_secret: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword admin_login_secret:
        :paramtype admin_login_secret: str
        """
        super().__init__(**kwargs)
        self.admin_login_secret = admin_login_secret


class ComMicrosoftArcdataV1Beta3PostgreSqlSpecServices(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpecServices.

    :ivar primary:
    :vartype primary:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecServicesPrimary
    """

    _attribute_map = {
        "primary": {
            "key": "primary",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlSpecServicesPrimary",
        },
    }

    def __init__(
        self,
        *,
        primary: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecServicesPrimary"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword primary:
        :paramtype primary:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecServicesPrimary
        """
        super().__init__(**kwargs)
        self.primary = primary


class ComMicrosoftArcdataV1Beta3PostgreSqlSpecServicesPrimary(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpecServicesPrimary.

    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar dns_name:
    :vartype dns_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar port:
    :vartype port: int
    :ivar type:
    :vartype type: str
    """

    _attribute_map = {
        "annotations": {"key": "annotations", "type": "{str}"},
        "dns_name": {"key": "dnsName", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "port": {"key": "port", "type": "int"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        annotations: Optional[Dict[str, str]] = None,
        dns_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        port: Optional[int] = None,
        type: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword dns_name:
        :paramtype dns_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword port:
        :paramtype port: int
        :keyword type:
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.annotations = annotations
        self.dns_name = dns_name
        self.labels = labels
        self.port = port
        self.type = type


class ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorage(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorage.

    :ivar backups:
    :vartype backups:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageBackups
    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageData
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageLogs
    """

    _attribute_map = {
        "backups": {
            "key": "backups",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageBackups",
        },
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageData",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        backups: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageBackups"
        ] = None,
        data: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageData"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword backups:
        :paramtype backups:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageBackups
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageData
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageLogs
        """
        super().__init__(**kwargs)
        self.backups = backups
        self.data = data
        self.logs = logs


class ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageBackups(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageBackups.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageBackupsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageBackupsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageBackupsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageBackupsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageBackupsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageBackupsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageData(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageData.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageDataVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageDataVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageDataVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageDataVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageDataVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageDataVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageLogs(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageLogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageLogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageLogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageLogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageLogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageLogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpecStorageLogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta3PostgreSqlSpecUpdate(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3PostgreSqlSpecUpdate.

    :ivar desired_version:
    :vartype desired_version: str
    """

    _attribute_map = {
        "desired_version": {"key": "desiredVersion", "type": "str"},
    }

    def __init__(
        self, *, desired_version: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword desired_version:
        :paramtype desired_version: str
        """
        super().__init__(**kwargs)
        self.desired_version = desired_version


class ComMicrosoftArcdataV1Beta3PostgreSqlStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataV1Beta3PostgreSqlStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar log_search_dashboard:
    :vartype log_search_dashboard: str
    :ivar message:
    :vartype message: str
    :ivar metrics_dashboard:
    :vartype metrics_dashboard: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar primary_endpoint:
    :vartype primary_endpoint: str
    :ivar ready_pods:
    :vartype ready_pods: str
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlStatusReleasedVersions
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "log_search_dashboard": {"key": "logSearchDashboard", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "metrics_dashboard": {"key": "metricsDashboard", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "primary_endpoint": {"key": "primaryEndpoint", "type": "str"},
        "ready_pods": {"key": "readyPods", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataV1Beta3PostgreSqlStatusReleasedVersions",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        log_search_dashboard: Optional[str] = None,
        message: Optional[str] = None,
        metrics_dashboard: Optional[str] = None,
        observed_generation: Optional[int] = None,
        primary_endpoint: Optional[str] = None,
        ready_pods: Optional[str] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta3PostgreSqlStatusReleasedVersions"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword log_search_dashboard:
        :paramtype log_search_dashboard: str
        :keyword message:
        :paramtype message: str
        :keyword metrics_dashboard:
        :paramtype metrics_dashboard: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword primary_endpoint:
        :paramtype primary_endpoint: str
        :keyword ready_pods:
        :paramtype ready_pods: str
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3PostgreSqlStatusReleasedVersions
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.log_search_dashboard = log_search_dashboard
        self.message = message
        self.metrics_dashboard = metrics_dashboard
        self.observed_generation = observed_generation
        self.primary_endpoint = primary_endpoint
        self.ready_pods = ready_pods
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataV1Beta3PostgreSqlStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3PostgreSqlStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta3PostgreSqlStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3PostgreSqlStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta3TelemetryCollectorList(_serialization.Model):
    """TelemetryCollectorList is a list of TelemetryCollector.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of telemetrycollectors. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of telemetrycollectors. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta3TelemetryRouter(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3TelemetryRouter.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpec
    :ivar status:
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataV1Beta3TelemetryRouterSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataV1Beta3TelemetryRouterStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataV1Beta3TelemetryRouterStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpec
        :keyword status:
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataV1Beta3TelemetryRouterList(_serialization.Model):
    """TelemetryRouterList is a list of TelemetryRouter.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of telemetryrouters. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouter]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataV1Beta3TelemetryRouter]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ComMicrosoftArcdataV1Beta3TelemetryRouter"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of telemetryrouters. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouter]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta3TelemetryRouterSpec(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3TelemetryRouterSpec.

    :ivar credentials:
    :vartype credentials:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecCredentials
    :ivar exporters: Anything.
    :vartype exporters: any
    :ivar kafka:
    :vartype kafka:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafka
    :ivar pipelines: Dictionary of
     <components·qhuwv5·schemas·com-microsoft-arcdata-v1beta3-telemetryrouter·properties·spec·properties·pipelines·additionalproperties>.
    :vartype pipelines: dict[str,
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsQhuwv5SchemasComMicrosoftArcdataV1Beta3TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties]
    :ivar update:
    :vartype update:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecUpdate
    """

    _attribute_map = {
        "credentials": {
            "key": "credentials",
            "type": "ComMicrosoftArcdataV1Beta3TelemetryRouterSpecCredentials",
        },
        "exporters": {"key": "exporters", "type": "object"},
        "kafka": {
            "key": "kafka",
            "type": "ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafka",
        },
        "pipelines": {
            "key": "pipelines",
            "type": "{ComponentsQhuwv5SchemasComMicrosoftArcdataV1Beta3TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties}",
        },
        "update": {
            "key": "update",
            "type": "ComMicrosoftArcdataV1Beta3TelemetryRouterSpecUpdate",
        },
    }

    def __init__(
        self,
        *,
        credentials: Optional[
            "_models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecCredentials"
        ] = None,
        exporters: Optional[Any] = None,
        kafka: Optional[
            "_models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafka"
        ] = None,
        pipelines: Optional[
            Dict[
                str,
                "_models.ComponentsQhuwv5SchemasComMicrosoftArcdataV1Beta3TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties",
            ]
        ] = None,
        update: Optional[
            "_models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecUpdate"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword credentials:
        :paramtype credentials:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecCredentials
        :keyword exporters: Anything.
        :paramtype exporters: any
        :keyword kafka:
        :paramtype kafka:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafka
        :keyword pipelines: Dictionary of
         <components·qhuwv5·schemas·com-microsoft-arcdata-v1beta3-telemetryrouter·properties·spec·properties·pipelines·additionalproperties>.
        :paramtype pipelines: dict[str,
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsQhuwv5SchemasComMicrosoftArcdataV1Beta3TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties]
        :keyword update:
        :paramtype update:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecUpdate
        """
        super().__init__(**kwargs)
        self.credentials = credentials
        self.exporters = exporters
        self.kafka = kafka
        self.pipelines = pipelines
        self.update = update


class ComMicrosoftArcdataV1Beta3TelemetryRouterSpecCredentials(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3TelemetryRouterSpecCredentials.

    :ivar certificates:
    :vartype certificates:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecCredentialsCertificatesItem]
    """

    _attribute_map = {
        "certificates": {
            "key": "certificates",
            "type": "[ComMicrosoftArcdataV1Beta3TelemetryRouterSpecCredentialsCertificatesItem]",
        },
    }

    def __init__(
        self,
        *,
        certificates: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecCredentialsCertificatesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword certificates:
        :paramtype certificates:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecCredentialsCertificatesItem]
        """
        super().__init__(**kwargs)
        self.certificates = certificates


class ComMicrosoftArcdataV1Beta3TelemetryRouterSpecCredentialsCertificatesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3TelemetryRouterSpecCredentialsCertificatesItem.

    :ivar certificate_name:
    :vartype certificate_name: str
    :ivar secret_name:
    :vartype secret_name: str
    :ivar secret_namespace:
    :vartype secret_namespace: str
    """

    _attribute_map = {
        "certificate_name": {"key": "certificateName", "type": "str"},
        "secret_name": {"key": "secretName", "type": "str"},
        "secret_namespace": {"key": "secretNamespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        certificate_name: Optional[str] = None,
        secret_name: Optional[str] = None,
        secret_namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword certificate_name:
        :paramtype certificate_name: str
        :keyword secret_name:
        :paramtype secret_name: str
        :keyword secret_namespace:
        :paramtype secret_namespace: str
        """
        super().__init__(**kwargs)
        self.certificate_name = certificate_name
        self.secret_name = secret_name
        self.secret_namespace = secret_namespace


class ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafka(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafka.

    :ivar limits:
    :vartype limits:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaLimits
    :ivar requests:
    :vartype requests:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaRequests
    :ivar storage:
    :vartype storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorage
    """

    _attribute_map = {
        "limits": {
            "key": "limits",
            "type": "ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaLimits",
        },
        "requests": {
            "key": "requests",
            "type": "ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaRequests",
        },
        "storage": {
            "key": "storage",
            "type": "ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorage",
        },
    }

    def __init__(
        self,
        *,
        limits: Optional[
            "_models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaLimits"
        ] = None,
        requests: Optional[
            "_models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaRequests"
        ] = None,
        storage: Optional[
            "_models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorage"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits:
        :paramtype limits:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaLimits
        :keyword requests:
        :paramtype requests:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaRequests
        :keyword storage:
        :paramtype storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorage
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.requests = requests
        self.storage = storage


class ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaLimits(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaLimits.

    :ivar memory:
    :vartype memory: str
    :ivar vcores:
    :vartype vcores: int
    """

    _attribute_map = {
        "memory": {"key": "memory", "type": "str"},
        "vcores": {"key": "vcores", "type": "int"},
    }

    def __init__(
        self,
        *,
        memory: Optional[str] = None,
        vcores: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword memory:
        :paramtype memory: str
        :keyword vcores:
        :paramtype vcores: int
        """
        super().__init__(**kwargs)
        self.memory = memory
        self.vcores = vcores


class ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaRequests(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaRequests.

    :ivar memory:
    :vartype memory: str
    :ivar vcores:
    :vartype vcores: int
    """

    _attribute_map = {
        "memory": {"key": "memory", "type": "str"},
        "vcores": {"key": "vcores", "type": "int"},
    }

    def __init__(
        self,
        *,
        memory: Optional[str] = None,
        vcores: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword memory:
        :paramtype memory: str
        :keyword vcores:
        :paramtype vcores: int
        """
        super().__init__(**kwargs)
        self.memory = memory
        self.vcores = vcores


class ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorage(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorage.

    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorageData
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorageLogs
    """

    _attribute_map = {
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorageData",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        data: Optional[
            "_models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorageData"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorageData
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorageLogs
        """
        super().__init__(**kwargs)
        self.data = data
        self.logs = logs


class ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorageData(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorageData.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorageLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3TelemetryRouterSpecKafkaStorageLogs.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta3TelemetryRouterSpecUpdate(_serialization.Model):
    """ComMicrosoftArcdataV1Beta3TelemetryRouterSpecUpdate.

    :ivar is_auto_upgrade_enabled:
    :vartype is_auto_upgrade_enabled: bool
    :ivar desired_version:
    :vartype desired_version: str
    """

    _attribute_map = {
        "is_auto_upgrade_enabled": {
            "key": "IsAutoUpgradeEnabled",
            "type": "bool",
        },
        "desired_version": {"key": "desiredVersion", "type": "str"},
    }

    def __init__(
        self,
        *,
        is_auto_upgrade_enabled: Optional[bool] = None,
        desired_version: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword is_auto_upgrade_enabled:
        :paramtype is_auto_upgrade_enabled: bool
        :keyword desired_version:
        :paramtype desired_version: str
        """
        super().__init__(**kwargs)
        self.is_auto_upgrade_enabled = is_auto_upgrade_enabled
        self.desired_version = desired_version


class ComMicrosoftArcdataV1Beta3TelemetryRouterStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataV1Beta3TelemetryRouterStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar ready_replicas:
    :vartype ready_replicas: str
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterStatusReleasedVersions
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "ready_replicas": {"key": "readyReplicas", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataV1Beta3TelemetryRouterStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataV1Beta3TelemetryRouterStatusReleasedVersions",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        observed_generation: Optional[int] = None,
        ready_replicas: Optional[str] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta3TelemetryRouterStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta3TelemetryRouterStatusReleasedVersions"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword ready_replicas:
        :paramtype ready_replicas: str
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta3TelemetryRouterStatusReleasedVersions
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.observed_generation = observed_generation
        self.ready_replicas = ready_replicas
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataV1Beta3TelemetryRouterStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3TelemetryRouterStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta3TelemetryRouterStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta3TelemetryRouterStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta4Kafka(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4Kafka.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpec
    :ivar status:
    :vartype status: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {"key": "spec", "type": "ComMicrosoftArcdataV1Beta4KafkaSpec"},
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataV1Beta4KafkaStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional["_models.ComMicrosoftArcdataV1Beta4KafkaSpec"] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpec
        :keyword status:
        :paramtype status: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataV1Beta4KafkaList(_serialization.Model):
    """KafkaList is a list of Kafka.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of kafkas. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4Kafka]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[ComMicrosoftArcdataV1Beta4Kafka]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ComMicrosoftArcdataV1Beta4Kafka"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of kafkas. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4Kafka]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta4KafkaSpec(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4KafkaSpec.

    :ivar broker:
    :vartype broker: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecBroker
    :ivar controller:
    :vartype controller:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecController
    :ivar kraft_controller_mode: Known values are: "Combined" and "Separate".
    :vartype kraft_controller_mode: str or
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecKraftControllerMode
    :ivar security:
    :vartype security:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecSecurity
    :ivar server:
    :vartype server: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecServer
    :ivar update:
    :vartype update: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecUpdate
    """

    _attribute_map = {
        "broker": {
            "key": "broker",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecBroker",
        },
        "controller": {
            "key": "controller",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecController",
        },
        "kraft_controller_mode": {"key": "kraftControllerMode", "type": "str"},
        "security": {
            "key": "security",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecSecurity",
        },
        "server": {
            "key": "server",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecServer",
        },
        "update": {
            "key": "update",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecUpdate",
        },
    }

    def __init__(
        self,
        *,
        broker: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecBroker"
        ] = None,
        controller: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecController"
        ] = None,
        kraft_controller_mode: Optional[
            Union[
                str,
                "_models.ComMicrosoftArcdataV1Beta4KafkaSpecKraftControllerMode",
            ]
        ] = None,
        security: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecSecurity"
        ] = None,
        server: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecServer"
        ] = None,
        update: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecUpdate"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword broker:
        :paramtype broker:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecBroker
        :keyword controller:
        :paramtype controller:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecController
        :keyword kraft_controller_mode: Known values are: "Combined" and "Separate".
        :paramtype kraft_controller_mode: str or
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecKraftControllerMode
        :keyword security:
        :paramtype security:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecSecurity
        :keyword server:
        :paramtype server:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecServer
        :keyword update:
        :paramtype update:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecUpdate
        """
        super().__init__(**kwargs)
        self.broker = broker
        self.controller = controller
        self.kraft_controller_mode = kraft_controller_mode
        self.security = security
        self.server = server
        self.update = update


class ComMicrosoftArcdataV1Beta4KafkaSpecBroker(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4KafkaSpecBroker.

    :ivar heap:
    :vartype heap:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecBrokerHeap
    :ivar replicas:
    :vartype replicas: int
    :ivar resources:
    :vartype resources:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecBrokerResources
    :ivar storage:
    :vartype storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorage
    """

    _attribute_map = {
        "heap": {
            "key": "heap",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecBrokerHeap",
        },
        "replicas": {"key": "replicas", "type": "int"},
        "resources": {
            "key": "resources",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecBrokerResources",
        },
        "storage": {
            "key": "storage",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorage",
        },
    }

    def __init__(
        self,
        *,
        heap: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecBrokerHeap"
        ] = None,
        replicas: Optional[int] = None,
        resources: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecBrokerResources"
        ] = None,
        storage: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorage"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword heap:
        :paramtype heap:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecBrokerHeap
        :keyword replicas:
        :paramtype replicas: int
        :keyword resources:
        :paramtype resources:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecBrokerResources
        :keyword storage:
        :paramtype storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorage
        """
        super().__init__(**kwargs)
        self.heap = heap
        self.replicas = replicas
        self.resources = resources
        self.storage = storage


class ComMicrosoftArcdataV1Beta4KafkaSpecBrokerHeap(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4KafkaSpecBrokerHeap.

    :ivar xms:
    :vartype xms: str
    :ivar xmx:
    :vartype xmx: str
    """

    _attribute_map = {
        "xms": {"key": "Xms", "type": "str"},
        "xmx": {"key": "Xmx", "type": "str"},
    }

    def __init__(
        self,
        *,
        xms: Optional[str] = None,
        xmx: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword xms:
        :paramtype xms: str
        :keyword xmx:
        :paramtype xmx: str
        """
        super().__init__(**kwargs)
        self.xms = xms
        self.xmx = xmx


class ComMicrosoftArcdataV1Beta4KafkaSpecBrokerResources(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4KafkaSpecBrokerResources.

    :ivar limits: Dictionary of :code:`<AnyObject>`.
    :vartype limits: dict[str, JSON]
    :ivar requests: Dictionary of :code:`<AnyObject>`.
    :vartype requests: dict[str, JSON]
    """

    _attribute_map = {
        "limits": {"key": "limits", "type": "{object}"},
        "requests": {"key": "requests", "type": "{object}"},
    }

    def __init__(
        self,
        *,
        limits: Optional[Dict[str, JSON]] = None,
        requests: Optional[Dict[str, JSON]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits: Dictionary of :code:`<AnyObject>`.
        :paramtype limits: dict[str, JSON]
        :keyword requests: Dictionary of :code:`<AnyObject>`.
        :paramtype requests: dict[str, JSON]
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.requests = requests


class ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorage(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorage.

    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorageData
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorageLogs
    """

    _attribute_map = {
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorageData",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        data: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorageData"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorageData
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorageLogs
        """
        super().__init__(**kwargs)
        self.data = data
        self.logs = logs


class ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorageData(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorageData.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorageLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4KafkaSpecBrokerStorageLogs.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta4KafkaSpecController(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4KafkaSpecController.

    :ivar heap:
    :vartype heap:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecControllerHeap
    :ivar replicas:
    :vartype replicas: int
    :ivar resources:
    :vartype resources:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecControllerResources
    :ivar storage:
    :vartype storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorage
    """

    _attribute_map = {
        "heap": {
            "key": "heap",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecControllerHeap",
        },
        "replicas": {"key": "replicas", "type": "int"},
        "resources": {
            "key": "resources",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecControllerResources",
        },
        "storage": {
            "key": "storage",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorage",
        },
    }

    def __init__(
        self,
        *,
        heap: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecControllerHeap"
        ] = None,
        replicas: Optional[int] = None,
        resources: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecControllerResources"
        ] = None,
        storage: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorage"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword heap:
        :paramtype heap:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecControllerHeap
        :keyword replicas:
        :paramtype replicas: int
        :keyword resources:
        :paramtype resources:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecControllerResources
        :keyword storage:
        :paramtype storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorage
        """
        super().__init__(**kwargs)
        self.heap = heap
        self.replicas = replicas
        self.resources = resources
        self.storage = storage


class ComMicrosoftArcdataV1Beta4KafkaSpecControllerHeap(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4KafkaSpecControllerHeap.

    :ivar xms:
    :vartype xms: str
    :ivar xmx:
    :vartype xmx: str
    """

    _attribute_map = {
        "xms": {"key": "Xms", "type": "str"},
        "xmx": {"key": "Xmx", "type": "str"},
    }

    def __init__(
        self,
        *,
        xms: Optional[str] = None,
        xmx: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword xms:
        :paramtype xms: str
        :keyword xmx:
        :paramtype xmx: str
        """
        super().__init__(**kwargs)
        self.xms = xms
        self.xmx = xmx


class ComMicrosoftArcdataV1Beta4KafkaSpecControllerResources(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4KafkaSpecControllerResources.

    :ivar limits: Dictionary of :code:`<AnyObject>`.
    :vartype limits: dict[str, JSON]
    :ivar requests: Dictionary of :code:`<AnyObject>`.
    :vartype requests: dict[str, JSON]
    """

    _attribute_map = {
        "limits": {"key": "limits", "type": "{object}"},
        "requests": {"key": "requests", "type": "{object}"},
    }

    def __init__(
        self,
        *,
        limits: Optional[Dict[str, JSON]] = None,
        requests: Optional[Dict[str, JSON]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits: Dictionary of :code:`<AnyObject>`.
        :paramtype limits: dict[str, JSON]
        :keyword requests: Dictionary of :code:`<AnyObject>`.
        :paramtype requests: dict[str, JSON]
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.requests = requests


class ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorage(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorage.

    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorageData
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorageLogs
    """

    _attribute_map = {
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorageData",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        data: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorageData"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorageData
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorageLogs
        """
        super().__init__(**kwargs)
        self.data = data
        self.logs = logs


class ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorageData(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorageData.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorageLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4KafkaSpecControllerStorageLogs.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta4KafkaSpecSecurity(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4KafkaSpecSecurity.

    :ivar super_users:
    :vartype super_users: list[str]
    """

    _attribute_map = {
        "super_users": {"key": "superUsers", "type": "[str]"},
    }

    def __init__(
        self, *, super_users: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword super_users:
        :paramtype super_users: list[str]
        """
        super().__init__(**kwargs)
        self.super_users = super_users


class ComMicrosoftArcdataV1Beta4KafkaSpecServer(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4KafkaSpecServer.

    :ivar heap:
    :vartype heap:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecServerHeap
    :ivar replicas:
    :vartype replicas: int
    :ivar resources:
    :vartype resources:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecServerResources
    :ivar storage:
    :vartype storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecServerStorage
    """

    _attribute_map = {
        "heap": {
            "key": "heap",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecServerHeap",
        },
        "replicas": {"key": "replicas", "type": "int"},
        "resources": {
            "key": "resources",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecServerResources",
        },
        "storage": {
            "key": "storage",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecServerStorage",
        },
    }

    def __init__(
        self,
        *,
        heap: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecServerHeap"
        ] = None,
        replicas: Optional[int] = None,
        resources: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecServerResources"
        ] = None,
        storage: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecServerStorage"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword heap:
        :paramtype heap:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecServerHeap
        :keyword replicas:
        :paramtype replicas: int
        :keyword resources:
        :paramtype resources:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecServerResources
        :keyword storage:
        :paramtype storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecServerStorage
        """
        super().__init__(**kwargs)
        self.heap = heap
        self.replicas = replicas
        self.resources = resources
        self.storage = storage


class ComMicrosoftArcdataV1Beta4KafkaSpecServerHeap(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4KafkaSpecServerHeap.

    :ivar xms:
    :vartype xms: str
    :ivar xmx:
    :vartype xmx: str
    """

    _attribute_map = {
        "xms": {"key": "Xms", "type": "str"},
        "xmx": {"key": "Xmx", "type": "str"},
    }

    def __init__(
        self,
        *,
        xms: Optional[str] = None,
        xmx: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword xms:
        :paramtype xms: str
        :keyword xmx:
        :paramtype xmx: str
        """
        super().__init__(**kwargs)
        self.xms = xms
        self.xmx = xmx


class ComMicrosoftArcdataV1Beta4KafkaSpecServerResources(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4KafkaSpecServerResources.

    :ivar limits: Dictionary of :code:`<AnyObject>`.
    :vartype limits: dict[str, JSON]
    :ivar requests: Dictionary of :code:`<AnyObject>`.
    :vartype requests: dict[str, JSON]
    """

    _attribute_map = {
        "limits": {"key": "limits", "type": "{object}"},
        "requests": {"key": "requests", "type": "{object}"},
    }

    def __init__(
        self,
        *,
        limits: Optional[Dict[str, JSON]] = None,
        requests: Optional[Dict[str, JSON]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits: Dictionary of :code:`<AnyObject>`.
        :paramtype limits: dict[str, JSON]
        :keyword requests: Dictionary of :code:`<AnyObject>`.
        :paramtype requests: dict[str, JSON]
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.requests = requests


class ComMicrosoftArcdataV1Beta4KafkaSpecServerStorage(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4KafkaSpecServerStorage.

    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecServerStorageData
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecServerStorageLogs
    """

    _attribute_map = {
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecServerStorageData",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataV1Beta4KafkaSpecServerStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        data: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecServerStorageData"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaSpecServerStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecServerStorageData
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaSpecServerStorageLogs
        """
        super().__init__(**kwargs)
        self.data = data
        self.logs = logs


class ComMicrosoftArcdataV1Beta4KafkaSpecServerStorageData(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4KafkaSpecServerStorageData.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta4KafkaSpecServerStorageLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4KafkaSpecServerStorageLogs.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta4KafkaSpecUpdate(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4KafkaSpecUpdate.

    :ivar desired_version:
    :vartype desired_version: str
    """

    _attribute_map = {
        "desired_version": {"key": "desiredVersion", "type": "str"},
    }

    def __init__(
        self, *, desired_version: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword desired_version:
        :paramtype desired_version: str
        """
        super().__init__(**kwargs)
        self.desired_version = desired_version


class ComMicrosoftArcdataV1Beta4KafkaStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataV1Beta4KafkaStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar ready_replicas:
    :vartype ready_replicas: str
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaStatusReleasedVersions
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "ready_replicas": {"key": "readyReplicas", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataV1Beta4KafkaStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataV1Beta4KafkaStatusReleasedVersions",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        observed_generation: Optional[int] = None,
        ready_replicas: Optional[str] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta4KafkaStatusReleasedVersions"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword ready_replicas:
        :paramtype ready_replicas: str
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4KafkaStatusReleasedVersions
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.observed_generation = observed_generation
        self.ready_replicas = ready_replicas
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataV1Beta4KafkaStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4KafkaStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta4KafkaStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4KafkaStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta4PostgreSql(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4PostgreSql.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpec
    :ivar status:
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpec
        :keyword status:
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataV1Beta4PostgreSqlList(_serialization.Model):
    """PostgreSqlList is a list of PostgreSql.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of postgresqls. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSql]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataV1Beta4PostgreSql]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ComMicrosoftArcdataV1Beta4PostgreSql"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of postgresqls. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSql]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta4PostgreSqlSpec(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpec.

    :ivar config:
    :vartype config:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecConfig
    :ivar dev:
    :vartype dev: bool
    :ivar parent_resource:
    :vartype parent_resource:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecParentResource
    :ivar scheduling:
    :vartype scheduling:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecScheduling
    :ivar security:
    :vartype security:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecSecurity
    :ivar services:
    :vartype services:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecServices
    :ivar settings: Configure postgres.conf.
    :vartype settings: any
    :ivar storage:
    :vartype storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorage
    :ivar update:
    :vartype update:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecUpdate
    """

    _attribute_map = {
        "config": {
            "key": "config",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlSpecConfig",
        },
        "dev": {"key": "dev", "type": "bool"},
        "parent_resource": {
            "key": "parentResource",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlSpecParentResource",
        },
        "scheduling": {
            "key": "scheduling",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlSpecScheduling",
        },
        "security": {
            "key": "security",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlSpecSecurity",
        },
        "services": {
            "key": "services",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlSpecServices",
        },
        "settings": {"key": "settings", "type": "object"},
        "storage": {
            "key": "storage",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorage",
        },
        "update": {
            "key": "update",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlSpecUpdate",
        },
    }

    def __init__(
        self,
        *,
        config: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecConfig"
        ] = None,
        dev: Optional[bool] = None,
        parent_resource: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecParentResource"
        ] = None,
        scheduling: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecScheduling"
        ] = None,
        security: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecSecurity"
        ] = None,
        services: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecServices"
        ] = None,
        settings: Optional[Any] = None,
        storage: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorage"
        ] = None,
        update: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecUpdate"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword config:
        :paramtype config:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecConfig
        :keyword dev:
        :paramtype dev: bool
        :keyword parent_resource:
        :paramtype parent_resource:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecParentResource
        :keyword scheduling:
        :paramtype scheduling:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecScheduling
        :keyword security:
        :paramtype security:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecSecurity
        :keyword services:
        :paramtype services:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecServices
        :keyword settings: Configure postgres.conf.
        :paramtype settings: any
        :keyword storage:
        :paramtype storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorage
        :keyword update:
        :paramtype update:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecUpdate
        """
        super().__init__(**kwargs)
        self.config = config
        self.dev = dev
        self.parent_resource = parent_resource
        self.scheduling = scheduling
        self.security = security
        self.services = services
        self.settings = settings
        self.storage = storage
        self.update = update


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecConfig(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecConfig.

    All required parameters must be populated in order to send to Azure.

    :ivar recovery_settings: Required.
    :vartype recovery_settings:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecConfigRecoverySettings
    """

    _validation = {
        "recovery_settings": {"required": True},
    }

    _attribute_map = {
        "recovery_settings": {
            "key": "recoverySettings",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlSpecConfigRecoverySettings",
        },
    }

    def __init__(
        self,
        *,
        recovery_settings: "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecConfigRecoverySettings",
        **kwargs: Any,
    ) -> None:
        """
        :keyword recovery_settings: Required.
        :paramtype recovery_settings:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecConfigRecoverySettings
        """
        super().__init__(**kwargs)
        self.recovery_settings = recovery_settings


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecConfigRecoverySettings(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecConfigRecoverySettings.

    All required parameters must be populated in order to send to Azure.

    :ivar recovery_target_time: The timestamp to which the PostgreSQL recovery will proceed.
     Required.
    :vartype recovery_target_time: ~datetime.datetime
    :ivar source_name: The name of the PostgreSQL instance to restore from.
    :vartype source_name: str
    """

    _validation = {
        "recovery_target_time": {"required": True},
    }

    _attribute_map = {
        "recovery_target_time": {
            "key": "recoveryTargetTime",
            "type": "iso-8601",
        },
        "source_name": {"key": "sourceName", "type": "str"},
    }

    def __init__(
        self,
        *,
        recovery_target_time: datetime.datetime,
        source_name: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword recovery_target_time: The timestamp to which the PostgreSQL recovery will proceed.
         Required.
        :paramtype recovery_target_time: ~datetime.datetime
        :keyword source_name: The name of the PostgreSQL instance to restore from.
        :paramtype source_name: str
        """
        super().__init__(**kwargs)
        self.recovery_target_time = recovery_target_time
        self.source_name = source_name


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecParentResource(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecParentResource.

    :ivar api_group:
    :vartype api_group: str
    :ivar kind:
    :vartype kind: str
    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    """

    _attribute_map = {
        "api_group": {"key": "apiGroup", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        api_group: Optional[str] = None,
        kind: Optional[str] = None,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_group:
        :paramtype api_group: str
        :keyword kind:
        :paramtype kind: str
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.api_group = api_group
        self.kind = kind
        self.name = name
        self.namespace = namespace


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecScheduling(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecScheduling.

    :ivar default:
    :vartype default:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecSchedulingDefault
    """

    _attribute_map = {
        "default": {
            "key": "default",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlSpecSchedulingDefault",
        },
    }

    def __init__(
        self,
        *,
        default: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecSchedulingDefault"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword default:
        :paramtype default:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecSchedulingDefault
        """
        super().__init__(**kwargs)
        self.default = default


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecSchedulingDefault(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecSchedulingDefault.

    :ivar resources:
    :vartype resources:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecSchedulingDefaultResources
    """

    _attribute_map = {
        "resources": {
            "key": "resources",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlSpecSchedulingDefaultResources",
        },
    }

    def __init__(
        self,
        *,
        resources: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecSchedulingDefaultResources"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword resources:
        :paramtype resources:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecSchedulingDefaultResources
        """
        super().__init__(**kwargs)
        self.resources = resources


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecSchedulingDefaultResources(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecSchedulingDefaultResources.

    :ivar limits: Dictionary of :code:`<AnyObject>`.
    :vartype limits: dict[str, JSON]
    :ivar requests: Dictionary of :code:`<AnyObject>`.
    :vartype requests: dict[str, JSON]
    """

    _attribute_map = {
        "limits": {"key": "limits", "type": "{object}"},
        "requests": {"key": "requests", "type": "{object}"},
    }

    def __init__(
        self,
        *,
        limits: Optional[Dict[str, JSON]] = None,
        requests: Optional[Dict[str, JSON]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits: Dictionary of :code:`<AnyObject>`.
        :paramtype limits: dict[str, JSON]
        :keyword requests: Dictionary of :code:`<AnyObject>`.
        :paramtype requests: dict[str, JSON]
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.requests = requests


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecSecurity(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecSecurity.

    :ivar admin_login_secret:
    :vartype admin_login_secret: str
    :ivar service_certificate_secret: Name of the Kubernetes secret to generate that hosts the SSL
     certificate.
    :vartype service_certificate_secret: str
    """

    _attribute_map = {
        "admin_login_secret": {"key": "adminLoginSecret", "type": "str"},
        "service_certificate_secret": {
            "key": "serviceCertificateSecret",
            "type": "str",
        },
    }

    def __init__(
        self,
        *,
        admin_login_secret: Optional[str] = None,
        service_certificate_secret: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword admin_login_secret:
        :paramtype admin_login_secret: str
        :keyword service_certificate_secret: Name of the Kubernetes secret to generate that hosts the
         SSL certificate.
        :paramtype service_certificate_secret: str
        """
        super().__init__(**kwargs)
        self.admin_login_secret = admin_login_secret
        self.service_certificate_secret = service_certificate_secret


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecServices(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecServices.

    :ivar primary:
    :vartype primary:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecServicesPrimary
    """

    _attribute_map = {
        "primary": {
            "key": "primary",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlSpecServicesPrimary",
        },
    }

    def __init__(
        self,
        *,
        primary: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecServicesPrimary"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword primary:
        :paramtype primary:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecServicesPrimary
        """
        super().__init__(**kwargs)
        self.primary = primary


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecServicesPrimary(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecServicesPrimary.

    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar dns_name:
    :vartype dns_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar port:
    :vartype port: int
    :ivar type:
    :vartype type: str
    """

    _attribute_map = {
        "annotations": {"key": "annotations", "type": "{str}"},
        "dns_name": {"key": "dnsName", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "port": {"key": "port", "type": "int"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        annotations: Optional[Dict[str, str]] = None,
        dns_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        port: Optional[int] = None,
        type: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword dns_name:
        :paramtype dns_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword port:
        :paramtype port: int
        :keyword type:
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.annotations = annotations
        self.dns_name = dns_name
        self.labels = labels
        self.port = port
        self.type = type


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorage(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorage.

    :ivar backups:
    :vartype backups:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageBackups
    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageData
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageLogs
    """

    _attribute_map = {
        "backups": {
            "key": "backups",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageBackups",
        },
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageData",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        backups: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageBackups"
        ] = None,
        data: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageData"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword backups:
        :paramtype backups:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageBackups
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageData
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageLogs
        """
        super().__init__(**kwargs)
        self.backups = backups
        self.data = data
        self.logs = logs


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageBackups(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageBackups.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageBackupsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageBackupsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageBackupsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageBackupsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageBackupsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageBackupsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageData(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageData.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageDataVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageDataVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageDataVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageDataVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageDataVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageDataVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageLogs(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageLogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageLogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageLogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageLogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageLogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageLogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecStorageLogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta4PostgreSqlSpecUpdate(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4PostgreSqlSpecUpdate.

    :ivar desired_version:
    :vartype desired_version: str
    """

    _attribute_map = {
        "desired_version": {"key": "desiredVersion", "type": "str"},
    }

    def __init__(
        self, *, desired_version: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword desired_version:
        :paramtype desired_version: str
        """
        super().__init__(**kwargs)
        self.desired_version = desired_version


class ComMicrosoftArcdataV1Beta4PostgreSqlStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataV1Beta4PostgreSqlStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar log_search_dashboard:
    :vartype log_search_dashboard: str
    :ivar message:
    :vartype message: str
    :ivar metrics_dashboard:
    :vartype metrics_dashboard: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar primary_endpoint:
    :vartype primary_endpoint: str
    :ivar ready_pods:
    :vartype ready_pods: str
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlStatusReleasedVersions
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "log_search_dashboard": {"key": "logSearchDashboard", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "metrics_dashboard": {"key": "metricsDashboard", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "primary_endpoint": {"key": "primaryEndpoint", "type": "str"},
        "ready_pods": {"key": "readyPods", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataV1Beta4PostgreSqlStatusReleasedVersions",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        log_search_dashboard: Optional[str] = None,
        message: Optional[str] = None,
        metrics_dashboard: Optional[str] = None,
        observed_generation: Optional[int] = None,
        primary_endpoint: Optional[str] = None,
        ready_pods: Optional[str] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta4PostgreSqlStatusReleasedVersions"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword log_search_dashboard:
        :paramtype log_search_dashboard: str
        :keyword message:
        :paramtype message: str
        :keyword metrics_dashboard:
        :paramtype metrics_dashboard: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword primary_endpoint:
        :paramtype primary_endpoint: str
        :keyword ready_pods:
        :paramtype ready_pods: str
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4PostgreSqlStatusReleasedVersions
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.log_search_dashboard = log_search_dashboard
        self.message = message
        self.metrics_dashboard = metrics_dashboard
        self.observed_generation = observed_generation
        self.primary_endpoint = primary_endpoint
        self.ready_pods = ready_pods
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataV1Beta4PostgreSqlStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4PostgreSqlStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta4PostgreSqlStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4PostgreSqlStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta4TelemetryCollectorList(_serialization.Model):
    """TelemetryCollectorList is a list of TelemetryCollector.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of telemetrycollectors. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of telemetrycollectors. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta4TelemetryRouter(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4TelemetryRouter.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpec
    :ivar status:
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataV1Beta4TelemetryRouterSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataV1Beta4TelemetryRouterStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpec
        :keyword status:
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataV1Beta4TelemetryRouterList(_serialization.Model):
    """TelemetryRouterList is a list of TelemetryRouter.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of telemetryrouters. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouter]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataV1Beta4TelemetryRouter]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ComMicrosoftArcdataV1Beta4TelemetryRouter"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of telemetryrouters. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouter]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta4TelemetryRouterSpec(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterSpec.

    :ivar credentials:
    :vartype credentials:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecCredentials
    :ivar exporters:
    :vartype exporters:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExporters
    :ivar kafka:
    :vartype kafka:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafka
    :ivar pipelines: Dictionary of
     <components·1gywv93·schemas·com-microsoft-arcdata-v1beta4-telemetryrouter·properties·spec·properties·pipelines·additionalproperties>.
    :vartype pipelines: dict[str,
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Gywv93SchemasComMicrosoftArcdataV1Beta4TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties]
    :ivar update:
    :vartype update:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecUpdate
    """

    _attribute_map = {
        "credentials": {
            "key": "credentials",
            "type": "ComMicrosoftArcdataV1Beta4TelemetryRouterSpecCredentials",
        },
        "exporters": {
            "key": "exporters",
            "type": "ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExporters",
        },
        "kafka": {
            "key": "kafka",
            "type": "ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafka",
        },
        "pipelines": {
            "key": "pipelines",
            "type": "{Components1Gywv93SchemasComMicrosoftArcdataV1Beta4TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties}",
        },
        "update": {
            "key": "update",
            "type": "ComMicrosoftArcdataV1Beta4TelemetryRouterSpecUpdate",
        },
    }

    def __init__(
        self,
        *,
        credentials: Optional[
            "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecCredentials"
        ] = None,
        exporters: Optional[
            "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExporters"
        ] = None,
        kafka: Optional[
            "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafka"
        ] = None,
        pipelines: Optional[
            Dict[
                str,
                "_models.Components1Gywv93SchemasComMicrosoftArcdataV1Beta4TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties",
            ]
        ] = None,
        update: Optional[
            "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecUpdate"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword credentials:
        :paramtype credentials:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecCredentials
        :keyword exporters:
        :paramtype exporters:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExporters
        :keyword kafka:
        :paramtype kafka:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafka
        :keyword pipelines: Dictionary of
         <components·1gywv93·schemas·com-microsoft-arcdata-v1beta4-telemetryrouter·properties·spec·properties·pipelines·additionalproperties>.
        :paramtype pipelines: dict[str,
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Gywv93SchemasComMicrosoftArcdataV1Beta4TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties]
        :keyword update:
        :paramtype update:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecUpdate
        """
        super().__init__(**kwargs)
        self.credentials = credentials
        self.exporters = exporters
        self.kafka = kafka
        self.pipelines = pipelines
        self.update = update


class ComMicrosoftArcdataV1Beta4TelemetryRouterSpecCredentials(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterSpecCredentials.

    :ivar certificates:
    :vartype certificates:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecCredentialsCertificatesItem]
    """

    _attribute_map = {
        "certificates": {
            "key": "certificates",
            "type": "[ComMicrosoftArcdataV1Beta4TelemetryRouterSpecCredentialsCertificatesItem]",
        },
    }

    def __init__(
        self,
        *,
        certificates: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecCredentialsCertificatesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword certificates:
        :paramtype certificates:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecCredentialsCertificatesItem]
        """
        super().__init__(**kwargs)
        self.certificates = certificates


class ComMicrosoftArcdataV1Beta4TelemetryRouterSpecCredentialsCertificatesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterSpecCredentialsCertificatesItem.

    :ivar certificate_name:
    :vartype certificate_name: str
    :ivar secret_name:
    :vartype secret_name: str
    :ivar secret_namespace:
    :vartype secret_namespace: str
    """

    _attribute_map = {
        "certificate_name": {"key": "certificateName", "type": "str"},
        "secret_name": {"key": "secretName", "type": "str"},
        "secret_namespace": {"key": "secretNamespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        certificate_name: Optional[str] = None,
        secret_name: Optional[str] = None,
        secret_namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword certificate_name:
        :paramtype certificate_name: str
        :keyword secret_name:
        :paramtype secret_name: str
        :keyword secret_namespace:
        :paramtype secret_namespace: str
        """
        super().__init__(**kwargs)
        self.certificate_name = certificate_name
        self.secret_name = secret_name
        self.secret_namespace = secret_namespace


class ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExporters(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExporters.

    :ivar elasticsearch:
    :vartype elasticsearch:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersElasticsearchItem]
    :ivar kafka:
    :vartype kafka:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersKafkaItem]
    :ivar otlp:
    :vartype otlp:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersOtlpItem]
    """

    _attribute_map = {
        "elasticsearch": {
            "key": "elasticsearch",
            "type": "[ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersElasticsearchItem]",
        },
        "kafka": {
            "key": "kafka",
            "type": "[ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersKafkaItem]",
        },
        "otlp": {
            "key": "otlp",
            "type": "[ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersOtlpItem]",
        },
    }

    def __init__(
        self,
        *,
        elasticsearch: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersElasticsearchItem"
            ]
        ] = None,
        kafka: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersKafkaItem"
            ]
        ] = None,
        otlp: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersOtlpItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword elasticsearch:
        :paramtype elasticsearch:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersElasticsearchItem]
        :keyword kafka:
        :paramtype kafka:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersKafkaItem]
        :keyword otlp:
        :paramtype otlp:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersOtlpItem]
        """
        super().__init__(**kwargs)
        self.elasticsearch = elasticsearch
        self.kafka = kafka
        self.otlp = otlp


class ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersElasticsearchItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersElasticsearchItem.

    :ivar ca_certificate_name:
    :vartype ca_certificate_name: str
    :ivar certificate_name:
    :vartype certificate_name: str
    :ivar endpoint:
    :vartype endpoint: str
    :ivar index:
    :vartype index: str
    :ivar name:
    :vartype name: str
    """

    _attribute_map = {
        "ca_certificate_name": {"key": "caCertificateName", "type": "str"},
        "certificate_name": {"key": "certificateName", "type": "str"},
        "endpoint": {"key": "endpoint", "type": "str"},
        "index": {"key": "index", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(
        self,
        *,
        ca_certificate_name: Optional[str] = None,
        certificate_name: Optional[str] = None,
        endpoint: Optional[str] = None,
        index: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword ca_certificate_name:
        :paramtype ca_certificate_name: str
        :keyword certificate_name:
        :paramtype certificate_name: str
        :keyword endpoint:
        :paramtype endpoint: str
        :keyword index:
        :paramtype index: str
        :keyword name:
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.ca_certificate_name = ca_certificate_name
        self.certificate_name = certificate_name
        self.endpoint = endpoint
        self.index = index
        self.name = name


class ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersKafkaItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersKafkaItem.

    :ivar brokers:
    :vartype brokers: str
    :ivar ca_certificate_name:
    :vartype ca_certificate_name: str
    :ivar certificate_name:
    :vartype certificate_name: str
    :ivar encoding:
    :vartype encoding: str
    :ivar name:
    :vartype name: str
    :ivar topic:
    :vartype topic: str
    """

    _attribute_map = {
        "brokers": {"key": "brokers", "type": "str"},
        "ca_certificate_name": {"key": "caCertificateName", "type": "str"},
        "certificate_name": {"key": "certificateName", "type": "str"},
        "encoding": {"key": "encoding", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "topic": {"key": "topic", "type": "str"},
    }

    def __init__(
        self,
        *,
        brokers: Optional[str] = None,
        ca_certificate_name: Optional[str] = None,
        certificate_name: Optional[str] = None,
        encoding: Optional[str] = None,
        name: Optional[str] = None,
        topic: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword brokers:
        :paramtype brokers: str
        :keyword ca_certificate_name:
        :paramtype ca_certificate_name: str
        :keyword certificate_name:
        :paramtype certificate_name: str
        :keyword encoding:
        :paramtype encoding: str
        :keyword name:
        :paramtype name: str
        :keyword topic:
        :paramtype topic: str
        """
        super().__init__(**kwargs)
        self.brokers = brokers
        self.ca_certificate_name = ca_certificate_name
        self.certificate_name = certificate_name
        self.encoding = encoding
        self.name = name
        self.topic = topic


class ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersOtlpItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterSpecExportersOtlpItem.

    :ivar ca_certificate_name:
    :vartype ca_certificate_name: str
    :ivar certificate_name:
    :vartype certificate_name: str
    :ivar endpoint:
    :vartype endpoint: str
    :ivar name:
    :vartype name: str
    """

    _attribute_map = {
        "ca_certificate_name": {"key": "caCertificateName", "type": "str"},
        "certificate_name": {"key": "certificateName", "type": "str"},
        "endpoint": {"key": "endpoint", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(
        self,
        *,
        ca_certificate_name: Optional[str] = None,
        certificate_name: Optional[str] = None,
        endpoint: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword ca_certificate_name:
        :paramtype ca_certificate_name: str
        :keyword certificate_name:
        :paramtype certificate_name: str
        :keyword endpoint:
        :paramtype endpoint: str
        :keyword name:
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.ca_certificate_name = ca_certificate_name
        self.certificate_name = certificate_name
        self.endpoint = endpoint
        self.name = name


class ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafka(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafka.

    :ivar limits:
    :vartype limits:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaLimits
    :ivar requests:
    :vartype requests:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaRequests
    :ivar storage:
    :vartype storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorage
    """

    _attribute_map = {
        "limits": {
            "key": "limits",
            "type": "ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaLimits",
        },
        "requests": {
            "key": "requests",
            "type": "ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaRequests",
        },
        "storage": {
            "key": "storage",
            "type": "ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorage",
        },
    }

    def __init__(
        self,
        *,
        limits: Optional[
            "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaLimits"
        ] = None,
        requests: Optional[
            "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaRequests"
        ] = None,
        storage: Optional[
            "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorage"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits:
        :paramtype limits:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaLimits
        :keyword requests:
        :paramtype requests:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaRequests
        :keyword storage:
        :paramtype storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorage
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.requests = requests
        self.storage = storage


class ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaLimits(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaLimits.

    :ivar memory:
    :vartype memory: str
    :ivar vcores:
    :vartype vcores: int
    """

    _attribute_map = {
        "memory": {"key": "memory", "type": "str"},
        "vcores": {"key": "vcores", "type": "int"},
    }

    def __init__(
        self,
        *,
        memory: Optional[str] = None,
        vcores: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword memory:
        :paramtype memory: str
        :keyword vcores:
        :paramtype vcores: int
        """
        super().__init__(**kwargs)
        self.memory = memory
        self.vcores = vcores


class ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaRequests(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaRequests.

    :ivar memory:
    :vartype memory: str
    :ivar vcores:
    :vartype vcores: int
    """

    _attribute_map = {
        "memory": {"key": "memory", "type": "str"},
        "vcores": {"key": "vcores", "type": "int"},
    }

    def __init__(
        self,
        *,
        memory: Optional[str] = None,
        vcores: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword memory:
        :paramtype memory: str
        :keyword vcores:
        :paramtype vcores: int
        """
        super().__init__(**kwargs)
        self.memory = memory
        self.vcores = vcores


class ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorage(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorage.

    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorageData
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorageLogs
    """

    _attribute_map = {
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorageData",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        data: Optional[
            "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorageData"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorageData
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorageLogs
        """
        super().__init__(**kwargs)
        self.data = data
        self.logs = logs


class ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorageData(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorageData.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorageLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterSpecKafkaStorageLogs.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta4TelemetryRouterSpecUpdate(_serialization.Model):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterSpecUpdate.

    :ivar desired_version:
    :vartype desired_version: str
    """

    _attribute_map = {
        "desired_version": {"key": "desiredVersion", "type": "str"},
    }

    def __init__(
        self, *, desired_version: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword desired_version:
        :paramtype desired_version: str
        """
        super().__init__(**kwargs)
        self.desired_version = desired_version


class ComMicrosoftArcdataV1Beta4TelemetryRouterStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataV1Beta4TelemetryRouterStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar ready_replicas:
    :vartype ready_replicas: str
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterStatusReleasedVersions
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "ready_replicas": {"key": "readyReplicas", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataV1Beta4TelemetryRouterStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataV1Beta4TelemetryRouterStatusReleasedVersions",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        observed_generation: Optional[int] = None,
        ready_replicas: Optional[str] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta4TelemetryRouterStatusReleasedVersions"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword ready_replicas:
        :paramtype ready_replicas: str
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta4TelemetryRouterStatusReleasedVersions
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.observed_generation = observed_generation
        self.ready_replicas = ready_replicas
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataV1Beta4TelemetryRouterStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta4TelemetryRouterStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta4TelemetryRouterStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta5PostgreSql(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5PostgreSql.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpec
    :ivar status:
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpec
        :keyword status:
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataV1Beta5PostgreSqlList(_serialization.Model):
    """PostgreSqlList is a list of PostgreSql.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of postgresqls. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSql]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataV1Beta5PostgreSql]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ComMicrosoftArcdataV1Beta5PostgreSql"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of postgresqls. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSql]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta5PostgreSqlSpec(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpec.

    :ivar backup:
    :vartype backup:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecBackup
    :ivar config:
    :vartype config:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfig
    :ivar dev:
    :vartype dev: bool
    :ivar parent_resource:
    :vartype parent_resource:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecParentResource
    :ivar scheduling:
    :vartype scheduling:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecScheduling
    :ivar security:
    :vartype security:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurity
    :ivar services:
    :vartype services:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecServices
    :ivar settings: Configure postgres.conf.
    :vartype settings: any
    :ivar storage:
    :vartype storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorage
    :ivar update:
    :vartype update:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecUpdate
    """

    _attribute_map = {
        "backup": {
            "key": "backup",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecBackup",
        },
        "config": {
            "key": "config",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfig",
        },
        "dev": {"key": "dev", "type": "bool"},
        "parent_resource": {
            "key": "parentResource",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecParentResource",
        },
        "scheduling": {
            "key": "scheduling",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecScheduling",
        },
        "security": {
            "key": "security",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurity",
        },
        "services": {
            "key": "services",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecServices",
        },
        "settings": {"key": "settings", "type": "object"},
        "storage": {
            "key": "storage",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorage",
        },
        "update": {
            "key": "update",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecUpdate",
        },
    }

    def __init__(
        self,
        *,
        backup: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecBackup"
        ] = None,
        config: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfig"
        ] = None,
        dev: Optional[bool] = None,
        parent_resource: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecParentResource"
        ] = None,
        scheduling: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecScheduling"
        ] = None,
        security: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurity"
        ] = None,
        services: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecServices"
        ] = None,
        settings: Optional[Any] = None,
        storage: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorage"
        ] = None,
        update: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecUpdate"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword backup:
        :paramtype backup:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecBackup
        :keyword config:
        :paramtype config:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfig
        :keyword dev:
        :paramtype dev: bool
        :keyword parent_resource:
        :paramtype parent_resource:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecParentResource
        :keyword scheduling:
        :paramtype scheduling:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecScheduling
        :keyword security:
        :paramtype security:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurity
        :keyword services:
        :paramtype services:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecServices
        :keyword settings: Configure postgres.conf.
        :paramtype settings: any
        :keyword storage:
        :paramtype storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorage
        :keyword update:
        :paramtype update:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecUpdate
        """
        super().__init__(**kwargs)
        self.backup = backup
        self.config = config
        self.dev = dev
        self.parent_resource = parent_resource
        self.scheduling = scheduling
        self.security = security
        self.services = services
        self.settings = settings
        self.storage = storage
        self.update = update


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecBackup(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecBackup.

    :ivar retention_period_in_days:
    :vartype retention_period_in_days: int
    """

    _attribute_map = {
        "retention_period_in_days": {
            "key": "retentionPeriodInDays",
            "type": "int",
        },
    }

    def __init__(
        self, *, retention_period_in_days: Optional[int] = None, **kwargs: Any
    ) -> None:
        """
        :keyword retention_period_in_days:
        :paramtype retention_period_in_days: int
        """
        super().__init__(**kwargs)
        self.retention_period_in_days = retention_period_in_days


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfig(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfig.

    :ivar postgre_sql_extensions: Configure extensions.
    :vartype postgre_sql_extensions: str
    :ivar startup:
    :vartype startup:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfigStartup
    """

    _attribute_map = {
        "postgre_sql_extensions": {
            "key": "postgreSqlExtensions",
            "type": "str",
        },
        "startup": {
            "key": "startup",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfigStartup",
        },
    }

    def __init__(
        self,
        *,
        postgre_sql_extensions: Optional[str] = None,
        startup: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfigStartup"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword postgre_sql_extensions: Configure extensions.
        :paramtype postgre_sql_extensions: str
        :keyword startup:
        :paramtype startup:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfigStartup
        """
        super().__init__(**kwargs)
        self.postgre_sql_extensions = postgre_sql_extensions
        self.startup = startup


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfigStartup(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfigStartup.

    :ivar recovery_settings:
    :vartype recovery_settings:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfigStartupRecoverySettings
    """

    _attribute_map = {
        "recovery_settings": {
            "key": "recoverySettings",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfigStartupRecoverySettings",
        },
    }

    def __init__(
        self,
        *,
        recovery_settings: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfigStartupRecoverySettings"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword recovery_settings:
        :paramtype recovery_settings:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfigStartupRecoverySettings
        """
        super().__init__(**kwargs)
        self.recovery_settings = recovery_settings


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfigStartupRecoverySettings(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecConfigStartupRecoverySettings.

    All required parameters must be populated in order to send to Azure.

    :ivar recovery_target_time: The timestamp to which the PostgreSQL recovery will proceed.
    :vartype recovery_target_time: ~datetime.datetime
    :ivar source_name: The name of the PostgreSQL instance to restore from. Required.
    :vartype source_name: str
    """

    _validation = {
        "source_name": {"required": True},
    }

    _attribute_map = {
        "recovery_target_time": {
            "key": "recoveryTargetTime",
            "type": "iso-8601",
        },
        "source_name": {"key": "sourceName", "type": "str"},
    }

    def __init__(
        self,
        *,
        source_name: str,
        recovery_target_time: Optional[datetime.datetime] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword recovery_target_time: The timestamp to which the PostgreSQL recovery will proceed.
        :paramtype recovery_target_time: ~datetime.datetime
        :keyword source_name: The name of the PostgreSQL instance to restore from. Required.
        :paramtype source_name: str
        """
        super().__init__(**kwargs)
        self.recovery_target_time = recovery_target_time
        self.source_name = source_name


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecParentResource(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecParentResource.

    :ivar api_group:
    :vartype api_group: str
    :ivar kind:
    :vartype kind: str
    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    """

    _attribute_map = {
        "api_group": {"key": "apiGroup", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        api_group: Optional[str] = None,
        kind: Optional[str] = None,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_group:
        :paramtype api_group: str
        :keyword kind:
        :paramtype kind: str
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.api_group = api_group
        self.kind = kind
        self.name = name
        self.namespace = namespace


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecScheduling(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecScheduling.

    :ivar default:
    :vartype default:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecSchedulingDefault
    """

    _attribute_map = {
        "default": {
            "key": "default",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecSchedulingDefault",
        },
    }

    def __init__(
        self,
        *,
        default: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecSchedulingDefault"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword default:
        :paramtype default:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecSchedulingDefault
        """
        super().__init__(**kwargs)
        self.default = default


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecSchedulingDefault(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecSchedulingDefault.

    :ivar resources:
    :vartype resources:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecSchedulingDefaultResources
    """

    _attribute_map = {
        "resources": {
            "key": "resources",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecSchedulingDefaultResources",
        },
    }

    def __init__(
        self,
        *,
        resources: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecSchedulingDefaultResources"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword resources:
        :paramtype resources:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecSchedulingDefaultResources
        """
        super().__init__(**kwargs)
        self.resources = resources


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecSchedulingDefaultResources(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecSchedulingDefaultResources.

    :ivar limits: Dictionary of :code:`<string>`.
    :vartype limits: dict[str, str]
    :ivar requests: Dictionary of :code:`<string>`.
    :vartype requests: dict[str, str]
    """

    _attribute_map = {
        "limits": {"key": "limits", "type": "{str}"},
        "requests": {"key": "requests", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        limits: Optional[Dict[str, str]] = None,
        requests: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits: Dictionary of :code:`<string>`.
        :paramtype limits: dict[str, str]
        :keyword requests: Dictionary of :code:`<string>`.
        :paramtype requests: dict[str, str]
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.requests = requests


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurity(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurity.

    :ivar active_directory:
    :vartype active_directory:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurityActiveDirectory
    :ivar admin_login_secret:
    :vartype admin_login_secret: str
    :ivar service_certificate_secret: Name of the Kubernetes secret to generate that hosts the SSL
     certificate.
    :vartype service_certificate_secret: str
    """

    _attribute_map = {
        "active_directory": {
            "key": "activeDirectory",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurityActiveDirectory",
        },
        "admin_login_secret": {"key": "adminLoginSecret", "type": "str"},
        "service_certificate_secret": {
            "key": "serviceCertificateSecret",
            "type": "str",
        },
    }

    def __init__(
        self,
        *,
        active_directory: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurityActiveDirectory"
        ] = None,
        admin_login_secret: Optional[str] = None,
        service_certificate_secret: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword active_directory:
        :paramtype active_directory:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurityActiveDirectory
        :keyword admin_login_secret:
        :paramtype admin_login_secret: str
        :keyword service_certificate_secret: Name of the Kubernetes secret to generate that hosts the
         SSL certificate.
        :paramtype service_certificate_secret: str
        """
        super().__init__(**kwargs)
        self.active_directory = active_directory
        self.admin_login_secret = admin_login_secret
        self.service_certificate_secret = service_certificate_secret


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurityActiveDirectory(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurityActiveDirectory.

    :ivar account_name:
    :vartype account_name: str
    :ivar connector:
    :vartype connector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurityActiveDirectoryConnector
    :ivar keytab_secret:
    :vartype keytab_secret: str
    """

    _attribute_map = {
        "account_name": {"key": "accountName", "type": "str"},
        "connector": {
            "key": "connector",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurityActiveDirectoryConnector",
        },
        "keytab_secret": {"key": "keytabSecret", "type": "str"},
    }

    def __init__(
        self,
        *,
        account_name: Optional[str] = None,
        connector: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurityActiveDirectoryConnector"
        ] = None,
        keytab_secret: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword account_name:
        :paramtype account_name: str
        :keyword connector:
        :paramtype connector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurityActiveDirectoryConnector
        :keyword keytab_secret:
        :paramtype keytab_secret: str
        """
        super().__init__(**kwargs)
        self.account_name = account_name
        self.connector = connector
        self.keytab_secret = keytab_secret


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurityActiveDirectoryConnector(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecSecurityActiveDirectoryConnector.

    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.namespace = namespace


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecServices(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecServices.

    :ivar primary:
    :vartype primary:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecServicesPrimary
    """

    _attribute_map = {
        "primary": {
            "key": "primary",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecServicesPrimary",
        },
    }

    def __init__(
        self,
        *,
        primary: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecServicesPrimary"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword primary:
        :paramtype primary:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecServicesPrimary
        """
        super().__init__(**kwargs)
        self.primary = primary


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecServicesPrimary(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecServicesPrimary.

    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar dns_name:
    :vartype dns_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar port:
    :vartype port: int
    :ivar type:
    :vartype type: str
    """

    _attribute_map = {
        "annotations": {"key": "annotations", "type": "{str}"},
        "dns_name": {"key": "dnsName", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "port": {"key": "port", "type": "int"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        annotations: Optional[Dict[str, str]] = None,
        dns_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        port: Optional[int] = None,
        type: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword dns_name:
        :paramtype dns_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword port:
        :paramtype port: int
        :keyword type:
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.annotations = annotations
        self.dns_name = dns_name
        self.labels = labels
        self.port = port
        self.type = type


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorage(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorage.

    :ivar backups:
    :vartype backups:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageBackups
    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageData
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageLogs
    """

    _attribute_map = {
        "backups": {
            "key": "backups",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageBackups",
        },
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageData",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        backups: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageBackups"
        ] = None,
        data: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageData"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword backups:
        :paramtype backups:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageBackups
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageData
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageLogs
        """
        super().__init__(**kwargs)
        self.backups = backups
        self.data = data
        self.logs = logs


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageBackups(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageBackups.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageBackupsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageBackupsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageBackupsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageBackupsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageBackupsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageBackupsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageData(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageData.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageDataVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageDataVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageDataVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageDataVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageDataVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageDataVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageLogs(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageLogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageLogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageLogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageLogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageLogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageLogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecStorageLogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta5PostgreSqlSpecUpdate(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5PostgreSqlSpecUpdate.

    :ivar desired_version:
    :vartype desired_version: str
    """

    _attribute_map = {
        "desired_version": {"key": "desiredVersion", "type": "str"},
    }

    def __init__(
        self, *, desired_version: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword desired_version:
        :paramtype desired_version: str
        """
        super().__init__(**kwargs)
        self.desired_version = desired_version


class ComMicrosoftArcdataV1Beta5PostgreSqlStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataV1Beta5PostgreSqlStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar log_search_dashboard:
    :vartype log_search_dashboard: str
    :ivar message:
    :vartype message: str
    :ivar metrics_dashboard:
    :vartype metrics_dashboard: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar primary_endpoint:
    :vartype primary_endpoint: str
    :ivar ready_pods:
    :vartype ready_pods: str
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlStatusReleasedVersions
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "log_search_dashboard": {"key": "logSearchDashboard", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "metrics_dashboard": {"key": "metricsDashboard", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "primary_endpoint": {"key": "primaryEndpoint", "type": "str"},
        "ready_pods": {"key": "readyPods", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataV1Beta5PostgreSqlStatusReleasedVersions",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        log_search_dashboard: Optional[str] = None,
        message: Optional[str] = None,
        metrics_dashboard: Optional[str] = None,
        observed_generation: Optional[int] = None,
        primary_endpoint: Optional[str] = None,
        ready_pods: Optional[str] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta5PostgreSqlStatusReleasedVersions"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword log_search_dashboard:
        :paramtype log_search_dashboard: str
        :keyword message:
        :paramtype message: str
        :keyword metrics_dashboard:
        :paramtype metrics_dashboard: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword primary_endpoint:
        :paramtype primary_endpoint: str
        :keyword ready_pods:
        :paramtype ready_pods: str
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5PostgreSqlStatusReleasedVersions
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.log_search_dashboard = log_search_dashboard
        self.message = message
        self.metrics_dashboard = metrics_dashboard
        self.observed_generation = observed_generation
        self.primary_endpoint = primary_endpoint
        self.ready_pods = ready_pods
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataV1Beta5PostgreSqlStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5PostgreSqlStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta5PostgreSqlStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5PostgreSqlStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta5TelemetryCollector(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5TelemetryCollector.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpec
    :ivar status:
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryCollectorSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryCollectorStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryCollectorStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpec
        :keyword status:
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataV1Beta5TelemetryCollectorList(_serialization.Model):
    """TelemetryCollectorList is a list of TelemetryCollector.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of telemetrycollectors. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollector]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataV1Beta5TelemetryCollector]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ComMicrosoftArcdataV1Beta5TelemetryCollector"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of telemetrycollectors. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollector]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta5TelemetryCollectorSpec(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5TelemetryCollectorSpec.

    :ivar collector:
    :vartype collector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCollector
    :ivar credentials:
    :vartype credentials:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCredentials
    :ivar resources:
    :vartype resources:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecResources
    :ivar update:
    :vartype update:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecUpdate
    """

    _attribute_map = {
        "collector": {
            "key": "collector",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCollector",
        },
        "credentials": {
            "key": "credentials",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCredentials",
        },
        "resources": {
            "key": "resources",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecResources",
        },
        "update": {
            "key": "update",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecUpdate",
        },
    }

    def __init__(
        self,
        *,
        collector: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCollector"
        ] = None,
        credentials: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCredentials"
        ] = None,
        resources: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecResources"
        ] = None,
        update: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecUpdate"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword collector:
        :paramtype collector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCollector
        :keyword credentials:
        :paramtype credentials:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCredentials
        :keyword resources:
        :paramtype resources:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecResources
        :keyword update:
        :paramtype update:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecUpdate
        """
        super().__init__(**kwargs)
        self.collector = collector
        self.credentials = credentials
        self.resources = resources
        self.update = update


class ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCollector(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCollector.

    :ivar exporters: Anything.
    :vartype exporters: any
    :ivar extensions: Anything.
    :vartype extensions: any
    :ivar processors: Anything.
    :vartype processors: any
    :ivar receivers: Anything.
    :vartype receivers: any
    :ivar service:
    :vartype service:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCollectorService
    """

    _attribute_map = {
        "exporters": {"key": "exporters", "type": "object"},
        "extensions": {"key": "extensions", "type": "object"},
        "processors": {"key": "processors", "type": "object"},
        "receivers": {"key": "receivers", "type": "object"},
        "service": {
            "key": "service",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCollectorService",
        },
    }

    def __init__(
        self,
        *,
        exporters: Optional[Any] = None,
        extensions: Optional[Any] = None,
        processors: Optional[Any] = None,
        receivers: Optional[Any] = None,
        service: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCollectorService"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword exporters: Anything.
        :paramtype exporters: any
        :keyword extensions: Anything.
        :paramtype extensions: any
        :keyword processors: Anything.
        :paramtype processors: any
        :keyword receivers: Anything.
        :paramtype receivers: any
        :keyword service:
        :paramtype service:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCollectorService
        """
        super().__init__(**kwargs)
        self.exporters = exporters
        self.extensions = extensions
        self.processors = processors
        self.receivers = receivers
        self.service = service


class ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCollectorService(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCollectorService.

    :ivar extensions:
    :vartype extensions: list[str]
    :ivar pipelines: Dictionary of
     <components·jkvse0·schemas·com-microsoft-arcdata-v1beta5-telemetrycollector·properties·spec·properties·collector·properties·service·properties·pipelines·additionalproperties>.
    :vartype pipelines: dict[str,
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsJkvse0SchemasComMicrosoftArcdataV1Beta5TelemetrycollectorPropertiesSpecPropertiesCollectorPropertiesServicePropertiesPipelinesAdditionalproperties]
    """

    _attribute_map = {
        "extensions": {"key": "extensions", "type": "[str]"},
        "pipelines": {
            "key": "pipelines",
            "type": "{ComponentsJkvse0SchemasComMicrosoftArcdataV1Beta5TelemetrycollectorPropertiesSpecPropertiesCollectorPropertiesServicePropertiesPipelinesAdditionalproperties}",
        },
    }

    def __init__(
        self,
        *,
        extensions: Optional[List[str]] = None,
        pipelines: Optional[
            Dict[
                str,
                "_models.ComponentsJkvse0SchemasComMicrosoftArcdataV1Beta5TelemetrycollectorPropertiesSpecPropertiesCollectorPropertiesServicePropertiesPipelinesAdditionalproperties",
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword extensions:
        :paramtype extensions: list[str]
        :keyword pipelines: Dictionary of
         <components·jkvse0·schemas·com-microsoft-arcdata-v1beta5-telemetrycollector·properties·spec·properties·collector·properties·service·properties·pipelines·additionalproperties>.
        :paramtype pipelines: dict[str,
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsJkvse0SchemasComMicrosoftArcdataV1Beta5TelemetrycollectorPropertiesSpecPropertiesCollectorPropertiesServicePropertiesPipelinesAdditionalproperties]
        """
        super().__init__(**kwargs)
        self.extensions = extensions
        self.pipelines = pipelines


class ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCredentials(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCredentials.

    :ivar certificates:
    :vartype certificates:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCredentialsCertificatesItem]
    """

    _attribute_map = {
        "certificates": {
            "key": "certificates",
            "type": "[ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCredentialsCertificatesItem]",
        },
    }

    def __init__(
        self,
        *,
        certificates: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCredentialsCertificatesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword certificates:
        :paramtype certificates:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCredentialsCertificatesItem]
        """
        super().__init__(**kwargs)
        self.certificates = certificates


class ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCredentialsCertificatesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecCredentialsCertificatesItem.

    :ivar certificate_name:
    :vartype certificate_name: str
    :ivar secret_name:
    :vartype secret_name: str
    :ivar secret_namespace:
    :vartype secret_namespace: str
    """

    _attribute_map = {
        "certificate_name": {"key": "certificateName", "type": "str"},
        "secret_name": {"key": "secretName", "type": "str"},
        "secret_namespace": {"key": "secretNamespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        certificate_name: Optional[str] = None,
        secret_name: Optional[str] = None,
        secret_namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword certificate_name:
        :paramtype certificate_name: str
        :keyword secret_name:
        :paramtype secret_name: str
        :keyword secret_namespace:
        :paramtype secret_namespace: str
        """
        super().__init__(**kwargs)
        self.certificate_name = certificate_name
        self.secret_name = secret_name
        self.secret_namespace = secret_namespace


class ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecResources(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecResources.

    :ivar limits: Dictionary of :code:`<AnyObject>`.
    :vartype limits: dict[str, JSON]
    :ivar requests: Dictionary of :code:`<AnyObject>`.
    :vartype requests: dict[str, JSON]
    """

    _attribute_map = {
        "limits": {"key": "limits", "type": "{object}"},
        "requests": {"key": "requests", "type": "{object}"},
    }

    def __init__(
        self,
        *,
        limits: Optional[Dict[str, JSON]] = None,
        requests: Optional[Dict[str, JSON]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits: Dictionary of :code:`<AnyObject>`.
        :paramtype limits: dict[str, JSON]
        :keyword requests: Dictionary of :code:`<AnyObject>`.
        :paramtype requests: dict[str, JSON]
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.requests = requests


class ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecUpdate(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryCollectorSpecUpdate.

    :ivar desired_version:
    :vartype desired_version: str
    """

    _attribute_map = {
        "desired_version": {"key": "desiredVersion", "type": "str"},
    }

    def __init__(
        self, *, desired_version: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword desired_version:
        :paramtype desired_version: str
        """
        super().__init__(**kwargs)
        self.desired_version = desired_version


class ComMicrosoftArcdataV1Beta5TelemetryCollectorStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataV1Beta5TelemetryCollectorStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorStatusReleasedVersions
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryCollectorStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryCollectorStatusReleasedVersions",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        observed_generation: Optional[int] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryCollectorStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryCollectorStatusReleasedVersions"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryCollectorStatusReleasedVersions
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.observed_generation = observed_generation
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataV1Beta5TelemetryCollectorStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryCollectorStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta5TelemetryCollectorStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryCollectorStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta5TelemetryRouter(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5TelemetryRouter.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpec
    :ivar status:
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryRouterSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryRouterStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpec
        :keyword status:
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataV1Beta5TelemetryRouterList(_serialization.Model):
    """TelemetryRouterList is a list of TelemetryRouter.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of telemetryrouters. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouter]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataV1Beta5TelemetryRouter]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ComMicrosoftArcdataV1Beta5TelemetryRouter"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of telemetryrouters. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouter]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta5TelemetryRouterSpec(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterSpec.

    :ivar credentials:
    :vartype credentials:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecCredentials
    :ivar exporters:
    :vartype exporters:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExporters
    :ivar kafka:
    :vartype kafka:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafka
    :ivar pipelines: Dictionary of
     <components·1qrlzo4·schemas·com-microsoft-arcdata-v1beta5-telemetryrouter·properties·spec·properties·pipelines·additionalproperties>.
    :vartype pipelines: dict[str,
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Qrlzo4SchemasComMicrosoftArcdataV1Beta5TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties]
    :ivar update:
    :vartype update:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecUpdate
    """

    _attribute_map = {
        "credentials": {
            "key": "credentials",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryRouterSpecCredentials",
        },
        "exporters": {
            "key": "exporters",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExporters",
        },
        "kafka": {
            "key": "kafka",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafka",
        },
        "pipelines": {
            "key": "pipelines",
            "type": "{Components1Qrlzo4SchemasComMicrosoftArcdataV1Beta5TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties}",
        },
        "update": {
            "key": "update",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryRouterSpecUpdate",
        },
    }

    def __init__(
        self,
        *,
        credentials: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecCredentials"
        ] = None,
        exporters: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExporters"
        ] = None,
        kafka: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafka"
        ] = None,
        pipelines: Optional[
            Dict[
                str,
                "_models.Components1Qrlzo4SchemasComMicrosoftArcdataV1Beta5TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties",
            ]
        ] = None,
        update: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecUpdate"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword credentials:
        :paramtype credentials:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecCredentials
        :keyword exporters:
        :paramtype exporters:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExporters
        :keyword kafka:
        :paramtype kafka:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafka
        :keyword pipelines: Dictionary of
         <components·1qrlzo4·schemas·com-microsoft-arcdata-v1beta5-telemetryrouter·properties·spec·properties·pipelines·additionalproperties>.
        :paramtype pipelines: dict[str,
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Qrlzo4SchemasComMicrosoftArcdataV1Beta5TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties]
        :keyword update:
        :paramtype update:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecUpdate
        """
        super().__init__(**kwargs)
        self.credentials = credentials
        self.exporters = exporters
        self.kafka = kafka
        self.pipelines = pipelines
        self.update = update


class ComMicrosoftArcdataV1Beta5TelemetryRouterSpecCredentials(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterSpecCredentials.

    :ivar certificates:
    :vartype certificates:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecCredentialsCertificatesItem]
    """

    _attribute_map = {
        "certificates": {
            "key": "certificates",
            "type": "[ComMicrosoftArcdataV1Beta5TelemetryRouterSpecCredentialsCertificatesItem]",
        },
    }

    def __init__(
        self,
        *,
        certificates: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecCredentialsCertificatesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword certificates:
        :paramtype certificates:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecCredentialsCertificatesItem]
        """
        super().__init__(**kwargs)
        self.certificates = certificates


class ComMicrosoftArcdataV1Beta5TelemetryRouterSpecCredentialsCertificatesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterSpecCredentialsCertificatesItem.

    :ivar certificate_name:
    :vartype certificate_name: str
    :ivar secret_name:
    :vartype secret_name: str
    :ivar secret_namespace:
    :vartype secret_namespace: str
    """

    _attribute_map = {
        "certificate_name": {"key": "certificateName", "type": "str"},
        "secret_name": {"key": "secretName", "type": "str"},
        "secret_namespace": {"key": "secretNamespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        certificate_name: Optional[str] = None,
        secret_name: Optional[str] = None,
        secret_namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword certificate_name:
        :paramtype certificate_name: str
        :keyword secret_name:
        :paramtype secret_name: str
        :keyword secret_namespace:
        :paramtype secret_namespace: str
        """
        super().__init__(**kwargs)
        self.certificate_name = certificate_name
        self.secret_name = secret_name
        self.secret_namespace = secret_namespace


class ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExporters(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExporters.

    :ivar elasticsearch:
    :vartype elasticsearch:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersElasticsearchItem]
    :ivar kafka:
    :vartype kafka:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersKafkaItem]
    :ivar otlp:
    :vartype otlp:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersOtlpItem]
    """

    _attribute_map = {
        "elasticsearch": {
            "key": "elasticsearch",
            "type": "[ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersElasticsearchItem]",
        },
        "kafka": {
            "key": "kafka",
            "type": "[ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersKafkaItem]",
        },
        "otlp": {
            "key": "otlp",
            "type": "[ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersOtlpItem]",
        },
    }

    def __init__(
        self,
        *,
        elasticsearch: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersElasticsearchItem"
            ]
        ] = None,
        kafka: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersKafkaItem"
            ]
        ] = None,
        otlp: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersOtlpItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword elasticsearch:
        :paramtype elasticsearch:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersElasticsearchItem]
        :keyword kafka:
        :paramtype kafka:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersKafkaItem]
        :keyword otlp:
        :paramtype otlp:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersOtlpItem]
        """
        super().__init__(**kwargs)
        self.elasticsearch = elasticsearch
        self.kafka = kafka
        self.otlp = otlp


class ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersElasticsearchItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersElasticsearchItem.

    :ivar ca_certificate_name:
    :vartype ca_certificate_name: str
    :ivar certificate_name:
    :vartype certificate_name: str
    :ivar endpoint:
    :vartype endpoint: str
    :ivar index:
    :vartype index: str
    :ivar name:
    :vartype name: str
    """

    _attribute_map = {
        "ca_certificate_name": {"key": "caCertificateName", "type": "str"},
        "certificate_name": {"key": "certificateName", "type": "str"},
        "endpoint": {"key": "endpoint", "type": "str"},
        "index": {"key": "index", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(
        self,
        *,
        ca_certificate_name: Optional[str] = None,
        certificate_name: Optional[str] = None,
        endpoint: Optional[str] = None,
        index: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword ca_certificate_name:
        :paramtype ca_certificate_name: str
        :keyword certificate_name:
        :paramtype certificate_name: str
        :keyword endpoint:
        :paramtype endpoint: str
        :keyword index:
        :paramtype index: str
        :keyword name:
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.ca_certificate_name = ca_certificate_name
        self.certificate_name = certificate_name
        self.endpoint = endpoint
        self.index = index
        self.name = name


class ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersKafkaItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersKafkaItem.

    :ivar brokers:
    :vartype brokers: list[str]
    :ivar ca_certificate_name:
    :vartype ca_certificate_name: str
    :ivar certificate_name:
    :vartype certificate_name: str
    :ivar encoding:
    :vartype encoding: str
    :ivar name:
    :vartype name: str
    :ivar topic:
    :vartype topic: str
    """

    _attribute_map = {
        "brokers": {"key": "brokers", "type": "[str]"},
        "ca_certificate_name": {"key": "caCertificateName", "type": "str"},
        "certificate_name": {"key": "certificateName", "type": "str"},
        "encoding": {"key": "encoding", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "topic": {"key": "topic", "type": "str"},
    }

    def __init__(
        self,
        *,
        brokers: Optional[List[str]] = None,
        ca_certificate_name: Optional[str] = None,
        certificate_name: Optional[str] = None,
        encoding: Optional[str] = None,
        name: Optional[str] = None,
        topic: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword brokers:
        :paramtype brokers: list[str]
        :keyword ca_certificate_name:
        :paramtype ca_certificate_name: str
        :keyword certificate_name:
        :paramtype certificate_name: str
        :keyword encoding:
        :paramtype encoding: str
        :keyword name:
        :paramtype name: str
        :keyword topic:
        :paramtype topic: str
        """
        super().__init__(**kwargs)
        self.brokers = brokers
        self.ca_certificate_name = ca_certificate_name
        self.certificate_name = certificate_name
        self.encoding = encoding
        self.name = name
        self.topic = topic


class ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersOtlpItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterSpecExportersOtlpItem.

    :ivar ca_certificate_name:
    :vartype ca_certificate_name: str
    :ivar certificate_name:
    :vartype certificate_name: str
    :ivar endpoint:
    :vartype endpoint: str
    :ivar name:
    :vartype name: str
    """

    _attribute_map = {
        "ca_certificate_name": {"key": "caCertificateName", "type": "str"},
        "certificate_name": {"key": "certificateName", "type": "str"},
        "endpoint": {"key": "endpoint", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(
        self,
        *,
        ca_certificate_name: Optional[str] = None,
        certificate_name: Optional[str] = None,
        endpoint: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword ca_certificate_name:
        :paramtype ca_certificate_name: str
        :keyword certificate_name:
        :paramtype certificate_name: str
        :keyword endpoint:
        :paramtype endpoint: str
        :keyword name:
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.ca_certificate_name = ca_certificate_name
        self.certificate_name = certificate_name
        self.endpoint = endpoint
        self.name = name


class ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafka(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafka.

    :ivar limits:
    :vartype limits:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaLimits
    :ivar requests:
    :vartype requests:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaRequests
    :ivar storage:
    :vartype storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorage
    """

    _attribute_map = {
        "limits": {
            "key": "limits",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaLimits",
        },
        "requests": {
            "key": "requests",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaRequests",
        },
        "storage": {
            "key": "storage",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorage",
        },
    }

    def __init__(
        self,
        *,
        limits: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaLimits"
        ] = None,
        requests: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaRequests"
        ] = None,
        storage: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorage"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits:
        :paramtype limits:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaLimits
        :keyword requests:
        :paramtype requests:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaRequests
        :keyword storage:
        :paramtype storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorage
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.requests = requests
        self.storage = storage


class ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaLimits(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaLimits.

    :ivar memory:
    :vartype memory: str
    :ivar vcores:
    :vartype vcores: int
    """

    _attribute_map = {
        "memory": {"key": "memory", "type": "str"},
        "vcores": {"key": "vcores", "type": "int"},
    }

    def __init__(
        self,
        *,
        memory: Optional[str] = None,
        vcores: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword memory:
        :paramtype memory: str
        :keyword vcores:
        :paramtype vcores: int
        """
        super().__init__(**kwargs)
        self.memory = memory
        self.vcores = vcores


class ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaRequests(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaRequests.

    :ivar memory:
    :vartype memory: str
    :ivar vcores:
    :vartype vcores: int
    """

    _attribute_map = {
        "memory": {"key": "memory", "type": "str"},
        "vcores": {"key": "vcores", "type": "int"},
    }

    def __init__(
        self,
        *,
        memory: Optional[str] = None,
        vcores: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword memory:
        :paramtype memory: str
        :keyword vcores:
        :paramtype vcores: int
        """
        super().__init__(**kwargs)
        self.memory = memory
        self.vcores = vcores


class ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorage(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorage.

    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorageData
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorageLogs
    """

    _attribute_map = {
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorageData",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        data: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorageData"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorageData
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorageLogs
        """
        super().__init__(**kwargs)
        self.data = data
        self.logs = logs


class ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorageData(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorageData.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorageLogs(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterSpecKafkaStorageLogs.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta5TelemetryRouterSpecUpdate(_serialization.Model):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterSpecUpdate.

    :ivar desired_version:
    :vartype desired_version: str
    """

    _attribute_map = {
        "desired_version": {"key": "desiredVersion", "type": "str"},
    }

    def __init__(
        self, *, desired_version: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword desired_version:
        :paramtype desired_version: str
        """
        super().__init__(**kwargs)
        self.desired_version = desired_version


class ComMicrosoftArcdataV1Beta5TelemetryRouterStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataV1Beta5TelemetryRouterStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar message:
    :vartype message: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar ready_replicas:
    :vartype ready_replicas: str
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterStatusReleasedVersions
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "message": {"key": "message", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "ready_replicas": {"key": "readyReplicas", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryRouterStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataV1Beta5TelemetryRouterStatusReleasedVersions",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        message: Optional[str] = None,
        observed_generation: Optional[int] = None,
        ready_replicas: Optional[str] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta5TelemetryRouterStatusReleasedVersions"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword message:
        :paramtype message: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword ready_replicas:
        :paramtype ready_replicas: str
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta5TelemetryRouterStatusReleasedVersions
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.message = message
        self.observed_generation = observed_generation
        self.ready_replicas = ready_replicas
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataV1Beta5TelemetryRouterStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta5TelemetryRouterStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta5TelemetryRouterStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta6PostgreSql(_serialization.Model):
    """ComMicrosoftArcdataV1Beta6PostgreSql.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec:
    :vartype spec: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpec
    :ivar status:
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpec",
        },
        "status": {
            "key": "status",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpec"
        ] = None,
        status: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec:
        :paramtype spec: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpec
        :keyword status:
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class ComMicrosoftArcdataV1Beta6PostgreSqlList(_serialization.Model):
    """PostgreSqlList is a list of PostgreSql.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of postgresqls. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSql]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[ComMicrosoftArcdataV1Beta6PostgreSql]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.ComMicrosoftArcdataV1Beta6PostgreSql"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of postgresqls. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSql]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1Beta6PostgreSqlSpec(_serialization.Model):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpec.

    :ivar backup:
    :vartype backup:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecBackup
    :ivar config:
    :vartype config:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfig
    :ivar dev:
    :vartype dev: bool
    :ivar parent_resource:
    :vartype parent_resource:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecParentResource
    :ivar scheduling:
    :vartype scheduling:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecScheduling
    :ivar security:
    :vartype security:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurity
    :ivar services:
    :vartype services:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecServices
    :ivar settings: Configure postgres.conf.
    :vartype settings: any
    :ivar storage:
    :vartype storage:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorage
    :ivar update:
    :vartype update:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecUpdate
    """

    _attribute_map = {
        "backup": {
            "key": "backup",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecBackup",
        },
        "config": {
            "key": "config",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfig",
        },
        "dev": {"key": "dev", "type": "bool"},
        "parent_resource": {
            "key": "parentResource",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecParentResource",
        },
        "scheduling": {
            "key": "scheduling",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecScheduling",
        },
        "security": {
            "key": "security",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurity",
        },
        "services": {
            "key": "services",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecServices",
        },
        "settings": {"key": "settings", "type": "object"},
        "storage": {
            "key": "storage",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorage",
        },
        "update": {
            "key": "update",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecUpdate",
        },
    }

    def __init__(
        self,
        *,
        backup: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecBackup"
        ] = None,
        config: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfig"
        ] = None,
        dev: Optional[bool] = None,
        parent_resource: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecParentResource"
        ] = None,
        scheduling: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecScheduling"
        ] = None,
        security: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurity"
        ] = None,
        services: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecServices"
        ] = None,
        settings: Optional[Any] = None,
        storage: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorage"
        ] = None,
        update: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecUpdate"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword backup:
        :paramtype backup:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecBackup
        :keyword config:
        :paramtype config:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfig
        :keyword dev:
        :paramtype dev: bool
        :keyword parent_resource:
        :paramtype parent_resource:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecParentResource
        :keyword scheduling:
        :paramtype scheduling:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecScheduling
        :keyword security:
        :paramtype security:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurity
        :keyword services:
        :paramtype services:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecServices
        :keyword settings: Configure postgres.conf.
        :paramtype settings: any
        :keyword storage:
        :paramtype storage:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorage
        :keyword update:
        :paramtype update:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecUpdate
        """
        super().__init__(**kwargs)
        self.backup = backup
        self.config = config
        self.dev = dev
        self.parent_resource = parent_resource
        self.scheduling = scheduling
        self.security = security
        self.services = services
        self.settings = settings
        self.storage = storage
        self.update = update


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecBackup(_serialization.Model):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecBackup.

    :ivar retention_period_in_days:
    :vartype retention_period_in_days: int
    """

    _attribute_map = {
        "retention_period_in_days": {
            "key": "retentionPeriodInDays",
            "type": "int",
        },
    }

    def __init__(
        self, *, retention_period_in_days: Optional[int] = None, **kwargs: Any
    ) -> None:
        """
        :keyword retention_period_in_days:
        :paramtype retention_period_in_days: int
        """
        super().__init__(**kwargs)
        self.retention_period_in_days = retention_period_in_days


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfig(_serialization.Model):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfig.

    :ivar postgre_sql_extensions: Configure extensions.
    :vartype postgre_sql_extensions: str
    :ivar startup:
    :vartype startup:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfigStartup
    """

    _attribute_map = {
        "postgre_sql_extensions": {
            "key": "postgreSqlExtensions",
            "type": "str",
        },
        "startup": {
            "key": "startup",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfigStartup",
        },
    }

    def __init__(
        self,
        *,
        postgre_sql_extensions: Optional[str] = None,
        startup: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfigStartup"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword postgre_sql_extensions: Configure extensions.
        :paramtype postgre_sql_extensions: str
        :keyword startup:
        :paramtype startup:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfigStartup
        """
        super().__init__(**kwargs)
        self.postgre_sql_extensions = postgre_sql_extensions
        self.startup = startup


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfigStartup(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfigStartup.

    :ivar initdb_debug_flag: If true, sets the debug flag on initdb.
    :vartype initdb_debug_flag: bool
    :ivar recovery_settings:
    :vartype recovery_settings:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfigStartupRecoverySettings
    """

    _attribute_map = {
        "initdb_debug_flag": {"key": "initdbDebugFlag", "type": "bool"},
        "recovery_settings": {
            "key": "recoverySettings",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfigStartupRecoverySettings",
        },
    }

    def __init__(
        self,
        *,
        initdb_debug_flag: Optional[bool] = None,
        recovery_settings: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfigStartupRecoverySettings"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword initdb_debug_flag: If true, sets the debug flag on initdb.
        :paramtype initdb_debug_flag: bool
        :keyword recovery_settings:
        :paramtype recovery_settings:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfigStartupRecoverySettings
        """
        super().__init__(**kwargs)
        self.initdb_debug_flag = initdb_debug_flag
        self.recovery_settings = recovery_settings


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfigStartupRecoverySettings(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecConfigStartupRecoverySettings.

    All required parameters must be populated in order to send to Azure.

    :ivar recovery_target_time: The timestamp to which the PostgreSQL recovery will proceed.
    :vartype recovery_target_time: ~datetime.datetime
    :ivar source_name: The name of the PostgreSQL instance to restore from. Required.
    :vartype source_name: str
    """

    _validation = {
        "source_name": {"required": True},
    }

    _attribute_map = {
        "recovery_target_time": {
            "key": "recoveryTargetTime",
            "type": "iso-8601",
        },
        "source_name": {"key": "sourceName", "type": "str"},
    }

    def __init__(
        self,
        *,
        source_name: str,
        recovery_target_time: Optional[datetime.datetime] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword recovery_target_time: The timestamp to which the PostgreSQL recovery will proceed.
        :paramtype recovery_target_time: ~datetime.datetime
        :keyword source_name: The name of the PostgreSQL instance to restore from. Required.
        :paramtype source_name: str
        """
        super().__init__(**kwargs)
        self.recovery_target_time = recovery_target_time
        self.source_name = source_name


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecParentResource(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecParentResource.

    :ivar api_group:
    :vartype api_group: str
    :ivar kind:
    :vartype kind: str
    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    """

    _attribute_map = {
        "api_group": {"key": "apiGroup", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        api_group: Optional[str] = None,
        kind: Optional[str] = None,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_group:
        :paramtype api_group: str
        :keyword kind:
        :paramtype kind: str
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.api_group = api_group
        self.kind = kind
        self.name = name
        self.namespace = namespace


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecScheduling(_serialization.Model):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecScheduling.

    :ivar default:
    :vartype default:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecSchedulingDefault
    """

    _attribute_map = {
        "default": {
            "key": "default",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecSchedulingDefault",
        },
    }

    def __init__(
        self,
        *,
        default: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecSchedulingDefault"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword default:
        :paramtype default:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecSchedulingDefault
        """
        super().__init__(**kwargs)
        self.default = default


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecSchedulingDefault(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecSchedulingDefault.

    :ivar resources:
    :vartype resources:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecSchedulingDefaultResources
    """

    _attribute_map = {
        "resources": {
            "key": "resources",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecSchedulingDefaultResources",
        },
    }

    def __init__(
        self,
        *,
        resources: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecSchedulingDefaultResources"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword resources:
        :paramtype resources:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecSchedulingDefaultResources
        """
        super().__init__(**kwargs)
        self.resources = resources


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecSchedulingDefaultResources(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecSchedulingDefaultResources.

    :ivar limits: Dictionary of :code:`<string>`.
    :vartype limits: dict[str, str]
    :ivar requests: Dictionary of :code:`<string>`.
    :vartype requests: dict[str, str]
    """

    _attribute_map = {
        "limits": {"key": "limits", "type": "{str}"},
        "requests": {"key": "requests", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        limits: Optional[Dict[str, str]] = None,
        requests: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limits: Dictionary of :code:`<string>`.
        :paramtype limits: dict[str, str]
        :keyword requests: Dictionary of :code:`<string>`.
        :paramtype requests: dict[str, str]
        """
        super().__init__(**kwargs)
        self.limits = limits
        self.requests = requests


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurity(_serialization.Model):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurity.

    :ivar active_directory:
    :vartype active_directory:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurityActiveDirectory
    :ivar admin_login_secret:
    :vartype admin_login_secret: str
    :ivar service_certificate_secret: Name of the Kubernetes secret to generate that hosts the SSL
     certificate.
    :vartype service_certificate_secret: str
    """

    _attribute_map = {
        "active_directory": {
            "key": "activeDirectory",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurityActiveDirectory",
        },
        "admin_login_secret": {"key": "adminLoginSecret", "type": "str"},
        "service_certificate_secret": {
            "key": "serviceCertificateSecret",
            "type": "str",
        },
    }

    def __init__(
        self,
        *,
        active_directory: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurityActiveDirectory"
        ] = None,
        admin_login_secret: Optional[str] = None,
        service_certificate_secret: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword active_directory:
        :paramtype active_directory:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurityActiveDirectory
        :keyword admin_login_secret:
        :paramtype admin_login_secret: str
        :keyword service_certificate_secret: Name of the Kubernetes secret to generate that hosts the
         SSL certificate.
        :paramtype service_certificate_secret: str
        """
        super().__init__(**kwargs)
        self.active_directory = active_directory
        self.admin_login_secret = admin_login_secret
        self.service_certificate_secret = service_certificate_secret


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurityActiveDirectory(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurityActiveDirectory.

    :ivar account_name:
    :vartype account_name: str
    :ivar connector:
    :vartype connector:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurityActiveDirectoryConnector
    :ivar keytab_secret:
    :vartype keytab_secret: str
    """

    _attribute_map = {
        "account_name": {"key": "accountName", "type": "str"},
        "connector": {
            "key": "connector",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurityActiveDirectoryConnector",
        },
        "keytab_secret": {"key": "keytabSecret", "type": "str"},
    }

    def __init__(
        self,
        *,
        account_name: Optional[str] = None,
        connector: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurityActiveDirectoryConnector"
        ] = None,
        keytab_secret: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword account_name:
        :paramtype account_name: str
        :keyword connector:
        :paramtype connector:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurityActiveDirectoryConnector
        :keyword keytab_secret:
        :paramtype keytab_secret: str
        """
        super().__init__(**kwargs)
        self.account_name = account_name
        self.connector = connector
        self.keytab_secret = keytab_secret


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurityActiveDirectoryConnector(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecSecurityActiveDirectoryConnector.

    :ivar name:
    :vartype name: str
    :ivar namespace:
    :vartype namespace: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword name:
        :paramtype name: str
        :keyword namespace:
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.namespace = namespace


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecServices(_serialization.Model):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecServices.

    :ivar primary:
    :vartype primary:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecServicesPrimary
    """

    _attribute_map = {
        "primary": {
            "key": "primary",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecServicesPrimary",
        },
    }

    def __init__(
        self,
        *,
        primary: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecServicesPrimary"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword primary:
        :paramtype primary:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecServicesPrimary
        """
        super().__init__(**kwargs)
        self.primary = primary


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecServicesPrimary(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecServicesPrimary.

    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar dns_name:
    :vartype dns_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar port:
    :vartype port: int
    :ivar type:
    :vartype type: str
    """

    _attribute_map = {
        "annotations": {"key": "annotations", "type": "{str}"},
        "dns_name": {"key": "dnsName", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "port": {"key": "port", "type": "int"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        annotations: Optional[Dict[str, str]] = None,
        dns_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        port: Optional[int] = None,
        type: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword dns_name:
        :paramtype dns_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword port:
        :paramtype port: int
        :keyword type:
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.annotations = annotations
        self.dns_name = dns_name
        self.labels = labels
        self.port = port
        self.type = type


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorage(_serialization.Model):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorage.

    :ivar backups:
    :vartype backups:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageBackups
    :ivar data:
    :vartype data:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageData
    :ivar logs:
    :vartype logs:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageLogs
    """

    _attribute_map = {
        "backups": {
            "key": "backups",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageBackups",
        },
        "data": {
            "key": "data",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageData",
        },
        "logs": {
            "key": "logs",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageLogs",
        },
    }

    def __init__(
        self,
        *,
        backups: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageBackups"
        ] = None,
        data: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageData"
        ] = None,
        logs: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageLogs"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword backups:
        :paramtype backups:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageBackups
        :keyword data:
        :paramtype data:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageData
        :keyword logs:
        :paramtype logs:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageLogs
        """
        super().__init__(**kwargs)
        self.backups = backups
        self.data = data
        self.logs = logs


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageBackups(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageBackups.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageBackupsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageBackupsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageBackupsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageBackupsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageBackupsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageBackupsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageData(_serialization.Model):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageData.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageDataVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageDataVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageDataVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageDataVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageDataVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageDataVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageLogs(_serialization.Model):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageLogs.

    :ivar volumes:
    :vartype volumes:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageLogsVolumesItem]
    """

    _attribute_map = {
        "volumes": {
            "key": "volumes",
            "type": "[ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageLogsVolumesItem]",
        },
    }

    def __init__(
        self,
        *,
        volumes: Optional[
            List[
                "_models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageLogsVolumesItem"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword volumes:
        :paramtype volumes:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageLogsVolumesItem]
        """
        super().__init__(**kwargs)
        self.volumes = volumes


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageLogsVolumesItem(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecStorageLogsVolumesItem.

    :ivar access_mode:
    :vartype access_mode: str
    :ivar annotations: Dictionary of :code:`<string>`.
    :vartype annotations: dict[str, str]
    :ivar claim_name:
    :vartype claim_name: str
    :ivar class_name:
    :vartype class_name: str
    :ivar labels: Dictionary of :code:`<string>`.
    :vartype labels: dict[str, str]
    :ivar size:
    :vartype size: str
    """

    _attribute_map = {
        "access_mode": {"key": "accessMode", "type": "str"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "claim_name": {"key": "claimName", "type": "str"},
        "class_name": {"key": "className", "type": "str"},
        "labels": {"key": "labels", "type": "{str}"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(
        self,
        *,
        access_mode: Optional[str] = None,
        annotations: Optional[Dict[str, str]] = None,
        claim_name: Optional[str] = None,
        class_name: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        size: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword access_mode:
        :paramtype access_mode: str
        :keyword annotations: Dictionary of :code:`<string>`.
        :paramtype annotations: dict[str, str]
        :keyword claim_name:
        :paramtype claim_name: str
        :keyword class_name:
        :paramtype class_name: str
        :keyword labels: Dictionary of :code:`<string>`.
        :paramtype labels: dict[str, str]
        :keyword size:
        :paramtype size: str
        """
        super().__init__(**kwargs)
        self.access_mode = access_mode
        self.annotations = annotations
        self.claim_name = claim_name
        self.class_name = class_name
        self.labels = labels
        self.size = size


class ComMicrosoftArcdataV1Beta6PostgreSqlSpecUpdate(_serialization.Model):
    """ComMicrosoftArcdataV1Beta6PostgreSqlSpecUpdate.

    :ivar desired_version:
    :vartype desired_version: str
    """

    _attribute_map = {
        "desired_version": {"key": "desiredVersion", "type": "str"},
    }

    def __init__(
        self, *, desired_version: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword desired_version:
        :paramtype desired_version: str
        """
        super().__init__(**kwargs)
        self.desired_version = desired_version


class ComMicrosoftArcdataV1Beta6PostgreSqlStatus(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ComMicrosoftArcdataV1Beta6PostgreSqlStatus.

    :ivar arc_data_services_k8_s_extension_latest_version:
    :vartype arc_data_services_k8_s_extension_latest_version: str
    :ivar endpoints: Dictionary of :code:`<string>`.
    :vartype endpoints: dict[str, str]
    :ivar health_state:
    :vartype health_state: str
    :ivar last_update_time:
    :vartype last_update_time: ~datetime.datetime
    :ivar log_search_dashboard:
    :vartype log_search_dashboard: str
    :ivar message:
    :vartype message: str
    :ivar metrics_dashboard:
    :vartype metrics_dashboard: str
    :ivar observed_generation:
    :vartype observed_generation: int
    :ivar primary_endpoint:
    :vartype primary_endpoint: str
    :ivar ready_pods:
    :vartype ready_pods: str
    :ivar reason:
    :vartype reason: str
    :ivar registry_versions:
    :vartype registry_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlStatusRegistryVersions
    :ivar released_versions:
    :vartype released_versions:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlStatusReleasedVersions
    :ivar running_version:
    :vartype running_version: str
    :ivar state:
    :vartype state: str
    """

    _attribute_map = {
        "arc_data_services_k8_s_extension_latest_version": {
            "key": "arcDataServicesK8sExtensionLatestVersion",
            "type": "str",
        },
        "endpoints": {"key": "endpoints", "type": "{str}"},
        "health_state": {"key": "healthState", "type": "str"},
        "last_update_time": {"key": "lastUpdateTime", "type": "iso-8601"},
        "log_search_dashboard": {"key": "logSearchDashboard", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "metrics_dashboard": {"key": "metricsDashboard", "type": "str"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
        "primary_endpoint": {"key": "primaryEndpoint", "type": "str"},
        "ready_pods": {"key": "readyPods", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "registry_versions": {
            "key": "registryVersions",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlStatusRegistryVersions",
        },
        "released_versions": {
            "key": "releasedVersions",
            "type": "ComMicrosoftArcdataV1Beta6PostgreSqlStatusReleasedVersions",
        },
        "running_version": {"key": "runningVersion", "type": "str"},
        "state": {"key": "state", "type": "str"},
    }

    def __init__(
        self,
        *,
        arc_data_services_k8_s_extension_latest_version: Optional[str] = None,
        endpoints: Optional[Dict[str, str]] = None,
        health_state: Optional[str] = None,
        last_update_time: Optional[datetime.datetime] = None,
        log_search_dashboard: Optional[str] = None,
        message: Optional[str] = None,
        metrics_dashboard: Optional[str] = None,
        observed_generation: Optional[int] = None,
        primary_endpoint: Optional[str] = None,
        ready_pods: Optional[str] = None,
        reason: Optional[str] = None,
        registry_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlStatusRegistryVersions"
        ] = None,
        released_versions: Optional[
            "_models.ComMicrosoftArcdataV1Beta6PostgreSqlStatusReleasedVersions"
        ] = None,
        running_version: Optional[str] = None,
        state: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword arc_data_services_k8_s_extension_latest_version:
        :paramtype arc_data_services_k8_s_extension_latest_version: str
        :keyword endpoints: Dictionary of :code:`<string>`.
        :paramtype endpoints: dict[str, str]
        :keyword health_state:
        :paramtype health_state: str
        :keyword last_update_time:
        :paramtype last_update_time: ~datetime.datetime
        :keyword log_search_dashboard:
        :paramtype log_search_dashboard: str
        :keyword message:
        :paramtype message: str
        :keyword metrics_dashboard:
        :paramtype metrics_dashboard: str
        :keyword observed_generation:
        :paramtype observed_generation: int
        :keyword primary_endpoint:
        :paramtype primary_endpoint: str
        :keyword ready_pods:
        :paramtype ready_pods: str
        :keyword reason:
        :paramtype reason: str
        :keyword registry_versions:
        :paramtype registry_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlStatusRegistryVersions
        :keyword released_versions:
        :paramtype released_versions:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComMicrosoftArcdataV1Beta6PostgreSqlStatusReleasedVersions
        :keyword running_version:
        :paramtype running_version: str
        :keyword state:
        :paramtype state: str
        """
        super().__init__(**kwargs)
        self.arc_data_services_k8_s_extension_latest_version = (
            arc_data_services_k8_s_extension_latest_version
        )
        self.endpoints = endpoints
        self.health_state = health_state
        self.last_update_time = last_update_time
        self.log_search_dashboard = log_search_dashboard
        self.message = message
        self.metrics_dashboard = metrics_dashboard
        self.observed_generation = observed_generation
        self.primary_endpoint = primary_endpoint
        self.ready_pods = ready_pods
        self.reason = reason
        self.registry_versions = registry_versions
        self.released_versions = released_versions
        self.running_version = running_version
        self.state = state


class ComMicrosoftArcdataV1Beta6PostgreSqlStatusRegistryVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta6PostgreSqlStatusRegistryVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1Beta6PostgreSqlStatusReleasedVersions(
    _serialization.Model
):
    """ComMicrosoftArcdataV1Beta6PostgreSqlStatusReleasedVersions.

    :ivar available:
    :vartype available: list[str]
    :ivar behind:
    :vartype behind: int
    :ivar current:
    :vartype current: str
    :ivar latest:
    :vartype latest: str
    :ivar next:
    :vartype next: str
    :ivar previous:
    :vartype previous: str
    """

    _attribute_map = {
        "available": {"key": "available", "type": "[str]"},
        "behind": {"key": "behind", "type": "int"},
        "current": {"key": "current", "type": "str"},
        "latest": {"key": "latest", "type": "str"},
        "next": {"key": "next", "type": "str"},
        "previous": {"key": "previous", "type": "str"},
    }

    def __init__(
        self,
        *,
        available: Optional[List[str]] = None,
        behind: Optional[int] = None,
        current: Optional[str] = None,
        latest: Optional[str] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword available:
        :paramtype available: list[str]
        :keyword behind:
        :paramtype behind: int
        :keyword current:
        :paramtype current: str
        :keyword latest:
        :paramtype latest: str
        :keyword next:
        :paramtype next: str
        :keyword previous:
        :paramtype previous: str
        """
        super().__init__(**kwargs)
        self.available = available
        self.behind = behind
        self.current = current
        self.latest = latest
        self.next = next
        self.previous = previous


class ComMicrosoftArcdataV1DataControllerList(_serialization.Model):
    """DataControllerList is a list of DataController.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of datacontrollers. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of datacontrollers. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV1MonitorList(_serialization.Model):
    """MonitorList is a list of Monitor.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of monitors. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of monitors. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV2DataControllerList(_serialization.Model):
    """DataControllerList is a list of DataController.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of datacontrollers. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of datacontrollers. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV2MonitorList(_serialization.Model):
    """MonitorList is a list of Monitor.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of monitors. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of monitors. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV3DataControllerList(_serialization.Model):
    """DataControllerList is a list of DataController.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of datacontrollers. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of datacontrollers. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV4DataControllerList(_serialization.Model):
    """DataControllerList is a list of DataController.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of datacontrollers. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of datacontrollers. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class ComMicrosoftArcdataV5DataControllerList(_serialization.Model):
    """DataControllerList is a list of DataController.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: List of datacontrollers. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
    :vartype items: list[JSON]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {"key": "items", "type": "[object]"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[JSON],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: List of datacontrollers. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md. Required.
        :paramtype items: list[JSON]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class Components10FjageSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems(
    _serialization.Model
):
    """Components10FjageSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components126IkhoSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """Components126IkhoSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components15Vg7IqSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems(
    _serialization.Model
):
    """Components15Vg7IqSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components17TzfedSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """Components17TzfedSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components1B4F80VSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """Components1B4F80VSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components1Bvas7BSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector(
    _serialization.Model
):
    """Components1Bvas7BSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Df2Z9ISchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[Components1Df2Z9ISchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.Components1Df2Z9ISchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Df2Z9ISchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class Components1Bvsse9SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems(
    _serialization.Model
):
    """Components1Bvsse9SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components1Df2Z9ISchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """Components1Df2Z9ISchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components1Gdw2IoSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """Components1Gdw2IoSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components1Gywv93SchemasComMicrosoftArcdataV1Beta4TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties(
    _serialization.Model
):
    """Components1Gywv93SchemasComMicrosoftArcdataV1Beta4TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties.

    :ivar exporters:
    :vartype exporters: list[str]
    """

    _attribute_map = {
        "exporters": {"key": "exporters", "type": "[str]"},
    }

    def __init__(
        self, *, exporters: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword exporters:
        :paramtype exporters: list[str]
        """
        super().__init__(**kwargs)
        self.exporters = exporters


class Components1Ix2FauSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems(
    _serialization.Model
):
    """Components1Ix2FauSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components1Khndo7SchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """Components1Khndo7SchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components1N7U0B8SchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """Components1N7U0B8SchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components1Nn5M1VSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector(
    _serialization.Model
):
    """Components1Nn5M1VSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsTsj8ZdSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComponentsTsj8ZdSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComponentsTsj8ZdSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsTsj8ZdSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class Components1Qrlzo4SchemasComMicrosoftArcdataV1Beta5TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties(
    _serialization.Model
):
    """Components1Qrlzo4SchemasComMicrosoftArcdataV1Beta5TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties.

    :ivar exporters:
    :vartype exporters: list[str]
    """

    _attribute_map = {
        "exporters": {"key": "exporters", "type": "[str]"},
    }

    def __init__(
        self, *, exporters: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword exporters:
        :paramtype exporters: list[str]
        """
        super().__init__(**kwargs)
        self.exporters = exporters


class Components1S5A2D2SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """Components1S5A2D2SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components1U1FxmjSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector(
    _serialization.Model
):
    """Components1U1FxmjSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Gdw2IoSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[Components1Gdw2IoSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.Components1Gdw2IoSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Gdw2IoSchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class Components1WkpwpSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems(
    _serialization.Model
):
    """Components1WkpwpSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components1Y3InhvSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """Components1Y3InhvSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components20VruaSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems(
    _serialization.Model
):
    """Components20VruaSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components4E2Hg1SchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems(
    _serialization.Model
):
    """Components4E2Hg1SchemasComMicrosoftArcdataSqlV9SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPreferencePropertiesMatchfieldsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class Components9Qsl24SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """Components9Qsl24SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComponentsB6A7TdSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """ComponentsB6A7TdSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComponentsJkvse0SchemasComMicrosoftArcdataV1Beta5TelemetrycollectorPropertiesSpecPropertiesCollectorPropertiesServicePropertiesPipelinesAdditionalproperties(
    _serialization.Model
):
    """ComponentsJkvse0SchemasComMicrosoftArcdataV1Beta5TelemetrycollectorPropertiesSpecPropertiesCollectorPropertiesServicePropertiesPipelinesAdditionalproperties.

    :ivar exporters:
    :vartype exporters: list[str]
    :ivar processors:
    :vartype processors: list[str]
    :ivar receivers:
    :vartype receivers: list[str]
    """

    _attribute_map = {
        "exporters": {"key": "exporters", "type": "[str]"},
        "processors": {"key": "processors", "type": "[str]"},
        "receivers": {"key": "receivers", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        exporters: Optional[List[str]] = None,
        processors: Optional[List[str]] = None,
        receivers: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword exporters:
        :paramtype exporters: list[str]
        :keyword processors:
        :paramtype processors: list[str]
        :keyword receivers:
        :paramtype receivers: list[str]
        """
        super().__init__(**kwargs)
        self.exporters = exporters
        self.processors = processors
        self.receivers = receivers


class ComponentsJpz3I7SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector(
    _serialization.Model
):
    """ComponentsJpz3I7SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components9Qsl24SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[Components9Qsl24SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.Components9Qsl24SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components9Qsl24SchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComponentsKoh7F8SchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector(
    _serialization.Model
):
    """ComponentsKoh7F8SchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1B4F80VSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[Components1B4F80VSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.Components1B4F80VSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1B4F80VSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComponentsMg9X4ISchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """ComponentsMg9X4ISchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComponentsMikldbSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems(
    _serialization.Model
):
    """ComponentsMikldbSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesNodeaffinityPropertiesRequiredduringschedulingignoredduringexecutionPropertiesNodeselectortermsItemsPropertiesMatchfieldsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComponentsNp0KvbSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector(
    _serialization.Model
):
    """ComponentsNp0KvbSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Y3InhvSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[Components1Y3InhvSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.Components1Y3InhvSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components1Y3InhvSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComponentsPdt5H3SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector(
    _serialization.Model
):
    """ComponentsPdt5H3SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components126IkhoSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[Components126IkhoSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.Components126IkhoSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.Components126IkhoSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class ComponentsQax4R6SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """ComponentsQax4R6SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComponentsQhuwv5SchemasComMicrosoftArcdataV1Beta3TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties(
    _serialization.Model
):
    """ComponentsQhuwv5SchemasComMicrosoftArcdataV1Beta3TelemetryrouterPropertiesSpecPropertiesPipelinesAdditionalproperties.

    :ivar exporters:
    :vartype exporters: list[str]
    """

    _attribute_map = {
        "exporters": {"key": "exporters", "type": "[str]"},
    }

    def __init__(
        self, *, exporters: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword exporters:
        :paramtype exporters: list[str]
        """
        super().__init__(**kwargs)
        self.exporters = exporters


class ComponentsTfehc7SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """ComponentsTfehc7SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComponentsTsj8ZdSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """ComponentsTsj8ZdSchemasComMicrosoftArcdataSqlV11SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComponentsWou0LwSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems(
    _serialization.Model
):
    """ComponentsWou0LwSchemasComMicrosoftArcdataSqlV10SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodaffinityPropertiesRequiredduringschedulingignoredduringexecutionItemsPropertiesNamespaceselectorPropertiesMatchexpressionsItems.

    :ivar key:
    :vartype key: str
    :ivar operator:
    :vartype operator: str
    :ivar values:
    :vartype values: list[str]
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[str] = None,
        values: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword key:
        :paramtype key: str
        :keyword operator:
        :paramtype operator: str
        :keyword values:
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class ComponentsYj3GcjSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector(
    _serialization.Model
):
    """ComponentsYj3GcjSchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselector.

    :ivar match_expressions:
    :vartype match_expressions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsQax4R6SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
    :ivar match_labels: Dictionary of :code:`<string>`.
    :vartype match_labels: dict[str, str]
    """

    _attribute_map = {
        "match_expressions": {
            "key": "matchExpressions",
            "type": "[ComponentsQax4R6SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]",
        },
        "match_labels": {"key": "matchLabels", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        match_expressions: Optional[
            List[
                "_models.ComponentsQax4R6SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems"
            ]
        ] = None,
        match_labels: Optional[Dict[str, str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword match_expressions:
        :paramtype match_expressions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.ComponentsQax4R6SchemasComMicrosoftArcdataSqlV8SqlmanagedinstancePropertiesSpecPropertiesSchedulingPropertiesAffinityPropertiesPodantiaffinityPropertiesPreferredduringschedulingignoredduringexecutionItemsPropertiesPodaffinitytermPropertiesNamespaceselectorPropertiesMatchexpressionsItems]
        :keyword match_labels: Dictionary of :code:`<string>`.
        :paramtype match_labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions
        self.match_labels = match_labels


class IoK8SApiAppsV1StatefulSetPersistentVolumeClaimRetentionPolicy(
    _serialization.Model
):
    """StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from
    the StatefulSet VolumeClaimTemplates.

    :ivar when_deleted: WhenDeleted specifies what happens to PVCs created from StatefulSet
     VolumeClaimTemplates when the StatefulSet is deleted. The default policy of ``Retain`` causes
     PVCs to not be affected by StatefulSet deletion. The ``Delete`` policy causes those PVCs to be
     deleted.
    :vartype when_deleted: str
    :ivar when_scaled: WhenScaled specifies what happens to PVCs created from StatefulSet
     VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of ``Retain``
     causes PVCs to not be affected by a scaledown. The ``Delete`` policy causes the associated PVCs
     for any excess pods above the replica count to be deleted.
    :vartype when_scaled: str
    """

    _attribute_map = {
        "when_deleted": {"key": "whenDeleted", "type": "str"},
        "when_scaled": {"key": "whenScaled", "type": "str"},
    }

    def __init__(
        self,
        *,
        when_deleted: Optional[str] = None,
        when_scaled: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword when_deleted: WhenDeleted specifies what happens to PVCs created from StatefulSet
         VolumeClaimTemplates when the StatefulSet is deleted. The default policy of ``Retain`` causes
         PVCs to not be affected by StatefulSet deletion. The ``Delete`` policy causes those PVCs to be
         deleted.
        :paramtype when_deleted: str
        :keyword when_scaled: WhenScaled specifies what happens to PVCs created from StatefulSet
         VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of ``Retain``
         causes PVCs to not be affected by a scaledown. The ``Delete`` policy causes the associated PVCs
         for any excess pods above the replica count to be deleted.
        :paramtype when_scaled: str
        """
        super().__init__(**kwargs)
        self.when_deleted = when_deleted
        self.when_scaled = when_scaled


class IoK8SApiAutoscalingV2ContainerResourceMetricSource(_serialization.Model):
    """ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes,
    as specified in requests and limits, describing each pod in the current scale target (e.g. CPU
    or memory).  The values will be averaged together before being compared to the target.  Such
    metrics are built in to Kubernetes, and have special scaling options on top of those available
    to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.

    All required parameters must be populated in order to send to Azure.

    :ivar container: container is the name of the container in the pods of the scaling target.
     Required.
    :vartype container: str
    :ivar name: name is the name of the resource in question. Required.
    :vartype name: str
    :ivar target: target specifies the target value for the given metric. Required.
    :vartype target: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricTarget
    """

    _validation = {
        "container": {"required": True},
        "name": {"required": True},
        "target": {"required": True},
    }

    _attribute_map = {
        "container": {"key": "container", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "target": {
            "key": "target",
            "type": "IoK8SApiAutoscalingV2MetricTarget",
        },
    }

    def __init__(
        self,
        *,
        container: str,
        name: str,
        target: "_models.IoK8SApiAutoscalingV2MetricTarget",
        **kwargs: Any,
    ) -> None:
        """
        :keyword container: container is the name of the container in the pods of the scaling target.
         Required.
        :paramtype container: str
        :keyword name: name is the name of the resource in question. Required.
        :paramtype name: str
        :keyword target: target specifies the target value for the given metric. Required.
        :paramtype target: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricTarget
        """
        super().__init__(**kwargs)
        self.container = container
        self.name = name
        self.target = target


class IoK8SApiAutoscalingV2ContainerResourceMetricStatus(_serialization.Model):
    """ContainerResourceMetricStatus indicates the current value of a resource metric known to
    Kubernetes, as specified in requests and limits, describing a single container in each pod in
    the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and
    have special scaling options on top of those available to normal per-pod metrics using the
    "pods" source.

    All required parameters must be populated in order to send to Azure.

    :ivar container: Container is the name of the container in the pods of the scaling target.
     Required.
    :vartype container: str
    :ivar current: current contains the current value for the given metric. Required.
    :vartype current: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricValueStatus
    :ivar name: Name is the name of the resource in question. Required.
    :vartype name: str
    """

    _validation = {
        "container": {"required": True},
        "current": {"required": True},
        "name": {"required": True},
    }

    _attribute_map = {
        "container": {"key": "container", "type": "str"},
        "current": {
            "key": "current",
            "type": "IoK8SApiAutoscalingV2MetricValueStatus",
        },
        "name": {"key": "name", "type": "str"},
    }

    def __init__(
        self,
        *,
        container: str,
        current: "_models.IoK8SApiAutoscalingV2MetricValueStatus",
        name: str,
        **kwargs: Any,
    ) -> None:
        """
        :keyword container: Container is the name of the container in the pods of the scaling target.
         Required.
        :paramtype container: str
        :keyword current: current contains the current value for the given metric. Required.
        :paramtype current: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricValueStatus
        :keyword name: Name is the name of the resource in question. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.container = container
        self.current = current
        self.name = name


class IoK8SApiAutoscalingV2CrossVersionObjectReference(_serialization.Model):
    """CrossVersionObjectReference contains enough information to let you identify the referred
    resource.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: API version of the referent.
    :vartype api_version: str
    :ivar kind: Kind of the referent; More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds".
     Required.
    :vartype kind: str
    :ivar name: Name of the referent; More info:
     http://kubernetes.io/docs/user-guide/identifiers#names. Required.
    :vartype name: str
    """

    _validation = {
        "kind": {"required": True},
        "name": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(
        self,
        *,
        kind: str,
        name: str,
        api_version: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: API version of the referent.
        :paramtype api_version: str
        :keyword kind: Kind of the referent; More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds".
         Required.
        :paramtype kind: str
        :keyword name: Name of the referent; More info:
         http://kubernetes.io/docs/user-guide/identifiers#names. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.name = name


class IoK8SApiAutoscalingV2ExternalMetricSource(_serialization.Model):
    """ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes
    object (for example length of queue in cloud messaging service, or QPS from loadbalancer
    running outside of cluster).

    All required parameters must be populated in order to send to Azure.

    :ivar metric: metric identifies the target metric by name and selector. Required.
    :vartype metric: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricIdentifier
    :ivar target: target specifies the target value for the given metric. Required.
    :vartype target: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricTarget
    """

    _validation = {
        "metric": {"required": True},
        "target": {"required": True},
    }

    _attribute_map = {
        "metric": {
            "key": "metric",
            "type": "IoK8SApiAutoscalingV2MetricIdentifier",
        },
        "target": {
            "key": "target",
            "type": "IoK8SApiAutoscalingV2MetricTarget",
        },
    }

    def __init__(
        self,
        *,
        metric: "_models.IoK8SApiAutoscalingV2MetricIdentifier",
        target: "_models.IoK8SApiAutoscalingV2MetricTarget",
        **kwargs: Any,
    ) -> None:
        """
        :keyword metric: metric identifies the target metric by name and selector. Required.
        :paramtype metric: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricIdentifier
        :keyword target: target specifies the target value for the given metric. Required.
        :paramtype target: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricTarget
        """
        super().__init__(**kwargs)
        self.metric = metric
        self.target = target


class IoK8SApiAutoscalingV2ExternalMetricStatus(_serialization.Model):
    """ExternalMetricStatus indicates the current value of a global metric not associated with any
    Kubernetes object.

    All required parameters must be populated in order to send to Azure.

    :ivar current: current contains the current value for the given metric. Required.
    :vartype current: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricValueStatus
    :ivar metric: metric identifies the target metric by name and selector. Required.
    :vartype metric: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricIdentifier
    """

    _validation = {
        "current": {"required": True},
        "metric": {"required": True},
    }

    _attribute_map = {
        "current": {
            "key": "current",
            "type": "IoK8SApiAutoscalingV2MetricValueStatus",
        },
        "metric": {
            "key": "metric",
            "type": "IoK8SApiAutoscalingV2MetricIdentifier",
        },
    }

    def __init__(
        self,
        *,
        current: "_models.IoK8SApiAutoscalingV2MetricValueStatus",
        metric: "_models.IoK8SApiAutoscalingV2MetricIdentifier",
        **kwargs: Any,
    ) -> None:
        """
        :keyword current: current contains the current value for the given metric. Required.
        :paramtype current: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricValueStatus
        :keyword metric: metric identifies the target metric by name and selector. Required.
        :paramtype metric: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricIdentifier
        """
        super().__init__(**kwargs)
        self.current = current
        self.metric = metric


class IoK8SApiAutoscalingV2HorizontalPodAutoscaler(_serialization.Model):
    """HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which
    automatically manages the replica count of any resource implementing the scale subresource
    based on the metrics specified.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: metadata is the standard object metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec: spec is the specification for the behaviour of the autoscaler. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
    :vartype spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HorizontalPodAutoscalerSpec
    :ivar status: status is the current information about the autoscaler.
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HorizontalPodAutoscalerStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "IoK8SApiAutoscalingV2HorizontalPodAutoscalerSpec",
        },
        "status": {
            "key": "status",
            "type": "IoK8SApiAutoscalingV2HorizontalPodAutoscalerStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.IoK8SApiAutoscalingV2HorizontalPodAutoscalerSpec"
        ] = None,
        status: Optional[
            "_models.IoK8SApiAutoscalingV2HorizontalPodAutoscalerStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: metadata is the standard object metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec: spec is the specification for the behaviour of the autoscaler. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
        :paramtype spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HorizontalPodAutoscalerSpec
        :keyword status: status is the current information about the autoscaler.
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HorizontalPodAutoscalerStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class IoK8SApiAutoscalingV2HorizontalPodAutoscalerBehavior(
    _serialization.Model
):
    """HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and
    Down directions (scaleUp and scaleDown fields respectively).

    :ivar scale_down: scaleDown is scaling policy for scaling Down. If not set, the default value
     is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e.,
     the highest recommendation for the last 300sec is used).
    :vartype scale_down: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HPAScalingRules
    :ivar scale_up: scaleUp is scaling policy for scaling Up. If not set, the default value is the
     higher of:


     * increase no more than 4 pods per 60 seconds
     * double the number of pods per 60 seconds
       No stabilization is used.
    :vartype scale_up: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HPAScalingRules
    """

    _attribute_map = {
        "scale_down": {
            "key": "scaleDown",
            "type": "IoK8SApiAutoscalingV2HPAScalingRules",
        },
        "scale_up": {
            "key": "scaleUp",
            "type": "IoK8SApiAutoscalingV2HPAScalingRules",
        },
    }

    def __init__(
        self,
        *,
        scale_down: Optional[
            "_models.IoK8SApiAutoscalingV2HPAScalingRules"
        ] = None,
        scale_up: Optional[
            "_models.IoK8SApiAutoscalingV2HPAScalingRules"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword scale_down: scaleDown is scaling policy for scaling Down. If not set, the default
         value is to allow to scale down to minReplicas pods, with a 300 second stabilization window
         (i.e., the highest recommendation for the last 300sec is used).
        :paramtype scale_down:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HPAScalingRules
        :keyword scale_up: scaleUp is scaling policy for scaling Up. If not set, the default value is
         the higher of:


         * increase no more than 4 pods per 60 seconds
         * double the number of pods per 60 seconds
           No stabilization is used.
        :paramtype scale_up: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HPAScalingRules
        """
        super().__init__(**kwargs)
        self.scale_down = scale_down
        self.scale_up = scale_up


class IoK8SApiAutoscalingV2HorizontalPodAutoscalerCondition(
    _serialization.Model
):
    """HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain
    point.

    All required parameters must be populated in order to send to Azure.

    :ivar last_transition_time: lastTransitionTime is the last time the condition transitioned from
     one status to another.
    :vartype last_transition_time: any
    :ivar message: message is a human-readable explanation containing details about the transition.
    :vartype message: str
    :ivar reason: reason is the reason for the condition's last transition.
    :vartype reason: str
    :ivar status: status is the status of the condition (True, False, Unknown). Required.
    :vartype status: str
    :ivar type: type describes the current condition. Required.
    :vartype type: str
    """

    _validation = {
        "status": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "last_transition_time": {"key": "lastTransitionTime", "type": "object"},
        "message": {"key": "message", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        status: str,
        type: str,
        last_transition_time: Optional[Any] = None,
        message: Optional[str] = None,
        reason: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword last_transition_time: lastTransitionTime is the last time the condition transitioned
         from one status to another.
        :paramtype last_transition_time: any
        :keyword message: message is a human-readable explanation containing details about the
         transition.
        :paramtype message: str
        :keyword reason: reason is the reason for the condition's last transition.
        :paramtype reason: str
        :keyword status: status is the status of the condition (True, False, Unknown). Required.
        :paramtype status: str
        :keyword type: type describes the current condition. Required.
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.last_transition_time = last_transition_time
        self.message = message
        self.reason = reason
        self.status = status
        self.type = type


class IoK8SApiAutoscalingV2HorizontalPodAutoscalerList(_serialization.Model):
    """HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: items is the list of horizontal pod autoscaler objects. Required.
    :vartype items:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HorizontalPodAutoscaler]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: metadata is the standard list metadata.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[IoK8SApiAutoscalingV2HorizontalPodAutoscaler]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.IoK8SApiAutoscalingV2HorizontalPodAutoscaler"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: items is the list of horizontal pod autoscaler objects. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HorizontalPodAutoscaler]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: metadata is the standard list metadata.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class IoK8SApiAutoscalingV2HorizontalPodAutoscalerSpec(_serialization.Model):
    """HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.

    All required parameters must be populated in order to send to Azure.

    :ivar behavior: behavior configures the scaling behavior of the target in both Up and Down
     directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules
     for scale up and scale down are used.
    :vartype behavior:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HorizontalPodAutoscalerBehavior
    :ivar max_replicas: maxReplicas is the upper limit for the number of replicas to which the
     autoscaler can scale up. It cannot be less that minReplicas. Required.
    :vartype max_replicas: int
    :ivar metrics: metrics contains the specifications for which to use to calculate the desired
     replica count (the maximum replica count across all metrics will be used).  The desired replica
     count is calculated multiplying the ratio between the target value and the current value by the
     current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and
     vice-versa.  See the individual metric source types for more information about how each type of
     metric must respond. If not set, the default metric will be set to 80% average CPU utilization.
    :vartype metrics: list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricSpec]
    :ivar min_replicas: minReplicas is the lower limit for the number of replicas to which the
     autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha
     feature gate HPAScaleToZero is enabled and at least one Object or External metric is
     configured.  Scaling is active as long as at least one metric value is available.
    :vartype min_replicas: int
    :ivar scale_target_ref: scaleTargetRef points to the target resource to scale, and is used to
     the pods for which metrics should be collected, as well as to actually change the replica
     count. Required.
    :vartype scale_target_ref:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2CrossVersionObjectReference
    """

    _validation = {
        "max_replicas": {"required": True},
        "scale_target_ref": {"required": True},
    }

    _attribute_map = {
        "behavior": {
            "key": "behavior",
            "type": "IoK8SApiAutoscalingV2HorizontalPodAutoscalerBehavior",
        },
        "max_replicas": {"key": "maxReplicas", "type": "int"},
        "metrics": {
            "key": "metrics",
            "type": "[IoK8SApiAutoscalingV2MetricSpec]",
        },
        "min_replicas": {"key": "minReplicas", "type": "int"},
        "scale_target_ref": {
            "key": "scaleTargetRef",
            "type": "IoK8SApiAutoscalingV2CrossVersionObjectReference",
        },
    }

    def __init__(
        self,
        *,
        max_replicas: int,
        scale_target_ref: "_models.IoK8SApiAutoscalingV2CrossVersionObjectReference",
        behavior: Optional[
            "_models.IoK8SApiAutoscalingV2HorizontalPodAutoscalerBehavior"
        ] = None,
        metrics: Optional[
            List["_models.IoK8SApiAutoscalingV2MetricSpec"]
        ] = None,
        min_replicas: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword behavior: behavior configures the scaling behavior of the target in both Up and Down
         directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules
         for scale up and scale down are used.
        :paramtype behavior:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HorizontalPodAutoscalerBehavior
        :keyword max_replicas: maxReplicas is the upper limit for the number of replicas to which the
         autoscaler can scale up. It cannot be less that minReplicas. Required.
        :paramtype max_replicas: int
        :keyword metrics: metrics contains the specifications for which to use to calculate the desired
         replica count (the maximum replica count across all metrics will be used).  The desired replica
         count is calculated multiplying the ratio between the target value and the current value by the
         current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and
         vice-versa.  See the individual metric source types for more information about how each type of
         metric must respond. If not set, the default metric will be set to 80% average CPU utilization.
        :paramtype metrics: list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricSpec]
        :keyword min_replicas: minReplicas is the lower limit for the number of replicas to which the
         autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha
         feature gate HPAScaleToZero is enabled and at least one Object or External metric is
         configured.  Scaling is active as long as at least one metric value is available.
        :paramtype min_replicas: int
        :keyword scale_target_ref: scaleTargetRef points to the target resource to scale, and is used
         to the pods for which metrics should be collected, as well as to actually change the replica
         count. Required.
        :paramtype scale_target_ref:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2CrossVersionObjectReference
        """
        super().__init__(**kwargs)
        self.behavior = behavior
        self.max_replicas = max_replicas
        self.metrics = metrics
        self.min_replicas = min_replicas
        self.scale_target_ref = scale_target_ref


class IoK8SApiAutoscalingV2HorizontalPodAutoscalerStatus(_serialization.Model):
    """HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.

    All required parameters must be populated in order to send to Azure.

    :ivar conditions: conditions is the set of conditions required for this autoscaler to scale its
     target, and indicates whether or not those conditions are met.
    :vartype conditions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HorizontalPodAutoscalerCondition]
    :ivar current_metrics: currentMetrics is the last read state of the metrics used by this
     autoscaler.
    :vartype current_metrics:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricStatus]
    :ivar current_replicas: currentReplicas is current number of replicas of pods managed by this
     autoscaler, as last seen by the autoscaler.
    :vartype current_replicas: int
    :ivar desired_replicas: desiredReplicas is the desired number of replicas of pods managed by
     this autoscaler, as last calculated by the autoscaler. Required.
    :vartype desired_replicas: int
    :ivar last_scale_time: lastScaleTime is the last time the HorizontalPodAutoscaler scaled the
     number of pods, used by the autoscaler to control how often the number of pods is changed.
    :vartype last_scale_time: any
    :ivar observed_generation: observedGeneration is the most recent generation observed by this
     autoscaler.
    :vartype observed_generation: int
    """

    _validation = {
        "desired_replicas": {"required": True},
    }

    _attribute_map = {
        "conditions": {
            "key": "conditions",
            "type": "[IoK8SApiAutoscalingV2HorizontalPodAutoscalerCondition]",
        },
        "current_metrics": {
            "key": "currentMetrics",
            "type": "[IoK8SApiAutoscalingV2MetricStatus]",
        },
        "current_replicas": {"key": "currentReplicas", "type": "int"},
        "desired_replicas": {"key": "desiredReplicas", "type": "int"},
        "last_scale_time": {"key": "lastScaleTime", "type": "object"},
        "observed_generation": {"key": "observedGeneration", "type": "int"},
    }

    def __init__(
        self,
        *,
        desired_replicas: int,
        conditions: Optional[
            List[
                "_models.IoK8SApiAutoscalingV2HorizontalPodAutoscalerCondition"
            ]
        ] = None,
        current_metrics: Optional[
            List["_models.IoK8SApiAutoscalingV2MetricStatus"]
        ] = None,
        current_replicas: Optional[int] = None,
        last_scale_time: Optional[Any] = None,
        observed_generation: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword conditions: conditions is the set of conditions required for this autoscaler to scale
         its target, and indicates whether or not those conditions are met.
        :paramtype conditions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HorizontalPodAutoscalerCondition]
        :keyword current_metrics: currentMetrics is the last read state of the metrics used by this
         autoscaler.
        :paramtype current_metrics:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricStatus]
        :keyword current_replicas: currentReplicas is current number of replicas of pods managed by
         this autoscaler, as last seen by the autoscaler.
        :paramtype current_replicas: int
        :keyword desired_replicas: desiredReplicas is the desired number of replicas of pods managed by
         this autoscaler, as last calculated by the autoscaler. Required.
        :paramtype desired_replicas: int
        :keyword last_scale_time: lastScaleTime is the last time the HorizontalPodAutoscaler scaled the
         number of pods, used by the autoscaler to control how often the number of pods is changed.
        :paramtype last_scale_time: any
        :keyword observed_generation: observedGeneration is the most recent generation observed by this
         autoscaler.
        :paramtype observed_generation: int
        """
        super().__init__(**kwargs)
        self.conditions = conditions
        self.current_metrics = current_metrics
        self.current_replicas = current_replicas
        self.desired_replicas = desired_replicas
        self.last_scale_time = last_scale_time
        self.observed_generation = observed_generation


class IoK8SApiAutoscalingV2HPAScalingPolicy(_serialization.Model):
    """HPAScalingPolicy is a single policy which must hold true for a specified past interval.

    All required parameters must be populated in order to send to Azure.

    :ivar period_seconds: PeriodSeconds specifies the window of time for which the policy should
     hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
     Required.
    :vartype period_seconds: int
    :ivar type: Type is used to specify the scaling policy. Required.
    :vartype type: str
    :ivar value: Value contains the amount of change which is permitted by the policy. It must be
     greater than zero. Required.
    :vartype value: int
    """

    _validation = {
        "period_seconds": {"required": True},
        "type": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "period_seconds": {"key": "periodSeconds", "type": "int"},
        "type": {"key": "type", "type": "str"},
        "value": {"key": "value", "type": "int"},
    }

    def __init__(
        self, *, period_seconds: int, type: str, value: int, **kwargs: Any
    ) -> None:
        """
        :keyword period_seconds: PeriodSeconds specifies the window of time for which the policy should
         hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
         Required.
        :paramtype period_seconds: int
        :keyword type: Type is used to specify the scaling policy. Required.
        :paramtype type: str
        :keyword value: Value contains the amount of change which is permitted by the policy. It must
         be greater than zero. Required.
        :paramtype value: int
        """
        super().__init__(**kwargs)
        self.period_seconds = period_seconds
        self.type = type
        self.value = value


class IoK8SApiAutoscalingV2HPAScalingRules(_serialization.Model):
    """HPAScalingRules configures the scaling behavior for one direction. These Rules are applied
    after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity
    by specifying scaling policies. They can prevent flapping by specifying the stabilization
    window, so that the number of replicas is not set instantly, instead, the safest value from the
    stabilization window is chosen.

    :ivar policies: policies is a list of potential scaling polices which can be used during
     scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded
     as invalid.
    :vartype policies:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HPAScalingPolicy]
    :ivar select_policy: selectPolicy is used to specify which policy should be used. If not set,
     the default value Max is used.
    :vartype select_policy: str
    :ivar stabilization_window_seconds: StabilizationWindowSeconds is the number of seconds for
     which past recommendations should be considered while scaling up or scaling down.
     StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600
     (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is
     done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
    :vartype stabilization_window_seconds: int
    """

    _attribute_map = {
        "policies": {
            "key": "policies",
            "type": "[IoK8SApiAutoscalingV2HPAScalingPolicy]",
        },
        "select_policy": {"key": "selectPolicy", "type": "str"},
        "stabilization_window_seconds": {
            "key": "stabilizationWindowSeconds",
            "type": "int",
        },
    }

    def __init__(
        self,
        *,
        policies: Optional[
            List["_models.IoK8SApiAutoscalingV2HPAScalingPolicy"]
        ] = None,
        select_policy: Optional[str] = None,
        stabilization_window_seconds: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword policies: policies is a list of potential scaling polices which can be used during
         scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded
         as invalid.
        :paramtype policies:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2HPAScalingPolicy]
        :keyword select_policy: selectPolicy is used to specify which policy should be used. If not
         set, the default value Max is used.
        :paramtype select_policy: str
        :keyword stabilization_window_seconds: StabilizationWindowSeconds is the number of seconds for
         which past recommendations should be considered while scaling up or scaling down.
         StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600
         (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is
         done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
        :paramtype stabilization_window_seconds: int
        """
        super().__init__(**kwargs)
        self.policies = policies
        self.select_policy = select_policy
        self.stabilization_window_seconds = stabilization_window_seconds


class IoK8SApiAutoscalingV2MetricIdentifier(_serialization.Model):
    """MetricIdentifier defines the name and optionally selector for a metric.

    All required parameters must be populated in order to send to Azure.

    :ivar name: name is the name of the given metric. Required.
    :vartype name: str
    :ivar selector: selector is the string-encoded form of a standard kubernetes label selector for
     the given metric When set, it is passed as an additional parameter to the metrics server for
     more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
    :vartype selector: any
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "selector": {"key": "selector", "type": "object"},
    }

    def __init__(
        self, *, name: str, selector: Optional[Any] = None, **kwargs: Any
    ) -> None:
        """
        :keyword name: name is the name of the given metric. Required.
        :paramtype name: str
        :keyword selector: selector is the string-encoded form of a standard kubernetes label selector
         for the given metric When set, it is passed as an additional parameter to the metrics server
         for more specific metrics scoping. When unset, just the metricName will be used to gather
         metrics.
        :paramtype selector: any
        """
        super().__init__(**kwargs)
        self.name = name
        self.selector = selector


class IoK8SApiAutoscalingV2MetricSpec(_serialization.Model):
    """MetricSpec specifies how to scale based on a single metric (only ``type`` and one other
    matching field should be set at once).

    All required parameters must be populated in order to send to Azure.

    :ivar container_resource: containerResource refers to a resource metric (such as those
     specified in requests and limits) known to Kubernetes describing a single container in each pod
     of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and
     have special scaling options on top of those available to normal per-pod metrics using the
     "pods" source. This is an alpha feature and can be enabled by the HPAContainerMetrics feature
     flag.
    :vartype container_resource:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ContainerResourceMetricSource
    :ivar external: external refers to a global metric that is not associated with any Kubernetes
     object. It allows autoscaling based on information coming from components running outside of
     cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer
     running outside of cluster).
    :vartype external:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ExternalMetricSource
    :ivar object: object refers to a metric describing a single kubernetes object (for example,
     hits-per-second on an Ingress object).
    :vartype object: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ObjectMetricSource
    :ivar pods: pods refers to a metric describing each pod in the current scale target (for
     example, transactions-processed-per-second).  The values will be averaged together before being
     compared to the target value.
    :vartype pods: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2PodsMetricSource
    :ivar resource: resource refers to a resource metric (such as those specified in requests and
     limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or
     memory). Such metrics are built in to Kubernetes, and have special scaling options on top of
     those available to normal per-pod metrics using the "pods" source.
    :vartype resource:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ResourceMetricSource
    :ivar type: type is the type of metric source.  It should be one of "ContainerResource",
     "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object.
     Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is
     enabled. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "container_resource": {
            "key": "containerResource",
            "type": "IoK8SApiAutoscalingV2ContainerResourceMetricSource",
        },
        "external": {
            "key": "external",
            "type": "IoK8SApiAutoscalingV2ExternalMetricSource",
        },
        "object": {
            "key": "object",
            "type": "IoK8SApiAutoscalingV2ObjectMetricSource",
        },
        "pods": {
            "key": "pods",
            "type": "IoK8SApiAutoscalingV2PodsMetricSource",
        },
        "resource": {
            "key": "resource",
            "type": "IoK8SApiAutoscalingV2ResourceMetricSource",
        },
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        type: str,
        container_resource: Optional[
            "_models.IoK8SApiAutoscalingV2ContainerResourceMetricSource"
        ] = None,
        external: Optional[
            "_models.IoK8SApiAutoscalingV2ExternalMetricSource"
        ] = None,
        object: Optional[
            "_models.IoK8SApiAutoscalingV2ObjectMetricSource"
        ] = None,
        pods: Optional["_models.IoK8SApiAutoscalingV2PodsMetricSource"] = None,
        resource: Optional[
            "_models.IoK8SApiAutoscalingV2ResourceMetricSource"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword container_resource: containerResource refers to a resource metric (such as those
         specified in requests and limits) known to Kubernetes describing a single container in each pod
         of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and
         have special scaling options on top of those available to normal per-pod metrics using the
         "pods" source. This is an alpha feature and can be enabled by the HPAContainerMetrics feature
         flag.
        :paramtype container_resource:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ContainerResourceMetricSource
        :keyword external: external refers to a global metric that is not associated with any
         Kubernetes object. It allows autoscaling based on information coming from components running
         outside of cluster (for example length of queue in cloud messaging service, or QPS from
         loadbalancer running outside of cluster).
        :paramtype external:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ExternalMetricSource
        :keyword object: object refers to a metric describing a single kubernetes object (for example,
         hits-per-second on an Ingress object).
        :paramtype object: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ObjectMetricSource
        :keyword pods: pods refers to a metric describing each pod in the current scale target (for
         example, transactions-processed-per-second).  The values will be averaged together before being
         compared to the target value.
        :paramtype pods: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2PodsMetricSource
        :keyword resource: resource refers to a resource metric (such as those specified in requests
         and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or
         memory). Such metrics are built in to Kubernetes, and have special scaling options on top of
         those available to normal per-pod metrics using the "pods" source.
        :paramtype resource:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ResourceMetricSource
        :keyword type: type is the type of metric source.  It should be one of "ContainerResource",
         "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object.
         Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is
         enabled. Required.
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.container_resource = container_resource
        self.external = external
        self.object = object
        self.pods = pods
        self.resource = resource
        self.type = type


class IoK8SApiAutoscalingV2MetricStatus(_serialization.Model):
    """MetricStatus describes the last-read state of a single metric.

    All required parameters must be populated in order to send to Azure.

    :ivar container_resource: container resource refers to a resource metric (such as those
     specified in requests and limits) known to Kubernetes describing a single container in each pod
     in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and
     have special scaling options on top of those available to normal per-pod metrics using the
     "pods" source.
    :vartype container_resource:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ContainerResourceMetricStatus
    :ivar external: external refers to a global metric that is not associated with any Kubernetes
     object. It allows autoscaling based on information coming from components running outside of
     cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer
     running outside of cluster).
    :vartype external:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ExternalMetricStatus
    :ivar object: object refers to a metric describing a single kubernetes object (for example,
     hits-per-second on an Ingress object).
    :vartype object: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ObjectMetricStatus
    :ivar pods: pods refers to a metric describing each pod in the current scale target (for
     example, transactions-processed-per-second).  The values will be averaged together before being
     compared to the target value.
    :vartype pods: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2PodsMetricStatus
    :ivar resource: resource refers to a resource metric (such as those specified in requests and
     limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or
     memory). Such metrics are built in to Kubernetes, and have special scaling options on top of
     those available to normal per-pod metrics using the "pods" source.
    :vartype resource:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ResourceMetricStatus
    :ivar type: type is the type of metric source.  It will be one of "ContainerResource",
     "External", "Object", "Pods" or "Resource", each corresponds to a matching field in the object.
     Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is
     enabled. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "container_resource": {
            "key": "containerResource",
            "type": "IoK8SApiAutoscalingV2ContainerResourceMetricStatus",
        },
        "external": {
            "key": "external",
            "type": "IoK8SApiAutoscalingV2ExternalMetricStatus",
        },
        "object": {
            "key": "object",
            "type": "IoK8SApiAutoscalingV2ObjectMetricStatus",
        },
        "pods": {
            "key": "pods",
            "type": "IoK8SApiAutoscalingV2PodsMetricStatus",
        },
        "resource": {
            "key": "resource",
            "type": "IoK8SApiAutoscalingV2ResourceMetricStatus",
        },
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        type: str,
        container_resource: Optional[
            "_models.IoK8SApiAutoscalingV2ContainerResourceMetricStatus"
        ] = None,
        external: Optional[
            "_models.IoK8SApiAutoscalingV2ExternalMetricStatus"
        ] = None,
        object: Optional[
            "_models.IoK8SApiAutoscalingV2ObjectMetricStatus"
        ] = None,
        pods: Optional["_models.IoK8SApiAutoscalingV2PodsMetricStatus"] = None,
        resource: Optional[
            "_models.IoK8SApiAutoscalingV2ResourceMetricStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword container_resource: container resource refers to a resource metric (such as those
         specified in requests and limits) known to Kubernetes describing a single container in each pod
         in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and
         have special scaling options on top of those available to normal per-pod metrics using the
         "pods" source.
        :paramtype container_resource:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ContainerResourceMetricStatus
        :keyword external: external refers to a global metric that is not associated with any
         Kubernetes object. It allows autoscaling based on information coming from components running
         outside of cluster (for example length of queue in cloud messaging service, or QPS from
         loadbalancer running outside of cluster).
        :paramtype external:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ExternalMetricStatus
        :keyword object: object refers to a metric describing a single kubernetes object (for example,
         hits-per-second on an Ingress object).
        :paramtype object: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ObjectMetricStatus
        :keyword pods: pods refers to a metric describing each pod in the current scale target (for
         example, transactions-processed-per-second).  The values will be averaged together before being
         compared to the target value.
        :paramtype pods: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2PodsMetricStatus
        :keyword resource: resource refers to a resource metric (such as those specified in requests
         and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or
         memory). Such metrics are built in to Kubernetes, and have special scaling options on top of
         those available to normal per-pod metrics using the "pods" source.
        :paramtype resource:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2ResourceMetricStatus
        :keyword type: type is the type of metric source.  It will be one of "ContainerResource",
         "External", "Object", "Pods" or "Resource", each corresponds to a matching field in the object.
         Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is
         enabled. Required.
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.container_resource = container_resource
        self.external = external
        self.object = object
        self.pods = pods
        self.resource = resource
        self.type = type


class IoK8SApiAutoscalingV2MetricTarget(_serialization.Model):
    """MetricTarget defines the target value, average value, or average utilization of a specific
    metric.

    All required parameters must be populated in order to send to Azure.

    :ivar average_utilization: averageUtilization is the target value of the average of the
     resource metric across all relevant pods, represented as a percentage of the requested value of
     the resource for the pods. Currently only valid for Resource metric source type.
    :vartype average_utilization: int
    :ivar average_value: averageValue is the target value of the average of the metric across all
     relevant pods (as a quantity).
    :vartype average_value: any
    :ivar type: type represents whether the metric type is Utilization, Value, or AverageValue.
     Required.
    :vartype type: str
    :ivar value: value is the target value of the metric (as a quantity).
    :vartype value: any
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "average_utilization": {"key": "averageUtilization", "type": "int"},
        "average_value": {"key": "averageValue", "type": "object"},
        "type": {"key": "type", "type": "str"},
        "value": {"key": "value", "type": "object"},
    }

    def __init__(
        self,
        *,
        type: str,
        average_utilization: Optional[int] = None,
        average_value: Optional[Any] = None,
        value: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword average_utilization: averageUtilization is the target value of the average of the
         resource metric across all relevant pods, represented as a percentage of the requested value of
         the resource for the pods. Currently only valid for Resource metric source type.
        :paramtype average_utilization: int
        :keyword average_value: averageValue is the target value of the average of the metric across
         all relevant pods (as a quantity).
        :paramtype average_value: any
        :keyword type: type represents whether the metric type is Utilization, Value, or AverageValue.
         Required.
        :paramtype type: str
        :keyword value: value is the target value of the metric (as a quantity).
        :paramtype value: any
        """
        super().__init__(**kwargs)
        self.average_utilization = average_utilization
        self.average_value = average_value
        self.type = type
        self.value = value


class IoK8SApiAutoscalingV2MetricValueStatus(_serialization.Model):
    """MetricValueStatus holds the current value for a metric.

    :ivar average_utilization: currentAverageUtilization is the current value of the average of the
     resource metric across all relevant pods, represented as a percentage of the requested value of
     the resource for the pods.
    :vartype average_utilization: int
    :ivar average_value: averageValue is the current value of the average of the metric across all
     relevant pods (as a quantity).
    :vartype average_value: any
    :ivar value: value is the current value of the metric (as a quantity).
    :vartype value: any
    """

    _attribute_map = {
        "average_utilization": {"key": "averageUtilization", "type": "int"},
        "average_value": {"key": "averageValue", "type": "object"},
        "value": {"key": "value", "type": "object"},
    }

    def __init__(
        self,
        *,
        average_utilization: Optional[int] = None,
        average_value: Optional[Any] = None,
        value: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword average_utilization: currentAverageUtilization is the current value of the average of
         the resource metric across all relevant pods, represented as a percentage of the requested
         value of the resource for the pods.
        :paramtype average_utilization: int
        :keyword average_value: averageValue is the current value of the average of the metric across
         all relevant pods (as a quantity).
        :paramtype average_value: any
        :keyword value: value is the current value of the metric (as a quantity).
        :paramtype value: any
        """
        super().__init__(**kwargs)
        self.average_utilization = average_utilization
        self.average_value = average_value
        self.value = value


class IoK8SApiAutoscalingV2ObjectMetricSource(_serialization.Model):
    """ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for
    example, hits-per-second on an Ingress object).

    All required parameters must be populated in order to send to Azure.

    :ivar described_object: describedObject specifies the descriptions of a object,such as
     kind,name apiVersion. Required.
    :vartype described_object:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2CrossVersionObjectReference
    :ivar metric: metric identifies the target metric by name and selector. Required.
    :vartype metric: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricIdentifier
    :ivar target: target specifies the target value for the given metric. Required.
    :vartype target: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricTarget
    """

    _validation = {
        "described_object": {"required": True},
        "metric": {"required": True},
        "target": {"required": True},
    }

    _attribute_map = {
        "described_object": {
            "key": "describedObject",
            "type": "IoK8SApiAutoscalingV2CrossVersionObjectReference",
        },
        "metric": {
            "key": "metric",
            "type": "IoK8SApiAutoscalingV2MetricIdentifier",
        },
        "target": {
            "key": "target",
            "type": "IoK8SApiAutoscalingV2MetricTarget",
        },
    }

    def __init__(
        self,
        *,
        described_object: "_models.IoK8SApiAutoscalingV2CrossVersionObjectReference",
        metric: "_models.IoK8SApiAutoscalingV2MetricIdentifier",
        target: "_models.IoK8SApiAutoscalingV2MetricTarget",
        **kwargs: Any,
    ) -> None:
        """
        :keyword described_object: describedObject specifies the descriptions of a object,such as
         kind,name apiVersion. Required.
        :paramtype described_object:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2CrossVersionObjectReference
        :keyword metric: metric identifies the target metric by name and selector. Required.
        :paramtype metric: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricIdentifier
        :keyword target: target specifies the target value for the given metric. Required.
        :paramtype target: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricTarget
        """
        super().__init__(**kwargs)
        self.described_object = described_object
        self.metric = metric
        self.target = target


class IoK8SApiAutoscalingV2ObjectMetricStatus(_serialization.Model):
    """ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for
    example, hits-per-second on an Ingress object).

    All required parameters must be populated in order to send to Azure.

    :ivar current: current contains the current value for the given metric. Required.
    :vartype current: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricValueStatus
    :ivar described_object: DescribedObject specifies the descriptions of a object,such as
     kind,name apiVersion. Required.
    :vartype described_object:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2CrossVersionObjectReference
    :ivar metric: metric identifies the target metric by name and selector. Required.
    :vartype metric: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricIdentifier
    """

    _validation = {
        "current": {"required": True},
        "described_object": {"required": True},
        "metric": {"required": True},
    }

    _attribute_map = {
        "current": {
            "key": "current",
            "type": "IoK8SApiAutoscalingV2MetricValueStatus",
        },
        "described_object": {
            "key": "describedObject",
            "type": "IoK8SApiAutoscalingV2CrossVersionObjectReference",
        },
        "metric": {
            "key": "metric",
            "type": "IoK8SApiAutoscalingV2MetricIdentifier",
        },
    }

    def __init__(
        self,
        *,
        current: "_models.IoK8SApiAutoscalingV2MetricValueStatus",
        described_object: "_models.IoK8SApiAutoscalingV2CrossVersionObjectReference",
        metric: "_models.IoK8SApiAutoscalingV2MetricIdentifier",
        **kwargs: Any,
    ) -> None:
        """
        :keyword current: current contains the current value for the given metric. Required.
        :paramtype current: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricValueStatus
        :keyword described_object: DescribedObject specifies the descriptions of a object,such as
         kind,name apiVersion. Required.
        :paramtype described_object:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2CrossVersionObjectReference
        :keyword metric: metric identifies the target metric by name and selector. Required.
        :paramtype metric: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricIdentifier
        """
        super().__init__(**kwargs)
        self.current = current
        self.described_object = described_object
        self.metric = metric


class IoK8SApiAutoscalingV2PodsMetricSource(_serialization.Model):
    """PodsMetricSource indicates how to scale on a metric describing each pod in the current scale
    target (for example, transactions-processed-per-second). The values will be averaged together
    before being compared to the target value.

    All required parameters must be populated in order to send to Azure.

    :ivar metric: metric identifies the target metric by name and selector. Required.
    :vartype metric: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricIdentifier
    :ivar target: target specifies the target value for the given metric. Required.
    :vartype target: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricTarget
    """

    _validation = {
        "metric": {"required": True},
        "target": {"required": True},
    }

    _attribute_map = {
        "metric": {
            "key": "metric",
            "type": "IoK8SApiAutoscalingV2MetricIdentifier",
        },
        "target": {
            "key": "target",
            "type": "IoK8SApiAutoscalingV2MetricTarget",
        },
    }

    def __init__(
        self,
        *,
        metric: "_models.IoK8SApiAutoscalingV2MetricIdentifier",
        target: "_models.IoK8SApiAutoscalingV2MetricTarget",
        **kwargs: Any,
    ) -> None:
        """
        :keyword metric: metric identifies the target metric by name and selector. Required.
        :paramtype metric: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricIdentifier
        :keyword target: target specifies the target value for the given metric. Required.
        :paramtype target: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricTarget
        """
        super().__init__(**kwargs)
        self.metric = metric
        self.target = target


class IoK8SApiAutoscalingV2PodsMetricStatus(_serialization.Model):
    """PodsMetricStatus indicates the current value of a metric describing each pod in the current
    scale target (for example, transactions-processed-per-second).

    All required parameters must be populated in order to send to Azure.

    :ivar current: current contains the current value for the given metric. Required.
    :vartype current: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricValueStatus
    :ivar metric: metric identifies the target metric by name and selector. Required.
    :vartype metric: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricIdentifier
    """

    _validation = {
        "current": {"required": True},
        "metric": {"required": True},
    }

    _attribute_map = {
        "current": {
            "key": "current",
            "type": "IoK8SApiAutoscalingV2MetricValueStatus",
        },
        "metric": {
            "key": "metric",
            "type": "IoK8SApiAutoscalingV2MetricIdentifier",
        },
    }

    def __init__(
        self,
        *,
        current: "_models.IoK8SApiAutoscalingV2MetricValueStatus",
        metric: "_models.IoK8SApiAutoscalingV2MetricIdentifier",
        **kwargs: Any,
    ) -> None:
        """
        :keyword current: current contains the current value for the given metric. Required.
        :paramtype current: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricValueStatus
        :keyword metric: metric identifies the target metric by name and selector. Required.
        :paramtype metric: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricIdentifier
        """
        super().__init__(**kwargs)
        self.current = current
        self.metric = metric


class IoK8SApiAutoscalingV2ResourceMetricSource(_serialization.Model):
    """ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as
    specified in requests and limits, describing each pod in the current scale target (e.g. CPU or
    memory).  The values will be averaged together before being compared to the target.  Such
    metrics are built in to Kubernetes, and have special scaling options on top of those available
    to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.

    All required parameters must be populated in order to send to Azure.

    :ivar name: name is the name of the resource in question. Required.
    :vartype name: str
    :ivar target: target specifies the target value for the given metric. Required.
    :vartype target: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricTarget
    """

    _validation = {
        "name": {"required": True},
        "target": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "target": {
            "key": "target",
            "type": "IoK8SApiAutoscalingV2MetricTarget",
        },
    }

    def __init__(
        self,
        *,
        name: str,
        target: "_models.IoK8SApiAutoscalingV2MetricTarget",
        **kwargs: Any,
    ) -> None:
        """
        :keyword name: name is the name of the resource in question. Required.
        :paramtype name: str
        :keyword target: target specifies the target value for the given metric. Required.
        :paramtype target: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricTarget
        """
        super().__init__(**kwargs)
        self.name = name
        self.target = target


class IoK8SApiAutoscalingV2ResourceMetricStatus(_serialization.Model):
    """ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as
    specified in requests and limits, describing each pod in the current scale target (e.g. CPU or
    memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of
    those available to normal per-pod metrics using the "pods" source.

    All required parameters must be populated in order to send to Azure.

    :ivar current: current contains the current value for the given metric. Required.
    :vartype current: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricValueStatus
    :ivar name: Name is the name of the resource in question. Required.
    :vartype name: str
    """

    _validation = {
        "current": {"required": True},
        "name": {"required": True},
    }

    _attribute_map = {
        "current": {
            "key": "current",
            "type": "IoK8SApiAutoscalingV2MetricValueStatus",
        },
        "name": {"key": "name", "type": "str"},
    }

    def __init__(
        self,
        *,
        current: "_models.IoK8SApiAutoscalingV2MetricValueStatus",
        name: str,
        **kwargs: Any,
    ) -> None:
        """
        :keyword current: current contains the current value for the given metric. Required.
        :paramtype current: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiAutoscalingV2MetricValueStatus
        :keyword name: Name is the name of the resource in question. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.current = current
        self.name = name


class IoK8SApiBatchV1PodFailurePolicy(_serialization.Model):
    """PodFailurePolicy describes how failed pods influence the backoffLimit.

    All required parameters must be populated in order to send to Azure.

    :ivar rules: A list of pod failure policy rules. The rules are evaluated in order. Once a rule
     matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod
     failure, the default handling applies - the counter of pod failures is incremented and it is
     checked against the backoffLimit. At most 20 elements are allowed. Required.
    :vartype rules: list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiBatchV1PodFailurePolicyRule]
    """

    _validation = {
        "rules": {"required": True},
    }

    _attribute_map = {
        "rules": {
            "key": "rules",
            "type": "[IoK8SApiBatchV1PodFailurePolicyRule]",
        },
    }

    def __init__(
        self,
        *,
        rules: List["_models.IoK8SApiBatchV1PodFailurePolicyRule"],
        **kwargs: Any,
    ) -> None:
        """
        :keyword rules: A list of pod failure policy rules. The rules are evaluated in order. Once a
         rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the
         Pod failure, the default handling applies - the counter of pod failures is incremented and it
         is checked against the backoffLimit. At most 20 elements are allowed. Required.
        :paramtype rules:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiBatchV1PodFailurePolicyRule]
        """
        super().__init__(**kwargs)
        self.rules = rules


class IoK8SApiBatchV1PodFailurePolicyOnExitCodesRequirement(
    _serialization.Model
):
    """PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod
    based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for
    each app container and init container status, represented by the .status.containerStatuses and
    .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with
    success (exit code 0) are excluded from the requirement check.

    All required parameters must be populated in order to send to Azure.

    :ivar container_name: Restricts the check for exit codes to the container with the specified
     name. When null, the rule applies to all containers. When specified, it should match one the
     container or initContainer names in the pod template.
    :vartype container_name: str
    :ivar operator: Represents the relationship between the container exit code(s) and the
     specified values. Containers completed with success (exit code 0) are excluded from the
     requirement check. Possible values are: - In: the requirement is satisfied if at least one
     container exit code
       (might be multiple if there are multiple containers not restricted
       by the 'containerName' field) is in the set of specified values.


     * NotIn: the requirement is satisfied if at least one container exit code
       (might be multiple if there are multiple containers not restricted
       by the 'containerName' field) is not in the set of specified values.
       Additional values are considered to be added in the future. Clients should react to an
     unknown operator by assuming the requirement is not satisfied.

     Possible enum values:


     * ``"In"``
     * ``"NotIn"``. Required. Known values are: "In" and "NotIn".
    :vartype operator: str or
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiBatchV1PodFailurePolicyOnExitCodesRequirementOperator
    :ivar values: Specifies the set of values. Each returned container exit code (might be multiple
     in case of multiple containers) is checked against this set of values with respect to the
     operator. The list of values must be ordered and must not contain duplicates. Value '0' cannot
     be used for the In operator. At least one element is required. At most 255 elements are
     allowed. Required.
    :vartype values: list[int]
    """

    _validation = {
        "operator": {"required": True},
        "values": {"required": True},
    }

    _attribute_map = {
        "container_name": {"key": "containerName", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[int]"},
    }

    def __init__(
        self,
        *,
        operator: Union[
            str,
            "_models.IoK8SApiBatchV1PodFailurePolicyOnExitCodesRequirementOperator",
        ],
        values: List[int],
        container_name: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword container_name: Restricts the check for exit codes to the container with the specified
         name. When null, the rule applies to all containers. When specified, it should match one the
         container or initContainer names in the pod template.
        :paramtype container_name: str
        :keyword operator: Represents the relationship between the container exit code(s) and the
         specified values. Containers completed with success (exit code 0) are excluded from the
         requirement check. Possible values are: - In: the requirement is satisfied if at least one
         container exit code
           (might be multiple if there are multiple containers not restricted
           by the 'containerName' field) is in the set of specified values.


         * NotIn: the requirement is satisfied if at least one container exit code
           (might be multiple if there are multiple containers not restricted
           by the 'containerName' field) is not in the set of specified values.
           Additional values are considered to be added in the future. Clients should react to an
         unknown operator by assuming the requirement is not satisfied.

         Possible enum values:


         * ``"In"``
         * ``"NotIn"``. Required. Known values are: "In" and "NotIn".
        :paramtype operator: str or
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiBatchV1PodFailurePolicyOnExitCodesRequirementOperator
        :keyword values: Specifies the set of values. Each returned container exit code (might be
         multiple in case of multiple containers) is checked against this set of values with respect to
         the operator. The list of values must be ordered and must not contain duplicates. Value '0'
         cannot be used for the In operator. At least one element is required. At most 255 elements are
         allowed. Required.
        :paramtype values: list[int]
        """
        super().__init__(**kwargs)
        self.container_name = container_name
        self.operator = operator
        self.values = values


class IoK8SApiBatchV1PodFailurePolicyOnPodConditionsPattern(
    _serialization.Model
):
    """PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition
    type.

    All required parameters must be populated in order to send to Azure.

    :ivar status: Specifies the required Pod condition status. To match a pod condition it is
     required that the specified status equals the pod condition status. Defaults to True. Required.
    :vartype status: str
    :ivar type: Specifies the required Pod condition type. To match a pod condition it is required
     that specified type equals the pod condition type. Required.
    :vartype type: str
    """

    _validation = {
        "status": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, status: str, type: str, **kwargs: Any) -> None:
        """
        :keyword status: Specifies the required Pod condition status. To match a pod condition it is
         required that the specified status equals the pod condition status. Defaults to True. Required.
        :paramtype status: str
        :keyword type: Specifies the required Pod condition type. To match a pod condition it is
         required that specified type equals the pod condition type. Required.
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.status = status
        self.type = type


class IoK8SApiBatchV1PodFailurePolicyRule(_serialization.Model):
    """PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One
    of OnExitCodes and onPodConditions, but not both, can be used in each rule.

    All required parameters must be populated in order to send to Azure.

    :ivar action: Specifies the action taken on a pod failure when the requirements are satisfied.
     Possible values are: - FailJob: indicates that the pod's job is marked as Failed and all
       running pods are terminated.


     * Ignore: indicates that the counter towards the .backoffLimit is not
       incremented and a replacement pod is created.
     * Count: indicates that the pod is handled in the default way - the
       counter towards the .backoffLimit is incremented.
       Additional values are considered to be added in the future. Clients should react to an
     unknown action by skipping the rule.

     Possible enum values:


     * ``"Count"`` This is an action which might be taken on a pod failure - the pod failure is
     handled in the default way - the counter towards .backoffLimit, represented by the job's
     .status.failed field, is incremented.
     * ``"FailJob"`` This is an action which might be taken on a pod failure - mark the pod's job
     as Failed and terminate all running pods.
     * ``"Ignore"`` This is an action which might be taken on a pod failure - the counter towards
     .backoffLimit, represented by the job's .status.failed field, is not incremented and a
     replacement pod is created. Required. Known values are: "Count", "FailJob", and "Ignore".
    :vartype action: str or
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiBatchV1PodFailurePolicyRuleAction
    :ivar on_exit_codes: Represents the requirement on the container exit codes.
    :vartype on_exit_codes:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiBatchV1PodFailurePolicyOnExitCodesRequirement
    :ivar on_pod_conditions: Represents the requirement on the pod conditions. The requirement is
     represented as a list of pod condition patterns. The requirement is satisfied if at least one
     pattern matches an actual pod condition. At most 20 elements are allowed. Required.
    :vartype on_pod_conditions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiBatchV1PodFailurePolicyOnPodConditionsPattern]
    """

    _validation = {
        "action": {"required": True},
        "on_pod_conditions": {"required": True},
    }

    _attribute_map = {
        "action": {"key": "action", "type": "str"},
        "on_exit_codes": {
            "key": "onExitCodes",
            "type": "IoK8SApiBatchV1PodFailurePolicyOnExitCodesRequirement",
        },
        "on_pod_conditions": {
            "key": "onPodConditions",
            "type": "[IoK8SApiBatchV1PodFailurePolicyOnPodConditionsPattern]",
        },
    }

    def __init__(
        self,
        *,
        action: Union[str, "_models.IoK8SApiBatchV1PodFailurePolicyRuleAction"],
        on_pod_conditions: List[
            "_models.IoK8SApiBatchV1PodFailurePolicyOnPodConditionsPattern"
        ],
        on_exit_codes: Optional[
            "_models.IoK8SApiBatchV1PodFailurePolicyOnExitCodesRequirement"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword action: Specifies the action taken on a pod failure when the requirements are
         satisfied. Possible values are: - FailJob: indicates that the pod's job is marked as Failed and
         all
           running pods are terminated.


         * Ignore: indicates that the counter towards the .backoffLimit is not
           incremented and a replacement pod is created.
         * Count: indicates that the pod is handled in the default way - the
           counter towards the .backoffLimit is incremented.
           Additional values are considered to be added in the future. Clients should react to an
         unknown action by skipping the rule.

         Possible enum values:


         * ``"Count"`` This is an action which might be taken on a pod failure - the pod failure is
         handled in the default way - the counter towards .backoffLimit, represented by the job's
         .status.failed field, is incremented.
         * ``"FailJob"`` This is an action which might be taken on a pod failure - mark the pod's job
         as Failed and terminate all running pods.
         * ``"Ignore"`` This is an action which might be taken on a pod failure - the counter towards
         .backoffLimit, represented by the job's .status.failed field, is not incremented and a
         replacement pod is created. Required. Known values are: "Count", "FailJob", and "Ignore".
        :paramtype action: str or
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiBatchV1PodFailurePolicyRuleAction
        :keyword on_exit_codes: Represents the requirement on the container exit codes.
        :paramtype on_exit_codes:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiBatchV1PodFailurePolicyOnExitCodesRequirement
        :keyword on_pod_conditions: Represents the requirement on the pod conditions. The requirement
         is represented as a list of pod condition patterns. The requirement is satisfied if at least
         one pattern matches an actual pod condition. At most 20 elements are allowed. Required.
        :paramtype on_pod_conditions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiBatchV1PodFailurePolicyOnPodConditionsPattern]
        """
        super().__init__(**kwargs)
        self.action = action
        self.on_exit_codes = on_exit_codes
        self.on_pod_conditions = on_pod_conditions


class IoK8SApiBatchV1UncountedTerminatedPods(_serialization.Model):
    """UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in
    Job status counters.

    :ivar failed: Failed holds UIDs of failed Pods.
    :vartype failed: list[str]
    :ivar succeeded: Succeeded holds UIDs of succeeded Pods.
    :vartype succeeded: list[str]
    """

    _attribute_map = {
        "failed": {"key": "failed", "type": "[str]"},
        "succeeded": {"key": "succeeded", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        failed: Optional[List[str]] = None,
        succeeded: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword failed: Failed holds UIDs of failed Pods.
        :paramtype failed: list[str]
        :keyword succeeded: Succeeded holds UIDs of succeeded Pods.
        :paramtype succeeded: list[str]
        """
        super().__init__(**kwargs)
        self.failed = failed
        self.succeeded = succeeded


class IoK8SApiCoreV1GRPCAction(_serialization.Model):
    """IoK8SApiCoreV1GRPCAction.

    All required parameters must be populated in order to send to Azure.

    :ivar port: Port number of the gRPC service. Number must be in the range 1 to 65535. Required.
    :vartype port: int
    :ivar service: Service is the name of the service to place in the gRPC HealthCheckRequest (see
     https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

     If this is not specified, the default behavior is defined by gRPC.
    :vartype service: str
    """

    _validation = {
        "port": {"required": True},
    }

    _attribute_map = {
        "port": {"key": "port", "type": "int"},
        "service": {"key": "service", "type": "str"},
    }

    def __init__(
        self, *, port: int, service: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword port: Port number of the gRPC service. Number must be in the range 1 to 65535.
         Required.
        :paramtype port: int
        :keyword service: Service is the name of the service to place in the gRPC HealthCheckRequest
         (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

         If this is not specified, the default behavior is defined by gRPC.
        :paramtype service: str
        """
        super().__init__(**kwargs)
        self.port = port
        self.service = service


class IoK8SApiCoreV1LifecycleHandler(_serialization.Model):
    """LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and
    only one of the fields, except TCPSocket must be specified.

    :ivar exec_property: Exec specifies the action to take.
    :vartype exec_property: any
    :ivar http_get: HTTPGet specifies the http request to perform.
    :vartype http_get: any
    :ivar tcp_socket: Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the
     backward compatibility. There are no validation of this field and lifecycle hooks will fail in
     runtime when tcp handler is specified.
    :vartype tcp_socket: any
    """

    _attribute_map = {
        "exec_property": {"key": "exec", "type": "object"},
        "http_get": {"key": "httpGet", "type": "object"},
        "tcp_socket": {"key": "tcpSocket", "type": "object"},
    }

    def __init__(
        self,
        *,
        exec_property: Optional[Any] = None,
        http_get: Optional[Any] = None,
        tcp_socket: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword exec_property: Exec specifies the action to take.
        :paramtype exec_property: any
        :keyword http_get: HTTPGet specifies the http request to perform.
        :paramtype http_get: any
        :keyword tcp_socket: Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for
         the backward compatibility. There are no validation of this field and lifecycle hooks will fail
         in runtime when tcp handler is specified.
        :paramtype tcp_socket: any
        """
        super().__init__(**kwargs)
        self.exec_property = exec_property
        self.http_get = http_get
        self.tcp_socket = tcp_socket


class IoK8SApiCoreV1PodOS(_serialization.Model):
    """PodOS defines the OS parameters of a pod.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name is the name of the operating system. The currently supported values are linux
     and windows. Additional value may be defined in future and can be one of:
     https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
     Clients should expect to handle additional values and treat unrecognized values in this field
     as os: null. Required.
    :vartype name: str
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: str, **kwargs: Any) -> None:
        """
        :keyword name: Name is the name of the operating system. The currently supported values are
         linux and windows. Additional value may be defined in future and can be one of:
         https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
         Clients should expect to handle additional values and treat unrecognized values in this field
         as os: null. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.name = name


class IoK8SApiextensionsApiserverPkgApisApiextensionsV1ValidationRule(
    _serialization.Model
):
    """ValidationRule describes a validation rule written in the CEL expression language.

    All required parameters must be populated in order to send to Azure.

    :ivar message: Message represents the message displayed when validation fails. The message is
     required if the Rule contains line breaks. The message must not contain line breaks. If unset,
     the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching spec.host".
    :vartype message: str
    :ivar rule: Rule represents the expression which will be evaluated by CEL. ref:
     https://github.com/google/cel-spec The Rule is scoped to the location of the
     x-kubernetes-validations extension in the schema. The ``self`` variable in the CEL expression
     is bound to the scoped value. Example: - Rule scoped to the root of a resource with a status
     subresource: {"rule": "self.status.actual <= self.spec.maxDesired"}
    
     If the Rule is scoped to an object with properties, the accessible properties of the object
     are field selectable via ``self.field`` and field presence can be checked via
     ``has(self.field)``. Null valued fields are treated as absent fields in CEL expressions. If the
     Rule is scoped to an object with additionalProperties (i.e. a map) the value of the map are
     accessible via ``self[mapKey]``\ , map containment can be checked via ``mapKey in self`` and
     all entries of the map are accessible via CEL macros and functions such as ``self.all(...)``.
     If the Rule is scoped to an array, the elements of the array are accessible via ``self[i]`` and
     also by macros and functions. If the Rule is scoped to a scalar, ``self`` is bound to the
     scalar value. Examples: - Rule scoped to a map of objects: {"rule":
     "self.components['Widget'].priority < 10"} - Rule scoped to a list of integers: {"rule":
     "self.values.all(value, value >= 0 && value < 100)"} - Rule scoped to a string value: {"rule":
     "self.startsWith('kube')"}
    
     The ``apiVersion``\ , ``kind``\ , ``metadata.name`` and ``metadata.generateName`` are always
     accessible from the root of the object and from any x-kubernetes-embedded-resource annotated
     objects. No other metadata properties are accessible.
    
     Unknown data preserved in custom resources via x-kubernetes-preserve-unknown-fields is not
     accessible in CEL expressions. This includes: - Unknown field values that are preserved by
     object schemas with x-kubernetes-preserve-unknown-fields. - Object properties where the
     property schema is of an "unknown type". An "unknown type" is recursively defined as:
    
    
     * A schema with no type and x-kubernetes-preserve-unknown-fields set to true
     * An array where the items schema is of an "unknown type"
     * An object where the additionalProperties schema is of an "unknown type"
    
     Only property names of the form ``[a-zA-Z_.-/][a-zA-Z0-9_.-/]*`` are accessible. Accessible
     property names are escaped according to the following rules when accessed in the expression: -
     '\ **' escapes to '**\ underscores\ **' - '.' escapes to '**\ dot\ **' - '-' escapes to '**\
     dash\ **' - '/' escapes to '**\ slash\ **' - Property names that exactly match a CEL RESERVED
     keyword escape to '**\ {keyword}__'. The keywords are:
           "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for",
     "function", "if",
           "import", "let", "loop", "package", "namespace", "return".
     Examples:
    
    
     * Rule accessing a property named "namespace": {"rule": "self.\ **namespace** > 0"}
     * Rule accessing a property named "x-prop": {"rule": "self.x\ **dash**\ prop > 0"}
     * Rule accessing a property named "redact\ **d": {"rule": "self.redact**\ underscores__d > 0"}
    
     Equality on arrays with x-kubernetes-list-type of 'set' or 'map' ignores element order, i.e.
     [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the
     list type:
    
    
     * 'set': ``X + Y`` performs a union where the array positions of all elements in ``X`` are
     preserved and
       non-intersecting elements in ``Y`` are appended, retaining their partial order.
     * 'map': ``X + Y`` performs a merge where the array positions of all keys in ``X`` are
     preserved but the values
       are overwritten by values in ``Y`` when the key sets of ``X`` and ``Y`` intersect. Elements
     in ``Y`` with
       non-intersecting keys are appended, retaining their partial order. Required.
    :vartype rule: str
    """

    _validation = {
        "rule": {"required": True},
    }

    _attribute_map = {
        "message": {"key": "message", "type": "str"},
        "rule": {"key": "rule", "type": "str"},
    }

    def __init__(
        self, *, rule: str, message: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword message: Message represents the message displayed when validation fails. The message
         is required if the Rule contains line breaks. The message must not contain line breaks. If
         unset, the message is "failed rule: {Rule}". e.g. "must be a URL with the host matching
         spec.host".
        :paramtype message: str
        :keyword rule: Rule represents the expression which will be evaluated by CEL. ref:
         https://github.com/google/cel-spec The Rule is scoped to the location of the
         x-kubernetes-validations extension in the schema. The ``self`` variable in the CEL expression
         is bound to the scoped value. Example: - Rule scoped to the root of a resource with a status
         subresource: {"rule": "self.status.actual <= self.spec.maxDesired"}
        
         If the Rule is scoped to an object with properties, the accessible properties of the object
         are field selectable via ``self.field`` and field presence can be checked via
         ``has(self.field)``. Null valued fields are treated as absent fields in CEL expressions. If the
         Rule is scoped to an object with additionalProperties (i.e. a map) the value of the map are
         accessible via ``self[mapKey]``\ , map containment can be checked via ``mapKey in self`` and
         all entries of the map are accessible via CEL macros and functions such as ``self.all(...)``.
         If the Rule is scoped to an array, the elements of the array are accessible via ``self[i]`` and
         also by macros and functions. If the Rule is scoped to a scalar, ``self`` is bound to the
         scalar value. Examples: - Rule scoped to a map of objects: {"rule":
         "self.components['Widget'].priority < 10"} - Rule scoped to a list of integers: {"rule":
         "self.values.all(value, value >= 0 && value < 100)"} - Rule scoped to a string value: {"rule":
         "self.startsWith('kube')"}
        
         The ``apiVersion``\ , ``kind``\ , ``metadata.name`` and ``metadata.generateName`` are always
         accessible from the root of the object and from any x-kubernetes-embedded-resource annotated
         objects. No other metadata properties are accessible.
        
         Unknown data preserved in custom resources via x-kubernetes-preserve-unknown-fields is not
         accessible in CEL expressions. This includes: - Unknown field values that are preserved by
         object schemas with x-kubernetes-preserve-unknown-fields. - Object properties where the
         property schema is of an "unknown type". An "unknown type" is recursively defined as:
        
        
         * A schema with no type and x-kubernetes-preserve-unknown-fields set to true
         * An array where the items schema is of an "unknown type"
         * An object where the additionalProperties schema is of an "unknown type"
        
         Only property names of the form ``[a-zA-Z_.-/][a-zA-Z0-9_.-/]*`` are accessible. Accessible
         property names are escaped according to the following rules when accessed in the expression: -
         '\ **' escapes to '**\ underscores\ **' - '.' escapes to '**\ dot\ **' - '-' escapes to '**\
         dash\ **' - '/' escapes to '**\ slash\ **' - Property names that exactly match a CEL RESERVED
         keyword escape to '**\ {keyword}__'. The keywords are:
               "true", "false", "null", "in", "as", "break", "const", "continue", "else", "for",
         "function", "if",
               "import", "let", "loop", "package", "namespace", "return".
         Examples:
        
        
         * Rule accessing a property named "namespace": {"rule": "self.\ **namespace** > 0"}
         * Rule accessing a property named "x-prop": {"rule": "self.x\ **dash**\ prop > 0"}
         * Rule accessing a property named "redact\ **d": {"rule": "self.redact**\ underscores__d > 0"}
        
         Equality on arrays with x-kubernetes-list-type of 'set' or 'map' ignores element order, i.e.
         [1, 2] == [2, 1]. Concatenation on arrays with x-kubernetes-list-type use the semantics of the
         list type:
        
        
         * 'set': ``X + Y`` performs a union where the array positions of all elements in ``X`` are
         preserved and
           non-intersecting elements in ``Y`` are appended, retaining their partial order.
         * 'map': ``X + Y`` performs a merge where the array positions of all keys in ``X`` are
         preserved but the values
           are overwritten by values in ``Y`` when the key sets of ``X`` and ``Y`` intersect. Elements
         in ``Y`` with
           non-intersecting keys are appended, retaining their partial order. Required.
        :paramtype rule: str
        """
        super().__init__(**kwargs)
        self.message = message
        self.rule = rule


class IoK8SApiFlowcontrolV1Beta2FlowDistinguisherMethod(_serialization.Model):
    """FlowDistinguisherMethod specifies the method of a flow distinguisher.

    All required parameters must be populated in order to send to Azure.

    :ivar type: ``type`` is the type of flow distinguisher method The supported types are "ByUser"
     and "ByNamespace". Required. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, type: str, **kwargs: Any) -> None:
        """
        :keyword type: ``type`` is the type of flow distinguisher method The supported types are
         "ByUser" and "ByNamespace". Required. Required.
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.type = type


class IoK8SApiFlowcontrolV1Beta2FlowSchema(_serialization.Model):
    """FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of
    inbound API requests with similar attributes and is identified by a pair of strings: the name
    of the FlowSchema and a "flow distinguisher".

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: ``metadata`` is the standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec: ``spec`` is the specification of the desired behavior of a FlowSchema. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
    :vartype spec: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2FlowSchemaSpec
    :ivar status: ``status`` is the current status of a FlowSchema. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2FlowSchemaStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "IoK8SApiFlowcontrolV1Beta2FlowSchemaSpec",
        },
        "status": {
            "key": "status",
            "type": "IoK8SApiFlowcontrolV1Beta2FlowSchemaStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.IoK8SApiFlowcontrolV1Beta2FlowSchemaSpec"
        ] = None,
        status: Optional[
            "_models.IoK8SApiFlowcontrolV1Beta2FlowSchemaStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: ``metadata`` is the standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec: ``spec`` is the specification of the desired behavior of a FlowSchema. More
         info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
        :paramtype spec: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2FlowSchemaSpec
        :keyword status: ``status`` is the current status of a FlowSchema. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2FlowSchemaStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class IoK8SApiFlowcontrolV1Beta2FlowSchemaCondition(_serialization.Model):
    """FlowSchemaCondition describes conditions for a FlowSchema.

    :ivar last_transition_time: ``lastTransitionTime`` is the last time the condition transitioned
     from one status to another.
    :vartype last_transition_time: any
    :ivar message: ``message`` is a human-readable message indicating details about last
     transition.
    :vartype message: str
    :ivar reason: ``reason`` is a unique, one-word, CamelCase reason for the condition's last
     transition.
    :vartype reason: str
    :ivar status: ``status`` is the status of the condition. Can be True, False, Unknown. Required.
    :vartype status: str
    :ivar type: ``type`` is the type of the condition. Required.
    :vartype type: str
    """

    _attribute_map = {
        "last_transition_time": {"key": "lastTransitionTime", "type": "object"},
        "message": {"key": "message", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        last_transition_time: Optional[Any] = None,
        message: Optional[str] = None,
        reason: Optional[str] = None,
        status: Optional[str] = None,
        type: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword last_transition_time: ``lastTransitionTime`` is the last time the condition
         transitioned from one status to another.
        :paramtype last_transition_time: any
        :keyword message: ``message`` is a human-readable message indicating details about last
         transition.
        :paramtype message: str
        :keyword reason: ``reason`` is a unique, one-word, CamelCase reason for the condition's last
         transition.
        :paramtype reason: str
        :keyword status: ``status`` is the status of the condition. Can be True, False, Unknown.
         Required.
        :paramtype status: str
        :keyword type: ``type`` is the type of the condition. Required.
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.last_transition_time = last_transition_time
        self.message = message
        self.reason = reason
        self.status = status
        self.type = type


class IoK8SApiFlowcontrolV1Beta2FlowSchemaList(_serialization.Model):
    """FlowSchemaList is a list of FlowSchema objects.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: ``items`` is a list of FlowSchemas. Required.
    :vartype items: list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2FlowSchema]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: ``metadata`` is the standard list metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[IoK8SApiFlowcontrolV1Beta2FlowSchema]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.IoK8SApiFlowcontrolV1Beta2FlowSchema"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: ``items`` is a list of FlowSchemas. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2FlowSchema]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: ``metadata`` is the standard list metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class IoK8SApiFlowcontrolV1Beta2FlowSchemaSpec(_serialization.Model):
    """FlowSchemaSpec describes how the FlowSchema's specification looks like.

    All required parameters must be populated in order to send to Azure.

    :ivar distinguisher_method: ``distinguisherMethod`` defines how to compute the flow
     distinguisher for requests that match this schema. ``nil`` specifies that the distinguisher is
     disabled and thus will always be the empty string.
    :vartype distinguisher_method:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2FlowDistinguisherMethod
    :ivar matching_precedence: ``matchingPrecedence`` is used to choose among the FlowSchemas that
     match a given request. The chosen FlowSchema is among those with the numerically lowest (which
     we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be
     ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as
     default.
    :vartype matching_precedence: int
    :ivar priority_level_configuration: ``priorityLevelConfiguration`` should reference a
     PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema
     will be ignored and marked as invalid in its status. Required. Required.
    :vartype priority_level_configuration:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationReference
    :ivar rules: ``rules`` describes which requests will match this flow schema. This FlowSchema
     matches a request if and only if at least one member of rules matches the request. if it is an
     empty slice, there will be no requests matching the FlowSchema.
    :vartype rules:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2PolicyRulesWithSubjects]
    """

    _validation = {
        "priority_level_configuration": {"required": True},
    }

    _attribute_map = {
        "distinguisher_method": {
            "key": "distinguisherMethod",
            "type": "IoK8SApiFlowcontrolV1Beta2FlowDistinguisherMethod",
        },
        "matching_precedence": {"key": "matchingPrecedence", "type": "int"},
        "priority_level_configuration": {
            "key": "priorityLevelConfiguration",
            "type": "IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationReference",
        },
        "rules": {
            "key": "rules",
            "type": "[IoK8SApiFlowcontrolV1Beta2PolicyRulesWithSubjects]",
        },
    }

    def __init__(
        self,
        *,
        priority_level_configuration: "_models.IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationReference",
        distinguisher_method: Optional[
            "_models.IoK8SApiFlowcontrolV1Beta2FlowDistinguisherMethod"
        ] = None,
        matching_precedence: Optional[int] = None,
        rules: Optional[
            List["_models.IoK8SApiFlowcontrolV1Beta2PolicyRulesWithSubjects"]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword distinguisher_method: ``distinguisherMethod`` defines how to compute the flow
         distinguisher for requests that match this schema. ``nil`` specifies that the distinguisher is
         disabled and thus will always be the empty string.
        :paramtype distinguisher_method:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2FlowDistinguisherMethod
        :keyword matching_precedence: ``matchingPrecedence`` is used to choose among the FlowSchemas
         that match a given request. The chosen FlowSchema is among those with the numerically lowest
         (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must
         be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as
         default.
        :paramtype matching_precedence: int
        :keyword priority_level_configuration: ``priorityLevelConfiguration`` should reference a
         PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema
         will be ignored and marked as invalid in its status. Required. Required.
        :paramtype priority_level_configuration:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationReference
        :keyword rules: ``rules`` describes which requests will match this flow schema. This FlowSchema
         matches a request if and only if at least one member of rules matches the request. if it is an
         empty slice, there will be no requests matching the FlowSchema.
        :paramtype rules:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2PolicyRulesWithSubjects]
        """
        super().__init__(**kwargs)
        self.distinguisher_method = distinguisher_method
        self.matching_precedence = matching_precedence
        self.priority_level_configuration = priority_level_configuration
        self.rules = rules


class IoK8SApiFlowcontrolV1Beta2FlowSchemaStatus(_serialization.Model):
    """FlowSchemaStatus represents the current state of a FlowSchema.

    :ivar conditions: ``conditions`` is a list of the current states of FlowSchema.
    :vartype conditions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2FlowSchemaCondition]
    """

    _attribute_map = {
        "conditions": {
            "key": "conditions",
            "type": "[IoK8SApiFlowcontrolV1Beta2FlowSchemaCondition]",
        },
    }

    def __init__(
        self,
        *,
        conditions: Optional[
            List["_models.IoK8SApiFlowcontrolV1Beta2FlowSchemaCondition"]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword conditions: ``conditions`` is a list of the current states of FlowSchema.
        :paramtype conditions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2FlowSchemaCondition]
        """
        super().__init__(**kwargs)
        self.conditions = conditions


class IoK8SApiFlowcontrolV1Beta2GroupSubject(_serialization.Model):
    """GroupSubject holds detailed information for group-kind subject.

    All required parameters must be populated in order to send to Azure.

    :ivar name: name is the user group that matches, or "*" to match all user groups. See
     https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some
     well-known group names. Required. Required.
    :vartype name: str
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: str, **kwargs: Any) -> None:
        """
        :keyword name: name is the user group that matches, or "*" to match all user groups. See
         https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some
         well-known group names. Required. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.name = name


class IoK8SApiFlowcontrolV1Beta2LimitedPriorityLevelConfiguration(
    _serialization.Model
):
    """LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits.
    It addresses two issues:


    * How are requests for this priority level limited?
    * What should be done with requests that exceed the limit?.

    :ivar assured_concurrency_shares: ``assuredConcurrencyShares`` (ACS) configures the execution
     limit, which is a limit on the number of requests of this priority level that may be exeucting
     at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is
     divided among the concurrency-controlled priority levels in proportion to their assured
     concurrency shares. This produces the assured concurrency value (ACV) --- the number of
     requests that may be executing at a time --- for each such priority level:

     .. code-block::

                ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )


     bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other
     PL). This field has a default value of 30.
    :vartype assured_concurrency_shares: int
    :ivar limit_response: ``limitResponse`` indicates what to do with requests that can not be
     executed right now.
    :vartype limit_response:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2LimitResponse
    """

    _attribute_map = {
        "assured_concurrency_shares": {
            "key": "assuredConcurrencyShares",
            "type": "int",
        },
        "limit_response": {
            "key": "limitResponse",
            "type": "IoK8SApiFlowcontrolV1Beta2LimitResponse",
        },
    }

    def __init__(
        self,
        *,
        assured_concurrency_shares: Optional[int] = None,
        limit_response: Optional[
            "_models.IoK8SApiFlowcontrolV1Beta2LimitResponse"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword assured_concurrency_shares: ``assuredConcurrencyShares`` (ACS) configures the
         execution limit, which is a limit on the number of requests of this priority level that may be
         exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL)
         is divided among the concurrency-controlled priority levels in proportion to their assured
         concurrency shares. This produces the assured concurrency value (ACV) --- the number of
         requests that may be executing at a time --- for each such priority level:

         .. code-block::

                    ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )


         bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other
         PL). This field has a default value of 30.
        :paramtype assured_concurrency_shares: int
        :keyword limit_response: ``limitResponse`` indicates what to do with requests that can not be
         executed right now.
        :paramtype limit_response:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2LimitResponse
        """
        super().__init__(**kwargs)
        self.assured_concurrency_shares = assured_concurrency_shares
        self.limit_response = limit_response


class IoK8SApiFlowcontrolV1Beta2LimitResponse(_serialization.Model):
    """LimitResponse defines how to handle requests that can not be executed right now.

    All required parameters must be populated in order to send to Azure.

    :ivar queuing: ``queuing`` holds the configuration parameters for queuing. This field may be
     non-empty only if ``type`` is ``"Queue"``.
    :vartype queuing:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2QueuingConfiguration
    :ivar type: ``type`` is "Queue" or "Reject". "Queue" means that requests that can not be
     executed upon arrival are held in a queue until they can be executed or a queuing limit is
     reached. "Reject" means that requests that can not be executed upon arrival are rejected.
     Required. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "queuing": {
            "key": "queuing",
            "type": "IoK8SApiFlowcontrolV1Beta2QueuingConfiguration",
        },
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        type: str,
        queuing: Optional[
            "_models.IoK8SApiFlowcontrolV1Beta2QueuingConfiguration"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword queuing: ``queuing`` holds the configuration parameters for queuing. This field may be
         non-empty only if ``type`` is ``"Queue"``.
        :paramtype queuing:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2QueuingConfiguration
        :keyword type: ``type`` is "Queue" or "Reject". "Queue" means that requests that can not be
         executed upon arrival are held in a queue until they can be executed or a queuing limit is
         reached. "Reject" means that requests that can not be executed upon arrival are rejected.
         Required. Required.
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.queuing = queuing
        self.type = type


class IoK8SApiFlowcontrolV1Beta2NonResourcePolicyRule(_serialization.Model):
    """NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb
    and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both
    (a) at least one member of verbs matches the request and (b) at least one member of
    nonResourceURLs matches the request.

    All required parameters must be populated in order to send to Azure.

    :ivar non_resource_ur_ls: ``nonResourceURLs`` is a set of url prefixes that a user should have
     access to and may not be empty. For example:


     * "/healthz" is legal
     * "/hea*" is illegal
     * "/hea" is legal but matches nothing
     * "/hea/*" also matches nothing
     * "/healthz/\ *" matches all per-component health checks.
       "*\ " matches all non-resource urls. if it is present, it must be the only entry. Required.
     Required.
    :vartype non_resource_ur_ls: list[str]
    :ivar verbs: ``verbs`` is a list of matching verbs and may not be empty. "*" matches all verbs.
     If it is present, it must be the only entry. Required. Required.
    :vartype verbs: list[str]
    """

    _validation = {
        "non_resource_ur_ls": {"required": True},
        "verbs": {"required": True},
    }

    _attribute_map = {
        "non_resource_ur_ls": {"key": "nonResourceURLs", "type": "[str]"},
        "verbs": {"key": "verbs", "type": "[str]"},
    }

    def __init__(
        self, *, non_resource_ur_ls: List[str], verbs: List[str], **kwargs: Any
    ) -> None:
        """
        :keyword non_resource_ur_ls: ``nonResourceURLs`` is a set of url prefixes that a user should
         have access to and may not be empty. For example:


         * "/healthz" is legal
         * "/hea*" is illegal
         * "/hea" is legal but matches nothing
         * "/hea/*" also matches nothing
         * "/healthz/\ *" matches all per-component health checks.
           "*\ " matches all non-resource urls. if it is present, it must be the only entry. Required.
         Required.
        :paramtype non_resource_ur_ls: list[str]
        :keyword verbs: ``verbs`` is a list of matching verbs and may not be empty. "*" matches all
         verbs. If it is present, it must be the only entry. Required. Required.
        :paramtype verbs: list[str]
        """
        super().__init__(**kwargs)
        self.non_resource_ur_ls = non_resource_ur_ls
        self.verbs = verbs


class IoK8SApiFlowcontrolV1Beta2PolicyRulesWithSubjects(_serialization.Model):
    """PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test
    considers the subject making the request, the verb being requested, and the resource to be
    acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one
    member of subjects matches the request and (b) at least one member of resourceRules or
    nonResourceRules matches the request.

    All required parameters must be populated in order to send to Azure.

    :ivar non_resource_rules: ``nonResourceRules`` is a list of NonResourcePolicyRules that
     identify matching requests according to their verb and the target non-resource URL.
    :vartype non_resource_rules:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2NonResourcePolicyRule]
    :ivar resource_rules: ``resourceRules`` is a slice of ResourcePolicyRules that identify
     matching requests according to their verb and the target resource. At least one of
     ``resourceRules`` and ``nonResourceRules`` has to be non-empty.
    :vartype resource_rules:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2ResourcePolicyRule]
    :ivar subjects: subjects is the list of normal user, serviceaccount, or group that this rule
     cares about. There must be at least one member in this slice. A slice that includes both the
     system:authenticated and system:unauthenticated user groups matches every request. Required.
     Required.
    :vartype subjects: list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2Subject]
    """

    _validation = {
        "subjects": {"required": True},
    }

    _attribute_map = {
        "non_resource_rules": {
            "key": "nonResourceRules",
            "type": "[IoK8SApiFlowcontrolV1Beta2NonResourcePolicyRule]",
        },
        "resource_rules": {
            "key": "resourceRules",
            "type": "[IoK8SApiFlowcontrolV1Beta2ResourcePolicyRule]",
        },
        "subjects": {
            "key": "subjects",
            "type": "[IoK8SApiFlowcontrolV1Beta2Subject]",
        },
    }

    def __init__(
        self,
        *,
        subjects: List["_models.IoK8SApiFlowcontrolV1Beta2Subject"],
        non_resource_rules: Optional[
            List["_models.IoK8SApiFlowcontrolV1Beta2NonResourcePolicyRule"]
        ] = None,
        resource_rules: Optional[
            List["_models.IoK8SApiFlowcontrolV1Beta2ResourcePolicyRule"]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword non_resource_rules: ``nonResourceRules`` is a list of NonResourcePolicyRules that
         identify matching requests according to their verb and the target non-resource URL.
        :paramtype non_resource_rules:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2NonResourcePolicyRule]
        :keyword resource_rules: ``resourceRules`` is a slice of ResourcePolicyRules that identify
         matching requests according to their verb and the target resource. At least one of
         ``resourceRules`` and ``nonResourceRules`` has to be non-empty.
        :paramtype resource_rules:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2ResourcePolicyRule]
        :keyword subjects: subjects is the list of normal user, serviceaccount, or group that this rule
         cares about. There must be at least one member in this slice. A slice that includes both the
         system:authenticated and system:unauthenticated user groups matches every request. Required.
         Required.
        :paramtype subjects:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2Subject]
        """
        super().__init__(**kwargs)
        self.non_resource_rules = non_resource_rules
        self.resource_rules = resource_rules
        self.subjects = subjects


class IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration(
    _serialization.Model
):
    """PriorityLevelConfiguration represents the configuration of a priority level.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: ``metadata`` is the standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar spec: ``spec`` is the specification of the desired behavior of a "request-priority". More
     info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
    :vartype spec:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationSpec
    :ivar status: ``status`` is the current status of a "request-priority". More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
    :vartype status:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationStatus
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "spec": {
            "key": "spec",
            "type": "IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationSpec",
        },
        "status": {
            "key": "status",
            "type": "IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationStatus",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        spec: Optional[
            "_models.IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationSpec"
        ] = None,
        status: Optional[
            "_models.IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationStatus"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: ``metadata`` is the standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword spec: ``spec`` is the specification of the desired behavior of a "request-priority".
         More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
        :paramtype spec:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationSpec
        :keyword status: ``status`` is the current status of a "request-priority". More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
        :paramtype status:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationStatus
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.kind = kind
        self.metadata = metadata
        self.spec = spec
        self.status = status


class IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationCondition(
    _serialization.Model
):
    """PriorityLevelConfigurationCondition defines the condition of priority level.

    :ivar last_transition_time: ``lastTransitionTime`` is the last time the condition transitioned
     from one status to another.
    :vartype last_transition_time: any
    :ivar message: ``message`` is a human-readable message indicating details about last
     transition.
    :vartype message: str
    :ivar reason: ``reason`` is a unique, one-word, CamelCase reason for the condition's last
     transition.
    :vartype reason: str
    :ivar status: ``status`` is the status of the condition. Can be True, False, Unknown. Required.
    :vartype status: str
    :ivar type: ``type`` is the type of the condition. Required.
    :vartype type: str
    """

    _attribute_map = {
        "last_transition_time": {"key": "lastTransitionTime", "type": "object"},
        "message": {"key": "message", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        last_transition_time: Optional[Any] = None,
        message: Optional[str] = None,
        reason: Optional[str] = None,
        status: Optional[str] = None,
        type: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword last_transition_time: ``lastTransitionTime`` is the last time the condition
         transitioned from one status to another.
        :paramtype last_transition_time: any
        :keyword message: ``message`` is a human-readable message indicating details about last
         transition.
        :paramtype message: str
        :keyword reason: ``reason`` is a unique, one-word, CamelCase reason for the condition's last
         transition.
        :paramtype reason: str
        :keyword status: ``status`` is the status of the condition. Can be True, False, Unknown.
         Required.
        :paramtype status: str
        :keyword type: ``type`` is the type of the condition. Required.
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.last_transition_time = last_transition_time
        self.message = message
        self.reason = reason
        self.status = status
        self.type = type


class IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationList(
    _serialization.Model
):
    """PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: ``items`` is a list of request-priorities. Required.
    :vartype items:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: ``metadata`` is the standard object's metadata. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List[
            "_models.IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration"
        ],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: ``items`` is a list of request-priorities. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: ``metadata`` is the standard object's metadata. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata


class IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationReference(
    _serialization.Model
):
    """PriorityLevelConfigurationReference contains information that points to the "request-priority"
    being used.

    All required parameters must be populated in order to send to Azure.

    :ivar name: ``name`` is the name of the priority level configuration being referenced Required.
     Required.
    :vartype name: str
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: str, **kwargs: Any) -> None:
        """
        :keyword name: ``name`` is the name of the priority level configuration being referenced
         Required. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.name = name


class IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationSpec(
    _serialization.Model
):
    """PriorityLevelConfigurationSpec specifies the configuration of a priority level.

    All required parameters must be populated in order to send to Azure.

    :ivar limited: ``limited`` specifies how requests are handled for a Limited priority level.
     This field must be non-empty if and only if ``type`` is ``"Limited"``.
    :vartype limited:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2LimitedPriorityLevelConfiguration
    :ivar type: ``type`` indicates whether this priority level is subject to limitation on request
     execution.  A value of ``"Exempt"`` means that requests of this priority level are not subject
     to a limit (and thus are never queued) and do not detract from the capacity made available to
     other priority levels.  A value of ``"Limited"`` means that (a) requests of this priority level
     *are* subject to limits and (b) some of the server's limited capacity is made available
     exclusively to this priority level. Required. Required.
    :vartype type: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "limited": {
            "key": "limited",
            "type": "IoK8SApiFlowcontrolV1Beta2LimitedPriorityLevelConfiguration",
        },
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        type: str,
        limited: Optional[
            "_models.IoK8SApiFlowcontrolV1Beta2LimitedPriorityLevelConfiguration"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword limited: ``limited`` specifies how requests are handled for a Limited priority level.
         This field must be non-empty if and only if ``type`` is ``"Limited"``.
        :paramtype limited:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2LimitedPriorityLevelConfiguration
        :keyword type: ``type`` indicates whether this priority level is subject to limitation on
         request execution.  A value of ``"Exempt"`` means that requests of this priority level are not
         subject to a limit (and thus are never queued) and do not detract from the capacity made
         available to other priority levels.  A value of ``"Limited"`` means that (a) requests of this
         priority level *are* subject to limits and (b) some of the server's limited capacity is made
         available exclusively to this priority level. Required. Required.
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.limited = limited
        self.type = type


class IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationStatus(
    _serialization.Model
):
    """PriorityLevelConfigurationStatus represents the current state of a "request-priority".

    :ivar conditions: ``conditions`` is the current state of "request-priority".
    :vartype conditions:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationCondition]
    """

    _attribute_map = {
        "conditions": {
            "key": "conditions",
            "type": "[IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationCondition]",
        },
    }

    def __init__(
        self,
        *,
        conditions: Optional[
            List[
                "_models.IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationCondition"
            ]
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword conditions: ``conditions`` is the current state of "request-priority".
        :paramtype conditions:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationCondition]
        """
        super().__init__(**kwargs)
        self.conditions = conditions


class IoK8SApiFlowcontrolV1Beta2QueuingConfiguration(_serialization.Model):
    """QueuingConfiguration holds the configuration parameters for queuing.

    :ivar hand_size: ``handSize`` is a small positive number that configures the shuffle sharding
     of requests into queues.  When enqueuing a request at this priority level the request's flow
     identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues
     and deal a hand of the size specified here.  The request is put into one of the shortest queues
     in that hand. ``handSize`` must be no larger than ``queues``\ , and should be significantly
     smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing
     documentation for more extensive guidance on setting this field.  This field has a default
     value of 8.
    :vartype hand_size: int
    :ivar queue_length_limit: ``queueLengthLimit`` is the maximum number of requests allowed to be
     waiting in a given queue of this priority level at a time; excess requests are rejected.  This
     value must be positive.  If not specified, it will be defaulted to 50.
    :vartype queue_length_limit: int
    :ivar queues: ``queues`` is the number of queues for this priority level. The queues exist
     independently at each apiserver. The value must be positive.  Setting it to 1 effectively
     precludes shufflesharding and thus makes the distinguisher method of associated flow schemas
     irrelevant.  This field has a default value of 64.
    :vartype queues: int
    """

    _attribute_map = {
        "hand_size": {"key": "handSize", "type": "int"},
        "queue_length_limit": {"key": "queueLengthLimit", "type": "int"},
        "queues": {"key": "queues", "type": "int"},
    }

    def __init__(
        self,
        *,
        hand_size: Optional[int] = None,
        queue_length_limit: Optional[int] = None,
        queues: Optional[int] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword hand_size: ``handSize`` is a small positive number that configures the shuffle
         sharding of requests into queues.  When enqueuing a request at this priority level the
         request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the
         list of queues and deal a hand of the size specified here.  The request is put into one of the
         shortest queues in that hand. ``handSize`` must be no larger than ``queues``\ , and should be
         significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the
         user-facing documentation for more extensive guidance on setting this field.  This field has a
         default value of 8.
        :paramtype hand_size: int
        :keyword queue_length_limit: ``queueLengthLimit`` is the maximum number of requests allowed to
         be waiting in a given queue of this priority level at a time; excess requests are rejected.
         This value must be positive.  If not specified, it will be defaulted to 50.
        :paramtype queue_length_limit: int
        :keyword queues: ``queues`` is the number of queues for this priority level. The queues exist
         independently at each apiserver. The value must be positive.  Setting it to 1 effectively
         precludes shufflesharding and thus makes the distinguisher method of associated flow schemas
         irrelevant.  This field has a default value of 64.
        :paramtype queues: int
        """
        super().__init__(**kwargs)
        self.hand_size = hand_size
        self.queue_length_limit = queue_length_limit
        self.queues = queues


class IoK8SApiFlowcontrolV1Beta2ResourcePolicyRule(_serialization.Model):
    """ResourcePolicyRule is a predicate that matches some resource requests, testing the request's
    verb and the target resource. A ResourcePolicyRule matches a resource request if and only if:
    (a) at least one member of verbs matches the request, (b) at least one member of apiGroups
    matches the request, (c) at least one member of resources matches the request, and (d) either
    (d1) the request does not specify a namespace (i.e., ``Namespace==""``\ ) and clusterScope is
    true or (d2) the request specifies a namespace and least one member of namespaces matches the
    request's namespace.

    All required parameters must be populated in order to send to Azure.

    :ivar api_groups: ``apiGroups`` is a list of matching API groups and may not be empty. "*"
     matches all API groups and, if present, must be the only entry. Required. Required.
    :vartype api_groups: list[str]
    :ivar cluster_scope: ``clusterScope`` indicates whether to match requests that do not specify a
     namespace (which happens either because the resource is not namespaced or the request targets
     all namespaces). If this field is omitted or false then the ``namespaces`` field must contain a
     non-empty list.
    :vartype cluster_scope: bool
    :ivar namespaces: ``namespaces`` is a list of target namespaces that restricts matches.  A
     request that specifies a target namespace matches only if either (a) this list contains that
     target namespace or (b) this list contains "\ *".  Note that "*\ " matches any specified
     namespace but does not match a request that *does not specify* a namespace (see the
     ``clusterScope`` field for that). This list may be empty, but only if ``clusterScope`` is true.
    :vartype namespaces: list[str]
    :ivar resources: ``resources`` is a list of matching resources (i.e., lowercase and plural)
     with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not
     be empty. "*" matches all resources and, if present, must be the only entry. Required.
     Required.
    :vartype resources: list[str]
    :ivar verbs: ``verbs`` is a list of matching verbs and may not be empty. "*" matches all verbs
     and, if present, must be the only entry. Required. Required.
    :vartype verbs: list[str]
    """

    _validation = {
        "api_groups": {"required": True},
        "resources": {"required": True},
        "verbs": {"required": True},
    }

    _attribute_map = {
        "api_groups": {"key": "apiGroups", "type": "[str]"},
        "cluster_scope": {"key": "clusterScope", "type": "bool"},
        "namespaces": {"key": "namespaces", "type": "[str]"},
        "resources": {"key": "resources", "type": "[str]"},
        "verbs": {"key": "verbs", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        api_groups: List[str],
        resources: List[str],
        verbs: List[str],
        cluster_scope: Optional[bool] = None,
        namespaces: Optional[List[str]] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_groups: ``apiGroups`` is a list of matching API groups and may not be empty. "*"
         matches all API groups and, if present, must be the only entry. Required. Required.
        :paramtype api_groups: list[str]
        :keyword cluster_scope: ``clusterScope`` indicates whether to match requests that do not
         specify a namespace (which happens either because the resource is not namespaced or the request
         targets all namespaces). If this field is omitted or false then the ``namespaces`` field must
         contain a non-empty list.
        :paramtype cluster_scope: bool
        :keyword namespaces: ``namespaces`` is a list of target namespaces that restricts matches.  A
         request that specifies a target namespace matches only if either (a) this list contains that
         target namespace or (b) this list contains "\ *".  Note that "*\ " matches any specified
         namespace but does not match a request that *does not specify* a namespace (see the
         ``clusterScope`` field for that). This list may be empty, but only if ``clusterScope`` is true.
        :paramtype namespaces: list[str]
        :keyword resources: ``resources`` is a list of matching resources (i.e., lowercase and plural)
         with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not
         be empty. "*" matches all resources and, if present, must be the only entry. Required.
         Required.
        :paramtype resources: list[str]
        :keyword verbs: ``verbs`` is a list of matching verbs and may not be empty. "*" matches all
         verbs and, if present, must be the only entry. Required. Required.
        :paramtype verbs: list[str]
        """
        super().__init__(**kwargs)
        self.api_groups = api_groups
        self.cluster_scope = cluster_scope
        self.namespaces = namespaces
        self.resources = resources
        self.verbs = verbs


class IoK8SApiFlowcontrolV1Beta2ServiceAccountSubject(_serialization.Model):
    """ServiceAccountSubject holds detailed information for service-account-kind subject.

    All required parameters must be populated in order to send to Azure.

    :ivar name: ``name`` is the name of matching ServiceAccount objects, or "*" to match regardless
     of name. Required. Required.
    :vartype name: str
    :ivar namespace: ``namespace`` is the namespace of matching ServiceAccount objects. Required.
     Required.
    :vartype namespace: str
    """

    _validation = {
        "name": {"required": True},
        "namespace": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
    }

    def __init__(self, *, name: str, namespace: str, **kwargs: Any) -> None:
        """
        :keyword name: ``name`` is the name of matching ServiceAccount objects, or "*" to match
         regardless of name. Required. Required.
        :paramtype name: str
        :keyword namespace: ``namespace`` is the namespace of matching ServiceAccount objects.
         Required. Required.
        :paramtype namespace: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.namespace = namespace


class IoK8SApiFlowcontrolV1Beta2Subject(_serialization.Model):
    """Subject matches the originator of a request, as identified by the request authentication
    system. There are three ways of matching an originator; by user, group, or service account.

    All required parameters must be populated in order to send to Azure.

    :ivar group: ``group`` matches based on user group name.
    :vartype group: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2GroupSubject
    :ivar kind: ``kind`` indicates which one of the other fields is non-empty. Required. Required.
    :vartype kind: str
    :ivar service_account: ``serviceAccount`` matches ServiceAccounts.
    :vartype service_account:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2ServiceAccountSubject
    :ivar user: ``user`` matches based on username.
    :vartype user: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2UserSubject
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "group": {
            "key": "group",
            "type": "IoK8SApiFlowcontrolV1Beta2GroupSubject",
        },
        "kind": {"key": "kind", "type": "str"},
        "service_account": {
            "key": "serviceAccount",
            "type": "IoK8SApiFlowcontrolV1Beta2ServiceAccountSubject",
        },
        "user": {
            "key": "user",
            "type": "IoK8SApiFlowcontrolV1Beta2UserSubject",
        },
    }

    def __init__(
        self,
        *,
        kind: str,
        group: Optional[
            "_models.IoK8SApiFlowcontrolV1Beta2GroupSubject"
        ] = None,
        service_account: Optional[
            "_models.IoK8SApiFlowcontrolV1Beta2ServiceAccountSubject"
        ] = None,
        user: Optional["_models.IoK8SApiFlowcontrolV1Beta2UserSubject"] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword group: ``group`` matches based on user group name.
        :paramtype group: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2GroupSubject
        :keyword kind: ``kind`` indicates which one of the other fields is non-empty. Required.
         Required.
        :paramtype kind: str
        :keyword service_account: ``serviceAccount`` matches ServiceAccounts.
        :paramtype service_account:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2ServiceAccountSubject
        :keyword user: ``user`` matches based on username.
        :paramtype user: ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiFlowcontrolV1Beta2UserSubject
        """
        super().__init__(**kwargs)
        self.group = group
        self.kind = kind
        self.service_account = service_account
        self.user = user


class IoK8SApiFlowcontrolV1Beta2UserSubject(_serialization.Model):
    """UserSubject holds detailed information for user-kind subject.

    All required parameters must be populated in order to send to Azure.

    :ivar name: ``name`` is the username that matches, or "*" to match all usernames. Required.
     Required.
    :vartype name: str
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: str, **kwargs: Any) -> None:
        """
        :keyword name: ``name`` is the username that matches, or "*" to match all usernames. Required.
         Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.name = name


class IoK8SApimachineryPkgApisMetaV1ObjectMeta(
    _serialization.Model
):  # pylint: disable=too-many-instance-attributes
    """ObjectMeta is metadata that all persisted resources must have, which includes all objects users
    must create.

    :ivar annotations: Annotations is an unstructured key value map stored with a resource that may
     be set by external tools to store and retrieve arbitrary metadata. They are not queryable and
     should be preserved when modifying objects. More info:
     http://kubernetes.io/docs/user-guide/annotations.
    :vartype annotations: dict[str, str]
    :ivar creation_timestamp: CreationTimestamp is a timestamp representing the server time when
     this object was created. It is not guaranteed to be set in happens-before order across separate
     operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

     Populated by the system. Read-only. Null for lists. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype creation_timestamp: any
    :ivar deletion_grace_period_seconds: Number of seconds allowed for this object to gracefully
     terminate before it will be removed from the system. Only set when deletionTimestamp is also
     set. May only be shortened. Read-only.
    :vartype deletion_grace_period_seconds: int
    :ivar deletion_timestamp: DeletionTimestamp is RFC 3339 date and time at which this resource
     will be deleted. This field is set by the server when a graceful deletion is requested by the
     user, and is not directly settable by a client. The resource is expected to be deleted (no
     longer visible from resource lists, and not reachable by name) after the time in this field,
     once the finalizers list is empty. As long as the finalizers list contains items, deletion is
     blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into
     the future, although it may be shortened or the resource may be deleted prior to this time. For
     example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by
     sending a graceful termination signal to the containers in the pod. After that 30 seconds, the
     Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
     remove the pod from the API. In the presence of network partitions, this object may still exist
     after this timestamp, until an administrator or automated process can determine the resource is
     fully terminated. If not set, graceful deletion of the object has not been requested.

     Populated by the system when a graceful deletion is requested. Read-only. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype deletion_timestamp: any
    :ivar finalizers: Must be empty before the object is deleted from the registry. Each entry is
     an identifier for the responsible component that will remove the entry from the list. If the
     deletionTimestamp of the object is non-nil, entries in this list can only be removed.
     Finalizers may be processed and removed in any order.  Order is NOT enforced because it
     introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with
     permission can reorder it. If the finalizer list is processed in order, then this can lead to a
     situation in which the component responsible for the first finalizer in the list is waiting for
     a signal (field value, external system, or other) produced by a component responsible for a
     finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are
     free to order amongst themselves and are not vulnerable to ordering changes in the list.
    :vartype finalizers: list[str]
    :ivar generate_name: GenerateName is an optional prefix, used by the server, to generate a
     unique name ONLY IF the Name field has not been provided. If this field is used, the name
     returned to the client will be different than the name passed. This value will also be combined
     with a unique suffix. The provided value has the same validation rules as the Name field, and
     may be truncated by the length of the suffix required to make the value unique on the server.

     If this field is specified and the generated name exists, the server will return a 409.

     Applied only if Name is not specified. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency.
    :vartype generate_name: str
    :ivar generation: A sequence number representing a specific generation of the desired state.
     Populated by the system. Read-only.
    :vartype generation: int
    :ivar labels: Map of string keys and values that can be used to organize and categorize (scope
     and select) objects. May match selectors of replication controllers and services. More info:
     http://kubernetes.io/docs/user-guide/labels.
    :vartype labels: dict[str, str]
    :ivar managed_fields: ManagedFields maps workflow-id and version to the set of fields that are
     managed by that workflow. This is mostly for internal housekeeping, and users typically
     shouldn't need to set or understand this field. A workflow can be the user's name, a
     controller's name, or the name of a specific apply path like "ci-cd". The set of fields is
     always in the version that the workflow used when modifying the object.
    :vartype managed_fields: list[any]
    :ivar name: Name must be unique within a namespace. Is required when creating resources,
     although some resources may allow a client to request the generation of an appropriate name
     automatically. Name is primarily intended for creation idempotence and configuration
     definition. Cannot be updated. More info:
     http://kubernetes.io/docs/user-guide/identifiers#names.
    :vartype name: str
    :ivar namespace: Namespace defines the space within which each name must be unique. An empty
     namespace is equivalent to the "default" namespace, but "default" is the canonical
     representation. Not all objects are required to be scoped to a namespace - the value of this
     field for those objects will be empty.

     Must be a DNS_LABEL. Cannot be updated. More info:
     http://kubernetes.io/docs/user-guide/namespaces.
    :vartype namespace: str
    :ivar owner_references: List of objects depended by this object. If ALL objects in the list
     have been deleted, this object will be garbage collected. If this object is managed by a
     controller, then an entry in this list will point to this controller, with the controller field
     set to true. There cannot be more than one managing controller.
    :vartype owner_references:
     list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1OwnerReference]
    :ivar resource_version: An opaque value that represents the internal version of this object
     that can be used by clients to determine when objects have changed. May be used for optimistic
     concurrency, change detection, and the watch operation on a resource or set of resources.
     Clients must treat these values as opaque and passed unmodified back to the server. They may
     only be valid for a particular resource or set of resources.

     Populated by the system. Read-only. Value must be treated as opaque by clients and . More
     info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency.
    :vartype resource_version: str
    :ivar self_link: Deprecated: selfLink is a legacy read-only field that is no longer populated
     by the system.
    :vartype self_link: str
    :ivar uid: UID is the unique in time and space value for this object. It is typically generated
     by the server on successful creation of a resource and is not allowed to change on PUT
     operations.

     Populated by the system. Read-only. More info:
     http://kubernetes.io/docs/user-guide/identifiers#uids.
    :vartype uid: str
    """

    _attribute_map = {
        "annotations": {"key": "annotations", "type": "{str}"},
        "creation_timestamp": {"key": "creationTimestamp", "type": "object"},
        "deletion_grace_period_seconds": {
            "key": "deletionGracePeriodSeconds",
            "type": "int",
        },
        "deletion_timestamp": {"key": "deletionTimestamp", "type": "object"},
        "finalizers": {"key": "finalizers", "type": "[str]"},
        "generate_name": {"key": "generateName", "type": "str"},
        "generation": {"key": "generation", "type": "int"},
        "labels": {"key": "labels", "type": "{str}"},
        "managed_fields": {"key": "managedFields", "type": "[object]"},
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
        "owner_references": {
            "key": "ownerReferences",
            "type": "[IoK8SApimachineryPkgApisMetaV1OwnerReference]",
        },
        "resource_version": {"key": "resourceVersion", "type": "str"},
        "self_link": {"key": "selfLink", "type": "str"},
        "uid": {"key": "uid", "type": "str"},
    }

    def __init__(
        self,
        *,
        annotations: Optional[Dict[str, str]] = None,
        creation_timestamp: Optional[Any] = None,
        deletion_grace_period_seconds: Optional[int] = None,
        deletion_timestamp: Optional[Any] = None,
        finalizers: Optional[List[str]] = None,
        generate_name: Optional[str] = None,
        generation: Optional[int] = None,
        labels: Optional[Dict[str, str]] = None,
        managed_fields: Optional[List[Any]] = None,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        owner_references: Optional[
            List["_models.IoK8SApimachineryPkgApisMetaV1OwnerReference"]
        ] = None,
        resource_version: Optional[str] = None,
        self_link: Optional[str] = None,
        uid: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword annotations: Annotations is an unstructured key value map stored with a resource that
         may be set by external tools to store and retrieve arbitrary metadata. They are not queryable
         and should be preserved when modifying objects. More info:
         http://kubernetes.io/docs/user-guide/annotations.
        :paramtype annotations: dict[str, str]
        :keyword creation_timestamp: CreationTimestamp is a timestamp representing the server time when
         this object was created. It is not guaranteed to be set in happens-before order across separate
         operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

         Populated by the system. Read-only. Null for lists. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype creation_timestamp: any
        :keyword deletion_grace_period_seconds: Number of seconds allowed for this object to gracefully
         terminate before it will be removed from the system. Only set when deletionTimestamp is also
         set. May only be shortened. Read-only.
        :paramtype deletion_grace_period_seconds: int
        :keyword deletion_timestamp: DeletionTimestamp is RFC 3339 date and time at which this resource
         will be deleted. This field is set by the server when a graceful deletion is requested by the
         user, and is not directly settable by a client. The resource is expected to be deleted (no
         longer visible from resource lists, and not reachable by name) after the time in this field,
         once the finalizers list is empty. As long as the finalizers list contains items, deletion is
         blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into
         the future, although it may be shortened or the resource may be deleted prior to this time. For
         example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by
         sending a graceful termination signal to the containers in the pod. After that 30 seconds, the
         Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
         remove the pod from the API. In the presence of network partitions, this object may still exist
         after this timestamp, until an administrator or automated process can determine the resource is
         fully terminated. If not set, graceful deletion of the object has not been requested.

         Populated by the system when a graceful deletion is requested. Read-only. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype deletion_timestamp: any
        :keyword finalizers: Must be empty before the object is deleted from the registry. Each entry
         is an identifier for the responsible component that will remove the entry from the list. If the
         deletionTimestamp of the object is non-nil, entries in this list can only be removed.
         Finalizers may be processed and removed in any order.  Order is NOT enforced because it
         introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with
         permission can reorder it. If the finalizer list is processed in order, then this can lead to a
         situation in which the component responsible for the first finalizer in the list is waiting for
         a signal (field value, external system, or other) produced by a component responsible for a
         finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are
         free to order amongst themselves and are not vulnerable to ordering changes in the list.
        :paramtype finalizers: list[str]
        :keyword generate_name: GenerateName is an optional prefix, used by the server, to generate a
         unique name ONLY IF the Name field has not been provided. If this field is used, the name
         returned to the client will be different than the name passed. This value will also be combined
         with a unique suffix. The provided value has the same validation rules as the Name field, and
         may be truncated by the length of the suffix required to make the value unique on the server.

         If this field is specified and the generated name exists, the server will return a 409.

         Applied only if Name is not specified. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency.
        :paramtype generate_name: str
        :keyword generation: A sequence number representing a specific generation of the desired state.
         Populated by the system. Read-only.
        :paramtype generation: int
        :keyword labels: Map of string keys and values that can be used to organize and categorize
         (scope and select) objects. May match selectors of replication controllers and services. More
         info: http://kubernetes.io/docs/user-guide/labels.
        :paramtype labels: dict[str, str]
        :keyword managed_fields: ManagedFields maps workflow-id and version to the set of fields that
         are managed by that workflow. This is mostly for internal housekeeping, and users typically
         shouldn't need to set or understand this field. A workflow can be the user's name, a
         controller's name, or the name of a specific apply path like "ci-cd". The set of fields is
         always in the version that the workflow used when modifying the object.
        :paramtype managed_fields: list[any]
        :keyword name: Name must be unique within a namespace. Is required when creating resources,
         although some resources may allow a client to request the generation of an appropriate name
         automatically. Name is primarily intended for creation idempotence and configuration
         definition. Cannot be updated. More info:
         http://kubernetes.io/docs/user-guide/identifiers#names.
        :paramtype name: str
        :keyword namespace: Namespace defines the space within which each name must be unique. An empty
         namespace is equivalent to the "default" namespace, but "default" is the canonical
         representation. Not all objects are required to be scoped to a namespace - the value of this
         field for those objects will be empty.

         Must be a DNS_LABEL. Cannot be updated. More info:
         http://kubernetes.io/docs/user-guide/namespaces.
        :paramtype namespace: str
        :keyword owner_references: List of objects depended by this object. If ALL objects in the list
         have been deleted, this object will be garbage collected. If this object is managed by a
         controller, then an entry in this list will point to this controller, with the controller field
         set to true. There cannot be more than one managing controller.
        :paramtype owner_references:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1OwnerReference]
        :keyword resource_version: An opaque value that represents the internal version of this object
         that can be used by clients to determine when objects have changed. May be used for optimistic
         concurrency, change detection, and the watch operation on a resource or set of resources.
         Clients must treat these values as opaque and passed unmodified back to the server. They may
         only be valid for a particular resource or set of resources.

         Populated by the system. Read-only. Value must be treated as opaque by clients and . More
         info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency.
        :paramtype resource_version: str
        :keyword self_link: Deprecated: selfLink is a legacy read-only field that is no longer
         populated by the system.
        :paramtype self_link: str
        :keyword uid: UID is the unique in time and space value for this object. It is typically
         generated by the server on successful creation of a resource and is not allowed to change on
         PUT operations.

         Populated by the system. Read-only. More info:
         http://kubernetes.io/docs/user-guide/identifiers#uids.
        :paramtype uid: str
        """
        super().__init__(**kwargs)
        self.annotations = annotations
        self.creation_timestamp = creation_timestamp
        self.deletion_grace_period_seconds = deletion_grace_period_seconds
        self.deletion_timestamp = deletion_timestamp
        self.finalizers = finalizers
        self.generate_name = generate_name
        self.generation = generation
        self.labels = labels
        self.managed_fields = managed_fields
        self.name = name
        self.namespace = namespace
        self.owner_references = owner_references
        self.resource_version = resource_version
        self.self_link = self_link
        self.uid = uid


class IoK8SApimachineryPkgApisMetaV1OwnerReference(_serialization.Model):
    """OwnerReference contains enough information to let you identify an owning object. An owning
    object must be in the same namespace as the dependent, or be cluster-scoped, so there is no
    namespace field.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: API version of the referent. Required.
    :vartype api_version: str
    :ivar block_owner_deletion: If true, AND if the owner has the "foregroundDeletion" finalizer,
     then the owner cannot be deleted from the key-value store until this reference is removed. See
     https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for
     how the garbage collector interacts with this field and enforces the foreground deletion.
     Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise
     422 (Unprocessable Entity) will be returned.
    :vartype block_owner_deletion: bool
    :ivar controller: If true, this reference points to the managing controller.
    :vartype controller: bool
    :ivar kind: Kind of the referent. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
     Required.
    :vartype kind: str
    :ivar name: Name of the referent. More info:
     http://kubernetes.io/docs/user-guide/identifiers#names. Required.
    :vartype name: str
    :ivar uid: UID of the referent. More info:
     http://kubernetes.io/docs/user-guide/identifiers#uids. Required.
    :vartype uid: str
    """

    _validation = {
        "api_version": {"required": True},
        "kind": {"required": True},
        "name": {"required": True},
        "uid": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "block_owner_deletion": {"key": "blockOwnerDeletion", "type": "bool"},
        "controller": {"key": "controller", "type": "bool"},
        "kind": {"key": "kind", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "uid": {"key": "uid", "type": "str"},
    }

    def __init__(
        self,
        *,
        api_version: str,
        kind: str,
        name: str,
        uid: str,
        block_owner_deletion: Optional[bool] = None,
        controller: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: API version of the referent. Required.
        :paramtype api_version: str
        :keyword block_owner_deletion: If true, AND if the owner has the "foregroundDeletion"
         finalizer, then the owner cannot be deleted from the key-value store until this reference is
         removed. See
         https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for
         how the garbage collector interacts with this field and enforces the foreground deletion.
         Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise
         422 (Unprocessable Entity) will be returned.
        :paramtype block_owner_deletion: bool
        :keyword controller: If true, this reference points to the managing controller.
        :paramtype controller: bool
        :keyword kind: Kind of the referent. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
         Required.
        :paramtype kind: str
        :keyword name: Name of the referent. More info:
         http://kubernetes.io/docs/user-guide/identifiers#names. Required.
        :paramtype name: str
        :keyword uid: UID of the referent. More info:
         http://kubernetes.io/docs/user-guide/identifiers#uids. Required.
        :paramtype uid: str
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.block_owner_deletion = block_owner_deletion
        self.controller = controller
        self.kind = kind
        self.name = name
        self.uid = uid


class IoK8SApiNetworkingV1NetworkPolicyStatus(_serialization.Model):
    """NetworkPolicyStatus describe the current state of the NetworkPolicy.

    :ivar conditions: Conditions holds an array of metav1.Condition that describe the state of the
     NetworkPolicy. Current service state.
    :vartype conditions: list[any]
    """

    _attribute_map = {
        "conditions": {"key": "conditions", "type": "[object]"},
    }

    def __init__(
        self, *, conditions: Optional[List[Any]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword conditions: Conditions holds an array of metav1.Condition that describe the state of
         the NetworkPolicy. Current service state.
        :paramtype conditions: list[any]
        """
        super().__init__(**kwargs)
        self.conditions = conditions


class IoK8SApiPolicyV1Eviction(_serialization.Model):
    """Eviction evicts a pod from its node subject to certain policies and safety constraints. This is
    a subresource of Pod.  A request to cause such an eviction is created by POSTing to
    .../pods/:code:`<pod name>`/evictions.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar delete_options: DeleteOptions may be provided.
    :vartype delete_options: any
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: ObjectMeta describes the pod that is being evicted.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    """

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "delete_options": {"key": "deleteOptions", "type": "object"},
        "kind": {"key": "kind", "type": "str"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        delete_options: Optional[Any] = None,
        kind: Optional[str] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword delete_options: DeleteOptions may be provided.
        :paramtype delete_options: any
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: ObjectMeta describes the pod that is being evicted.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.delete_options = delete_options
        self.kind = kind
        self.metadata = metadata


class IoK8SApiStorageV1CSIStorageCapacity(_serialization.Model):
    """CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass,
    this describes the available capacity in a particular topology segment.  This can be used when
    considering where to instantiate new PersistentVolumes.

    For example this can express things like: - StorageClass "standard" has "1234 GiB" available in
    "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in
    "kubernetes.io/hostname=knode-abc123"

    The following three cases all imply that no capacity is available for a certain combination: -
    no object exists with suitable topology and storage class name - such an object exists, but the
    capacity is unset - such an object exists, but the capacity is zero

    The producer of these objects can decide which approach is more suitable.

    They are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling
    with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the
    requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is
    unset, it falls back to a comparison against the less precise Capacity. If that is also unset,
    the scheduler assumes that capacity is insufficient and tries some other node.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar capacity: Capacity is the value reported by the CSI driver in its GetCapacityResponse for
     a GetCapacityRequest with topology and parameters that match the previous fields.

     The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the
     storage that can be used to provision volumes. If not set, that information is currently
     unavailable.
    :vartype capacity: any
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar maximum_volume_size: MaximumVolumeSize is the value reported by the CSI driver in its
     GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the
     previous fields.

     This is defined since CSI spec 1.4.0 as the largest size that may be used in a
     CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same
     parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is
     ResourceRequirements.Requests in a volume claim.
    :vartype maximum_volume_size: any
    :ivar metadata: Standard object's metadata. The name has no particular meaning. It must be be a
     DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with other
     CSI drivers on the cluster, the recommendation is to use csisc-:code:`<uuid>`, a generated
     name, or a reverse-domain name which ends with the unique CSI driver name.

     Objects are namespaced.

     More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata:
     ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
    :ivar node_topology: NodeTopology defines which nodes have access to the storage for which
     capacity was reported. If not set, the storage is not accessible from any node in the cluster.
     If empty, the storage is accessible from all nodes. This field is immutable.
    :vartype node_topology: any
    :ivar storage_class_name: The name of the StorageClass that the reported capacity applies to.
     It must meet the same requirements as the name of a StorageClass object (non-empty, DNS
     subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and
     should be removed by its creator. This field is immutable. Required.
    :vartype storage_class_name: str
    """

    _validation = {
        "storage_class_name": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "capacity": {"key": "capacity", "type": "object"},
        "kind": {"key": "kind", "type": "str"},
        "maximum_volume_size": {"key": "maximumVolumeSize", "type": "object"},
        "metadata": {
            "key": "metadata",
            "type": "IoK8SApimachineryPkgApisMetaV1ObjectMeta",
        },
        "node_topology": {"key": "nodeTopology", "type": "object"},
        "storage_class_name": {"key": "storageClassName", "type": "str"},
    }

    def __init__(
        self,
        *,
        storage_class_name: str,
        api_version: Optional[str] = None,
        capacity: Optional[Any] = None,
        kind: Optional[str] = None,
        maximum_volume_size: Optional[Any] = None,
        metadata: Optional[
            "_models.IoK8SApimachineryPkgApisMetaV1ObjectMeta"
        ] = None,
        node_topology: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword capacity: Capacity is the value reported by the CSI driver in its GetCapacityResponse
         for a GetCapacityRequest with topology and parameters that match the previous fields.

         The semantic is currently (CSI spec 1.2) defined as: The available capacity, in bytes, of the
         storage that can be used to provision volumes. If not set, that information is currently
         unavailable.
        :paramtype capacity: any
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword maximum_volume_size: MaximumVolumeSize is the value reported by the CSI driver in its
         GetCapacityResponse for a GetCapacityRequest with topology and parameters that match the
         previous fields.

         This is defined since CSI spec 1.4.0 as the largest size that may be used in a
         CreateVolumeRequest.capacity_range.required_bytes field to create a volume with the same
         parameters as those in GetCapacityRequest. The corresponding value in the Kubernetes API is
         ResourceRequirements.Requests in a volume claim.
        :paramtype maximum_volume_size: any
        :keyword metadata: Standard object's metadata. The name has no particular meaning. It must be
         be a DNS subdomain (dots allowed, 253 characters). To ensure that there are no conflicts with
         other CSI drivers on the cluster, the recommendation is to use csisc-:code:`<uuid>`, a
         generated name, or a reverse-domain name which ends with the unique CSI driver name.

         Objects are namespaced.

         More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata:
         ~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApimachineryPkgApisMetaV1ObjectMeta
        :keyword node_topology: NodeTopology defines which nodes have access to the storage for which
         capacity was reported. If not set, the storage is not accessible from any node in the cluster.
         If empty, the storage is accessible from all nodes. This field is immutable.
        :paramtype node_topology: any
        :keyword storage_class_name: The name of the StorageClass that the reported capacity applies
         to. It must meet the same requirements as the name of a StorageClass object (non-empty, DNS
         subdomain). If that object no longer exists, the CSIStorageCapacity object is obsolete and
         should be removed by its creator. This field is immutable. Required.
        :paramtype storage_class_name: str
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.capacity = capacity
        self.kind = kind
        self.maximum_volume_size = maximum_volume_size
        self.metadata = metadata
        self.node_topology = node_topology
        self.storage_class_name = storage_class_name


class IoK8SApiStorageV1CSIStorageCapacityList(_serialization.Model):
    """CSIStorageCapacityList is a collection of CSIStorageCapacity objects.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: APIVersion defines the versioned schema of this representation of an object.
     Servers should convert recognized schemas to the latest internal value, and may reject
     unrecognized values. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
    :vartype api_version: str
    :ivar items: Items is the list of CSIStorageCapacity objects. Required.
    :vartype items: list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiStorageV1CSIStorageCapacity]
    :ivar kind: Kind is a string value representing the REST resource this object represents.
     Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
     CamelCase. More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
    :vartype kind: str
    :ivar metadata: Standard list metadata More info:
     https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
    :vartype metadata: any
    """

    _validation = {
        "items": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "apiVersion", "type": "str"},
        "items": {
            "key": "items",
            "type": "[IoK8SApiStorageV1CSIStorageCapacity]",
        },
        "kind": {"key": "kind", "type": "str"},
        "metadata": {"key": "metadata", "type": "object"},
    }

    def __init__(
        self,
        *,
        items: List["_models.IoK8SApiStorageV1CSIStorageCapacity"],
        api_version: Optional[str] = None,
        kind: Optional[str] = None,
        metadata: Optional[Any] = None,
        **kwargs: Any,
    ) -> None:
        """
        :keyword api_version: APIVersion defines the versioned schema of this representation of an
         object. Servers should convert recognized schemas to the latest internal value, and may reject
         unrecognized values. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
        :paramtype api_version: str
        :keyword items: Items is the list of CSIStorageCapacity objects. Required.
        :paramtype items:
         list[~azext_arcdata.vendored_sdks.kubernetes_sdk.models.IoK8SApiStorageV1CSIStorageCapacity]
        :keyword kind: Kind is a string value representing the REST resource this object represents.
         Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In
         CamelCase. More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
        :paramtype kind: str
        :keyword metadata: Standard list metadata More info:
         https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
        :paramtype metadata: any
        """
        super().__init__(**kwargs)
        self.api_version = api_version
        self.items = items
        self.kind = kind
        self.metadata = metadata
