# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from .. import try_manual, raise_if, calc_coverage
from azure.cli.testsdk import ResourceGroupPreparer


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup
@try_manual
def setup(test, rg):
    pass


# EXAMPLE: /BlockchainMembers/put/BlockchainMembers_Create
@try_manual
def step__blockchainmembers_put(test, rg):
    test.cmd('az blockchain blockchain-member create '
             '--location "{myLocation}" '
             '--consortium "ContoseConsortium" '
             '--consortium-management-account-password "<consortiumManagementAccountPassword>" '
             '--password "<password>" '
             '--protocol "Quorum" '
             '--name "{myBlockchainMember}" '
             '--resource-group "{rg}"',
             checks=[
                 test.check("location", "{myLocation}", case_sensitive=False),
                 test.check("consortium", "ContoseConsortium", case_sensitive=False),
                 test.check("protocol", "Quorum", case_sensitive=False),
                 test.check("name", "{myBlockchainMember}", case_sensitive=False),
             ])
    test.cmd('az blockchain blockchain-member wait --created '
             '--name "{myBlockchainMember}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /BlockchainMemberOperationResults/get/BlockchainMemberOperationResults_Get
@try_manual
def step__blockchainmemberoperationresults_get(test, rg):
    test.cmd('az blockchain blockchain-member-operation-result show '
             '--operation-id "12f4b309-01e3-4fcf-bc0b-1cc034ca03f8" '
             '--location-name "{myLocation}"',
             checks=[])


# EXAMPLE: /BlockchainMembers/get/BlockchainMembers_Get
@try_manual
def step__blockchainmembers_get_blockchainmembers_get(test, rg):
    test.cmd('az blockchain blockchain-member show '
             '--name "{myBlockchainMember}" '
             '--resource-group "{rg}"',
             checks=[
                 test.check("location", "{myLocation}", case_sensitive=False),
                 test.check("consortium", "ContoseConsortium", case_sensitive=False),
                 test.check("protocol", "Quorum", case_sensitive=False),
                 test.check("name", "{myBlockchainMember}", case_sensitive=False),
             ])


# EXAMPLE: /BlockchainMembers/get/BlockchainMembers_List
@try_manual
def step__blockchainmembers_get_blockchainmembers_list(test, rg):
    test.cmd('az blockchain blockchain-member list '
             '--resource-group "{rg}"',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /BlockchainMembers/get/BlockchainMembers_ListAll
@try_manual
def step__blockchainmembers_get(test, rg):
    test.cmd('az blockchain blockchain-member list-all',
             checks=[])


# EXAMPLE: /BlockchainMembers/get/BlockchainMembers_ListConsortiumMembers
@try_manual
def step__blockchainmembers_get2(test, rg):
    test.cmd('az blockchain blockchain-member list-consortium-member '
             '--name "{myBlockchainMember}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /BlockchainMembers/patch/BlockchainMembers_Update
@try_manual
def step__blockchainmembers_patch(test, rg):
    test.cmd('az blockchain blockchain-member update '
             '--consortium-management-account-password "<consortiumManagementAccountPassword>" '
             '--password "<password>" '
             '--name "{myBlockchainMember2}" '
             '--resource-group "{rg}"',
             checks=[
                 test.check("name", "{myBlockchainMember2}", case_sensitive=False),
             ])


# EXAMPLE: /BlockchainMembers/post/BlockchainMembers_ListApiKeys
@try_manual
def step__blockchainmembers_post(test, rg):
    test.cmd('az blockchain blockchain-member list-api-key '
             '--name "{myBlockchainMember}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /BlockchainMembers/post/BlockchainMembers_ListRegenerateApiKeys
@try_manual
def step__blockchainmembers_post2(test, rg):
    test.cmd('az blockchain blockchain-member regenerate-api-key '
             '--key-name "key1" '
             '--name "{myBlockchainMember}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Skus/get/Skus_List
@try_manual
def step__skus_get_skus_list(test, rg):
    test.cmd('az blockchain sku list',
             checks=[])


# EXAMPLE: /TransactionNodes/put/TransactionNodes_Create
@try_manual
def step__transactionnodes_put_transactionnodes_create(test, rg):
    test.cmd('az blockchain transaction-node create '
             '--blockchain-member-name "{myBlockchainMember}" '
             '--resource-group "{rg}" '
             '--location "{myLocation}" '
             '--password "<password>" '
             '--name "{myTransactionNode}"',
             checks=[
                 test.check("location", "{myLocation}", case_sensitive=False),
                 test.check("name", "{myTransactionNode}", case_sensitive=False),
             ])
    test.cmd('az blockchain transaction-node wait --created '
             '--resource-group "{rg}" '
             '--name "{myTransactionNode}"',
             checks=[])


# EXAMPLE: /Locations/post/Locations_ListConsortiums
@try_manual
def step__locations_post_locations_listconsortiums(test, rg):
    test.cmd('az blockchain consortium list '
             '--name "{myLocation}"',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /TransactionNodes/get/TransactionNodes_Get
@try_manual
def step__transactionnodes_get_transactionnodes_get(test, rg):
    test.cmd('az blockchain transaction-node show '
             '--blockchain-member-name "{myBlockchainMember}" '
             '--resource-group "{rg}" '
             '--name "{myTransactionNode}"',
             checks=[
                 test.check("location", "{myLocation}", case_sensitive=False),
                 test.check("name", "{myTransactionNode}", case_sensitive=False),
             ])


# EXAMPLE: /TransactionNodes/get/TransactionNodes_List
@try_manual
def step__transactionnodes_get_transactionnodes_list(test, rg):
    test.cmd('az blockchain transaction-node list '
             '--blockchain-member-name "{myBlockchainMember}" '
             '--resource-group "{rg}"',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /TransactionNodes/patch/TransactionNodes_Update
@try_manual
def step__transactionnodes_patch(test, rg):
    test.cmd('az blockchain transaction-node update '
             '--blockchain-member-name "{myBlockchainMember}" '
             '--resource-group "{rg}" '
             '--password "<password>" '
             '--name "{myTransactionNode}"',
             checks=[
                 test.check("location", "{myLocation}", case_sensitive=False),
                 test.check("name", "{myTransactionNode}", case_sensitive=False),
             ])


# EXAMPLE: /TransactionNodes/post/TransactionNodes_ListApiKeys
@try_manual
def step__transactionnodes_post(test, rg):
    test.cmd('az blockchain transaction-node list-api-key '
             '--blockchain-member-name "{myBlockchainMember}" '
             '--resource-group "{rg}" '
             '--name "{myTransactionNode}"',
             checks=[])


# EXAMPLE: /TransactionNodes/post/TransactionNodes_ListRegenerateApiKeys
@try_manual
def step__transactionnodes_post2(test, rg):
    test.cmd('az blockchain transaction-node regenerate-api-key '
             '--key-name "key1" '
             '--blockchain-member-name "{myBlockchainMember}" '
             '--resource-group "{rg}" '
             '--name "{myTransactionNode}"',
             checks=[])


# EXAMPLE: /TransactionNodes/delete/TransactionNodes_Delete
@try_manual
def step__transactionnodes_delete(test, rg):
    test.cmd('az blockchain transaction-node delete -y '
             '--blockchain-member-name "{myBlockchainMember}" '
             '--resource-group "{rg}" '
             '--name "{myTransactionNode2}"',
             checks=[])


# EXAMPLE: /BlockchainMembers/delete/BlockchainMembers_Delete
@try_manual
def step__blockchainmembers_delete(test, rg):
    test.cmd('az blockchain blockchain-member delete -y '
             '--name "{myBlockchainMember}" '
             '--resource-group "{rg}"',
             checks=[])


# Env cleanup
@try_manual
def cleanup(test, rg):
    pass


# Testcase
@try_manual
def call_scenario(test, rg):
    setup(test, rg)
    step__blockchainmembers_put(test, rg)
    step__blockchainmemberoperationresults_get(test, rg)
    step__blockchainmembers_get_blockchainmembers_get(test, rg)
    step__blockchainmembers_get_blockchainmembers_list(test, rg)
    step__blockchainmembers_get(test, rg)
    step__blockchainmembers_get2(test, rg)
    step__blockchainmembers_patch(test, rg)
    step__blockchainmembers_post(test, rg)
    step__blockchainmembers_post2(test, rg)
    step__skus_get_skus_list(test, rg)
    step__transactionnodes_put_transactionnodes_create(test, rg)
    step__locations_post_locations_listconsortiums(test, rg)
    step__transactionnodes_get_transactionnodes_get(test, rg)
    step__transactionnodes_get_transactionnodes_list(test, rg)
    step__transactionnodes_patch(test, rg)
    step__transactionnodes_post(test, rg)
    step__transactionnodes_post2(test, rg)
    step__transactionnodes_delete(test, rg)
    step__blockchainmembers_delete(test, rg)
    cleanup(test, rg)


@try_manual
class BlockchainManagementClientScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='clitestblockchain_mygroup'[:7], key='rg', parameter_name='rg')
    def test_blockchain(self, rg):

        self.kwargs.update({
            'myBlockchainMember': 'contosemember1',
            'myBlockchainMember2': 'ContoseMember1',
            'myLocation': 'southeastasia',
            'myTransactionNode': 'txnode2',
            'myTransactionNode2': 'txNode2',
        })

        call_scenario(self, rg)
        calc_coverage(__file__)
        raise_if()
