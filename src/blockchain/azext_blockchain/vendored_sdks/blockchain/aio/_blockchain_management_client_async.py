# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

from ._configuration_async import BlockchainManagementClientConfiguration
from .operations_async import BlockchainMemberOperations
from .operations_async import BlockchainMemberOperationResultOperations
from .operations_async import LocationOperations
from .operations_async import OperationOperations
from .operations_async import SkuOperations
from .operations_async import TransactionNodeOperations
from .. import models


class BlockchainManagementClient(object):
    """REST API for Azure Blockchain Service.

    :ivar blockchain_member: BlockchainMemberOperations operations
    :vartype blockchain_member: azure.mgmt.blockchain.aio.operations_async.BlockchainMemberOperations
    :ivar blockchain_member_operation_result: BlockchainMemberOperationResultOperations operations
    :vartype blockchain_member_operation_result: azure.mgmt.blockchain.aio.operations_async.BlockchainMemberOperationResultOperations
    :ivar location: LocationOperations operations
    :vartype location: azure.mgmt.blockchain.aio.operations_async.LocationOperations
    :ivar operation: OperationOperations operations
    :vartype operation: azure.mgmt.blockchain.aio.operations_async.OperationOperations
    :ivar sku: SkuOperations operations
    :vartype sku: azure.mgmt.blockchain.aio.operations_async.SkuOperations
    :ivar transaction_node: TransactionNodeOperations operations
    :vartype transaction_node: azure.mgmt.blockchain.aio.operations_async.TransactionNodeOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param subscription_id: Gets the subscription Id which uniquely identifies the Microsoft Azure subscription. The subscription ID is part of the URI for every service call.
    :type subscription_id: str
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        subscription_id: str,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = BlockchainManagementClientConfiguration(credential, subscription_id, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.blockchain_member = BlockchainMemberOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.blockchain_member_operation_result = BlockchainMemberOperationResultOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.location = LocationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.operation = OperationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.sku = SkuOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.transaction_node = TransactionNodeOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "BlockchainManagementClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
