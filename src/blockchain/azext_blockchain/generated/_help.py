# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from knack.help_files import helps


helps['blockchain member'] = """
    type: group
    short-summary: blockchain member
"""

helps['blockchain member list'] = """
    type: command
    short-summary: List the blockchain members.
    examples:
      - name: List the blockchain members in a resource group.
        text: |-
               az blockchain member list --resource-group "mygroup"
"""

helps['blockchain member show'] = """
    type: command
    short-summary: Show the details about a blockchain member.
    examples:
      - name: Show the details about a blockchain member.
        text: |-
               az blockchain member show --name "contosemember1" --resource-group "mygroup"
"""

helps['blockchain member create'] = """
    type: command
    short-summary: Create a blockchain member.
    parameters:
      - name: --firewall-rules
        short-summary: Firewall rules of the blockchian member.
        long-summary: |
            Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: rule-name, start-ip-address, end-ip-address.

            Multiple firewall rules can be specified by using more than one `--firewall-rules` argument.
    examples:
      - name: Create a blockchain member.
        text: |-
               az blockchain member create --location "southeastasia" --consortium "ContoseConsortium" --consortium-man\
agement-account-password "1234abcdEFG1" --password "1234abcdEFG1" --validator-nodes-sku capacity=2 --protocol "Quorum" \
--name "contosemember1" --resource-group "mygroup"
"""

helps['blockchain member update'] = """
    type: command
    short-summary: Update a blockchain member.
    parameters:
      - name: --firewall-rules
        short-summary: Firewall rules of the blockchian member.
        long-summary: |
            Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: rule-name, start-ip-address, end-ip-address.

            Multiple firewall rules can be specified by using more than one `--firewall-rules` argument.
    examples:
      - name: Update a blockchain member.
        text: |-
               az blockchain member update --consortium-management-account-password "1234abcdEFG1" --password "1234abcd\
EFG1" --name "ContoseMember1" --resource-group "mygroup"
"""

helps['blockchain member delete'] = """
    type: command
    short-summary: Delete a blockchain member.
    examples:
      - name: Delete a blockchain member.
        text: |-
               az blockchain member delete --name "contosemember1" --resource-group "mygroup"
"""

helps['blockchain member wait'] = """
    type: command
    short-summary: Wait until a blockchain member is created or deleted.
    examples:
      - name: Wait until a blockchain member is created.
        text: |-
               az blockchain member wait --name "contosemember1" --resource-group "mygroup" --created
"""

helps['blockchain member list-api-key'] = """
    type: command
    short-summary: List the API keys for a blockchain member.
    examples:
      - name: List the API keys for a blockchain member.
        text: |-
               az blockchain member list-api-key --name "contosemember1" --resource-group "mygroup"
"""

helps['blockchain member list-consortium-member'] = """
    type: command
    short-summary: List the consortium members for a blockchain member.
    examples:
      - name: List the consortium members for a blockchain member.
        text: |-
               az blockchain member list-consortium-member --name "contosemember1" --resource-group "\
mygroup"
"""

helps['blockchain member regenerate-api-key'] = """
    type: command
    short-summary: Regenerate the API keys for a blockchain member.
    examples:
      - name: Regenerate the API keys for a blockchain member.
        text: |-
               az blockchain member regenerate-api-key --key-name "key1" --name "contosemember1" --re\
source-group "mygroup"
"""

helps['blockchain consortium'] = """
    type: group
    short-summary: blockchain consortium
"""

helps['blockchain consortium list'] = """
    type: command
    short-summary: List the available consortiums for a subscription.
    examples:
      - name: List the available consortiums for a subscription.
        text: |-
               az blockchain consortium list --location "southeastasia"
"""

helps['blockchain transaction-node'] = """
    type: group
    short-summary: blockchain transaction-node
"""

helps['blockchain transaction-node list'] = """
    type: command
    short-summary: List the transaction nodes for a blockchain member.
    examples:
      - name: List the transaction nodes for a blockchain member.
        text: |-
               az blockchain transaction-node list --member-name "contosemember1" --resource-group "mygroup"
"""

helps['blockchain transaction-node show'] = """
    type: command
    short-summary: Show the details of the transaction node.
    examples:
      - name: Show the details of the transaction node.
        text: |-
               az blockchain transaction-node show --member-name "contosemember1" --resource-group "mygroup"\
 --name "txnode2"
"""

helps['blockchain transaction-node create'] = """
    type: command
    short-summary: Create a transaction node.
    parameters:
      - name: --firewall-rules
        short-summary: Firewall rules of the blockchian transaction node.
        long-summary: |
            Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: rule-name, start-ip-address, end-ip-address.

            Multiple firewall rules can be specified by using more than one `--firewall-rules` argument.
    examples:
      - name: Create a transaction node.
        text: |-
               az blockchain transaction-node create --member-name "contosemember1" --resource-group "mygrou\
p" --location "southeastasia" --password "1234abcdEFG1" --name "txnode2"
"""

helps['blockchain transaction-node update'] = """
    type: command
    short-summary: Update the transaction node.
    parameters:
      - name: --firewall-rules
        short-summary: Firewall rules of the blockchian transaction node.
        long-summary: |
            Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: rule-name, start-ip-address, end-ip-address.

            Multiple firewall rules can be specified by using more than one `--firewall-rules` argument.
    examples:
      - name: Update the transaction node.
        text: |-
               az blockchain transaction-node update --member-name "contosemember1" --resource-group "mygrou\
p" --password "1234abcdEFG1" --name "txnode2"
"""

helps['blockchain transaction-node delete'] = """
    type: command
    short-summary: Delete the transaction node.
    examples:
      - name: Delete the transaction node.
        text: |-
               az blockchain transaction-node delete --member-name "contosemember1" --resource-group "mygrou\
p" --name "txNode2"
"""

helps['blockchain transaction-node wait'] = """
    type: command
    short-summary: Wait until the transaction node is created or deleted.
    examples:
      - name: Wait until the transaction node is created.
        text: |-
               az blockchain transaction-node wait --member-name "contosemember1" --resource-group "mygrou\
p" --name "txNode2" --created
"""

helps['blockchain transaction-node list-api-key'] = """
    type: command
    short-summary: List the API keys for the transaction node.
    examples:
      - name: List the API keys for the transaction node.
        text: |-
               az blockchain transaction-node list-api-key --member-name "contosemember1" --resource-group "\
mygroup" --name "txnode2"
"""

helps['blockchain transaction-node regenerate-api-key'] = """
    type: command
    short-summary: Regenerate the API keys for the blockchain member.
    examples:
      - name: Regenerate the API keys for the blockchain member.
        text: |-
               az blockchain transaction-node regenerate-api-key --key-name "key1" --member-name "contosemem\
ber1" --resource-group "mygroup" --name "txnode2"
"""
