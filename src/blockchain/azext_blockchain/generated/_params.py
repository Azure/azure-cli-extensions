# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_blockchain.action import (
    AddSku,
    AddValidatorNodesSku,
    AddBlockchainBlockchainMemberCreateFirewallRules,
    AddBlockchainTransactionNodeUpdateFirewallRules,
    AddBlockchainTransactionNodeCreateFirewallRules
)


def load_arguments(self, _):

    with self.argument_context('blockchain blockchain-member list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain blockchain-member show') as c:
        c.argument('blockchain_member_name', options_list=['--name', '-n', '--blockchain-member-name'], type=str,
                   help='Blockchain member name.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain blockchain-member create') as c:
        c.argument('blockchain_member_name', options_list=['--name', '-n', '--blockchain-member-name'], type=str,
                   help='Blockchain member name.')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='*', help='Gets or sets the blockchain member Sku.')
        c.argument('protocol', arg_type=get_enum_type(['NotSpecified', 'Parity', 'Quorum', 'Corda']), help='Gets or '
                   'sets the blockchain protocol.')
        c.argument('validator_nodes_sku', action=AddValidatorNodesSku, nargs='*', help='Gets or sets the blockchain '
                   'validator nodes Sku.')
        c.argument('password', type=str, help='Sets the basic auth password of the blockchain member.')
        c.argument('consortium', type=str, help='Gets or sets the consortium for the blockchain member.')
        c.argument('consortium_management_account_password', type=str, help='Sets the managed consortium management '
                   'account password.')
        c.argument('consortium_role', type=str, help='Gets the role of the member in the consortium.')
        c.argument('consortium_member_display_name', type=str, help='Gets the display name of the member in the '
                   'consortium.')
        c.argument('firewall_rules', action=AddBlockchainBlockchainMemberCreateFirewallRules, nargs='*', help='Gets or '
                   'sets firewall rules')

    with self.argument_context('blockchain blockchain-member update') as c:
        c.argument('blockchain_member_name', options_list=['--name', '-n', '--blockchain-member-name'], type=str,
                   help='Blockchain member name.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('tags', tags_type)
        c.argument('password', type=str, help='Sets the transaction node dns endpoint basic auth password.')
        c.argument('firewall_rules', action=AddBlockchainTransactionNodeUpdateFirewallRules, nargs='*', help='Gets or '
                   'sets the firewall rules.')
        c.argument('consortium_management_account_password', type=str, help='Sets the managed consortium management '
                   'account password.')

    with self.argument_context('blockchain blockchain-member delete') as c:
        c.argument('blockchain_member_name', options_list=['--name', '-n', '--blockchain-member-name'], type=str,
                   help='Blockchain member name', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain blockchain-member list-api-key') as c:
        c.argument('blockchain_member_name', options_list=['--name', '-n', '--blockchain-member-name'], type=str,
                   help='Blockchain member name.')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain blockchain-member list-consortium-member') as c:
        c.argument('blockchain_member_name', options_list=['--name', '-n', '--blockchain-member-name'], type=str,
                   help='Blockchain member name.')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain blockchain-member regenerate-api-key') as c:
        c.argument('blockchain_member_name', options_list=['--name', '-n', '--blockchain-member-name'], type=str,
                   help='Blockchain member name.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('key_name', type=str, help='Gets or sets the API key name.')
        c.argument('value', type=str, help='Gets or sets the API key value.')

    with self.argument_context('blockchain blockchain-member wait') as c:
        c.argument('blockchain_member_name', options_list=['--name', '-n', '--blockchain-member-name'], type=str,
                   help='Blockchain member name.', id_part='name')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain blockchain-member-operation-result show') as c:
        c.argument('location_name', type=str, help='Location name.')
        c.argument('operation_id', type=str, help='Operation Id.', id_part='child_name_1')

    with self.argument_context('blockchain consortium list') as c:
        c.argument('location_name', options_list=['--name', '-n', '--location-name'], type=str, help='Location Name.')

    with self.argument_context('blockchain transaction-node list') as c:
        c.argument('blockchain_member_name', type=str, help='Blockchain member name.')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain transaction-node show') as c:
        c.argument('blockchain_member_name', type=str, help='Blockchain member name.', id_part='name')
        c.argument('transaction_node_name', options_list=['--name', '-n', '--transaction-node-name'], type=str, help=''
                   'Transaction node name.', id_part='child_name_1')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain transaction-node create') as c:
        c.argument('blockchain_member_name', type=str, help='Blockchain member name.')
        c.argument('transaction_node_name', options_list=['--name', '-n', '--transaction-node-name'], type=str, help=''
                   'Transaction node name.')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('password', type=str, help='Sets the transaction node dns endpoint basic auth password.')
        c.argument('firewall_rules', action=AddBlockchainTransactionNodeCreateFirewallRules, nargs='*', help='Gets or '
                   'sets the firewall rules.')

    with self.argument_context('blockchain transaction-node update') as c:
        c.argument('blockchain_member_name', type=str, help='Blockchain member name.', id_part='name')
        c.argument('transaction_node_name', options_list=['--name', '-n', '--transaction-node-name'], type=str, help=''
                   'Transaction node name.', id_part='child_name_1')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('password', type=str, help='Sets the transaction node dns endpoint basic auth password.')
        c.argument('firewall_rules', action=AddBlockchainTransactionNodeUpdateFirewallRules, nargs='*', help='Gets or '
                   'sets the firewall rules.')

    with self.argument_context('blockchain transaction-node delete') as c:
        c.argument('blockchain_member_name', type=str, help='Blockchain member name.', id_part='name')
        c.argument('transaction_node_name', options_list=['--name', '-n', '--transaction-node-name'], type=str, help=''
                   'Transaction node name.', id_part='child_name_1')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain transaction-node list-api-key') as c:
        c.argument('blockchain_member_name', type=str, help='Blockchain member name.')
        c.argument('transaction_node_name', options_list=['--name', '-n', '--transaction-node-name'], type=str, help=''
                   'Transaction node name.')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain transaction-node regenerate-api-key') as c:
        c.argument('blockchain_member_name', type=str, help='Blockchain member name.', id_part='name')
        c.argument('transaction_node_name', options_list=['--name', '-n', '--transaction-node-name'], type=str, help=''
                   'Transaction node name.', id_part='child_name_1')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('key_name', type=str, help='Gets or sets the API key name.')
        c.argument('value', type=str, help='Gets or sets the API key value.')

    with self.argument_context('blockchain transaction-node wait') as c:
        c.argument('blockchain_member_name', type=str, help='Blockchain member name.', id_part='name')
        c.argument('transaction_node_name', options_list=['--name', '-n', '--transaction-node-name'], type=str, help=''
                   'Transaction node name.', id_part='child_name_1')
        c.argument('resource_group_name', resource_group_name_type)
