# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_blockchain.generated._validators import process_blockchain_member_sku
from azext_blockchain.action import (
    AddValidatorNodesSku,
    AddBlockchainMemberCreateFirewallRules,
    AddBlockchainTransactionNodeUpdateFirewallRules,
    AddBlockchainTransactionNodeCreateFirewallRules
)


def load_arguments(self, _):

    with self.argument_context('blockchain member list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain member') as c:
        c.argument('blockchain_member_name', options_list=['--name', '-n'], help='Blockchain member name.')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain member create') as c:
        c.argument('blockchain_member_name', options_list=['--name', '-n'], help='Blockchain member name.')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', arg_type=get_enum_type(['Basic', 'Standard']),
                   help='The Sku of the blockchain member', validator=process_blockchain_member_sku)
        c.argument('protocol', arg_type=get_enum_type(['NotSpecified', 'Parity', 'Quorum', 'Corda']), help='Gets or set'
                   's the blockchain protocol.')
        c.argument('validator_nodes_sku', action=AddValidatorNodesSku, nargs='+', help='Gets or sets the blockchain val'
                   'idator nodes Sku. Expect value: capacity=xx.')
        c.argument('password', help='Sets the basic auth password of the blockchain member.')
        c.argument('consortium', help='Gets or sets the consortium for the blockchain member.')
        c.argument('consortium_management_account_password', help='Sets the managed consortium management account passw'
                   'ord.')
        c.argument('consortium_role', help='Gets the role of the member in the consortium.')
        c.argument('consortium_member_display_name', help='Gets the display name of the member in the consortium.')
        c.argument('firewall_rules', action=AddBlockchainMemberCreateFirewallRules, nargs='+')

    with self.argument_context('blockchain member update') as c:
        c.argument('blockchain_member_name', options_list=['--name', '-n'], help='Blockchain member name.')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('tags', tags_type)
        c.argument('password', help='Sets the transaction node dns endpoint basic auth password.')
        c.argument('firewall_rules', action=AddBlockchainTransactionNodeUpdateFirewallRules, nargs='+')
        c.argument('consortium_management_account_password', help='Sets the managed consortium management account passw'
                   'ord.')

    with self.argument_context('blockchain member delete') as c:
        c.argument('blockchain_member_name', options_list=['--name', '-n'], help='Blockchain member name')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain member list-all') as c:
        pass

    with self.argument_context('blockchain member list-api-key') as c:
        c.argument('blockchain_member_name', options_list=['--name', '-n'], help='Blockchain member name.')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain member list-consortium-member') as c:
        c.argument('blockchain_member_name', options_list=['--name', '-n'], help='Blockchain member name.')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain member regenerate-api-key') as c:
        c.argument('blockchain_member_name', options_list=['--name', '-n'], help='Blockchain member name.')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('key_name', help='Gets or sets the API key name.',
                   arg_type=get_enum_type(['key1', 'key2']))

    with self.argument_context('blockchain consortium list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))

    with self.argument_context('blockchain transaction-node list') as c:
        c.argument('blockchain_member_name', options_list=['--member-name'], help='Blockchain member name.')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain transaction-node') as c:
        c.argument('blockchain_member_name', options_list=['--member-name'], help='Blockchain member name.')
        c.argument('transaction_node_name', options_list=['--name', '-n'], help='Transaction node name.')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain transaction-node create') as c:
        c.argument('blockchain_member_name', options_list=['--member-name'], help='Blockchain member name.')
        c.argument('transaction_node_name', options_list=['--name', '-n'], help='Transaction node name.')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('password', help='Sets the transaction node dns endpoint basic auth password.')
        c.argument('firewall_rules', action=AddBlockchainTransactionNodeCreateFirewallRules, nargs='+')

    with self.argument_context('blockchain transaction-node update') as c:
        c.argument('blockchain_member_name', options_list=['--member-name'], help='Blockchain member name.')
        c.argument('transaction_node_name', options_list=['--name', '-n'], help='Transaction node name.')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('password', help='Sets the transaction node dns endpoint basic auth password.')
        c.argument('firewall_rules', action=AddBlockchainTransactionNodeUpdateFirewallRules, nargs='+')

    with self.argument_context('blockchain transaction-node delete') as c:
        c.argument('blockchain_member_name', options_list=['--member-name'], help='Blockchain member name.')
        c.argument('transaction_node_name', options_list=['--name', '-n'], help='Transaction node name.')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain transaction-node list-api-key') as c:
        c.argument('blockchain_member_name', options_list=['--member-name'], help='Blockchain member name.')
        c.argument('transaction_node_name', options_list=['--name', '-n'], help='Transaction node name.')
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('blockchain transaction-node regenerate-api-key') as c:
        c.argument('blockchain_member_name', options_list=['--member-name'], help='Blockchain member name.')
        c.argument('transaction_node_name', options_list=['--name', '-n'], help='Transaction node name.')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('key_name', help='Gets or sets the API key name.',
                   arg_type=get_enum_type(['key1', 'key2']))
        c.argument('value', help='Gets or sets the API key value.')
