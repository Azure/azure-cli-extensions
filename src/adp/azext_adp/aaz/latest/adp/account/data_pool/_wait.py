# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "adp account data-pool wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.autonomousdevelopmentplatform/accounts/{}/datapools/{}", "2022-09-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.account_name = AAZStrArg(
            options=["--account-name"],
            help="The name of the ADP account",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*",
                max_length=50,
            ),
        )
        _args_schema.data_pool_name = AAZStrArg(
            options=["-n", "--name", "--data-pool-name"],
            help="The name of the Data Pool",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*",
                max_length=50,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.DataPoolsGet(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class DataPoolsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AutonomousDevelopmentPlatform/accounts/{accountName}/dataPools/{dataPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "accountName", self.ctx.args.account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "dataPoolName", self.ctx.args.data_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-09-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _build_schema_data_pool_read(cls._schema_on_200)

            return cls._schema_on_200


_schema_data_pool_read = None


def _build_schema_data_pool_read(_schema):
    global _schema_data_pool_read
    if _schema_data_pool_read is not None:
        _schema.id = _schema_data_pool_read.id
        _schema.name = _schema_data_pool_read.name
        _schema.properties = _schema_data_pool_read.properties
        _schema.system_data = _schema_data_pool_read.system_data
        _schema.type = _schema_data_pool_read.type
        return

    _schema_data_pool_read = AAZObjectType()

    data_pool_read = _schema_data_pool_read
    data_pool_read.id = AAZStrType(
        flags={"read_only": True},
    )
    data_pool_read.name = AAZStrType(
        flags={"read_only": True},
    )
    data_pool_read.properties = AAZObjectType(
        flags={"client_flatten": True},
    )
    data_pool_read.system_data = AAZObjectType(
        serialized_name="systemData",
        flags={"read_only": True},
    )
    data_pool_read.type = AAZStrType(
        flags={"read_only": True},
    )

    properties = _schema_data_pool_read.properties
    properties.data_pool_id = AAZStrType(
        serialized_name="dataPoolId",
        flags={"read_only": True},
    )
    properties.locations = AAZListType(
        flags={"required": True},
    )
    properties.provisioning_state = AAZStrType(
        serialized_name="provisioningState",
        flags={"read_only": True},
    )
    properties.tags = AAZDictType()

    locations = _schema_data_pool_read.properties.locations
    locations.Element = AAZObjectType()

    _element = _schema_data_pool_read.properties.locations.Element
    _element.encryption = AAZObjectType()
    _element.name = AAZStrType(
        flags={"required": True},
    )
    _element.storage_account_count = AAZIntType(
        serialized_name="storageAccountCount",
    )
    _element.storage_sku = AAZObjectType(
        serialized_name="storageSku",
        nullable=True,
    )

    encryption = _schema_data_pool_read.properties.locations.Element.encryption
    encryption.key_name = AAZStrType(
        serialized_name="keyName",
        flags={"required": True},
    )
    encryption.key_vault_uri = AAZStrType(
        serialized_name="keyVaultUri",
        flags={"required": True},
    )
    encryption.key_version = AAZStrType(
        serialized_name="keyVersion",
    )
    encryption.user_assigned_identity = AAZStrType(
        serialized_name="userAssignedIdentity",
        flags={"required": True},
    )

    storage_sku = _schema_data_pool_read.properties.locations.Element.storage_sku
    storage_sku.name = AAZStrType(
        flags={"required": True},
    )

    tags = _schema_data_pool_read.properties.tags
    tags.Element = AAZStrType()

    system_data = _schema_data_pool_read.system_data
    system_data.created_at = AAZStrType(
        serialized_name="createdAt",
        flags={"read_only": True},
    )
    system_data.created_by = AAZStrType(
        serialized_name="createdBy",
        flags={"read_only": True},
    )
    system_data.created_by_type = AAZStrType(
        serialized_name="createdByType",
        flags={"read_only": True},
    )
    system_data.last_modified_at = AAZStrType(
        serialized_name="lastModifiedAt",
        flags={"read_only": True},
    )
    system_data.last_modified_by = AAZStrType(
        serialized_name="lastModifiedBy",
        flags={"read_only": True},
    )
    system_data.last_modified_by_type = AAZStrType(
        serialized_name="lastModifiedByType",
        flags={"read_only": True},
    )

    _schema.id = _schema_data_pool_read.id
    _schema.name = _schema_data_pool_read.name
    _schema.properties = _schema_data_pool_read.properties
    _schema.system_data = _schema_data_pool_read.system_data
    _schema.type = _schema_data_pool_read.type


__all__ = ["Wait"]
