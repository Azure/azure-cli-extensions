# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import *
from unittest import mock


class AdpScenario(ScenarioTest):
    def test_workpaces(self):
        workspaces = self.cmd("az adp workspace list").get_output_in_json()
        assert len(workspaces) > 0
        workspace = workspaces[0]
        assert workspace['id'] is not None
        assert workspace['name'] is not None
        assert workspace['location'] is not None
        assert workspace['type'] == "microsoft.autonomousdevelopmentplatform/workspaces"
        assert workspace['endpoint'] is not None
        assert workspace['autoGeneratedDomainNameLabelScope'] is not None
        assert workspace['dataCatalog'] is not None
        assert workspace['dataLocation'] is not None
        assert workspace['storageAccountCount'] is not None
        assert workspace['storageSku'] is not None


    @ResourceGroupPreparer(name_prefix="adp_cli", parameter_name_for_location="location")
    @KeyVaultPreparer(additional_params='--enable-purge-protection --enable-rbac-authorization ', location='westus3')
    def test_workspace_encryption(self, resource_group, key_vault):
        workpace_name = self.create_random_name(prefix='cli', length=40)
        self.kwargs.update({
            "resource-group": resource_group,
            "workspace-name": workpace_name,
            "location": "westus3",
            "storage-account-count": "1",
            'key_vault': key_vault,
            'key_name': self.create_random_name('testkey', 20),
            'identity_name': self.create_random_name('testidentity', 20),
            'identity_permissions': "Key Vault Crypto Service Encryption User",
            'role' : "Managed Identity Operator",
            'adp_rp_identity' : "dad37da6-229d-4bc0-8b94-fee8600589db", 
        })

        # create a user-assigned identity and give it access to the key
        result = self.cmd('az identity create --name {identity_name} -g {resource-group}')
        self.kwargs['principal_id'] = result.get_output_in_json()['principalId']
        self.kwargs['identity_id'] = result.get_output_in_json()['id']
        self.kwargs['client_id'] = result.get_output_in_json()['clientId']

        # assign 'Managed Identity Operator' role to ADP's RP identity on MI scope
        with mock.patch('azure.cli.command_modules.role.custom._gen_guid', side_effect=self.create_guid):
            self.cmd('az role assignment create --assignee {adp_rp_identity} --role "{role}" --scope {identity_id}')

        result = self.cmd('az keyvault show -g {resource-group} -n {key_vault}')
        self.kwargs['kv_id'] = result.get_output_in_json()['id']
        # create a new key
        result = self.cmd('az keyvault key create --name {key_name} --vault-name {key_vault}')
        self.kwargs['key_id'] = result.get_output_in_json()['key']['kid']

        with mock.patch('azure.cli.command_modules.role.custom._gen_guid', side_effect=self.create_guid):
            self.cmd("az role assignment create --assignee-object-id {principal_id} --role e147488a-f6f5-4113-8e2d-b22465e65bf6 --scope {kv_id}")

        self.cmd("az adp workspace create -g {resource-group} --name {workspace-name} -l {location} --storage-account-count {storage-account-count} --encryption key-encryption-key-url={key_id} user-assigned-identity-resource-id={identity_id}")
        workspace_list_by_rg = self.cmd("az adp workspace list -g {resource-group}").get_output_in_json()
        assert len(workspace_list_by_rg) > 0
        workspace = self.cmd("az adp workspace show --name {workspace-name} --resource-group {resource-group}", checks=[
            self.check('name', '{workspace-name}'),
            self.check('provisioningState', 'Succeeded'),
            self.check('type', 'microsoft.autonomousdevelopmentplatform/workspaces'),
            self.check('location', '{location}'),
            self.check('storageAccountCount', '{storage-account-count}'),
            self.check('encryption.keyEncryptionKeyUrl', '{key_id}'),
            self.check('encryption.userAssignedIdentityResourceId', '{identity_id}'),
        ]).get_output_in_json()
        self.cmd("az adp workspace delete --name {workspace-name} --resource-group {resource-group} --yes")


    @ResourceGroupPreparer(name_prefix="adp_cli", parameter_name_for_location="location")
    def test_workspace_storageAccountIncrease(self, resource_group):
        workpace_name = self.create_random_name(prefix='cli', length=40)
        self.kwargs.update({
            "resource-group": resource_group,
            "workspace-name": workpace_name,
            "location": "westus3",
            "storage-account-count": "1",
            "new-storage-account-count": "2",
            "tags": "{tag1:value1,tag2:value2}"
        })

        self.cmd("az adp workspace create -g {resource-group} --name {workspace-name} -l {location} --storage-account-count {storage-account-count}")
        self.cmd('az adp workspace update --name {workspace-name} --resource-group {resource-group} --tags {tags} --set "properties.storageAccountCount={new-storage-account-count}"')
        workspace_list = self.cmd("az adp workspace list").get_output_in_json()
        assert len(workspace_list) > 0
        workspace_list_by_rg = self.cmd("az adp workspace list -g {resource-group}").get_output_in_json()
        assert len(workspace_list_by_rg) > 0
        workspace = self.cmd("az adp workspace show --name {workspace-name} --resource-group {resource-group}", checks=[
            self.check('name', '{workspace-name}'),
            self.check('provisioningState', 'Succeeded'),
            self.check('type', 'microsoft.autonomousdevelopmentplatform/workspaces'),
            self.check('location', '{location}'),
            self.check('dataLocation', '{location}'),
            self.check('storageAccountCount', '{new-storage-account-count}')
        ]).get_output_in_json()
        assert workspace['tags'] is not None
        self.cmd("az adp workspace delete --name {workspace-name} --resource-group {resource-group} --yes")

    @ResourceGroupPreparer(name_prefix="adp_cli", parameter_name_for_location="location")
    def test_workspace_storageAccountSkuUpgrade(self, resource_group):
        workpace_name = self.create_random_name(prefix='cli', length=40)
        self.kwargs.update({
            "resource-group": resource_group,
            "workspace-name": workpace_name,
            "location": "westus3",
            "storage-account-count": "1",
            "storage-account-sku": "Standard_LRS",
            "new-storage-account-sku": "Standard_GRS",
            "tags": "{tag1:value1,tag2:value2}"
        })

        self.cmd("az adp workspace create -g {resource-group} --name {workspace-name} -l {location} --storage-account-count {storage-account-count} --storage-sku name={storage-account-sku}")
        self.cmd('az adp workspace update --name {workspace-name} --resource-group {resource-group} --tags {tags} --set "properties.storageSku.name={new-storage-account-sku}"')
        workspace_list_by_rg = self.cmd("az adp workspace list -g {resource-group}").get_output_in_json()
        assert len(workspace_list_by_rg) > 0
        workspace = self.cmd("az adp workspace show --name {workspace-name} --resource-group {resource-group}", checks=[
            self.check('name', '{workspace-name}'),
            self.check('provisioningState', 'Succeeded'),
            self.check('type', 'microsoft.autonomousdevelopmentplatform/workspaces'),
            self.check('location', '{location}'),
            self.check('dataLocation', '{location}'),
            self.check('storageAccountCount', '{storage-account-count}'),
            self.check('storageSku', {'name': self.kwargs['new-storage-account-sku']})
        ]).get_output_in_json()
        assert workspace['tags'] is not None
        self.cmd("az adp workspace delete --name {workspace-name} --resource-group {resource-group} --yes")

    @ResourceGroupPreparer(name_prefix="adp_cli", parameter_name_for_location="location")
    def test_workspace_DirectReadAccess(self, resource_group):
        workpace_name = self.create_random_name(prefix='cli', length=40)
        self.kwargs.update({
            "resource-group": resource_group,
            "workspace-name": workpace_name,
            "location": "westus3",
            "storage-account-count": "1"
        })

        self.cmd("az adp workspace create -g {resource-group} --name {workspace-name} -l {location} --storage-account-count {storage-account-count}")
        self.cmd('az adp workspace update --name {workspace-name} --resource-group {resource-group} --set "properties.directReadAccess=Enabled"')
        workspace_list_by_rg = self.cmd("az adp workspace list -g {resource-group}").get_output_in_json()
        assert len(workspace_list_by_rg) > 0
        workspace = self.cmd("az adp workspace show --name {workspace-name} --resource-group {resource-group}", checks=[
            self.check('name', '{workspace-name}'),
            self.check('type', 'microsoft.autonomousdevelopmentplatform/workspaces'),
            self.check('location', '{location}'),
            self.check('dataLocation', '{location}'),
            self.check('directReadAccess', 'Enabled'),
        ]).get_output_in_json()
        self.cmd("az adp workspace delete --name {workspace-name} --resource-group {resource-group} --yes")


    @ResourceGroupPreparer(name_prefix="adp_cli", parameter_name_for_location="location")
    def test_workspace_differentDataLocation(self, resource_group):
        workpace_name = self.create_random_name(prefix='cli', length=40)
        self.kwargs.update({
            "resource-group": resource_group,
            "workspace-name": workpace_name,
            "location": "westus3",
            "data-location": "southcentralus",
            "storage-account-count": "1",
            "domain-name-label-scope" : "TenantReuse",
        })

        self.cmd("az adp workspace create -g {resource-group} --name {workspace-name} -l {location} --data-location {data-location} --storage-account-count {storage-account-count} --domain-name-scope {domain-name-label-scope}")
        workspace_list_by_rg = self.cmd("az adp workspace list -g {resource-group}").get_output_in_json()
        assert len(workspace_list_by_rg) > 0
        workspace = self.cmd("az adp workspace show --name {workspace-name} --resource-group {resource-group}", checks=[
            self.check('name', '{workspace-name}'),
            self.check('provisioningState', 'Succeeded'),
            self.check('type', 'microsoft.autonomousdevelopmentplatform/workspaces'),
            self.check('location', '{location}'),
            self.check('dataLocation', '{data-location}'),
            self.check('storageAccountCount', '{storage-account-count}')
        ]).get_output_in_json()
        self.cmd("az adp workspace delete --name {workspace-name} --resource-group {resource-group} --yes")
