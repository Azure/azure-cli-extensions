# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "health-data-ai-services deid-services job create",
)
class Create(AAZCommand):
    """Create resource create or replace operation template.
    """

    _aaz_info = {
        "version": "2024-11-15",
        "resources": [
            ["data-plane:healthdataaiservices.deidservices", "/jobs/{}", "2024-11-15"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group "Client"

        _args_schema = cls._args_schema
        _args_schema.endpoint = AAZStrArg(
            options=["--endpoint"],
            arg_group="Client",
            help="Url of your De-identification Service.",
            required=True,
        )

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["--name"],
            help="The name of a job.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-_]+[a-zA-Z0-9]$",
                max_length=36,
                min_length=3,
            ),
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.customizations = AAZObjectArg(
            options=["--customizations"],
            arg_group="Resource",
            help="Customization parameters to override default service behaviors.",
        )
        _args_schema.operation = AAZStrArg(
            options=["--operation"],
            arg_group="Resource",
            help="Operation to perform on the input documents.",
            default="Surrogate",
            enum={"Redact": "Redact", "Surrogate": "Surrogate", "Tag": "Tag"},
        )
        _args_schema.source_location = AAZObjectArg(
            options=["--source-location"],
            arg_group="Resource",
            help="Storage location to perform the operation on.",
            required=True,
        )
        _args_schema.target_location = AAZObjectArg(
            options=["--target-location"],
            arg_group="Resource",
            help="Target location to store output of operation.",
            required=True,
        )

        customizations = cls._args_schema.customizations
        customizations.redaction_format = AAZStrArg(
            options=["redaction-format"],
            help="Format of the redacted output. Only valid when Operation is Redact.  Please refer to https://learn.microsoft.com/azure/healthcare-apis/deidentification/redaction-format for more details.",
            fmt=AAZStrArgFormat(
                max_length=16,
                min_length=1,
            ),
        )
        customizations.surrogate_locale = AAZStrArg(
            options=["surrogate-locale"],
            help="Locale in which the output surrogates are written.",
            default="en-US",
        )

        source_location = cls._args_schema.source_location
        source_location.extensions = AAZListArg(
            options=["extensions"],
            help="List of extensions to filter path by.",
            default=["*"],
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        source_location.location = AAZStrArg(
            options=["location"],
            help="URL to storage location.",
            required=True,
        )
        source_location.prefix = AAZStrArg(
            options=["prefix"],
            help="Prefix to filter path by.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=1024,
            ),
        )

        extensions = cls._args_schema.source_location.extensions
        extensions.Element = AAZStrArg()

        target_location = cls._args_schema.target_location
        target_location.location = AAZStrArg(
            options=["location"],
            help="URL to storage location.",
            required=True,
        )
        target_location.overwrite = AAZBoolArg(
            options=["overwrite"],
            help="When set to true during a job, the service will overwrite the output location if it already exists.",
            default=False,
        )
        target_location.prefix = AAZStrArg(
            options=["prefix"],
            help="Replaces the input prefix of a file path with the output prefix, preserving the rest of the path structure.  Example: File full path: documents/user/note.txt Input Prefix: \"documents/user/\" Output Prefix: \"output_docs/\"  Output file: \"output_docs/note.txt\"",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=1024,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.DeidentifyDocuments(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class DeidentifyDocuments(AAZHttpOperation):
        CLIENT_TYPE = "AAZHealthdataaiservicesDeidservicesDataPlaneClient_healthcareapis"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_201_200,
                    self.on_error,
                    lro_options={"final-state-via": "original-uri"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [201, 200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_201_200,
                    self.on_error,
                    lro_options={"final-state-via": "original-uri"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/jobs/{name}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "endpoint", self.ctx.args.endpoint,
                    skip_quote=True,
                    required=True,
                ),
                **self.serialize_url_param(
                    "name", self.ctx.args.name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-11-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("customizations", AAZObjectType, ".customizations")
            _builder.set_prop("operation", AAZStrType, ".operation")
            _builder.set_prop("sourceLocation", AAZObjectType, ".source_location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("targetLocation", AAZObjectType, ".target_location", typ_kwargs={"flags": {"required": True}})

            customizations = _builder.get(".customizations")
            if customizations is not None:
                customizations.set_prop("redactionFormat", AAZStrType, ".redaction_format")
                customizations.set_prop("surrogateLocale", AAZStrType, ".surrogate_locale")

            source_location = _builder.get(".sourceLocation")
            if source_location is not None:
                source_location.set_prop("extensions", AAZListType, ".extensions")
                source_location.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
                source_location.set_prop("prefix", AAZStrType, ".prefix", typ_kwargs={"flags": {"required": True}})

            extensions = _builder.get(".sourceLocation.extensions")
            if extensions is not None:
                extensions.set_elements(AAZStrType, ".")

            target_location = _builder.get(".targetLocation")
            if target_location is not None:
                target_location.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
                target_location.set_prop("overwrite", AAZBoolType, ".overwrite")
                target_location.set_prop("prefix", AAZStrType, ".prefix", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_201_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_201_200
            )

        _schema_on_201_200 = None

        @classmethod
        def _build_schema_on_201_200(cls):
            if cls._schema_on_201_200 is not None:
                return cls._schema_on_201_200

            cls._schema_on_201_200 = AAZObjectType()

            _schema_on_201_200 = cls._schema_on_201_200
            _schema_on_201_200.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            _schema_on_201_200.customizations = AAZObjectType()
            _schema_on_201_200.error = AAZObjectType(
                flags={"read_only": True},
            )
            _CreateHelper._build_schema_azure_core_foundations_error_read(_schema_on_201_200.error)
            _schema_on_201_200.last_updated_at = AAZStrType(
                serialized_name="lastUpdatedAt",
                flags={"read_only": True},
            )
            _schema_on_201_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_201_200.operation = AAZStrType()
            _schema_on_201_200.source_location = AAZObjectType(
                serialized_name="sourceLocation",
                flags={"required": True},
            )
            _schema_on_201_200.started_at = AAZStrType(
                serialized_name="startedAt",
                flags={"read_only": True},
            )
            _schema_on_201_200.status = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_201_200.summary = AAZObjectType(
                flags={"read_only": True},
            )
            _schema_on_201_200.target_location = AAZObjectType(
                serialized_name="targetLocation",
                flags={"required": True},
            )

            customizations = cls._schema_on_201_200.customizations
            customizations.redaction_format = AAZStrType(
                serialized_name="redactionFormat",
            )
            customizations.surrogate_locale = AAZStrType(
                serialized_name="surrogateLocale",
            )

            source_location = cls._schema_on_201_200.source_location
            source_location.extensions = AAZListType()
            source_location.location = AAZStrType(
                flags={"required": True},
            )
            source_location.prefix = AAZStrType(
                flags={"required": True},
            )

            extensions = cls._schema_on_201_200.source_location.extensions
            extensions.Element = AAZStrType()

            summary = cls._schema_on_201_200.summary
            summary.bytes_processed = AAZIntType(
                serialized_name="bytesProcessed",
                flags={"required": True},
            )
            summary.canceled = AAZIntType(
                flags={"required": True},
            )
            summary.failed = AAZIntType(
                flags={"required": True},
            )
            summary.successful = AAZIntType(
                flags={"required": True},
            )
            summary.total = AAZIntType(
                flags={"required": True},
            )

            target_location = cls._schema_on_201_200.target_location
            target_location.location = AAZStrType(
                flags={"required": True},
            )
            target_location.overwrite = AAZBoolType()
            target_location.prefix = AAZStrType(
                flags={"required": True},
            )

            return cls._schema_on_201_200


class _CreateHelper:
    """Helper class for Create"""

    _schema_azure_core_foundations_error_read = None

    @classmethod
    def _build_schema_azure_core_foundations_error_read(cls, _schema):
        if cls._schema_azure_core_foundations_error_read is not None:
            _schema.code = cls._schema_azure_core_foundations_error_read.code
            _schema.details = cls._schema_azure_core_foundations_error_read.details
            _schema.innererror = cls._schema_azure_core_foundations_error_read.innererror
            _schema.message = cls._schema_azure_core_foundations_error_read.message
            _schema.target = cls._schema_azure_core_foundations_error_read.target
            return

        cls._schema_azure_core_foundations_error_read = _schema_azure_core_foundations_error_read = AAZObjectType(
            flags={"read_only": True}
        )

        azure_core_foundations_error_read = _schema_azure_core_foundations_error_read
        azure_core_foundations_error_read.code = AAZStrType(
            flags={"required": True},
        )
        azure_core_foundations_error_read.details = AAZListType()
        azure_core_foundations_error_read.innererror = AAZObjectType()
        cls._build_schema_azure_core_foundations_innererror_read(azure_core_foundations_error_read.innererror)
        azure_core_foundations_error_read.message = AAZStrType(
            flags={"required": True},
        )
        azure_core_foundations_error_read.target = AAZStrType()

        details = _schema_azure_core_foundations_error_read.details
        details.Element = AAZObjectType()
        cls._build_schema_azure_core_foundations_error_read(details.Element)

        _schema.code = cls._schema_azure_core_foundations_error_read.code
        _schema.details = cls._schema_azure_core_foundations_error_read.details
        _schema.innererror = cls._schema_azure_core_foundations_error_read.innererror
        _schema.message = cls._schema_azure_core_foundations_error_read.message
        _schema.target = cls._schema_azure_core_foundations_error_read.target

    _schema_azure_core_foundations_innererror_read = None

    @classmethod
    def _build_schema_azure_core_foundations_innererror_read(cls, _schema):
        if cls._schema_azure_core_foundations_innererror_read is not None:
            _schema.code = cls._schema_azure_core_foundations_innererror_read.code
            _schema.innererror = cls._schema_azure_core_foundations_innererror_read.innererror
            return

        cls._schema_azure_core_foundations_innererror_read = _schema_azure_core_foundations_innererror_read = AAZObjectType()

        azure_core_foundations_innererror_read = _schema_azure_core_foundations_innererror_read
        azure_core_foundations_innererror_read.code = AAZStrType()
        azure_core_foundations_innererror_read.innererror = AAZObjectType()
        cls._build_schema_azure_core_foundations_innererror_read(azure_core_foundations_innererror_read.innererror)

        _schema.code = cls._schema_azure_core_foundations_innererror_read.code
        _schema.innererror = cls._schema_azure_core_foundations_innererror_read.innererror


__all__ = ["Create"]
