# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------
# The @ResourceGroupPreparer decorator is used to automatically create and manage a resource group for the duration of the test.
# It ensures that the resource group is created before the test runs and deleted after the test completes, regardless of whether
# the test passes or fails. This helps to keep the Azure environment clean and prevents resource leaks.
# --------------------------------------------------------------------------------------------

import random
import string
from azure.cli.testsdk import ScenarioTest, ResourceGroupPreparer

class DeidserviceScenario(ScenarioTest):
    
    @ResourceGroupPreparer(name_prefix='test_deidservice_lifecycle_', location='eastus')
    def test_deidservice_lifecycle(self, resource_group):
        
        self.kwargs.update({
            'serviceName': self.create_random_name('azcli-ext-test-', 24), # Create a random name for the service, max length 24
            'location': 'eastus',
            'rg': resource_group
        })
        
        # Create deidservice
        self.cmd('az healthcareapis deidservice create --name {serviceName} -g {rg} --location {location}', checks=[
            self.check('name', '{serviceName}'),
            self.check('location', '{location}')
        ])
        
        # Update deidservice
        self.cmd('az healthcareapis deidservice update --name {serviceName} -g {rg} --tags tag=test', checks=[
            self.check('name', '{serviceName}'),
            self.check('tags.tag', 'test')
        ])
        
        # Show deidservice
        self.cmd('az healthcareapis deidservice show --name {serviceName} -g {rg}', checks=[
            self.check('name', '{serviceName}'),
            self.check('tags.tag', 'test'),
            self.check('location', '{location}'),
            self.check('resourceGroup', '{rg}'),
            self.check('type', 'microsoft.healthdataaiservices/deidservices')
        ])
        
        # List deidservices
        self.cmd('az healthcareapis deidservice list -g {rg}', checks=[
            self.check('[0].name', '{serviceName}'),
            self.check('[0].tags.tag', 'test'),
            self.check('[0].location', '{location}'),
            self.check('[0].resourceGroup', '{rg}'),
            self.check('[0].type', 'microsoft.healthdataaiservices/deidservices')
        ])
        
        # Delete deidservice
        self.cmd('az healthcareapis deidservice delete --name {serviceName} -g {rg} -y')
        
        # Verify deletion by listing again
        services = self.cmd('az healthcareapis deidservice list -g {rg}').get_output_in_json()
        self.assertEqual(len(services), 0)