# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from .. import try_manual, raise_if, calc_coverage
from azure.cli.testsdk import ResourceGroupPreparer


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup
@try_manual
def setup(test, rg, rg_2):
    pass


# EXAMPLE: Create a new server group
@try_manual
def step_create_a_new_server_group(test, rg, rg_2):
    test.cmd('az postgresqlhsc server-group create '
             '--location "westus" '
             '--administrator-login "citus" '
             '--administrator-login-password "password" '
             '--availability-zone "1" '
             '--backup-retention-days 35 '
             '--citus-version "9.5" '
             '--enable-mx true '
             '--enable-zfs false '
             '--postgresql-version "12" '
             '--server-role-groups name="" enable-ha=true role="Coordinator" server-count=1 '
             'server-edition="GeneralPurpose" storage-quota-in-mb=524288 v-cores=4 '
             '--server-role-groups name="" enable-ha=false role="Worker" server-count=3 server-edition="MemoryOptimized'
             '" storage-quota-in-mb=524288 v-cores=4 '
             '--standby-availability-zone "2" '
             '--tags ElasticServer="1" '
             '--resource-group "{rg}" '
             '--name "{myServerGroup2}"',
             checks=[
                 test.check("name", "{myServerGroup2}", case_sensitive=False),
             ])


# EXAMPLE: Create a new server group as a point in time restore
@try_manual
def step_create_a_new(test, rg, rg_2):
    test.cmd('az postgresqlhsc server-group create '
             '--location "westus" '
             '--create-mode "PointInTimeRestore" '
             '--enable-mx true '
             '--enable-zfs false '
             '--point-in-time-utc "2017-12-14T00:00:37.467Z" '
             '--source-location "eastus" '
             '--source-resource-group-name "SourceGroup" '
             '--source-server-group-name "pgtests-source-server-group" '
             '--source-subscription-id "dddddddd-dddd-dddd-dddd-dddddddddddd" '
             '--resource-group "{rg}" '
             '--name "{myServerGroup2}"',
             checks=[
                 test.check("name", "{myServerGroup2}", case_sensitive=False),
             ])


# EXAMPLE: Update the server group
@try_manual
def step_update_the_server_group(test, rg, rg_2):
    test.cmd('az postgresqlhsc server-group update '
             '--administrator-login-password "secret" '
             '--backup-retention-days 30 '
             '--postgresql-version "12" '
             '--server-role-groups name="" enable-ha=false role="Coordinator" server-count=1 '
             'server-edition="GeneralPurpose" storage-quota-in-mb=1048576 v-cores=8 '
             '--server-role-groups name="" enable-ha=true role="Worker" server-count=4 server-edition="MemoryOptimized"'
             ' storage-quota-in-mb=524288 v-cores=4 '
             '--tags ElasticServer="2" '
             '--resource-group "{rg}" '
             '--name "{myServerGroup2}"',
             checks=[
                 test.check("name", "{myServerGroup2}", case_sensitive=False),
             ])


# EXAMPLE: Get the server group
@try_manual
def step_get_the_server_group(test, rg, rg_2):
    test.cmd('az postgresqlhsc server-group show '
             '--resource-group "{rg}" '
             '--name "{myServerGroup}"',
             checks=[])


# EXAMPLE: Delete the server group
@try_manual
def step_delete_the_server_group(test, rg, rg_2):
    test.cmd('az postgresqlhsc server-group delete -y '
             '--resource-group "{rg}" '
             '--name "{myServerGroup3}"',
             checks=[])


# EXAMPLE: Scale compute
@try_manual
def step_scale_compute(test, rg, rg_2):
    test.cmd('az postgresqlhsc server-group update '
             '--location "westus" '
             '--server-role-groups name="" role="Coordinator" v-cores=16 '
             '--resource-group "{rg}" '
             '--name "{myServerGroup2}"',
             checks=[
                 test.check("name", "{myServerGroup2}", case_sensitive=False),
             ])


# EXAMPLE: Scale storage
@try_manual
def step_scale_storage(test, rg, rg_2):
    test.cmd('az postgresqlhsc server-group update '
             '--location "westus" '
             '--server-role-groups name="" role="Worker" storage-quota-in-mb=8388608 '
             '--resource-group "{rg}" '
             '--name "{myServerGroup2}"',
             checks=[
                 test.check("name", "{myServerGroup2}", case_sensitive=False),
             ])


# EXAMPLE: Add new worker nodes
@try_manual
def step_add_new_worker_nodes(test, rg, rg_2):
    test.cmd('az postgresqlhsc server-group update '
             '--location "westus" '
             '--server-role-groups name="" role="Worker" server-count=10 '
             '--resource-group "{rg}" '
             '--name "{myServerGroup2}"',
             checks=[
                 test.check("name", "{myServerGroup2}", case_sensitive=False),
             ])


# EXAMPLE: Update customer maintenance window
@try_manual
def step_update_customer_maintenance_window(test, rg, rg_2):
    test.cmd('az postgresqlhsc server-group update '
             '--maintenance-window custom-window="Enabled" day-of-week=0 start-hour=8 start-minute=0 '
             '--resource-group "{rg}" '
             '--name "{myServerGroup2}"',
             checks=[
                 test.check("name", "{myServerGroup2}", case_sensitive=False),
             ])


# EXAMPLE: List servers of the server group
@try_manual
def step_list_servers_of_the_server_group(test, rg, rg_2):
    test.cmd('az postgresqlhsc server list '
             '--resource-group "{rg}" '
             '--server-group-name "{myServerGroup}"',
             checks=[])


# EXAMPLE: Get the server of server group
@try_manual
def step_get_the_server_of_server_group(test, rg, rg_2):
    test.cmd('az postgresqlhsc server show '
             '--resource-group "{rg}" '
             '--server-group-name "{myServerGroup}" '
             '--name "{myServer}"',
             checks=[])


# EXAMPLE: List configurations of the server that in the server group
@try_manual
def step_list_configurations_of(test, rg, rg_2):
    test.cmd('az postgresqlhsc configuration list '
             '--resource-group "{rg_2}" '
             '--server-group-name "{myServerGroup2}" '
             '--server-name "{myServer2}"',
             checks=[])


# EXAMPLE: Update configurations of the server group
@try_manual
def step_update_configurations_of_the_server_group(test, rg, rg_2):
    # EXAMPLE NOT FOUND!
    pass


# EXAMPLE: List configurations of the server group
@try_manual
def step_list_configurations_of_the_server_group(test, rg, rg_2):
    test.cmd('az postgresqlhsc configuration list '
             '--resource-group "{rg_2}" '
             '--server-group-name "{myServerGroup2}"',
             checks=[])


# EXAMPLE: Update single configuration of the server group
@try_manual
def step_update_single_configuration(test, rg, rg_2):
    test.cmd('az postgresqlhsc configuration update '
             '--name "{myConfiguration}" '
             '--server-role-group-configurations role="Coordinator" value="on" '
             '--server-role-group-configurations role="Worker" value="off" '
             '--resource-group "{rg_2}" '
             '--server-group-name "{myServerGroup2}"',
             checks=[
                 test.check("name", "{myConfiguration}", case_sensitive=False),
             ])


# EXAMPLE: Get single configuration of the server group
@try_manual
def step_get_single_configuration_of_the_server_group(test, rg, rg_2):
    test.cmd('az postgresqlhsc configuration show '
             '--name "{myConfiguration}" '
             '--resource-group "{rg_2}" '
             '--server-group-name "{myServerGroup2}"',
             checks=[
                 test.check("name", "{myConfiguration}", case_sensitive=False),
             ])


# EXAMPLE: Create a firewall rule of the server group
@try_manual
def step_create_a_firewall_rule_of_the_server_group(test, rg, rg_2):
    test.cmd('az postgresqlhsc firewall-rule create '
             '--name "{myFirewallRule}" '
             '--end-ip-address "255.255.255.255" '
             '--start-ip-address "0.0.0.0" '
             '--resource-group "{rg}" '
             '--server-group-name "{myServerGroup4}"',
             checks=[
                 test.check("name", "{myFirewallRule}", case_sensitive=False),
                 test.check("endIpAddress", "255.255.255.255", case_sensitive=False),
                 test.check("startIpAddress", "0.0.0.0", case_sensitive=False),
             ])


# EXAMPLE: Delete the firewall rule of the server group
@try_manual
def step_delete_the_firewall_rule_of_the_server_group(test, rg, rg_2):
    test.cmd('az postgresqlhsc firewall-rule delete -y '
             '--name "{myFirewallRule}" '
             '--resource-group "{rg}" '
             '--server-group-name "{myServerGroup4}"',
             checks=[])


# EXAMPLE: Get the firewall rule of the server group
@try_manual
def step_get_the_firewall_rule_of_the_server_group(test, rg, rg_2):
    test.cmd('az postgresqlhsc firewall-rule show '
             '--name "{myFirewallRule}" '
             '--resource-group "{rg}" '
             '--server-group-name "{myServerGroup4}"',
             checks=[])


# EXAMPLE: List firewall rules of the server group
@try_manual
def step_list_firewall_rules_of_the_server_group(test, rg, rg_2):
    test.cmd('az postgresqlhsc firewall-rule list '
             '--resource-group "{rg}" '
             '--server-group-name "{myServerGroup4}"',
             checks=[])


# EXAMPLE: RoleCreate
@try_manual
def step_rolecreate(test, rg, rg_2):
    test.cmd('az postgresqlhsc role create '
             '--password "secret" '
             '--resource-group "{rg}" '
             '--name "{myRole}" '
             '--server-group-name "{myServerGroup4}"',
             checks=[
                 test.check("name", "{myRole}", case_sensitive=False),
             ])


# EXAMPLE: RoleDelete
@try_manual
def step_roledelete(test, rg, rg_2):
    test.cmd('az postgresqlhsc role delete -y '
             '--resource-group "{rg}" '
             '--name "{myRole}" '
             '--server-group-name "{myServerGroup4}"',
             checks=[])


# EXAMPLE: RoleList
@try_manual
def step_rolelist(test, rg, rg_2):
    test.cmd('az postgresqlhsc role list '
             '--resource-group "{rg}" '
             '--server-group-name "{myServerGroup4}"',
             checks=[])


# EXAMPLE: Restart all servers in the server group
@try_manual
def step_restart_all_servers_in_the_server_group(test, rg, rg_2):
    test.cmd('az postgresqlhsc server-group restart '
             '--resource-group "{rg}" '
             '--name "{myServerGroup}"',
             checks=[])


# EXAMPLE: Start all servers in the server group
@try_manual
def step_start_all_servers_in_the_server_group(test, rg, rg_2):
    test.cmd('az postgresqlhsc server-group start '
             '--resource-group "{rg}" '
             '--name "{myServerGroup}"',
             checks=[])


# EXAMPLE: Stop all servers in the server group
@try_manual
def step_stop_all_servers_in_the_server_group(test, rg, rg_2):
    test.cmd('az postgresqlhsc server-group stop '
             '--resource-group "{rg}" '
             '--name "{myServerGroup}"',
             checks=[])


# EXAMPLE: Check name availability
@try_manual
def step_check_name_availability(test, rg, rg_2):
    # EXAMPLE NOT FOUND!
    pass


# EXAMPLE: List all available operations
@try_manual
def step_list_all_available_operations(test, rg, rg_2):
    # EXAMPLE NOT FOUND!
    pass


# Env cleanup
@try_manual
def cleanup(test, rg, rg_2):
    pass


# Testcase
@try_manual
def call_scenario(test, rg, rg_2):
    setup(test, rg, rg_2)
    step_create_a_new_server_group(test, rg, rg_2)
    step_create_a_new(test, rg, rg_2)
    step_update_the_server_group(test, rg, rg_2)
    step_get_the_server_group(test, rg, rg_2)
    step_delete_the_server_group(test, rg, rg_2)
    step_scale_compute(test, rg, rg_2)
    step_scale_storage(test, rg, rg_2)
    step_add_new_worker_nodes(test, rg, rg_2)
    step_update_customer_maintenance_window(test, rg, rg_2)
    step_list_servers_of_the_server_group(test, rg, rg_2)
    step_get_the_server_of_server_group(test, rg, rg_2)
    step_list_configurations_of(test, rg, rg_2)
    step_update_configurations_of_the_server_group(test, rg, rg_2)
    step_list_configurations_of_the_server_group(test, rg, rg_2)
    step_update_single_configuration(test, rg, rg_2)
    step_get_single_configuration_of_the_server_group(test, rg, rg_2)
    step_create_a_firewall_rule_of_the_server_group(test, rg, rg_2)
    step_delete_the_firewall_rule_of_the_server_group(test, rg, rg_2)
    step_get_the_firewall_rule_of_the_server_group(test, rg, rg_2)
    step_list_firewall_rules_of_the_server_group(test, rg, rg_2)
    step_rolecreate(test, rg, rg_2)
    step_roledelete(test, rg, rg_2)
    step_rolelist(test, rg, rg_2)
    step_restart_all_servers_in_the_server_group(test, rg, rg_2)
    step_start_all_servers_in_the_server_group(test, rg, rg_2)
    step_stop_all_servers_in_the_server_group(test, rg, rg_2)
    step_check_name_availability(test, rg, rg_2)
    step_list_all_available_operations(test, rg, rg_2)
    cleanup(test, rg, rg_2)


@try_manual
class MicrosoftPostgreSQLHyperscaleScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='clitestpostgresqlhsc_TestGroup'[:7], key='rg', parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='clitestpostgresqlhsc_TestResourceGroup'[:7], key='rg_2',
                           parameter_name='rg_2')
    def test_postgresqlhsc(self, rg, rg_2):

        self.kwargs.update({
            'myServerGroup': 'hsctestsg1',
            'myServerGroup2': 'hsctestsg',
            'myServerGroup3': 'testservergroup',
            'myServerGroup4': 'pgtestsvc4',
            'myServer': 'hsctestsg1-c',
            'myServer2': 'testserver',
            'myConfiguration': 'array_nulls',
            'myFirewallRule': 'rule1',
            'myRole': 'role1',
        })

        call_scenario(self, rg, rg_2)
        calc_coverage(__file__)
        raise_if()
