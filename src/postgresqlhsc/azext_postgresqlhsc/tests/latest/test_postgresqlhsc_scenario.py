# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .preparers import VirtualNetworkPreparer
from .example_steps import step_server_group_create
from .example_steps import step_server_group_create2
from .example_steps import step_server_group_update5
from .example_steps import step_server_group_show
from .example_steps import step_server_group_delete
from .example_steps import step_server_group_update2
from .example_steps import step_server_group_update3
from .example_steps import step_server_group_update
from .example_steps import step_server_group_update4
from .example_steps import step_server_list
from .example_steps import step_server_show
from .example_steps import step_configuration_list2
from .example_steps import step_configuration_list
from .example_steps import step_configuration_update
from .example_steps import step_configuration_show
from .example_steps import step_firewall_rule_create
from .example_steps import step_firewall_rule_delete
from .example_steps import step_firewall_rule_show
from .example_steps import step_firewall_rule_list
from .example_steps import step_role_create
from .example_steps import step_role_delete
from .example_steps import step_role_list
from .example_steps import step_server_group_restart
from .example_steps import step_server_group_start
from .example_steps import step_server_group_stop
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg_2, rg, rg_3):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg_2, rg, rg_3):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg_2, rg, rg_3):
    setup_scenario(test, rg_2, rg, rg_3)
    step_server_group_create(test, rg_2, rg, rg_3, checks=[
        test.check("name", "{myServerGroup2}", case_sensitive=False),
    ])
    step_server_group_create2(test, rg_2, rg, rg_3, checks=[
        test.check("name", "{myServerGroup2}", case_sensitive=False),
    ])
    step_server_group_update5(test, rg_2, rg, rg_3, checks=[
        test.check("name", "{myServerGroup2}", case_sensitive=False),
    ])
    step_server_group_show(test, rg_2, rg, rg_3, checks=[])
    step_server_group_delete(test, rg_2, rg, rg_3, checks=[])
    step_server_group_update2(test, rg_2, rg, rg_3, checks=[
        test.check("name", "{myServerGroup2}", case_sensitive=False),
    ])
    step_server_group_update3(test, rg_2, rg, rg_3, checks=[
        test.check("name", "{myServerGroup2}", case_sensitive=False),
    ])
    step_server_group_update(test, rg_2, rg, rg_3, checks=[
        test.check("name", "{myServerGroup2}", case_sensitive=False),
    ])
    step_server_group_update4(test, rg_2, rg, rg_3, checks=[
        test.check("name", "{myServerGroup2}", case_sensitive=False),
    ])
    step_server_list(test, rg_2, rg, rg_3, checks=[])
    step_server_show(test, rg_2, rg, rg_3, checks=[])
    step_configuration_list2(test, rg_2, rg, rg_3, checks=[])
    # STEP NOT FOUND: Update configurations of the server group
    step_configuration_list(test, rg_2, rg, rg_3, checks=[])
    step_configuration_update(test, rg_2, rg, rg_3, checks=[
        test.check("name", "{myConfiguration}", case_sensitive=False),
    ])
    step_configuration_show(test, rg_2, rg, rg_3, checks=[
        test.check("name", "{myConfiguration}", case_sensitive=False),
    ])
    step_firewall_rule_create(test, rg_2, rg, rg_3, checks=[
        test.check("name", "{myFirewallRule}", case_sensitive=False),
        test.check("endIpAddress", "255.255.255.255", case_sensitive=False),
        test.check("startIpAddress", "0.0.0.0", case_sensitive=False),
    ])
    step_firewall_rule_delete(test, rg_2, rg, rg_3, checks=[])
    step_firewall_rule_show(test, rg_2, rg, rg_3, checks=[])
    step_firewall_rule_list(test, rg_2, rg, rg_3, checks=[])
    step_role_create(test, rg_2, rg, rg_3, checks=[
        test.check("name", "{myRole}", case_sensitive=False),
    ])
    step_role_delete(test, rg_2, rg, rg_3, checks=[])
    step_role_list(test, rg_2, rg, rg_3, checks=[])
    step_server_group_restart(test, rg_2, rg, rg_3, checks=[])
    step_server_group_start(test, rg_2, rg, rg_3, checks=[])
    step_server_group_stop(test, rg_2, rg, rg_3, checks=[])
    # STEP NOT FOUND: Check name availability
    # STEP NOT FOUND: List all available operations
    cleanup_scenario(test, rg_2, rg, rg_3)


# Test class for Scenario
@try_manual
class PostgresqlhscScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(PostgresqlhscScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myServerGroup': 'hsctestsg1',
            'myServerGroup2': 'hsctestsg',
            'myServerGroup3': 'testservergroup',
            'myServerGroup4': 'pgtestsvc4',
            'myServer': 'hsctestsg1-c',
            'myServer2': 'testserver',
            'myConfiguration': 'array_nulls',
            'myFirewallRule': 'rule1',
            'myRole': 'role1',
        })


    @ResourceGroupPreparer(name_prefix='clitestpostgresqlhsc_testrg'[:7], key='rg_2', parameter_name='rg_2')
    @ResourceGroupPreparer(name_prefix='clitestpostgresqlhsc_TestGroup'[:7], key='rg', parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='clitestpostgresqlhsc_TestResourceGroup'[:7], key='rg_3',
                           parameter_name='rg_3')
    @VirtualNetworkPreparer(name_prefix='clitestpostgresqlhsc_test-vnet'[:7], key='vn', resource_group_key='rg_2')
    def test_postgresqlhsc_Scenario(self, rg_2, rg, rg_3):
        call_scenario(self, rg_2, rg, rg_3)
        calc_coverage(__file__)
        raise_if()

