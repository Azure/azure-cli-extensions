# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_postgresqlhsc.action import (
    AddServerRoleGroups,
    AddMaintenanceWindow,
    AddServerRoleGroupConfigurations
)


def load_arguments(self, _):

    with self.argument_context('postgresqlhsc server-group list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('postgresqlhsc server-group show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', options_list=['--name', '-n', '--server-group-name'], type=str, help='The name '
                   'of the server group.', id_part='name')

    with self.argument_context('postgresqlhsc server-group create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', options_list=['--name', '-n', '--server-group-name'], type=str, help='The name '
                   'of the server group.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('create_mode', arg_type=get_enum_type(['Default', 'PointInTimeRestore']), help='The mode to create '
                   'a new server group.')
        c.argument('administrator_login', type=str, help='The administrator\'s login name of servers in server group. '
                   'Can only be specified when the server is being created (and is required for creation).')
        c.argument('administrator_login_password', help='The password of the administrator login.')
        c.argument('backup_retention_days', type=int, help='The backup retention days for server group.')
        c.argument('postgresql_version', arg_type=get_enum_type(['11', '12']), help='The PostgreSQL version of server '
                   'group.')
        c.argument('citus_version', arg_type=get_enum_type(['8.3', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5']), help=''
                   'The Citus version of server group.')
        c.argument('enable_mx', arg_type=get_three_state_flag(), help='If Citus MX is enabled or not for the server '
                   'group.')
        c.argument('enable_zfs', arg_type=get_three_state_flag(), help='If ZFS compression is enabled or not for the '
                   'server group.')
        c.argument('enable_shards_on_coordinator', arg_type=get_three_state_flag(), help='If shards on coordinator is '
                   'enabled or not for the server group.')
        c.argument('server_role_groups', action=AddServerRoleGroups, nargs='*',
                   help='The list of server role groups.')
        c.argument('maintenance_window', action=AddMaintenanceWindow, nargs='*', help='Maintenance window of a server '
                   'group.')
        c.argument('availability_zone', type=str, help='Availability Zone information of the server group.')
        c.argument('standby_availability_zone', type=str, help='Standby Availability Zone information of the server '
                   'group.')
        c.argument('source_subscription_id', type=str, help='The source subscription id to restore from. It\'s '
                   'required when \'createMode\' is \'PointInTimeRestore\'')
        c.argument('source_resource_group_name', type=str, help='The source resource group name to restore from. It\'s '
                   'required when \'createMode\' is \'PointInTimeRestore\'')
        c.argument('source_server_group_name', type=str, help='The source server group name to restore from. It\'s '
                   'required when \'createMode\' is \'PointInTimeRestore\'')
        c.argument('source_location', type=str, help='The source server group location to restore from. It\'s required '
                   'when \'createMode\' is \'PointInTimeRestore\'')
        c.argument('point_in_time_utc', help='Restore point creation time (ISO8601 format), specifying the time to '
                   'restore from. It\'s required when \'createMode\' is \'PointInTimeRestore\'')
        c.argument('delegated_subnet_arguments_subnet_arm_resource_id', type=str, help='delegated subnet arm resource '
                   'id.')

    with self.argument_context('postgresqlhsc server-group update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', options_list=['--name', '-n', '--server-group-name'], type=str, help='The name '
                   'of the server group.', id_part='name')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('administrator_login_password', help='The password of the administrator login.')
        c.argument('backup_retention_days', type=int, help='The backup retention days for server group.')
        c.argument('postgresql_version', arg_type=get_enum_type(['11', '12']), help='The PostgreSQL version of server '
                   'group.')
        c.argument('citus_version', arg_type=get_enum_type(['8.3', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5']), help=''
                   'The Citus version of server group.')
        c.argument('enable_shards_on_coordinator', arg_type=get_three_state_flag(), help='If shards on coordinator is '
                   'enabled or not for the server group.')
        c.argument('server_role_groups', action=AddServerRoleGroups, nargs='*',
                   help='The list of server role groups.')
        c.argument('maintenance_window', action=AddMaintenanceWindow, nargs='*', help='Maintenance window of a server '
                   'group.')
        c.argument('availability_zone', type=str, help='Availability Zone information of the server group.')
        c.argument('standby_availability_zone', type=str, help='Standby Availability Zone information of the server '
                   'group.')

    with self.argument_context('postgresqlhsc server-group delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', options_list=['--name', '-n', '--server-group-name'], type=str, help='The name '
                   'of the server group.', id_part='name')

    with self.argument_context('postgresqlhsc server-group restart') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', options_list=['--name', '-n', '--server-group-name'], type=str, help='The name '
                   'of the server group.', id_part='name')

    with self.argument_context('postgresqlhsc server-group start') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', options_list=['--name', '-n', '--server-group-name'], type=str, help='The name '
                   'of the server group.', id_part='name')

    with self.argument_context('postgresqlhsc server-group stop') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', options_list=['--name', '-n', '--server-group-name'], type=str, help='The name '
                   'of the server group.', id_part='name')

    with self.argument_context('postgresqlhsc server-group wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', options_list=['--name', '-n', '--server-group-name'], type=str, help='The name '
                   'of the server group.', id_part='name')

    with self.argument_context('postgresqlhsc server list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', type=str, help='The name of the server group.')

    with self.argument_context('postgresqlhsc server show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', type=str, help='The name of the server group.', id_part='name')
        c.argument('server_name', options_list=['--name', '-n', '--server-name'], type=str, help='The name of the '
                   'server.', id_part='child_name_1')

    with self.argument_context('postgresqlhsc configuration list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', type=str, help='The name of the server group.')
        c.argument('server_name', type=str, help='The name of the server.')

    with self.argument_context('postgresqlhsc configuration show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', type=str, help='The name of the server group.', id_part='name')
        c.argument('configuration_name', options_list=['--name', '-n', '--configuration-name'], type=str, help='The '
                   'name of the server group configuration.', id_part='child_name_1')

    with self.argument_context('postgresqlhsc configuration update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', type=str, help='The name of the server group.', id_part='name')
        c.argument('configuration_name', options_list=['--name', '-n', '--configuration-name'], type=str, help='The '
                   'name of the server group configuration.', id_part='child_name_1')
        c.argument('server_role_group_configurations', action=AddServerRoleGroupConfigurations, nargs='*', help='The '
                   'list of server role group configuration values.')

    with self.argument_context('postgresqlhsc configuration wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', type=str, help='The name of the server group.', id_part='name')
        c.argument('configuration_name', options_list=['--name', '-n', '--configuration-name'], type=str, help='The '
                   'name of the server group configuration.', id_part='child_name_1')

    with self.argument_context('postgresqlhsc firewall-rule list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', type=str, help='The name of the server group.')

    with self.argument_context('postgresqlhsc firewall-rule show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', type=str, help='The name of the server group.', id_part='name')
        c.argument('firewall_rule_name', options_list=['--name', '-n', '--firewall-rule-name'], type=str, help='The '
                   'name of the server group firewall rule.', id_part='child_name_1')

    with self.argument_context('postgresqlhsc firewall-rule create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', type=str, help='The name of the server group.')
        c.argument('firewall_rule_name', options_list=['--name', '-n', '--firewall-rule-name'], type=str, help='The '
                   'name of the server group firewall rule.')
        c.argument('start_ip_address', type=str, help='The start IP address of the server group firewall rule. Must be '
                   'IPv4 format.')
        c.argument('end_ip_address', type=str, help='The end IP address of the server group firewall rule. Must be '
                   'IPv4 format.')

    with self.argument_context('postgresqlhsc firewall-rule update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', type=str, help='The name of the server group.', id_part='name')
        c.argument('firewall_rule_name', options_list=['--name', '-n', '--firewall-rule-name'], type=str, help='The '
                   'name of the server group firewall rule.', id_part='child_name_1')
        c.argument('start_ip_address', type=str, help='The start IP address of the server group firewall rule. Must be '
                   'IPv4 format.')
        c.argument('end_ip_address', type=str, help='The end IP address of the server group firewall rule. Must be '
                   'IPv4 format.')

    with self.argument_context('postgresqlhsc firewall-rule delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', type=str, help='The name of the server group.', id_part='name')
        c.argument('firewall_rule_name', options_list=['--name', '-n', '--firewall-rule-name'], type=str, help='The '
                   'name of the server group firewall rule.', id_part='child_name_1')

    with self.argument_context('postgresqlhsc firewall-rule wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', type=str, help='The name of the server group.', id_part='name')
        c.argument('firewall_rule_name', options_list=['--name', '-n', '--firewall-rule-name'], type=str, help='The '
                   'name of the server group firewall rule.', id_part='child_name_1')

    with self.argument_context('postgresqlhsc role list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', type=str, help='The name of the server group.')

    with self.argument_context('postgresqlhsc role create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', type=str, help='The name of the server group.')
        c.argument('role_name', options_list=['--name', '-n', '--role-name'], type=str, help='The name of the server '
                   'group role name.')
        c.argument('password', help='The password of the server group role.')

    with self.argument_context('postgresqlhsc role delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('server_group_name', type=str, help='The name of the server group.', id_part='name')
        c.argument('role_name', options_list=['--name', '-n', '--role-name'], type=str, help='The name of the server '
                   'group role name.', id_part='child_name_1')
