# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from knack.util import CLIError


def videoanalyzer_video_analyzer_list(client,
                                      resource_group_name=None):
    if resource_group_name:
        return client.list(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def videoanalyzer_video_analyzer_show(client,
                                      resource_group_name,
                                      account_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name)


def videoanalyzer_video_analyzer_create(client,
                                        resource_group_name,
                                        account_name,
                                        location,
                                        tags=None,
                                        storage_accounts=None,
                                        type_=None,
                                        user_assigned_identity=None,
                                        key_identifier=None,
                                        video_analyzer_identity_type=None,
                                        user_assigned_identities=None):
    parameters = {}
    parameters['tags'] = tags
    parameters['location'] = location
    parameters['storage_accounts'] = storage_accounts
    parameters['encryption'] = {}
    parameters['encryption']['type'] = type_
    parameters['encryption']['identity'] = {}
    parameters['encryption']['identity']['user_assigned_identity'] = user_assigned_identity
    parameters['encryption']['key_vault_properties'] = {}
    parameters['encryption']['key_vault_properties']['key_identifier'] = key_identifier
    parameters['identity'] = {}
    parameters['identity']['type'] = video_analyzer_identity_type
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    return client.create_or_update(resource_group_name=resource_group_name,
                                   account_name=account_name,
                                   parameters=parameters)


def videoanalyzer_video_analyzer_update(client,
                                        resource_group_name,
                                        account_name,
                                        tags=None,
                                        storage_accounts=None,
                                        type_=None,
                                        user_assigned_identity=None,
                                        key_identifier=None,
                                        video_analyzer_identity_type=None,
                                        user_assigned_identities=None):
    parameters = {}
    parameters['tags'] = tags
    parameters['storage_accounts'] = storage_accounts
    parameters['encryption'] = {}
    parameters['encryption']['type'] = type_
    parameters['encryption']['identity'] = {}
    parameters['encryption']['identity']['user_assigned_identity'] = user_assigned_identity
    parameters['encryption']['key_vault_properties'] = {}
    parameters['encryption']['key_vault_properties']['key_identifier'] = key_identifier
    parameters['identity'] = {}
    parameters['identity']['type'] = video_analyzer_identity_type
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    return client.update(resource_group_name=resource_group_name,
                         account_name=account_name,
                         parameters=parameters)


def videoanalyzer_video_analyzer_delete(client,
                                        resource_group_name,
                                        account_name):
    return client.delete(resource_group_name=resource_group_name,
                         account_name=account_name)


def videoanalyzer_video_analyzer_sync_storage_key(client,
                                                  resource_group_name,
                                                  account_name,
                                                  id_=None):
    parameters = {}
    parameters['id'] = id_
    return client.sync_storage_keys(resource_group_name=resource_group_name,
                                    account_name=account_name,
                                    parameters=parameters)


def videoanalyzer_edge_module_list(client,
                                   resource_group_name,
                                   account_name,
                                   filter_=None,
                                   top=None,
                                   orderby=None):
    return client.list(resource_group_name=resource_group_name,
                       account_name=account_name,
                       filter=filter_,
                       top=top,
                       orderby=orderby)


def videoanalyzer_edge_module_show(client,
                                   resource_group_name,
                                   account_name,
                                   edge_module_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      edge_module_name=edge_module_name)


def videoanalyzer_edge_module_create(client,
                                     resource_group_name,
                                     account_name,
                                     edge_module_name):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   account_name=account_name,
                                   edge_module_name=edge_module_name,
                                   parameters=None)


def videoanalyzer_edge_module_update(client,
                                     resource_group_name,
                                     account_name,
                                     edge_module_name):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   account_name=account_name,
                                   edge_module_name=edge_module_name,
                                   parameters=None)


def videoanalyzer_edge_module_delete(client,
                                     resource_group_name,
                                     account_name,
                                     edge_module_name):
    return client.delete(resource_group_name=resource_group_name,
                         account_name=account_name,
                         edge_module_name=edge_module_name)


def videoanalyzer_edge_module_list_provisioning_token(client,
                                                      resource_group_name,
                                                      account_name,
                                                      edge_module_name,
                                                      expiration_date):
    parameters = {}
    parameters['expiration_date'] = expiration_date
    return client.list_provisioning_token(resource_group_name=resource_group_name,
                                          account_name=account_name,
                                          edge_module_name=edge_module_name,
                                          parameters=parameters)


def videoanalyzer_video_list(client,
                             resource_group_name,
                             account_name,
                             top=None):
    return client.list(resource_group_name=resource_group_name,
                       account_name=account_name,
                       top=top)


def videoanalyzer_video_show(client,
                             resource_group_name,
                             account_name,
                             video_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      video_name=video_name)


def videoanalyzer_video_create(client,
                               resource_group_name,
                               account_name,
                               video_name,
                               title=None,
                               description=None):
    parameters = {}
    parameters['title'] = title
    parameters['description'] = description
    return client.create_or_update(resource_group_name=resource_group_name,
                                   account_name=account_name,
                                   video_name=video_name,
                                   parameters=parameters)


def videoanalyzer_video_update(client,
                               resource_group_name,
                               account_name,
                               video_name,
                               title=None,
                               description=None):
    parameters = {}
    parameters['title'] = title
    parameters['description'] = description
    return client.update(resource_group_name=resource_group_name,
                         account_name=account_name,
                         video_name=video_name,
                         parameters=parameters)


def videoanalyzer_video_delete(client,
                               resource_group_name,
                               account_name,
                               video_name):
    return client.delete(resource_group_name=resource_group_name,
                         account_name=account_name,
                         video_name=video_name)


def videoanalyzer_video_list_streaming_token(client,
                                             resource_group_name,
                                             account_name,
                                             video_name):
    return client.list_streaming_token(resource_group_name=resource_group_name,
                                       account_name=account_name,
                                       video_name=video_name)


def videoanalyzer_access_policy_list(client,
                                     resource_group_name,
                                     account_name,
                                     top=None):
    return client.list(resource_group_name=resource_group_name,
                       account_name=account_name,
                       top=top)


def videoanalyzer_access_policy_show(client,
                                     resource_group_name,
                                     account_name,
                                     access_policy_name):
    return client.get(resource_group_name=resource_group_name,
                      account_name=account_name,
                      access_policy_name=access_policy_name)


def videoanalyzer_access_policy_create(client,
                                       resource_group_name,
                                       account_name,
                                       access_policy_name,
                                       jwt_authentication=None):
    all_authentication = []
    if jwt_authentication is not None:
        all_authentication.append(jwt_authentication)
    if len(all_authentication) > 1:
        raise CLIError('at most one of  jwt_authentication is needed for authentication!')
    authentication = all_authentication[0] if len(all_authentication) == 1 else None
    parameters = {}
    parameters['role'] = "Reader"
    parameters['authentication'] = authentication
    return client.create_or_update(resource_group_name=resource_group_name,
                                   account_name=account_name,
                                   access_policy_name=access_policy_name,
                                   parameters=parameters)


def videoanalyzer_access_policy_update(client,
                                       resource_group_name,
                                       account_name,
                                       access_policy_name,
                                       jwt_authentication=None):
    all_authentication = []
    if jwt_authentication is not None:
        all_authentication.append(jwt_authentication)
    if len(all_authentication) > 1:
        raise CLIError('at most one of  jwt_authentication is needed for authentication!')
    authentication = all_authentication[0] if len(all_authentication) == 1 else None
    parameters = {}
    parameters['role'] = "Reader"
    parameters['authentication'] = authentication
    return client.update(resource_group_name=resource_group_name,
                         account_name=account_name,
                         access_policy_name=access_policy_name,
                         parameters=parameters)


def videoanalyzer_access_policy_delete(client,
                                       resource_group_name,
                                       account_name,
                                       access_policy_name):
    return client.delete(resource_group_name=resource_group_name,
                         account_name=account_name,
                         access_policy_name=access_policy_name)
