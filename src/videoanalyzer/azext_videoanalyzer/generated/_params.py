# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import (
    get_default_location_from_resource_group,
    validate_file_or_dict
)
from azext_videoanalyzer.action import (
    AddStorageAccounts,
    AddJwtAuthentication
)


def load_arguments(self, _):

    with self.argument_context('videoanalyzer video-analyzer list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('videoanalyzer video-analyzer show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.', id_part='name')

    with self.argument_context('videoanalyzer video-analyzer create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('storage_accounts', action=AddStorageAccounts, nargs='+', help='The storage accounts for this '
                   'resource.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemKey', 'CustomerKey']), help='The '
                   'type of key used to encrypt the Account Key.', arg_group='Encryption')
        c.argument('user_assigned_identity', type=str, help='The user assigned managed identity\'s resource identifier '
                   'to use when accessing a resource.', arg_group='Encryption Identity')
        c.argument('key_identifier', type=str, help='The URL of the Key Vault key used to encrypt the account. The key '
                   'may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without '
                   'a version (for example https://vault/keys/mykey).', arg_group='Encryption Key Vault Properties')
        c.argument('video_analyzer_identity_type', type=str, help='The identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The User Assigned Managed Identities. '
                   'Expected value: json-string/@json-file.', arg_group='Identity')

    with self.argument_context('videoanalyzer video-analyzer update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.', id_part='name')
        c.argument('tags', tags_type)
        c.argument('storage_accounts', action=AddStorageAccounts, nargs='+', help='The storage accounts for this '
                   'resource.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemKey', 'CustomerKey']), help='The '
                   'type of key used to encrypt the Account Key.', arg_group='Encryption')
        c.argument('user_assigned_identity', type=str, help='The user assigned managed identity\'s resource identifier '
                   'to use when accessing a resource.', arg_group='Encryption Identity')
        c.argument('key_identifier', type=str, help='The URL of the Key Vault key used to encrypt the account. The key '
                   'may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without '
                   'a version (for example https://vault/keys/mykey).', arg_group='Encryption Key Vault Properties')
        c.argument('video_analyzer_identity_type', type=str, help='The identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The User Assigned Managed Identities. '
                   'Expected value: json-string/@json-file.', arg_group='Identity')

    with self.argument_context('videoanalyzer video-analyzer delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.', id_part='name')

    with self.argument_context('videoanalyzer video-analyzer sync-storage-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Video Analyzer account name.', id_part='name')
        c.argument('id_', options_list=['--id'], type=str, help='The ID of the storage account resource.')

    with self.argument_context('videoanalyzer edge-module list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('filter_', options_list=['--filter'], type=str, help='Restricts the set of items returned.')
        c.argument('top', type=int, help='Specifies a non-negative integer n that limits the number of items returned '
                   'from a collection. The service returns the number of available items up to but not greater than '
                   'the specified value n.')
        c.argument('orderby', type=str, help='Specifies the key by which the result collection should be ordered.')

    with self.argument_context('videoanalyzer edge-module show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('edge_module_name', options_list=['--name', '-n', '--edge-module-name'], type=str, help='The name '
                   'of the edge module to retrieve.', id_part='child_name_1')

    with self.argument_context('videoanalyzer edge-module create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('edge_module_name', options_list=['--name', '-n', '--edge-module-name'], type=str, help='The name '
                   'of the edge module to create or update.')

    with self.argument_context('videoanalyzer edge-module update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('edge_module_name', options_list=['--name', '-n', '--edge-module-name'], type=str, help='The name '
                   'of the edge module to create or update.', id_part='child_name_1')

    with self.argument_context('videoanalyzer edge-module delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('edge_module_name', options_list=['--name', '-n', '--edge-module-name'], type=str, help='The name '
                   'of the edge module to be deleted.', id_part='child_name_1')

    with self.argument_context('videoanalyzer edge-module list-provisioning-token') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('edge_module_name', options_list=['--name', '-n', '--edge-module-name'], type=str, help='The name '
                   'of the edge module used to create a new provisioning token.')
        c.argument('expiration_date', help='The desired expiration date of the registration token. The Azure Video '
                   'Analyzer IoT edge module must be initialized and connected to the Internet prior to the token '
                   'expiration date.')

    with self.argument_context('videoanalyzer video list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('top', type=int, help='Specifies a non-negative integer n that limits the number of items returned '
                   'from a collection. The service returns the number of available items up to but not greater than '
                   'the specified value n.')

    with self.argument_context('videoanalyzer video show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('video_name', options_list=['--name', '-n', '--video-name'], type=str, help='The name of the video '
                   'to retrieve.', id_part='child_name_1')

    with self.argument_context('videoanalyzer video create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('video_name', options_list=['--name', '-n', '--video-name'], type=str, help='The name of the video '
                   'to create or update.')
        c.argument('title', type=str, help='Optional video title provided by the user. Value can be up to 256 '
                   'characters long.')
        c.argument('description', type=str, help='Optional video description provided by the user. Value can be up to '
                   '2048 characters long.')

    with self.argument_context('videoanalyzer video update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('video_name', options_list=['--name', '-n', '--video-name'], type=str, help='The name of the video '
                   'to update.', id_part='child_name_1')
        c.argument('title', type=str, help='Optional video title provided by the user. Value can be up to 256 '
                   'characters long.')
        c.argument('description', type=str, help='Optional video description provided by the user. Value can be up to '
                   '2048 characters long.')

    with self.argument_context('videoanalyzer video delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('video_name', options_list=['--name', '-n', '--video-name'], type=str, help='The name of the video '
                   'to delete.', id_part='child_name_1')

    with self.argument_context('videoanalyzer video list-streaming-token') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('video_name', options_list=['--name', '-n', '--video-name'], type=str, help='The name of the video '
                   'to generate a token for playback.')

    with self.argument_context('videoanalyzer access-policy list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('top', type=int, help='Specifies a non-negative integer n that limits the number of items returned '
                   'from a collection. The service returns the number of available items up to but not greater than '
                   'the specified value n.')

    with self.argument_context('videoanalyzer access-policy show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('access_policy_name', options_list=['--name', '-n', '--access-policy-name'], type=str, help='The '
                   'name of the access policy to retrieve.', id_part='child_name_1')

    with self.argument_context('videoanalyzer access-policy create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.')
        c.argument('access_policy_name', options_list=['--name', '-n', '--access-policy-name'], type=str, help='The '
                   'name of the access policy to create or update.')
        c.argument('jwt_authentication', action=AddJwtAuthentication, nargs='+', help='Properties for access '
                   'validation based on JSON Web Tokens (JWT).', arg_group='Authentication')

    with self.argument_context('videoanalyzer access-policy update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('access_policy_name', options_list=['--name', '-n', '--access-policy-name'], type=str, help='The '
                   'name of the access policy to update.', id_part='child_name_1')
        c.argument('jwt_authentication', action=AddJwtAuthentication, nargs='+', help='Properties for access '
                   'validation based on JSON Web Tokens (JWT).', arg_group='Authentication')

    with self.argument_context('videoanalyzer access-policy delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The Azure Video Analyzer account name.', id_part='name')
        c.argument('access_policy_name', options_list=['--name', '-n', '--access-policy-name'], type=str, help='The '
                   'name of the access policy to delete.', id_part='child_name_1')
