# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from knack.help_files import helps


helps['videoanalyzer video-analyzer'] = """
    type: group
    short-summary: Manage video analyzer with videoanalyzer
"""

helps['videoanalyzer video-analyzer list'] = """
    type: command
    short-summary: "Lists the Video Analyzer accounts in the specified resource group. And Lists the Video Analyzer \
accounts in the specific subscription."
    examples:
      - name: List all Video Analyzer accounts
        text: |-
               az videoanalyzer video-analyzer list --resource-group "contoso"
      - name: List all Video Analyzer accounts by subscription
        text: |-
               az videoanalyzer video-analyzer list
"""

helps['videoanalyzer video-analyzer show'] = """
    type: command
    short-summary: "Get the details of the specified Video Analyzer account."
    examples:
      - name: Get a Video Analyzer account by name
        text: |-
               az videoanalyzer video-analyzer show --account-name "contosotv" --resource-group "contoso"
"""

helps['videoanalyzer video-analyzer create'] = """
    type: command
    short-summary: "Create an instance of a Video Analyzer account."
    parameters:
      - name: --storage-accounts
        short-summary: "The storage accounts for this resource."
        long-summary: |
            Usage: --storage-accounts id=XX user-assigned-identity=XX

            id: The ID of the storage account resource. Video Analyzer relies on tables, queues, and blobs. The \
primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage).
            user-assigned-identity: The user assigned managed identity's resource identifier to use when accessing a \
resource.

            Multiple actions can be specified by using more than one --storage-accounts argument.
    examples:
      - name: Create a Video Analyzer account
        text: |-
               az videoanalyzer video-analyzer create --account-name "contosotv" --video-analyzer-identity-type \
"UserAssigned" --user-assigned-identities "{\\"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/pr\
oviders/Microsoft.ManagedIdentity/userAssignedIdentities/id1\\":{},\\"/subscriptions/00000000-0000-0000-0000-0000000000\
00/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id2\\":{},\\"/subscriptions/00000000-00\
00-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id3\\":{}}" \
--location "South Central US" --type "SystemKey" --storage-accounts id="/subscriptions/00000000-0000-0000-0000-00000000\
0000/resourceGroups/rg/providers/Microsoft.Storage/storageAccounts/storage1" user-assigned-identity="/subscriptions/000\
00000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id2" \
--tags tag1="value1" tag2="value2" --resource-group "contoso"
"""

helps['videoanalyzer video-analyzer update'] = """
    type: command
    short-summary: "Updates an existing instance of Video Analyzer account."
    parameters:
      - name: --storage-accounts
        short-summary: "The storage accounts for this resource."
        long-summary: |
            Usage: --storage-accounts id=XX user-assigned-identity=XX

            id: The ID of the storage account resource. Video Analyzer relies on tables, queues, and blobs. The \
primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage).
            user-assigned-identity: The user assigned managed identity's resource identifier to use when accessing a \
resource.

            Multiple actions can be specified by using more than one --storage-accounts argument.
    examples:
      - name: Update a Video Analyzer accounts
        text: |-
               az videoanalyzer video-analyzer update --account-name "contosotv" --tags key1="value3" --resource-group \
"contoso"
"""

helps['videoanalyzer video-analyzer delete'] = """
    type: command
    short-summary: "Delete the specified Video Analyzer account."
    examples:
      - name: Delete a Video Analyzer account
        text: |-
               az videoanalyzer video-analyzer delete --account-name "contosotv" --resource-group "contoso"
"""

helps['videoanalyzer video-analyzer sync-storage-key'] = """
    type: command
    short-summary: "Synchronizes storage account keys for a storage account associated with the Video Analyzer \
account."
    examples:
      - name: Synchronizes Storage Account Keys
        text: |-
               az videoanalyzer video-analyzer sync-storage-key --account-name "contosotv" --id \
"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contoso/providers/Microsoft.Storage/storageAccounts\
/contosotvstore" --resource-group "contoso"
"""

helps['videoanalyzer edge-module'] = """
    type: group
    short-summary: Manage edge module with videoanalyzer
"""

helps['videoanalyzer edge-module list'] = """
    type: command
    short-summary: "List all of the existing edge module resources for a given Video Analyzer account."
    examples:
      - name: Lists the registered edge modules.
        text: |-
               az videoanalyzer edge-module list --account-name "testaccount2" --resource-group "testrg"
"""

helps['videoanalyzer edge-module show'] = """
    type: command
    short-summary: "Retrieves a specific existing edge module resource in the given Video Analyzer account."
    examples:
      - name: Gets edge module registration.
        text: |-
               az videoanalyzer edge-module show --account-name "testaccount2" --name "edgeModule1" --resource-group \
"testrg"
"""

helps['videoanalyzer edge-module create'] = """
    type: command
    short-summary: "Creates a new edge module or updates an existing one. An edge module resource enables a single \
instance of an Azure Video Analyzer IoT edge module to interact with the Video Analyzer Account. This is used for \
authorization and also to make sure that the particular edge module instance only has access to the data it requires \
from the Azure Video Analyzer service. A new edge module resource should be created for every new instance of an Azure \
Video Analyzer edge module deployed to you Azure IoT edge environment. Edge module resources can be deleted if the \
specific module is not in use anymore."
    examples:
      - name: Registers an edge module.
        text: |-
               az videoanalyzer edge-module create --account-name "testaccount2" --name "edgeModule1" --resource-group \
"testrg"
"""

helps['videoanalyzer edge-module update'] = """
    type: command
    short-summary: "Update a new edge module or updates an existing one. An edge module resource enables a single \
instance of an Azure Video Analyzer IoT edge module to interact with the Video Analyzer Account. This is used for \
authorization and also to make sure that the particular edge module instance only has access to the data it requires \
from the Azure Video Analyzer service. A new edge module resource should be Updated for every new instance of an Azure \
Video Analyzer edge module deployed to you Azure IoT edge environment. Edge module resources can be deleted if the \
specific module is not in use anymore."
"""

helps['videoanalyzer edge-module delete'] = """
    type: command
    short-summary: "Deletes an existing edge module resource. Deleting the edge module resource will prevent an Azure \
Video Analyzer IoT edge module which was previously initiated with the module provisioning token from communicating \
with the cloud."
    examples:
      - name: Deletes an edge module registration.
        text: |-
               az videoanalyzer edge-module delete --account-name "testaccount2" --name "edgeModule1" --resource-group \
"testrg"
"""

helps['videoanalyzer edge-module list-provisioning-token'] = """
    type: command
    short-summary: "Creates a new provisioning token. A provisioning token allows for a single instance of Azure Video \
analyzer IoT edge module to be initialized and authorized to the cloud account. The provisioning token itself is short \
lived and it is only used for the initial handshake between IoT edge module and the cloud. After the initial \
handshake, the IoT edge module will agree on a set of authentication keys which will be auto-rotated as long as the \
module is able to periodically connect to the cloud. A new provisioning token can be generated for the same IoT edge \
module in case the module state lost or reset."
    examples:
      - name: Generate the Provisioning token for an edge module registration.
        text: |-
               az videoanalyzer edge-module list-provisioning-token --account-name "testaccount2" --name "edgeModule1" \
--expiration-date "3021-01-23T11:04:49.0526841-08:00" --resource-group "testrg"
"""

helps['videoanalyzer video'] = """
    type: group
    short-summary: Manage video with videoanalyzer
"""

helps['videoanalyzer video list'] = """
    type: command
    short-summary: "List all existing video resources in the specified account."
    examples:
      - name: Lists video entities.
        text: |-
               az videoanalyzer video list --top "2" --account-name "testaccount2" --resource-group "testrg"
"""

helps['videoanalyzer video show'] = """
    type: command
    short-summary: "Retrieves an existing video resource within an account with a given name."
    examples:
      - name: Gets a video entity.
        text: |-
               az videoanalyzer video show --account-name "testaccount2" --resource-group "testrg" --name "video1"
"""

helps['videoanalyzer video create'] = """
    type: command
    short-summary: "Creates a new video resource or updates an existing one in an account."
    examples:
      - name: Register video entity.
        text: |-
               az videoanalyzer video create --account-name "testaccount2" --description "Sample Description 1" \
--title "Sample Title 1" --resource-group "testrg" --name "video1"
"""

helps['videoanalyzer video update'] = """
    type: command
    short-summary: "Updates individual properties of an existing video resource."
    examples:
      - name: Update video entity.
        text: |-
               az videoanalyzer video update --account-name "testaccount2" --description "Parking Lot East Entrance" \
--resource-group "testrg" --name "video1"
"""

helps['videoanalyzer video delete'] = """
    type: command
    short-summary: "Deletes an existing video resource and its underlying data. This operation is irreversible."
    examples:
      - name: Deletes a video entity.
        text: |-
               az videoanalyzer video delete --account-name "testaccount2" --resource-group "testrg" --name "video1"
"""

helps['videoanalyzer video list-streaming-token'] = """
    type: command
    short-summary: "Generates a streaming token used for authenticating video playback."
    examples:
      - name: Generate a streaming token for media endpoint authorization.
        text: |-
               az videoanalyzer video list-streaming-token --account-name "testaccount2" --resource-group "testrg" \
--name "video3"
"""

helps['videoanalyzer access-policy'] = """
    type: group
    short-summary: Manage access policy with videoanalyzer
"""

helps['videoanalyzer access-policy list'] = """
    type: command
    short-summary: "List all existing access policy resources for the specified account."
    examples:
      - name: Lists access policy entities.
        text: |-
               az videoanalyzer access-policy list --top "2" --account-name "testaccount2" --resource-group "testrg"
"""

helps['videoanalyzer access-policy show'] = """
    type: command
    short-summary: "Retrieves an existing access policy resource from an account by name."
    examples:
      - name: Gets an access policy entity.
        text: |-
               az videoanalyzer access-policy show --name "accessPolicyName1" --account-name "testaccount2" \
--resource-group "testrg"
"""

helps['videoanalyzer access-policy create'] = """
    type: command
    short-summary: "Creates a new access policy resource or updates an existing one."
    parameters:
      - name: --jwt-authentication
        short-summary: "Properties for access validation based on JSON Web Tokens (JWT)."
        long-summary: |
            Usage: --jwt-authentication issuers=XX audiences=XX claims=XX keys=XX type=XX

            issuers: List of expected token issuers. Token issuer is valid if it matches at least one of the given \
values.
            audiences: List of expected token audiences. Token audience is valid if it matches at least one of the \
given values.
            claims: List of additional token claims to be validated. Token must contains all claims and respective \
values for it to be valid.
            keys: List of keys which can be used to validate access tokens. Having multiple keys allow for seamless \
key rotation of the token signing key. Token signature must match exactly one key.
            type: Required. The discriminator for derived types.
    examples:
      - name: Register access policy entity.
        text: |-
               az videoanalyzer access-policy create --name "accessPolicyName1" --account-name "testaccount2" \
--authentication "{\\"@type\\":\\"#Microsoft.VideoAnalyzer.JwtAuthentication\\",\\"audiences\\":[\\"audience1\\"],\\"cl\
aims\\":[{\\"name\\":\\"claimname1\\",\\"value\\":\\"claimvalue1\\"},{\\"name\\":\\"claimname2\\",\\"value\\":\\"claimv\
alue2\\"}],\\"issuers\\":[\\"issuer1\\",\\"issuer2\\"],\\"keys\\":[{\\"@type\\":\\"#Microsoft.VideoAnalyzer.RsaTokenKey\
\\",\\"alg\\":\\"RS256\\",\\"e\\":\\"ZLFzZTY0IQ==\\",\\"kid\\":\\"123\\",\\"n\\":\\"YmFzZTY0IQ==\\"},{\\"@type\\":\\"#M\
icrosoft.VideoAnalyzer.EccTokenKey\\",\\"alg\\":\\"ES256\\",\\"kid\\":\\"124\\",\\"x\\":\\"XX==\\",\\"y\\":\\"YY==\\"}]\
}" --resource-group "testrg"
"""

helps['videoanalyzer access-policy update'] = """
    type: command
    short-summary: "Updates individual properties of an existing access policy resource."
    parameters:
      - name: --jwt-authentication
        short-summary: "Properties for access validation based on JSON Web Tokens (JWT)."
        long-summary: |
            Usage: --jwt-authentication issuers=XX audiences=XX claims=XX keys=XX type=XX

            issuers: List of expected token issuers. Token issuer is valid if it matches at least one of the given \
values.
            audiences: List of expected token audiences. Token audience is valid if it matches at least one of the \
given values.
            claims: List of additional token claims to be validated. Token must contains all claims and respective \
values for it to be valid.
            keys: List of keys which can be used to validate access tokens. Having multiple keys allow for seamless \
key rotation of the token signing key. Token signature must match exactly one key.
            type: Required. The discriminator for derived types.
    examples:
      - name: Update access policy entity.
        text: |-
               az videoanalyzer access-policy update --name "accessPolicyName1" --account-name "testaccount2" \
--authentication "{\\"@type\\":\\"#Microsoft.VideoAnalyzer.JwtAuthentication\\",\\"keys\\":[{\\"@type\\":\\"#Microsoft.\
VideoAnalyzer.RsaTokenKey\\",\\"alg\\":\\"RS256\\",\\"e\\":\\"ZLFzZTY0IQ==\\",\\"kid\\":\\"123\\",\\"n\\":\\"YmFzZTY0IQ\
==\\"},{\\"@type\\":\\"#Microsoft.VideoAnalyzer.EccTokenKey\\",\\"alg\\":\\"Updated\\",\\"kid\\":\\"124\\",\\"x\\":\\"X\
X==\\",\\"y\\":\\"YY==\\"}]}" --resource-group "testrg"
"""

helps['videoanalyzer access-policy delete'] = """
    type: command
    short-summary: "Deletes an existing access policy resource."
    examples:
      - name: Deletes an access policy entity.
        text: |-
               az videoanalyzer access-policy delete --name "accessPolicyName1" --account-name "testaccount2" \
--resource-group "testrg"
"""
