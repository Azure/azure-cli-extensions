# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_videoanalyzer.generated._client_factory import cf_video_analyzer
    videoanalyzer_video_analyzer = CliCommandType(
        operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._video_analyzers_operations#VideoAn'
        'alyzersOperations.{}',
        client_factory=cf_video_analyzer)
    with self.command_group('videoanalyzer video-analyzer', videoanalyzer_video_analyzer,
                            client_factory=cf_video_analyzer) as g:
        g.custom_command('list', 'videoanalyzer_video_analyzer_list')
        g.custom_show_command('show', 'videoanalyzer_video_analyzer_show')
        g.custom_command('create', 'videoanalyzer_video_analyzer_create')
        g.custom_command('update', 'videoanalyzer_video_analyzer_update')
        g.custom_command('delete', 'videoanalyzer_video_analyzer_delete', confirmation=True)
        g.custom_command('sync-storage-key', 'videoanalyzer_video_analyzer_sync_storage_key')

    from azext_videoanalyzer.generated._client_factory import cf_edge_module
    videoanalyzer_edge_module = CliCommandType(
        operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._edge_modules_operations#EdgeModule'
        'sOperations.{}',
        client_factory=cf_edge_module)
    with self.command_group('videoanalyzer edge-module', videoanalyzer_edge_module,
                            client_factory=cf_edge_module) as g:
        g.custom_command('list', 'videoanalyzer_edge_module_list')
        g.custom_show_command('show', 'videoanalyzer_edge_module_show')
        g.custom_command('create', 'videoanalyzer_edge_module_create')
        g.custom_command('update', 'videoanalyzer_edge_module_update')
        g.custom_command('delete', 'videoanalyzer_edge_module_delete', confirmation=True)
        g.custom_command('list-provisioning-token', 'videoanalyzer_edge_module_list_provisioning_token')

    from azext_videoanalyzer.generated._client_factory import cf_video
    videoanalyzer_video = CliCommandType(
        operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._videos_operations#VideosOperations'
        '.{}',
        client_factory=cf_video)
    with self.command_group('videoanalyzer video', videoanalyzer_video, client_factory=cf_video) as g:
        g.custom_command('list', 'videoanalyzer_video_list')
        g.custom_show_command('show', 'videoanalyzer_video_show')
        g.custom_command('create', 'videoanalyzer_video_create')
        g.custom_command('update', 'videoanalyzer_video_update')
        g.custom_command('delete', 'videoanalyzer_video_delete', confirmation=True)
        g.custom_command('list-streaming-token', 'videoanalyzer_video_list_streaming_token')

    from azext_videoanalyzer.generated._client_factory import cf_access_policy
    videoanalyzer_access_policy = CliCommandType(
        operations_tmpl='azext_videoanalyzer.vendored_sdks.videoanalyzer.operations._access_policies_operations#AccessP'
        'oliciesOperations.{}',
        client_factory=cf_access_policy)
    with self.command_group('videoanalyzer access-policy', videoanalyzer_access_policy,
                            client_factory=cf_access_policy) as g:
        g.custom_command('list', 'videoanalyzer_access_policy_list')
        g.custom_show_command('show', 'videoanalyzer_access_policy_show')
        g.custom_command('create', 'videoanalyzer_access_policy_create')
        g.custom_command('update', 'videoanalyzer_access_policy_update')
        g.custom_command('delete', 'videoanalyzer_access_policy_delete', confirmation=True)

    with self.command_group('videoanalyzer', is_experimental=True):
        pass
