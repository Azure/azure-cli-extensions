# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "workload-operations target remove-revision",
)
class RemoveRevision(AAZCommand):
    """Post request to remove solution version revision
    """

    _aaz_info = {
        "version": "2025-01-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.edge/targets/{}/removerevision", "2025-01-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, None)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.target_name = AAZStrArg(
            options=["--target-name"],
            help="Name of the target",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?)*$",
                max_length=61,
                min_length=3,
            ),
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.solution_dependencies = AAZListArg(
            options=["--solution-dependencies"],
            arg_group="Body",
            help="Solution Dependencies",
        )
        _args_schema.solution_instance_name = AAZStrArg(
            options=["--solution-instance-name"],
            arg_group="Body",
            help="Solution Instance Name",
            fmt=AAZStrArgFormat(
                pattern="^(?!v-)(?!.*-v-)[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?)*$",
                max_length=24,
            ),
        )
        _args_schema.solution_template = AAZStrArg(
            options=["--solution-template"],
            arg_group="Body",
            help="Solution Template Name",
            required=True,
        )
        _args_schema.solution_template_version = AAZStrArg(
            options=["--solution-template-version"],
            arg_group="Body",
            help="Solution Template Version Name",
            required=True,
        )

        solution_dependencies = cls._args_schema.solution_dependencies
        solution_dependencies.Element = AAZObjectArg()
        cls._build_args_solution_dependency_parameter_create(solution_dependencies.Element)
        return cls._args_schema

    _args_solution_dependency_parameter_create = None

    @classmethod
    def _build_args_solution_dependency_parameter_create(cls, _schema):
        if cls._args_solution_dependency_parameter_create is not None:
            _schema.dependencies = cls._args_solution_dependency_parameter_create.dependencies
            _schema.solution_template_id = cls._args_solution_dependency_parameter_create.solution_template_id
            _schema.solution_template_version = cls._args_solution_dependency_parameter_create.solution_template_version
            _schema.solution_version_id = cls._args_solution_dependency_parameter_create.solution_version_id
            _schema.target_id = cls._args_solution_dependency_parameter_create.target_id
            return

        cls._args_solution_dependency_parameter_create = AAZObjectArg()

        solution_dependency_parameter_create = cls._args_solution_dependency_parameter_create
        solution_dependency_parameter_create.dependencies = AAZListArg(
            options=["dependencies"],
            help="Solution dependencies",
        )
        solution_dependency_parameter_create.solution_template_id = AAZStrArg(
            options=["solution-template-id"],
            help="Solution Template Id",
        )
        solution_dependency_parameter_create.solution_template_version = AAZStrArg(
            options=["solution-template-version"],
            help="Solution Template Version",
        )
        solution_dependency_parameter_create.solution_version_id = AAZStrArg(
            options=["solution-version-id"],
            help="Solution Version Id",
        )
        solution_dependency_parameter_create.target_id = AAZStrArg(
            options=["target-id"],
            help="Target Id",
        )

        dependencies = cls._args_solution_dependency_parameter_create.dependencies
        dependencies.Element = AAZObjectArg()
        cls._build_args_solution_dependency_parameter_create(dependencies.Element)

        _schema.dependencies = cls._args_solution_dependency_parameter_create.dependencies
        _schema.solution_template_id = cls._args_solution_dependency_parameter_create.solution_template_id
        _schema.solution_template_version = cls._args_solution_dependency_parameter_create.solution_template_version
        _schema.solution_version_id = cls._args_solution_dependency_parameter_create.solution_version_id
        _schema.target_id = cls._args_solution_dependency_parameter_create.target_id

    def _execute_operations(self):
        self.pre_operations()
        yield self.TargetsRemoveRevision(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class TargetsRemoveRevision(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    None,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/removeRevision",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "targetName", self.ctx.args.target_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-01-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("solutionDependencies", AAZListType, ".solution_dependencies")
            _builder.set_prop("solutionInstanceName", AAZStrType, ".solution_instance_name")
            _builder.set_prop("solutionTemplate", AAZStrType, ".solution_template", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("solutionTemplateVersion", AAZStrType, ".solution_template_version", typ_kwargs={"flags": {"required": True}})

            solution_dependencies = _builder.get(".solutionDependencies")
            if solution_dependencies is not None:
                _RemoveRevisionHelper._build_schema_solution_dependency_parameter_create(solution_dependencies.set_elements(AAZObjectType, "."))

            return self.serialize_content(_content_value)


class _RemoveRevisionHelper:
    """Helper class for RemoveRevision"""

    @classmethod
    def _build_schema_solution_dependency_parameter_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("dependencies", AAZListType, ".dependencies")
        _builder.set_prop("solutionTemplateId", AAZStrType, ".solution_template_id")
        _builder.set_prop("solutionTemplateVersion", AAZStrType, ".solution_template_version")
        _builder.set_prop("solutionVersionId", AAZStrType, ".solution_version_id")
        _builder.set_prop("targetId", AAZStrType, ".target_id")

        dependencies = _builder.get(".dependencies")
        if dependencies is not None:
            cls._build_schema_solution_dependency_parameter_create(dependencies.set_elements(AAZObjectType, "."))


__all__ = ["RemoveRevision"]
