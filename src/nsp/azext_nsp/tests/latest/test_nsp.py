# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import (ScenarioTest, ResourceGroupPreparer)


class NspScenario(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='test_nsp_crud', location='eastus2euap')
    def test_nsp_crud(self, resource_group):
        self.kwargs.update({
            'name': 'TestNetworkSecurityPerimeter'
        })

        self.cmd('network perimeter create --name {name} -l eastus2euap --resource-group {rg}')

        self.cmd('network perimeter show --resource-group {rg} --name {name}', checks=[
            self.check('name', '{name}')
        ])

        self.cmd('network perimeter list --resource-group {rg}')

        self.cmd('network perimeter delete -g {rg} --name {name} --yes')

        self.cmd('network perimeter onboarded-resources list -l eastus2euap')

    @ResourceGroupPreparer(name_prefix='test_nsp_profile_crud', location='eastus2euap')
    def test_nsp_profile_crud(self, resource_group):
        self.kwargs.update({
            'nsp_name': 'TestNetworkSecurityPerimeter',
            'profile_name': 'TestNspProfile'
        })

        self.cmd('network perimeter create --name {nsp_name} -l eastus2euap --resource-group {rg}')
        self.cmd('network perimeter profile create --name {profile_name} --perimeter-name {nsp_name} --resource-group {rg}')

        self.cmd('network perimeter profile show --name {profile_name} --perimeter-name {nsp_name} --resource-group {rg}', checks=[
            self.check('name', '{profile_name}')
        ])

        self.cmd('network perimeter profile list --perimeter-name {nsp_name} --resource-group {rg}')

        self.cmd('network perimeter profile delete --name {profile_name} --perimeter-name {nsp_name} --resource-group {rg} --yes')

    @ResourceGroupPreparer(name_prefix='test_nsp_accessrule_crud', location='eastus2euap')
    def test_nsp_accessrule_crud(self, resource_group):
        self.kwargs.update({
            'nsp_name': 'TestNetworkSecurityPerimeter',
            'profile_name': 'TestNspProfile',
            'accessrule_name': 'TestNspAccessRule'
        })

        self.cmd('network perimeter create --name {nsp_name} -l eastus2euap --resource-group {rg}')
        self.cmd('network perimeter profile create --name {profile_name} --perimeter-name {nsp_name} --resource-group {rg}')

        self.cmd('az network perimeter profile access-rule create --name {accessrule_name} --profile-name {profile_name} --perimeter-name {nsp_name} --resource-group {rg} --fqdn "[\'www.abc.com\', \'www.google.com\']" --direction "Outbound"')

        self.cmd('az network perimeter profile access-rule show --name {accessrule_name} --profile-name {profile_name} --perimeter-name {nsp_name} --resource-group {rg}', checks=[
            self.check('properties.fullyQualifiedDomainNames', "[\'www.abc.com\', \'www.google.com\']")
        ])

        self.cmd('az network perimeter profile access-rule update --name {accessrule_name} --profile-name {profile_name} --perimeter-name {nsp_name} --resource-group {rg} --fqdn "[\'www.abc.com\']" --direction "Outbound"')

        self.cmd('az network perimeter profile access-rule show --name {accessrule_name} --profile-name {profile_name} --perimeter-name {nsp_name} --resource-group {rg}', checks=[
            self.check('properties.fullyQualifiedDomainNames', "[\'www.abc.com\']")
        ])

        self.cmd('network perimeter profile access-rule list --perimeter-name {nsp_name} --profile-name {profile_name} --resource-group {rg}')

        self.cmd('network perimeter profile access-rule delete --name {accessrule_name} --perimeter-name {nsp_name} --profile-name {profile_name} --resource-group {rg} --yes')

    @ResourceGroupPreparer(name_prefix='test_nsp_accessrule_inbound', location='eastus2euap')
    def test_nsp_accessrule_inbound(self, resource_group):
        self.kwargs.update({
            'nsp_name': 'TestNetworkSecurityPerimeter',
            'profile_name': 'TestNspProfile',
            'ip_accessrule_name': 'TestNspAccessRule_ip',
            'sub_accessrule_name': 'TestNspAccessRule_subscription',
            'nsp_accessrule_name': 'TestNspAccessRule_nsp',
            'sms_accessrule_name': 'TestNspAccessRule_sms',
            'email_accessrule_name': 'TestNspAccessRule_email',
            'sub': self.get_subscription_id()
        })

        self.cmd('network perimeter create --name {nsp_name} -l eastus2euap --resource-group {rg}')
        self.cmd('network perimeter profile create --name {profile_name} --perimeter-name {nsp_name} --resource-group {rg}')

        # IP based access rule
        self.cmd('az network perimeter profile access-rule create --name {ip_accessrule_name} --profile-name {profile_name} --perimeter-name {nsp_name} --resource-group {rg} --address-prefixes "[10.10.0.0/16]"', checks=[
            self.check('properties.addressPrefixes', "['10.10.0.0/16']")
        ])

        # Subscription based access rule
        self.cmd('az network perimeter profile access-rule create --name {sub_accessrule_name} --profile-name {profile_name} --perimeter-name {nsp_name} --resource-group {rg} --subscriptions [0].id="/subscriptions/{sub}"', checks=[
            self.check('properties.subscriptions[0].id', "/subscriptions/{sub}")
        ])

        """
        # NSP based access rule
        self.cmd('network perimeter create --name nsp_for_rule -l eastus2euap --resource-group {rg}')

        self.cmd('az network perimeter profile access-rule create --name {nsp_accessrule_name} --profile-name {profile_name} --perimeter-name {nsp_name} --resource-group {rg} --nsp [0].id="/subscriptions/{sub}/resourceGroups/{rg}/providers/Microsoft.Network/networkSecurityPerimeters/nsp_for_rule"', checks=[
            self.check('properties.networkSecurityPerimeters[0].id', "/subscriptions/{sub}/resourceGroups/{rg}/providers/Microsoft.Network/networkSecurityPerimeters/nsp_for_rule")
        ])
        """

        # Email based access rule
        self.cmd('az network perimeter profile access-rule create --name {email_accessrule_name} --profile-name {profile_name} --perimeter-name {nsp_name} --resource-group {rg} --email-addresses "[\'abc@microsoft.com\', \'bcd@microsoft.com\']" --direction "Outbound"')

        # SMS based access rule
        self.cmd('az network perimeter profile access-rule create --name {sms_accessrule_name} --profile-name {profile_name} --perimeter-name {nsp_name} --resource-group {rg} --phone-numbers "[\'+919898989898\', \'+929898989898\']" --direction "Outbound"')

    @ResourceGroupPreparer(name_prefix='test_nsp_association_crud', location='eastus2euap')
    def test_nsp_association_crud(self, resource_group):

        self.kwargs.update({
            'nsp_name': 'TestNetworkSecurityPerimeter',
            'profile_name': 'TestNspProfile',
            'association_name': 'TestNspAssociation',
            'resource_name': 'kvclinsp17',
            'sub': self.get_subscription_id()
        })

        self.cmd('network perimeter create --name {nsp_name} -l eastus2euap --resource-group {rg}')
        self.cmd('network perimeter profile create --name {profile_name} --perimeter-name {nsp_name} --resource-group {rg}')

        self.cmd('keyvault create --name {resource_name} -l eastus2euap --resource-group {rg}')

        self.cmd('network perimeter association create --name {association_name} --perimeter-name {nsp_name} --resource-group {rg} --access-mode Learning '
                 '--private-link-resource id="/subscriptions/{sub}/resourceGroups/{rg}/providers/Microsoft.KeyVault/vaults/{resource_name}" '
                 '--profile id="/subscriptions/{sub}/resourceGroups/{rg}/providers/Microsoft.Network/networkSecurityPerimeters/{nsp_name}/profiles/{profile_name}"')

        self.cmd('network perimeter association show --name {association_name} --perimeter-name {nsp_name} --resource-group {rg}', checks=[
            self.check('properties.accessMode', 'Learning')
        ])

        self.cmd('network perimeter association update --name {association_name} --perimeter-name {nsp_name} --resource-group {rg} --access-mode Enforced '
                 '--private-link-resource id="/subscriptions/{sub}/resourceGroups/{rg}/providers/Microsoft.KeyVault/vaults/{resource_name}" '
                 '--profile id="/subscriptions/{sub}/resourceGroups/{rg}/providers/Microsoft.Network/networkSecurityPerimeters/{nsp_name}/profiles/{profile_name}"')

        self.cmd('network perimeter association show --name {association_name} --perimeter-name {nsp_name} --resource-group {rg}', checks=[
            self.check('properties.accessMode', 'Enforced')
        ])

        self.cmd('network perimeter association list --perimeter-name {nsp_name} --resource-group {rg}')

        self.cmd('network perimeter association delete --name {association_name} --perimeter-name {nsp_name} --resource-group {rg} --yes')

        self.cmd('network perimeter association show --name {association_name} --perimeter-name {nsp_name} --resource-group {rg}', expect_failure=True)

        self.cmd('keyvault delete --name {resource_name} --resource-group {rg} --no-wait')
        self.cmd('keyvault purge --name {resource_name} -l eastus2euap --no-wait')

    @ResourceGroupPreparer(name_prefix='test_nsp_link_crud', location='eastus2euap')
    def test_nsp_link_linkreference_crud(self, resource_group):

        self.kwargs.update({
            'sub': self.get_subscription_id(),
            'nsp1_name': 'TestNetworkSecurityPerimeter1',
            'nsp2_name': 'TestNetworkSecurityPerimeter2',
            'link1_name': 'TestNspLink1'
        })

        self.cmd('network perimeter create --name {nsp1_name} -l eastus2euap --resource-group {rg}')
        self.cmd('network perimeter create --name {nsp2_name} -l eastus2euap --resource-group {rg}')

        # create nsp link
        self.cmd('az network perimeter link create --name {link1_name} --perimeter-name {nsp1_name} --resource-group {rg} --auto-remote-nsp-id "/subscriptions/{sub}/resourceGroups/{rg}/providers/Microsoft.Network/networkSecurityPerimeters/{nsp2_name}" --local-inbound-profile "[\'*\']" --remote-inbound-profile "[\'*\']" ')

        # show link
        self.cmd('az network perimeter link show --name {link1_name} --perimeter-name {nsp1_name} --resource-group {rg}').get_output_in_json()

        # get list of links
        self.cmd('az network perimeter link list --perimeter-name {nsp1_name} --resource-group {rg}').get_output_in_json()

        # update link
        self.cmd('az network perimeter link update --name {link1_name} --perimeter-name {nsp1_name} --resource-group {rg} --local-inbound-profile "[\'*\']"')

        # delete link
        self.cmd('az network perimeter link delete --name {link1_name} --perimeter-name {nsp1_name} --resource-group {rg} --yes')

        # list link reference
        link_ref2_list = self.cmd('az network perimeter link-reference list --perimeter-name {nsp2_name} --resource-group {rg}').get_output_in_json()

        self.kwargs.update({'ref2_name': link_ref2_list[0]['name']})

        # show link reference
        self.cmd('az network perimeter link-reference show --perimeter-name {nsp2_name} --resource-group {rg} --name {ref2_name}')

        # delete link reference
        self.cmd('az network perimeter link-reference delete --perimeter-name {nsp2_name} --resource-group {rg} --name {ref2_name} --yes')
