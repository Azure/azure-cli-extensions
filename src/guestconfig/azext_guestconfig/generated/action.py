# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from knack.util import CLIError
from collections import defaultdict


class AddGuestConfigurationConfigurationParameter(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddGuestConfigurationConfigurationParameter, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'name':
                d['name'] = v[0]
            elif kl == 'value':
                d['value'] = v[0]
        return d


class AddGuestConfigurationConfigurationSetting(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.guest_configuration_configuration_setting = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        d['refresh_frequency_mins'] = 30
        d['reboot_if_needed'] = "False"
        d['configuration_mode_frequency_mins'] = 15
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'configuration-mode':
                d['configuration_mode'] = v[0]
            elif kl == 'allow-module-overwrite':
                d['allow_module_overwrite'] = v[0]
            elif kl == 'action-after-reboot':
                d['action_after_reboot'] = v[0]
            elif kl == 'refresh-frequency-mins':
                d['refresh_frequency_mins'] = v[0]
            elif kl == 'reboot-if-needed':
                d['reboot_if_needed'] = v[0]
            elif kl == 'configuration-mode-frequency-mins':
                d['configuration_mode_frequency_mins'] = v[0]
        return d
