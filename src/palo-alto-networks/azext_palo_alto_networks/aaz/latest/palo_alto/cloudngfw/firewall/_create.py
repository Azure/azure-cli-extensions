# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "palo-alto cloudngfw firewall create",
)
class Create(AAZCommand):
    """Create a FirewallResource

    :example: Create a FirewallResource
        az palo-alto cloudngfw firewall create --name MyCloudngfwFirewall -g MyResourceGroup --location eastus --associated-rulestack "{location:eastus,resource-id:/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MyResourceGroup/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/MyLocalRulestacks}" --dns-settings "{enable-dns-proxy:DISABLED,enabled-dns-type:CUSTOM}" --is-panorama-managed FALSE --marketplace-details "{marketplace-subscription-status:Subscribed,offer-id:offer-id,publisher-id:publisher-id}" --network-profile "{egress-nat-ip:[],enable-egress-nat:DISABLED,network-type:VNET,public-ips:[{address:10.0.0.0/16,resource-id:/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MyResourceGroup/providers/Microsoft.Network/publicIPAddresses/MypublicIP}],vnet-configuration:{ip-of-trust-subnet-for-udr:{address:10.0.0.0/16},trust-subnet:{resource-id:/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MyResourceGroup/providers/Microsoft.Network/virtualNetworks/MyVnet/subnets/subnet1},un-trust-subnet:{resource-id:/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MyResourceGroup/providers/Microsoft.Network/virtualNetworks/MyVnet/subnets/subnet1},vnet:{resource-id:/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/MyResourceGroup/providers/Microsoft.Network/virtualNetworks/MyVnet}}}" --panorama-config "{config-string:bas64EncodedString}" --plan-data "{billing-cycle:MONTHLY,plan-id:plan-id,usage-type:PAYG}"
    """

    _aaz_info = {
        "version": "2022-08-29",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/paloaltonetworks.cloudngfw/firewalls/{}", "2022-08-29"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.firewall_name = AAZStrArg(
            options=["-n", "--name", "--firewall-name"],
            help="Firewall resource name",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.associated_rulestack = AAZObjectArg(
            options=["--associated-rulestack"],
            arg_group="Properties",
            help="Associated Rulestack",
        )
        _args_schema.dns_settings = AAZObjectArg(
            options=["--dns-settings"],
            arg_group="Properties",
            help="DNS settings for Firewall",
            required=True,
        )
        _args_schema.front_end_settings = AAZListArg(
            options=["--front-end-settings"],
            arg_group="Properties",
            help="Frontend settings for Firewall",
        )
        _args_schema.is_panorama_managed = AAZStrArg(
            options=["--is-panorama-managed"],
            arg_group="Properties",
            help="Panorama Managed: Default is False. Default will be CloudSec managed",
            enum={"FALSE": "FALSE", "TRUE": "TRUE"},
        )
        _args_schema.marketplace_details = AAZObjectArg(
            options=["--marketplace-details"],
            arg_group="Properties",
            help="Marketplace details",
            required=True,
        )
        _args_schema.network_profile = AAZObjectArg(
            options=["--network-profile"],
            arg_group="Properties",
            help="Network settings",
            required=True,
        )
        _args_schema.pan_etag = AAZStrArg(
            options=["--pan-etag"],
            arg_group="Properties",
            help="panEtag info",
        )
        _args_schema.panorama_config = AAZObjectArg(
            options=["--panorama-config"],
            arg_group="Properties",
            help="Panorama Configuration",
        )
        _args_schema.plan_data = AAZObjectArg(
            options=["--plan-data"],
            arg_group="Properties",
            help="Billing plan information.",
            required=True,
        )

        associated_rulestack = cls._args_schema.associated_rulestack
        associated_rulestack.location = AAZStrArg(
            options=["location"],
            help="Rulestack location",
        )
        associated_rulestack.resource_id = AAZStrArg(
            options=["resource-id"],
            help="Resource Id",
        )
        associated_rulestack.rulestack_id = AAZStrArg(
            options=["rulestack-id"],
            help="Associated rulestack Id",
        )

        dns_settings = cls._args_schema.dns_settings
        dns_settings.dns_servers = AAZListArg(
            options=["dns-servers"],
            help="List of IPs associated with the Firewall",
        )
        dns_settings.enable_dns_proxy = AAZStrArg(
            options=["enable-dns-proxy"],
            help="Enable DNS proxy, disabled by default",
            enum={"DISABLED": "DISABLED", "ENABLED": "ENABLED"},
        )
        dns_settings.enabled_dns_type = AAZStrArg(
            options=["enabled-dns-type"],
            help="Enabled DNS proxy type, disabled by default",
            enum={"AZURE": "AZURE", "CUSTOM": "CUSTOM"},
        )

        dns_servers = cls._args_schema.dns_settings.dns_servers
        dns_servers.Element = AAZObjectArg()
        cls._build_args_ip_address_create(dns_servers.Element)

        front_end_settings = cls._args_schema.front_end_settings
        front_end_settings.Element = AAZObjectArg()

        _element = cls._args_schema.front_end_settings.Element
        _element.backend_configuration = AAZObjectArg(
            options=["backend-configuration"],
            help="Backend configurations",
            required=True,
        )
        cls._build_args_endpoint_configuration_create(_element.backend_configuration)
        _element.frontend_configuration = AAZObjectArg(
            options=["frontend-configuration"],
            help="Frontend configurations",
            required=True,
        )
        cls._build_args_endpoint_configuration_create(_element.frontend_configuration)
        _element.name = AAZStrArg(
            options=["name"],
            help="Settings name",
            required=True,
        )
        _element.protocol = AAZStrArg(
            options=["protocol"],
            help="Protocol Type",
            required=True,
            enum={"TCP": "TCP", "UDP": "UDP"},
        )

        marketplace_details = cls._args_schema.marketplace_details
        marketplace_details.marketplace_subscription_status = AAZStrArg(
            options=["marketplace-subscription-status"],
            help="Marketplace Subscription Status",
            enum={"FulfillmentRequested": "FulfillmentRequested", "NotStarted": "NotStarted", "PendingFulfillmentStart": "PendingFulfillmentStart", "Subscribed": "Subscribed", "Suspended": "Suspended", "Unsubscribed": "Unsubscribed"},
        )
        marketplace_details.offer_id = AAZStrArg(
            options=["offer-id"],
            help="Offer Id",
            required=True,
        )
        marketplace_details.publisher_id = AAZStrArg(
            options=["publisher-id"],
            help="Publisher Id",
            required=True,
        )

        network_profile = cls._args_schema.network_profile
        network_profile.egress_nat_ip = AAZListArg(
            options=["egress-nat-ip"],
            help="Egress nat IP to use",
        )
        network_profile.enable_egress_nat = AAZStrArg(
            options=["enable-egress-nat"],
            help="Enable egress NAT, enabled by default",
            required=True,
            enum={"DISABLED": "DISABLED", "ENABLED": "ENABLED"},
        )
        network_profile.network_type = AAZStrArg(
            options=["network-type"],
            help="vnet or vwan, cannot be updated",
            required=True,
            enum={"VNET": "VNET", "VWAN": "VWAN"},
        )
        network_profile.public_ips = AAZListArg(
            options=["public-ips"],
            help="List of IPs associated with the Firewall",
            required=True,
        )
        network_profile.vnet_configuration = AAZObjectArg(
            options=["vnet-configuration"],
            help="Vnet configurations",
        )
        network_profile.vwan_configuration = AAZObjectArg(
            options=["vwan-configuration"],
            help="Vwan configurations",
        )

        egress_nat_ip = cls._args_schema.network_profile.egress_nat_ip
        egress_nat_ip.Element = AAZObjectArg()
        cls._build_args_ip_address_create(egress_nat_ip.Element)

        public_ips = cls._args_schema.network_profile.public_ips
        public_ips.Element = AAZObjectArg()
        cls._build_args_ip_address_create(public_ips.Element)

        vnet_configuration = cls._args_schema.network_profile.vnet_configuration
        vnet_configuration.ip_of_trust_subnet_for_udr = AAZObjectArg(
            options=["ip-of-trust-subnet-for-udr"],
            help="IP of trust subnet for UDR",
        )
        cls._build_args_ip_address_create(vnet_configuration.ip_of_trust_subnet_for_udr)
        vnet_configuration.trust_subnet = AAZObjectArg(
            options=["trust-subnet"],
            help="Trust Subnet",
            required=True,
        )
        cls._build_args_ip_address_space_create(vnet_configuration.trust_subnet)
        vnet_configuration.un_trust_subnet = AAZObjectArg(
            options=["un-trust-subnet"],
            help="Untrust Subnet",
            required=True,
        )
        cls._build_args_ip_address_space_create(vnet_configuration.un_trust_subnet)
        vnet_configuration.vnet = AAZObjectArg(
            options=["vnet"],
            help="Azure Virtual Network",
            required=True,
        )
        cls._build_args_ip_address_space_create(vnet_configuration.vnet)

        vwan_configuration = cls._args_schema.network_profile.vwan_configuration
        vwan_configuration.ip_of_trust_subnet_for_udr = AAZObjectArg(
            options=["ip-of-trust-subnet-for-udr"],
            help="IP of trust subnet for UDR",
        )
        cls._build_args_ip_address_create(vwan_configuration.ip_of_trust_subnet_for_udr)
        vwan_configuration.network_virtual_appliance_id = AAZStrArg(
            options=["network-virtual-appliance-id"],
            help="Network Virtual Appliance resource ID ",
        )
        vwan_configuration.trust_subnet = AAZObjectArg(
            options=["trust-subnet"],
            help="Trust Subnet",
        )
        cls._build_args_ip_address_space_create(vwan_configuration.trust_subnet)
        vwan_configuration.un_trust_subnet = AAZObjectArg(
            options=["un-trust-subnet"],
            help="Untrust Subnet",
        )
        cls._build_args_ip_address_space_create(vwan_configuration.un_trust_subnet)
        vwan_configuration.v_hub = AAZObjectArg(
            options=["v-hub"],
            help="vHub Address",
            required=True,
        )
        cls._build_args_ip_address_space_create(vwan_configuration.v_hub)

        panorama_config = cls._args_schema.panorama_config
        panorama_config.config_string = AAZStrArg(
            options=["config-string"],
            help="Base64 encoded string representing Panorama parameters to be used by Firewall to connect to Panorama. This string is generated via azure plugin in Panorama",
            required=True,
        )

        plan_data = cls._args_schema.plan_data
        plan_data.billing_cycle = AAZStrArg(
            options=["billing-cycle"],
            help="different billing cycles like MONTHLY/WEEKLY",
            required=True,
            enum={"MONTHLY": "MONTHLY", "WEEKLY": "WEEKLY"},
        )
        plan_data.plan_id = AAZStrArg(
            options=["plan-id"],
            help="plan id as published by Liftr.PAN",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=50,
            ),
        )
        plan_data.usage_type = AAZStrArg(
            options=["usage-type"],
            help="different usage type like PAYG/COMMITTED",
            enum={"COMMITTED": "COMMITTED", "PAYG": "PAYG"},
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.identity = AAZObjectArg(
            options=["--identity"],
            arg_group="Resource",
            help="The managed service identities assigned to this resource.",
        )
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        identity = cls._args_schema.identity
        identity.type = AAZStrArg(
            options=["type"],
            help="The type of managed identity assigned to this resource.",
            required=True,
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "SystemAssigned,UserAssigned": "SystemAssigned,UserAssigned", "UserAssigned": "UserAssigned"},
        )
        identity.user_assigned_identities = AAZDictArg(
            options=["user-assigned-identities"],
            help="The identities assigned to this resource by the user.",
        )

        user_assigned_identities = cls._args_schema.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectArg()

        _element = cls._args_schema.identity.user_assigned_identities.Element
        _element.client_id = AAZStrArg(
            options=["client-id"],
            help="The active directory client identifier for this principal.",
        )
        _element.principal_id = AAZStrArg(
            options=["principal-id"],
            help="The active directory identifier for this principal.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    _args_endpoint_configuration_create = None

    @classmethod
    def _build_args_endpoint_configuration_create(cls, _schema):
        if cls._args_endpoint_configuration_create is not None:
            _schema.address = cls._args_endpoint_configuration_create.address
            _schema.port = cls._args_endpoint_configuration_create.port
            return

        cls._args_endpoint_configuration_create = AAZObjectArg()

        endpoint_configuration_create = cls._args_endpoint_configuration_create
        endpoint_configuration_create.address = AAZObjectArg(
            options=["address"],
            help="Address Space",
            required=True,
        )
        cls._build_args_ip_address_create(endpoint_configuration_create.address)
        endpoint_configuration_create.port = AAZStrArg(
            options=["port"],
            help="port ID",
            required=True,
        )

        _schema.address = cls._args_endpoint_configuration_create.address
        _schema.port = cls._args_endpoint_configuration_create.port

    _args_ip_address_space_create = None

    @classmethod
    def _build_args_ip_address_space_create(cls, _schema):
        if cls._args_ip_address_space_create is not None:
            _schema.address_space = cls._args_ip_address_space_create.address_space
            _schema.resource_id = cls._args_ip_address_space_create.resource_id
            return

        cls._args_ip_address_space_create = AAZObjectArg()

        ip_address_space_create = cls._args_ip_address_space_create
        ip_address_space_create.address_space = AAZStrArg(
            options=["address-space"],
            help="Address Space",
        )
        ip_address_space_create.resource_id = AAZStrArg(
            options=["resource-id"],
            help="Resource Id",
        )

        _schema.address_space = cls._args_ip_address_space_create.address_space
        _schema.resource_id = cls._args_ip_address_space_create.resource_id

    _args_ip_address_create = None

    @classmethod
    def _build_args_ip_address_create(cls, _schema):
        if cls._args_ip_address_create is not None:
            _schema.address = cls._args_ip_address_create.address
            _schema.resource_id = cls._args_ip_address_create.resource_id
            return

        cls._args_ip_address_create = AAZObjectArg()

        ip_address_create = cls._args_ip_address_create
        ip_address_create.address = AAZStrArg(
            options=["address"],
            help="Address value",
        )
        ip_address_create.resource_id = AAZStrArg(
            options=["resource-id"],
            help="Resource Id",
        )

        _schema.address = cls._args_ip_address_create.address
        _schema.resource_id = cls._args_ip_address_create.resource_id

    def _execute_operations(self):
        self.pre_operations()
        yield self.FirewallsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class FirewallsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/firewalls/{firewallName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "firewallName", self.ctx.args.firewall_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-08-29",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".identity.userAssignedIdentities{}")
            if _elements is not None:
                _elements.set_prop("clientId", AAZStrType, ".client_id")
                _elements.set_prop("principalId", AAZStrType, ".principal_id")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("associatedRulestack", AAZObjectType, ".associated_rulestack")
                properties.set_prop("dnsSettings", AAZObjectType, ".dns_settings", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("frontEndSettings", AAZListType, ".front_end_settings")
                properties.set_prop("isPanoramaManaged", AAZStrType, ".is_panorama_managed")
                properties.set_prop("marketplaceDetails", AAZObjectType, ".marketplace_details", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("networkProfile", AAZObjectType, ".network_profile", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("panEtag", AAZStrType, ".pan_etag")
                properties.set_prop("panoramaConfig", AAZObjectType, ".panorama_config")
                properties.set_prop("planData", AAZObjectType, ".plan_data", typ_kwargs={"flags": {"required": True}})

            associated_rulestack = _builder.get(".properties.associatedRulestack")
            if associated_rulestack is not None:
                associated_rulestack.set_prop("location", AAZStrType, ".location")
                associated_rulestack.set_prop("resourceId", AAZStrType, ".resource_id")
                associated_rulestack.set_prop("rulestackId", AAZStrType, ".rulestack_id")

            dns_settings = _builder.get(".properties.dnsSettings")
            if dns_settings is not None:
                dns_settings.set_prop("dnsServers", AAZListType, ".dns_servers")
                dns_settings.set_prop("enableDnsProxy", AAZStrType, ".enable_dns_proxy")
                dns_settings.set_prop("enabledDnsType", AAZStrType, ".enabled_dns_type")

            dns_servers = _builder.get(".properties.dnsSettings.dnsServers")
            if dns_servers is not None:
                _CreateHelper._build_schema_ip_address_create(dns_servers.set_elements(AAZObjectType, "."))

            front_end_settings = _builder.get(".properties.frontEndSettings")
            if front_end_settings is not None:
                front_end_settings.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.frontEndSettings[]")
            if _elements is not None:
                _CreateHelper._build_schema_endpoint_configuration_create(_elements.set_prop("backendConfiguration", AAZObjectType, ".backend_configuration", typ_kwargs={"flags": {"required": True}}))
                _CreateHelper._build_schema_endpoint_configuration_create(_elements.set_prop("frontendConfiguration", AAZObjectType, ".frontend_configuration", typ_kwargs={"flags": {"required": True}}))
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("protocol", AAZStrType, ".protocol", typ_kwargs={"flags": {"required": True}})

            marketplace_details = _builder.get(".properties.marketplaceDetails")
            if marketplace_details is not None:
                marketplace_details.set_prop("marketplaceSubscriptionStatus", AAZStrType, ".marketplace_subscription_status")
                marketplace_details.set_prop("offerId", AAZStrType, ".offer_id", typ_kwargs={"flags": {"required": True}})
                marketplace_details.set_prop("publisherId", AAZStrType, ".publisher_id", typ_kwargs={"flags": {"required": True}})

            network_profile = _builder.get(".properties.networkProfile")
            if network_profile is not None:
                network_profile.set_prop("egressNatIp", AAZListType, ".egress_nat_ip")
                network_profile.set_prop("enableEgressNat", AAZStrType, ".enable_egress_nat", typ_kwargs={"flags": {"required": True}})
                network_profile.set_prop("networkType", AAZStrType, ".network_type", typ_kwargs={"flags": {"required": True}})
                network_profile.set_prop("publicIps", AAZListType, ".public_ips", typ_kwargs={"flags": {"required": True}})
                network_profile.set_prop("vnetConfiguration", AAZObjectType, ".vnet_configuration")
                network_profile.set_prop("vwanConfiguration", AAZObjectType, ".vwan_configuration")

            egress_nat_ip = _builder.get(".properties.networkProfile.egressNatIp")
            if egress_nat_ip is not None:
                _CreateHelper._build_schema_ip_address_create(egress_nat_ip.set_elements(AAZObjectType, "."))

            public_ips = _builder.get(".properties.networkProfile.publicIps")
            if public_ips is not None:
                _CreateHelper._build_schema_ip_address_create(public_ips.set_elements(AAZObjectType, "."))

            vnet_configuration = _builder.get(".properties.networkProfile.vnetConfiguration")
            if vnet_configuration is not None:
                _CreateHelper._build_schema_ip_address_create(vnet_configuration.set_prop("ipOfTrustSubnetForUdr", AAZObjectType, ".ip_of_trust_subnet_for_udr"))
                _CreateHelper._build_schema_ip_address_space_create(vnet_configuration.set_prop("trustSubnet", AAZObjectType, ".trust_subnet", typ_kwargs={"flags": {"required": True}}))
                _CreateHelper._build_schema_ip_address_space_create(vnet_configuration.set_prop("unTrustSubnet", AAZObjectType, ".un_trust_subnet", typ_kwargs={"flags": {"required": True}}))
                _CreateHelper._build_schema_ip_address_space_create(vnet_configuration.set_prop("vnet", AAZObjectType, ".vnet", typ_kwargs={"flags": {"required": True}}))

            vwan_configuration = _builder.get(".properties.networkProfile.vwanConfiguration")
            if vwan_configuration is not None:
                _CreateHelper._build_schema_ip_address_create(vwan_configuration.set_prop("ipOfTrustSubnetForUdr", AAZObjectType, ".ip_of_trust_subnet_for_udr"))
                vwan_configuration.set_prop("networkVirtualApplianceId", AAZStrType, ".network_virtual_appliance_id")
                _CreateHelper._build_schema_ip_address_space_create(vwan_configuration.set_prop("trustSubnet", AAZObjectType, ".trust_subnet"))
                _CreateHelper._build_schema_ip_address_space_create(vwan_configuration.set_prop("unTrustSubnet", AAZObjectType, ".un_trust_subnet"))
                _CreateHelper._build_schema_ip_address_space_create(vwan_configuration.set_prop("vHub", AAZObjectType, ".v_hub", typ_kwargs={"flags": {"required": True}}))

            panorama_config = _builder.get(".properties.panoramaConfig")
            if panorama_config is not None:
                panorama_config.set_prop("configString", AAZStrType, ".config_string", typ_kwargs={"flags": {"required": True}})

            plan_data = _builder.get(".properties.planData")
            if plan_data is not None:
                plan_data.set_prop("billingCycle", AAZStrType, ".billing_cycle", typ_kwargs={"flags": {"required": True}})
                plan_data.set_prop("planId", AAZStrType, ".plan_id", typ_kwargs={"flags": {"required": True}})
                plan_data.set_prop("usageType", AAZStrType, ".usage_type")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.identity = AAZObjectType()
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200_201.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200_201.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType()

            _element = cls._schema_on_200_201.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
            )

            properties = cls._schema_on_200_201.properties
            properties.associated_rulestack = AAZObjectType(
                serialized_name="associatedRulestack",
            )
            properties.dns_settings = AAZObjectType(
                serialized_name="dnsSettings",
                flags={"required": True},
            )
            properties.front_end_settings = AAZListType(
                serialized_name="frontEndSettings",
            )
            properties.is_panorama_managed = AAZStrType(
                serialized_name="isPanoramaManaged",
            )
            properties.marketplace_details = AAZObjectType(
                serialized_name="marketplaceDetails",
                flags={"required": True},
            )
            properties.network_profile = AAZObjectType(
                serialized_name="networkProfile",
                flags={"required": True},
            )
            properties.pan_etag = AAZStrType(
                serialized_name="panEtag",
            )
            properties.panorama_config = AAZObjectType(
                serialized_name="panoramaConfig",
            )
            properties.plan_data = AAZObjectType(
                serialized_name="planData",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )

            associated_rulestack = cls._schema_on_200_201.properties.associated_rulestack
            associated_rulestack.location = AAZStrType()
            associated_rulestack.resource_id = AAZStrType(
                serialized_name="resourceId",
            )
            associated_rulestack.rulestack_id = AAZStrType(
                serialized_name="rulestackId",
            )

            dns_settings = cls._schema_on_200_201.properties.dns_settings
            dns_settings.dns_servers = AAZListType(
                serialized_name="dnsServers",
            )
            dns_settings.enable_dns_proxy = AAZStrType(
                serialized_name="enableDnsProxy",
            )
            dns_settings.enabled_dns_type = AAZStrType(
                serialized_name="enabledDnsType",
            )

            dns_servers = cls._schema_on_200_201.properties.dns_settings.dns_servers
            dns_servers.Element = AAZObjectType()
            _CreateHelper._build_schema_ip_address_read(dns_servers.Element)

            front_end_settings = cls._schema_on_200_201.properties.front_end_settings
            front_end_settings.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.front_end_settings.Element
            _element.backend_configuration = AAZObjectType(
                serialized_name="backendConfiguration",
                flags={"required": True},
            )
            _CreateHelper._build_schema_endpoint_configuration_read(_element.backend_configuration)
            _element.frontend_configuration = AAZObjectType(
                serialized_name="frontendConfiguration",
                flags={"required": True},
            )
            _CreateHelper._build_schema_endpoint_configuration_read(_element.frontend_configuration)
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.protocol = AAZStrType(
                flags={"required": True},
            )

            marketplace_details = cls._schema_on_200_201.properties.marketplace_details
            marketplace_details.marketplace_subscription_id = AAZStrType(
                serialized_name="marketplaceSubscriptionId",
                flags={"read_only": True},
            )
            marketplace_details.marketplace_subscription_status = AAZStrType(
                serialized_name="marketplaceSubscriptionStatus",
            )
            marketplace_details.offer_id = AAZStrType(
                serialized_name="offerId",
                flags={"required": True},
            )
            marketplace_details.publisher_id = AAZStrType(
                serialized_name="publisherId",
                flags={"required": True},
            )

            network_profile = cls._schema_on_200_201.properties.network_profile
            network_profile.egress_nat_ip = AAZListType(
                serialized_name="egressNatIp",
            )
            network_profile.enable_egress_nat = AAZStrType(
                serialized_name="enableEgressNat",
                flags={"required": True},
            )
            network_profile.network_type = AAZStrType(
                serialized_name="networkType",
                flags={"required": True},
            )
            network_profile.public_ips = AAZListType(
                serialized_name="publicIps",
                flags={"required": True},
            )
            network_profile.vnet_configuration = AAZObjectType(
                serialized_name="vnetConfiguration",
            )
            network_profile.vwan_configuration = AAZObjectType(
                serialized_name="vwanConfiguration",
            )

            egress_nat_ip = cls._schema_on_200_201.properties.network_profile.egress_nat_ip
            egress_nat_ip.Element = AAZObjectType()
            _CreateHelper._build_schema_ip_address_read(egress_nat_ip.Element)

            public_ips = cls._schema_on_200_201.properties.network_profile.public_ips
            public_ips.Element = AAZObjectType()
            _CreateHelper._build_schema_ip_address_read(public_ips.Element)

            vnet_configuration = cls._schema_on_200_201.properties.network_profile.vnet_configuration
            vnet_configuration.ip_of_trust_subnet_for_udr = AAZObjectType(
                serialized_name="ipOfTrustSubnetForUdr",
            )
            _CreateHelper._build_schema_ip_address_read(vnet_configuration.ip_of_trust_subnet_for_udr)
            vnet_configuration.trust_subnet = AAZObjectType(
                serialized_name="trustSubnet",
                flags={"required": True},
            )
            _CreateHelper._build_schema_ip_address_space_read(vnet_configuration.trust_subnet)
            vnet_configuration.un_trust_subnet = AAZObjectType(
                serialized_name="unTrustSubnet",
                flags={"required": True},
            )
            _CreateHelper._build_schema_ip_address_space_read(vnet_configuration.un_trust_subnet)
            vnet_configuration.vnet = AAZObjectType(
                flags={"required": True},
            )
            _CreateHelper._build_schema_ip_address_space_read(vnet_configuration.vnet)

            vwan_configuration = cls._schema_on_200_201.properties.network_profile.vwan_configuration
            vwan_configuration.ip_of_trust_subnet_for_udr = AAZObjectType(
                serialized_name="ipOfTrustSubnetForUdr",
            )
            _CreateHelper._build_schema_ip_address_read(vwan_configuration.ip_of_trust_subnet_for_udr)
            vwan_configuration.network_virtual_appliance_id = AAZStrType(
                serialized_name="networkVirtualApplianceId",
            )
            vwan_configuration.trust_subnet = AAZObjectType(
                serialized_name="trustSubnet",
            )
            _CreateHelper._build_schema_ip_address_space_read(vwan_configuration.trust_subnet)
            vwan_configuration.un_trust_subnet = AAZObjectType(
                serialized_name="unTrustSubnet",
            )
            _CreateHelper._build_schema_ip_address_space_read(vwan_configuration.un_trust_subnet)
            vwan_configuration.v_hub = AAZObjectType(
                serialized_name="vHub",
                flags={"required": True},
            )
            _CreateHelper._build_schema_ip_address_space_read(vwan_configuration.v_hub)

            panorama_config = cls._schema_on_200_201.properties.panorama_config
            panorama_config.cg_name = AAZStrType(
                serialized_name="cgName",
                flags={"read_only": True},
            )
            panorama_config.config_string = AAZStrType(
                serialized_name="configString",
                flags={"required": True},
            )
            panorama_config.dg_name = AAZStrType(
                serialized_name="dgName",
                flags={"read_only": True},
            )
            panorama_config.host_name = AAZStrType(
                serialized_name="hostName",
                flags={"read_only": True},
            )
            panorama_config.panorama_server = AAZStrType(
                serialized_name="panoramaServer",
                flags={"read_only": True},
            )
            panorama_config.panorama_server2 = AAZStrType(
                serialized_name="panoramaServer2",
                flags={"read_only": True},
            )
            panorama_config.tpl_name = AAZStrType(
                serialized_name="tplName",
                flags={"read_only": True},
            )
            panorama_config.vm_auth_key = AAZStrType(
                serialized_name="vmAuthKey",
                flags={"read_only": True},
            )

            plan_data = cls._schema_on_200_201.properties.plan_data
            plan_data.billing_cycle = AAZStrType(
                serialized_name="billingCycle",
                flags={"required": True},
            )
            plan_data.effective_date = AAZStrType(
                serialized_name="effectiveDate",
                flags={"read_only": True},
            )
            plan_data.plan_id = AAZStrType(
                serialized_name="planId",
                flags={"required": True},
            )
            plan_data.usage_type = AAZStrType(
                serialized_name="usageType",
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_endpoint_configuration_create(cls, _builder):
        if _builder is None:
            return
        cls._build_schema_ip_address_create(_builder.set_prop("address", AAZObjectType, ".address", typ_kwargs={"flags": {"required": True}}))
        _builder.set_prop("port", AAZStrType, ".port", typ_kwargs={"flags": {"required": True}})

    @classmethod
    def _build_schema_ip_address_space_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("addressSpace", AAZStrType, ".address_space")
        _builder.set_prop("resourceId", AAZStrType, ".resource_id")

    @classmethod
    def _build_schema_ip_address_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("address", AAZStrType, ".address")
        _builder.set_prop("resourceId", AAZStrType, ".resource_id")

    _schema_endpoint_configuration_read = None

    @classmethod
    def _build_schema_endpoint_configuration_read(cls, _schema):
        if cls._schema_endpoint_configuration_read is not None:
            _schema.address = cls._schema_endpoint_configuration_read.address
            _schema.port = cls._schema_endpoint_configuration_read.port
            return

        cls._schema_endpoint_configuration_read = _schema_endpoint_configuration_read = AAZObjectType()

        endpoint_configuration_read = _schema_endpoint_configuration_read
        endpoint_configuration_read.address = AAZObjectType(
            flags={"required": True},
        )
        cls._build_schema_ip_address_read(endpoint_configuration_read.address)
        endpoint_configuration_read.port = AAZStrType(
            flags={"required": True},
        )

        _schema.address = cls._schema_endpoint_configuration_read.address
        _schema.port = cls._schema_endpoint_configuration_read.port

    _schema_ip_address_space_read = None

    @classmethod
    def _build_schema_ip_address_space_read(cls, _schema):
        if cls._schema_ip_address_space_read is not None:
            _schema.address_space = cls._schema_ip_address_space_read.address_space
            _schema.resource_id = cls._schema_ip_address_space_read.resource_id
            return

        cls._schema_ip_address_space_read = _schema_ip_address_space_read = AAZObjectType()

        ip_address_space_read = _schema_ip_address_space_read
        ip_address_space_read.address_space = AAZStrType(
            serialized_name="addressSpace",
        )
        ip_address_space_read.resource_id = AAZStrType(
            serialized_name="resourceId",
        )

        _schema.address_space = cls._schema_ip_address_space_read.address_space
        _schema.resource_id = cls._schema_ip_address_space_read.resource_id

    _schema_ip_address_read = None

    @classmethod
    def _build_schema_ip_address_read(cls, _schema):
        if cls._schema_ip_address_read is not None:
            _schema.address = cls._schema_ip_address_read.address
            _schema.resource_id = cls._schema_ip_address_read.resource_id
            return

        cls._schema_ip_address_read = _schema_ip_address_read = AAZObjectType()

        ip_address_read = _schema_ip_address_read
        ip_address_read.address = AAZStrType()
        ip_address_read.resource_id = AAZStrType(
            serialized_name="resourceId",
        )

        _schema.address = cls._schema_ip_address_read.address
        _schema.resource_id = cls._schema_ip_address_read.resource_id


__all__ = ["Create"]
