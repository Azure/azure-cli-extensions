# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "palo-alto cloudngfw firewall show-support-info",
)
class ShowSupportInfo(AAZCommand):
    """Support info for firewall.

    :example: Get support info for firewall.
        az palo-alto cloudngfw firewall show-support-info --resource-group MyResourceGroup -n MyCloudngfwFirewall
    """

    _aaz_info = {
        "version": "2022-08-29",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/paloaltonetworks.cloudngfw/firewalls/{}/getsupportinfo", "2022-08-29"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.firewall_name = AAZStrArg(
            options=["-n", "--name", "--firewall-name"],
            help="Firewall resource name",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.email = AAZStrArg(
            options=["--email"],
            help="email address on behalf of which this API called",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.FirewallsGetSupportInfo(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class FirewallsGetSupportInfo(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/firewalls/{firewallName}/getSupportInfo",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "firewallName", self.ctx.args.firewall_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "email", self.ctx.args.email,
                ),
                **self.serialize_query_param(
                    "api-version", "2022-08-29",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.account_id = AAZStrType(
                serialized_name="accountId",
            )
            _schema_on_200.account_registered = AAZStrType(
                serialized_name="accountRegistered",
            )
            _schema_on_200.free_trial = AAZStrType(
                serialized_name="freeTrial",
            )
            _schema_on_200.free_trial_credit_left = AAZIntType(
                serialized_name="freeTrialCreditLeft",
            )
            _schema_on_200.free_trial_days_left = AAZIntType(
                serialized_name="freeTrialDaysLeft",
            )
            _schema_on_200.help_url = AAZStrType(
                serialized_name="helpURL",
            )
            _schema_on_200.product_serial = AAZStrType(
                serialized_name="productSerial",
            )
            _schema_on_200.product_sku = AAZStrType(
                serialized_name="productSku",
            )
            _schema_on_200.register_url = AAZStrType(
                serialized_name="registerURL",
            )
            _schema_on_200.support_url = AAZStrType(
                serialized_name="supportURL",
            )
            _schema_on_200.user_domain_supported = AAZStrType(
                serialized_name="userDomainSupported",
            )
            _schema_on_200.user_registered = AAZStrType(
                serialized_name="userRegistered",
            )

            return cls._schema_on_200


class _ShowSupportInfoHelper:
    """Helper class for ShowSupportInfo"""


__all__ = ["ShowSupportInfo"]
