# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long

import os
from azure.cli.testsdk import ScenarioTest
from .. import try_manual, raise_if, calc_coverage
from azure.cli.testsdk import ResourceGroupPreparer
from .preparers import VirtualNetworkPreparer
from .preparers import VnetNicPreparer


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup
@try_manual
def setup(test, rg, rg_2, rg_3):
    pass


# EXAMPLE: /MoveCollections/put/MoveCollections_Create
@try_manual
def step__movecollections_put_movecollections_create(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-collection create '
             '--identity type="SystemAssigned" '
             '--location "eastus2" '
             '--properties source-region="eastus" target-region="westus" '
             '--name "{myMoveCollection}" '
             '--resource-group "{rg}"',
             checks=[
                 test.check("name", "{myMoveCollection}", case_sensitive=False),
             ])


# EXAMPLE: /MoveCollections/get/MoveCollections_ListMoveCollectionsByResourceGroup
@try_manual
def step__movecollections_get(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-collection list-move-collection '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /MoveCollections/patch/MoveCollections_Update
@try_manual
def step__movecollections_patch_movecollections_update(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-collection update '
             '--identity type="SystemAssigned" '
             '--tags key1="mc1" '
             '--name "{myMoveCollection}" '
             '--resource-group "{rg}"',
             checks=[
                 test.check("name", "{myMoveCollection}", case_sensitive=False),
             ])


# EXAMPLE: /MoveCollections/post/MoveCollections_Commit
@try_manual
def step__movecollections_post_movecollections_commit(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-collection commit '
             '--move-resources "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Migrate/MoveCo'
             'llections/{myMoveCollection}/MoveResources/{myMoveResource}" '
             '--validate-only false '
             '--name "{myMoveCollection}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /MoveCollections/post/MoveCollections_BulkRemove
@try_manual
def step__movecollections_post(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-collection bulk-remove '
             '--move-resources "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Migrate/MoveCo'
             'llections/{myMoveCollection}/MoveResources/{myMoveResource}" '
             '--validate-only false '
             '--name "{myMoveCollection}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /MoveCollections/post/MoveCollections_Discard
@try_manual
def step__movecollections_post_movecollections_discard(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-collection discard '
             '--move-resources "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Migrate/MoveCo'
             'llections/{myMoveCollection}/MoveResources/{myMoveResource}" '
             '--validate-only false '
             '--name "{myMoveCollection}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /MoveCollections/post/MoveCollections_InitiateMove
@try_manual
def step__movecollections_post2(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-collection initiate-move '
             '--move-resources "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Migrate/MoveCo'
             'llections/{myMoveCollection}/MoveResources/{myMoveResource}" '
             '--validate-only false '
             '--name "{myMoveCollection}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /MoveCollections/post/MoveCollections_ResolveDependencies
@try_manual
def step__movecollections_post3(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-collection resolve-dependency '
             '--name "{myMoveCollection}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /MoveCollections/post/MoveCollections_Prepare
@try_manual
def step__movecollections_post_movecollections_prepare(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-collection prepare '
             '--move-resources "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Migrate/MoveCo'
             'llections/{myMoveCollection}/MoveResources/{myMoveResource}" '
             '--validate-only false '
             '--name "{myMoveCollection}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /MoveResources/get/MoveResources_List
@try_manual
def step__moveresources_get_moveresources_list(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-resource list '
             '--move-collection-name "{myMoveCollection}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /MoveResources/put/MoveResources_Create
@try_manual
def step__moveresources_put_moveresources_create(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-resource create '
             '--depends-on-overrides id="/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Net'
             'work/networkInterfaces/{nic}" target-id="/subscriptions/{subscription_id}/resourceGroups/{rg_3}/providers'
             '/Microsoft.Network/networkInterfaces/{nic}" '
             '--resource-settings "{{\\"resourceType\\":\\"Microsoft.Compute/virtualMachines\\",\\"targetAvailabilitySe'
             'tId\\":\\"/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Compute/availability'
             'Sets/avset1\\",\\"targetAvailabilityZone\\":\\"2\\",\\"targetResourceName\\":\\"westusvm1\\",\\"targetVmS'
             'ize\\":null}}" '
             '--source-id "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Compute/virtualMa'
             'chines/eastusvm1" '
             '--move-collection-name "{myMoveCollection}" '
             '--name "{myMoveResource3}" '
             '--resource-group "{rg}"',
             checks=[
                 test.check("resourceSettings.resourceType", "Microsoft.Compute/virtualMachines",
                            case_sensitive=False),
                 test.check("resourceSettings.targetAvailabilitySetId", "/subscriptions/{subscription_id}/resourceGroup"
                            "s/{rg_2}/providers/Microsoft.Compute/availabilitySets/avset1", case_sensitive=False),
                 test.check("resourceSettings.targetAvailabilityZone", "2", case_sensitive=False),
                 test.check("resourceSettings.targetResourceName", "westusvm1", case_sensitive=False),
                 test.check("sourceId", "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Com"
                            "pute/virtualMachines/eastusvm1", case_sensitive=False),
                 test.check("name", "{myMoveResource3}", case_sensitive=False),
             ])
    test.cmd('az resourcemover move-resource wait --created '
             '--name "{myMoveResource3}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /MoveCollections/get/MoveCollections_ListMoveCollectionsBySubscription
@try_manual
def step__movecollections_get2(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-collection list-move-collection '
             '-g ""',
             checks=[])


# EXAMPLE: /MoveResources/get/MoveResources_Get
@try_manual
def step__moveresources_get_moveresources_get(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-resource show '
             '--move-collection-name "{myMoveCollection}" '
             '--name "{myMoveResource3}" '
             '--resource-group "{rg}"',
             checks=[
                 test.check("name", "{myMoveResource3}", case_sensitive=False),
             ])


# EXAMPLE: /MoveCollections/get/MoveCollections_Get
@try_manual
def step__movecollections_get_movecollections_get(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-collection show '
             '--name "{myMoveCollection}" '
             '--resource-group "{rg}"',
             checks=[
                 test.check("name", "{myMoveCollection}", case_sensitive=False),
             ])


# EXAMPLE: /MoveResources/delete/MoveResources_Delete
@try_manual
def step__moveresources_delete_moveresources_delete(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-resource delete -y '
             '--move-collection-name "{myMoveCollection}" '
             '--name "{myMoveResource3}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /MoveCollections/delete/MoveCollections_Delete
@try_manual
def step__movecollections_delete(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover move-collection delete -y '
             '--name "{myMoveCollection}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /OperationsDiscovery/get/OperationsDiscovery_Get
@try_manual
def step__operationsdiscovery_get(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover operation-discovery show',
             checks=[])


# EXAMPLE: /UnresolvedDependencies/get/UnresolvedDependencies_Get
@try_manual
def step__unresolveddependencies_get(test, rg, rg_2, rg_3):
    test.cmd('az resourcemover unresolved-dependency show '
             '--move-collection-name "{myMoveCollection}" '
             '--resource-group "{rg}"',
             checks=[])


# Env cleanup
@try_manual
def cleanup(test, rg, rg_2, rg_3):
    pass


# Testcase
@try_manual
def call_scenario(test, rg, rg_2, rg_3):
    setup(test, rg, rg_2, rg_3)
    step__movecollections_put_movecollections_create(test, rg, rg_2, rg_3)
    step__movecollections_get(test, rg, rg_2, rg_3)
    step__movecollections_patch_movecollections_update(test, rg, rg_2, rg_3)
    step__movecollections_post_movecollections_commit(test, rg, rg_2, rg_3)
    step__movecollections_post(test, rg, rg_2, rg_3)
    step__movecollections_post_movecollections_discard(test, rg, rg_2, rg_3)
    step__movecollections_post2(test, rg, rg_2, rg_3)
    step__movecollections_post3(test, rg, rg_2, rg_3)
    step__movecollections_post_movecollections_prepare(test, rg, rg_2, rg_3)
    step__moveresources_get_moveresources_list(test, rg, rg_2, rg_3)
    step__moveresources_put_moveresources_create(test, rg, rg_2, rg_3)
    step__movecollections_get2(test, rg, rg_2, rg_3)
    step__moveresources_get_moveresources_get(test, rg, rg_2, rg_3)
    step__movecollections_get_movecollections_get(test, rg, rg_2, rg_3)
    step__moveresources_delete_moveresources_delete(test, rg, rg_2, rg_3)
    step__movecollections_delete(test, rg, rg_2, rg_3)
    step__operationsdiscovery_get(test, rg, rg_2, rg_3)
    step__unresolveddependencies_get(test, rg, rg_2, rg_3)
    cleanup(test, rg, rg_2, rg_3)


@try_manual
class ResourceMoverServiceAPIScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='clitestresourcemover_rg1'[:7], key='rg', parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='clitestresourcemover_eastusRG'[:7], key='rg_2', parameter_name='rg_2')
    @ResourceGroupPreparer(name_prefix='clitestresourcemover_westusRG'[:7], key='rg_3', parameter_name='rg_3')
    @VirtualNetworkPreparer(name_prefix='clitestresourcemover_default'[:7], key='vn', resource_group_key='rg_2')
    @VnetNicPreparer(name_prefix='clitestresourcemover_eastusvm140'[:7], key='nic', resource_group_key='rg_2',
                     vnet_key='vn')
    def test_resourcemover(self, rg, rg_2, rg_3):

        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myMoveCollection2': 'default',
            'myMoveResource4': 'default',
            'myMoveCollection': 'movecollection1',
            'myMoveResource': 'moveresource1',
            'myMoveResource2': '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Migrate/MoveCollections/movecollection1/MoveResources/moveresource1',
            'myMoveResource3': 'moveresourcename1',
        })

        call_scenario(self, rg, rg_2, rg_3)
        calc_coverage(__file__)
        raise_if()
