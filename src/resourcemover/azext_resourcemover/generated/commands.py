# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_resourcemover.generated._client_factory import cf_move_collection
    resourcemover_move_collection = CliCommandType(
        operations_tmpl='azext_resourcemover.vendored_sdks.resourcemover.operations._move_collection_operations#MoveCol'
        'lectionOperations.{}',
        client_factory=cf_move_collection)
    with self.command_group('resourcemover move-collection', resourcemover_move_collection,
                            client_factory=cf_move_collection, is_experimental=True) as g:
        g.custom_show_command('show', 'resourcemover_move_collection_show')
        g.custom_command('create', 'resourcemover_move_collection_create')
        g.custom_command('update', 'resourcemover_move_collection_update')
        g.custom_command('delete', 'resourcemover_move_collection_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('bulk-remove', 'resourcemover_move_collection_bulk_remove', supports_no_wait=True)
        g.custom_command('commit', 'resourcemover_move_collection_commit', supports_no_wait=True)
        g.custom_command('discard', 'resourcemover_move_collection_discard', supports_no_wait=True)
        g.custom_command('initiate-move', 'resourcemover_move_collection_initiate_move', supports_no_wait=True)
        g.custom_command('list-move-collection', 'resourcemover_move_collection_list_move_collection')
        g.custom_command('prepare', 'resourcemover_move_collection_prepare', supports_no_wait=True)
        g.custom_command('resolve-dependency', 'resourcemover_move_collection_resolve_dependency',
                         supports_no_wait=True)
        g.custom_wait_command('wait', 'resourcemover_move_collection_show')

    from azext_resourcemover.generated._client_factory import cf_move_resource
    resourcemover_move_resource = CliCommandType(
        operations_tmpl='azext_resourcemover.vendored_sdks.resourcemover.operations._move_resource_operations#MoveResou'
        'rceOperations.{}',
        client_factory=cf_move_resource)
    with self.command_group('resourcemover move-resource', resourcemover_move_resource,
                            client_factory=cf_move_resource, is_experimental=True) as g:
        g.custom_command('list', 'resourcemover_move_resource_list')
        g.custom_show_command('show', 'resourcemover_move_resource_show')
        g.custom_command('create', 'resourcemover_move_resource_create', supports_no_wait=True)
        g.custom_command('delete', 'resourcemover_move_resource_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'resourcemover_move_resource_show')

    from azext_resourcemover.generated._client_factory import cf_unresolved_dependency
    resourcemover_unresolved_dependency = CliCommandType(
        operations_tmpl='azext_resourcemover.vendored_sdks.resourcemover.operations._unresolved_dependency_operations#U'
        'nresolvedDependencyOperations.{}',
        client_factory=cf_unresolved_dependency)
    with self.command_group('resourcemover unresolved-dependency', resourcemover_unresolved_dependency,
                            client_factory=cf_unresolved_dependency, is_experimental=True) as g:
        g.custom_show_command('show', 'resourcemover_unresolved_dependency_show')

    from azext_resourcemover.generated._client_factory import cf_operation_discovery
    resourcemover_operation_discovery = CliCommandType(
        operations_tmpl='azext_resourcemover.vendored_sdks.resourcemover.operations._operation_discovery_operations#Ope'
        'rationDiscoveryOperations.{}',
        client_factory=cf_operation_discovery)
    with self.command_group('resourcemover operation-discovery', resourcemover_operation_discovery,
                            client_factory=cf_operation_discovery, is_experimental=True) as g:
        g.custom_show_command('show', 'resourcemover_operation_discovery_show')
