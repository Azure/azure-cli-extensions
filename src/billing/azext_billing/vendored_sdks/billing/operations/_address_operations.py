# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Optional, TypeVar

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class AddressOperations(object):
    """AddressOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~billing_management_client.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def validate(
        self,
        address_line1,  # type: str
        country,  # type: str
        first_name=None,  # type: Optional[str]
        last_name=None,  # type: Optional[str]
        company_name=None,  # type: Optional[str]
        address_line2=None,  # type: Optional[str]
        address_line3=None,  # type: Optional[str]
        city=None,  # type: Optional[str]
        district=None,  # type: Optional[str]
        region=None,  # type: Optional[str]
        postal_code=None,  # type: Optional[str]
        email=None,  # type: Optional[str]
        phone_number=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.ValidateAddressResponse"
        """Validates an address. Use the operation to validate an address before using it as soldTo or a
        billTo address.

        :param address_line1: Address line 1.
        :type address_line1: str
        :param country: Country code uses ISO2, 2-digit format.
        :type country: str
        :param first_name: First name.
        :type first_name: str
        :param last_name: Last name.
        :type last_name: str
        :param company_name: Company name.
        :type company_name: str
        :param address_line2: Address line 2.
        :type address_line2: str
        :param address_line3: Address line 3.
        :type address_line3: str
        :param city: Address city.
        :type city: str
        :param district: Address district.
        :type district: str
        :param region: Address region.
        :type region: str
        :param postal_code: Postal code.
        :type postal_code: str
        :param email: Email address.
        :type email: str
        :param phone_number: Phone number.
        :type phone_number: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ValidateAddressResponse, or the result of cls(response)
        :rtype: ~billing_management_client.models.ValidateAddressResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.ValidateAddressResponse"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        address = models.AddressDetails(first_name=first_name, last_name=last_name, company_name=company_name, address_line1=address_line1, address_line2=address_line2, address_line3=address_line3, city=city, district=district, region=region, country=country, postal_code=postal_code, email=email, phone_number=phone_number)
        api_version = "2020-05-01"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.validate.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(address, 'AddressDetails')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('ValidateAddressResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    validate.metadata = {'url': '/providers/Microsoft.Billing/validateAddress'}  # type: ignore
