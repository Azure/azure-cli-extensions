# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "billing profile update",
)
class Update(AAZCommand):
    """Update a billing profile. The operation is supported for billing accounts with agreement type Microsoft Customer Agreement and Microsoft Partner Agreement. If you are a MCA Individual (Pay-as-you-go) customer, then please use the Azure portal experience to create the billing profile.
    """

    _aaz_info = {
        "version": "2024-04-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billing/billingaccounts/{}/billingprofiles/{}", "2024-04-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.billing_account_name = AAZStrArg(
            options=["--billing-account-name"],
            help="The ID that uniquely identifies a billing account.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([0-9]+|([Pp][Cc][Nn]\\.[A-Za-z0-9]+)|[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}(:[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}_[0-9]{4}(-[0-9]{2}){2})?)$",
            ),
        )
        _args_schema.billing_profile_name = AAZStrArg(
            options=["--billing-profile-name"],
            help="The ID that uniquely identifies a billing profile.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-_]{1,128}$",
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.bill_to = AAZObjectArg(
            options=["--bill-to"],
            arg_group="Properties",
            help="Billing address.",
            nullable=True,
        )
        _args_schema.current_payment_term = AAZObjectArg(
            options=["--current-payment-term"],
            arg_group="Properties",
            help="The current payment term of the billing profile.",
            nullable=True,
        )
        _args_schema.display_name = AAZStrArg(
            options=["--display-name"],
            arg_group="Properties",
            help="The name of the billing profile.",
            nullable=True,
        )
        _args_schema.enabled_azure_plans = AAZListArg(
            options=["--enabled-azure-plans"],
            arg_group="Properties",
            help="Information about the enabled azure plans.",
            nullable=True,
        )
        _args_schema.indirect_relationship_info = AAZObjectArg(
            options=["--indirect-relationship-info"],
            arg_group="Properties",
            help="Identifies the billing profile that is linked to another billing profile in indirect purchase motion.",
            nullable=True,
        )
        _args_schema.invoice_email_opt_in = AAZBoolArg(
            options=["--invoice-email-opt-in"],
            arg_group="Properties",
            help="Flag controlling whether the invoices for the billing profile are sent through email.",
            nullable=True,
        )
        _args_schema.invoice_recipients = AAZListArg(
            options=["--invoice-recipients"],
            arg_group="Properties",
            help="The list of email addresses to receive invoices by email for the billing profile.",
            nullable=True,
        )
        _args_schema.po_number = AAZStrArg(
            options=["--po-number"],
            arg_group="Properties",
            help="The default purchase order number that will appear on the invoices generated for the billing profile.",
            nullable=True,
        )
        _args_schema.ship_to = AAZObjectArg(
            options=["--ship-to"],
            arg_group="Properties",
            help="The default address where the products are shipped, or the services are being used. If a ship to is not specified for a product or a subscription, then this address will be used.",
            nullable=True,
        )
        _args_schema.sold_to = AAZObjectArg(
            options=["--sold-to"],
            arg_group="Properties",
            help="The address of the individual or organization that is responsible for the billing account.",
            nullable=True,
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Properties",
            help="Dictionary of metadata associated with the resource. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /",
            nullable=True,
        )

        bill_to = cls._args_schema.bill_to
        bill_to.address_line1 = AAZStrArg(
            options=["address-line1"],
            help="Address line 1.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        bill_to.address_line2 = AAZStrArg(
            options=["address-line2"],
            help="Address line 2.",
            nullable=True,
        )
        bill_to.address_line3 = AAZStrArg(
            options=["address-line3"],
            help="Address line 3.",
            nullable=True,
        )
        bill_to.city = AAZStrArg(
            options=["city"],
            help="Address city.",
            nullable=True,
        )
        bill_to.company_name = AAZStrArg(
            options=["company-name"],
            help="Company name. Optional for MCA Individual (Pay-as-you-go).",
            nullable=True,
        )
        bill_to.country = AAZStrArg(
            options=["country"],
            help="Country code uses ISO 3166-1 Alpha-2 format.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        bill_to.district = AAZStrArg(
            options=["district"],
            help="Address district.",
            nullable=True,
        )
        bill_to.email = AAZStrArg(
            options=["email"],
            help="Email address.",
            nullable=True,
        )
        bill_to.first_name = AAZStrArg(
            options=["first-name"],
            help="First name. Optional for MCA Enterprise.",
            nullable=True,
        )
        bill_to.is_valid_address = AAZBoolArg(
            options=["is-valid-address"],
            help="Indicates if the address is incomplete.",
            nullable=True,
        )
        bill_to.last_name = AAZStrArg(
            options=["last-name"],
            help="Last name. Optional for MCA Enterprise.",
            nullable=True,
        )
        bill_to.middle_name = AAZStrArg(
            options=["middle-name"],
            help="Middle name.",
            nullable=True,
        )
        bill_to.phone_number = AAZStrArg(
            options=["phone-number"],
            help="Phone number.",
            nullable=True,
        )
        bill_to.postal_code = AAZStrArg(
            options=["postal-code"],
            help="Postal code.",
            nullable=True,
        )
        bill_to.region = AAZStrArg(
            options=["region"],
            help="Address region.",
            nullable=True,
        )

        current_payment_term = cls._args_schema.current_payment_term
        current_payment_term.end_date = AAZDateTimeArg(
            options=["end-date"],
            help="The date on when the defined 'Payment Term' will end and is always in UTC.",
            nullable=True,
        )
        current_payment_term.start_date = AAZDateTimeArg(
            options=["start-date"],
            help="The date on when the defined 'Payment Term' will be effective from and is always in UTC.",
            nullable=True,
        )
        current_payment_term.term = AAZStrArg(
            options=["term"],
            help="Represents duration in netXX format. Always in days.",
            nullable=True,
        )

        enabled_azure_plans = cls._args_schema.enabled_azure_plans
        enabled_azure_plans.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.enabled_azure_plans.Element
        _element.product_id = AAZStrArg(
            options=["product-id"],
            help="The ID that uniquely identifies a product.",
            nullable=True,
        )
        _element.sku_description = AAZStrArg(
            options=["sku-description"],
            help="The sku description.",
            nullable=True,
        )
        _element.sku_id = AAZStrArg(
            options=["sku-id"],
            help="The ID that uniquely identifies a sku.",
            nullable=True,
        )

        indirect_relationship_info = cls._args_schema.indirect_relationship_info
        indirect_relationship_info.billing_account_name = AAZStrArg(
            options=["billing-account-name"],
            help="The billing account name of the partner or the customer for an indirect motion.",
            nullable=True,
        )
        indirect_relationship_info.billing_profile_name = AAZStrArg(
            options=["billing-profile-name"],
            help="The billing profile name of the partner or the customer for an indirect motion.",
            nullable=True,
        )
        indirect_relationship_info.display_name = AAZStrArg(
            options=["display-name"],
            help="The display name of the partner or customer for an indirect motion.",
            nullable=True,
        )

        invoice_recipients = cls._args_schema.invoice_recipients
        invoice_recipients.Element = AAZStrArg(
            nullable=True,
        )

        ship_to = cls._args_schema.ship_to
        ship_to.address_line1 = AAZStrArg(
            options=["address-line1"],
            help="Address line 1.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        ship_to.address_line2 = AAZStrArg(
            options=["address-line2"],
            help="Address line 2.",
            nullable=True,
        )
        ship_to.address_line3 = AAZStrArg(
            options=["address-line3"],
            help="Address line 3.",
            nullable=True,
        )
        ship_to.city = AAZStrArg(
            options=["city"],
            help="Address city.",
            nullable=True,
        )
        ship_to.company_name = AAZStrArg(
            options=["company-name"],
            help="Company name. Optional for MCA Individual (Pay-as-you-go).",
            nullable=True,
        )
        ship_to.country = AAZStrArg(
            options=["country"],
            help="Country code uses ISO 3166-1 Alpha-2 format.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        ship_to.district = AAZStrArg(
            options=["district"],
            help="Address district.",
            nullable=True,
        )
        ship_to.email = AAZStrArg(
            options=["email"],
            help="Email address.",
            nullable=True,
        )
        ship_to.first_name = AAZStrArg(
            options=["first-name"],
            help="First name. Optional for MCA Enterprise.",
            nullable=True,
        )
        ship_to.is_valid_address = AAZBoolArg(
            options=["is-valid-address"],
            help="Indicates if the address is incomplete.",
            nullable=True,
        )
        ship_to.last_name = AAZStrArg(
            options=["last-name"],
            help="Last name. Optional for MCA Enterprise.",
            nullable=True,
        )
        ship_to.middle_name = AAZStrArg(
            options=["middle-name"],
            help="Middle name.",
            nullable=True,
        )
        ship_to.phone_number = AAZStrArg(
            options=["phone-number"],
            help="Phone number.",
            nullable=True,
        )
        ship_to.postal_code = AAZStrArg(
            options=["postal-code"],
            help="Postal code.",
            nullable=True,
        )
        ship_to.region = AAZStrArg(
            options=["region"],
            help="Address region.",
            nullable=True,
        )

        sold_to = cls._args_schema.sold_to
        sold_to.address_line1 = AAZStrArg(
            options=["address-line1"],
            help="Address line 1.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        sold_to.address_line2 = AAZStrArg(
            options=["address-line2"],
            help="Address line 2.",
            nullable=True,
        )
        sold_to.address_line3 = AAZStrArg(
            options=["address-line3"],
            help="Address line 3.",
            nullable=True,
        )
        sold_to.city = AAZStrArg(
            options=["city"],
            help="Address city.",
            nullable=True,
        )
        sold_to.company_name = AAZStrArg(
            options=["company-name"],
            help="Company name. Optional for MCA Individual (Pay-as-you-go).",
            nullable=True,
        )
        sold_to.country = AAZStrArg(
            options=["country"],
            help="Country code uses ISO 3166-1 Alpha-2 format.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        sold_to.district = AAZStrArg(
            options=["district"],
            help="Address district.",
            nullable=True,
        )
        sold_to.email = AAZStrArg(
            options=["email"],
            help="Email address.",
            nullable=True,
        )
        sold_to.first_name = AAZStrArg(
            options=["first-name"],
            help="First name. Optional for MCA Enterprise.",
            nullable=True,
        )
        sold_to.is_valid_address = AAZBoolArg(
            options=["is-valid-address"],
            help="Indicates if the address is incomplete.",
            nullable=True,
        )
        sold_to.last_name = AAZStrArg(
            options=["last-name"],
            help="Last name. Optional for MCA Enterprise.",
            nullable=True,
        )
        sold_to.middle_name = AAZStrArg(
            options=["middle-name"],
            help="Middle name.",
            nullable=True,
        )
        sold_to.phone_number = AAZStrArg(
            options=["phone-number"],
            help="Phone number.",
            nullable=True,
        )
        sold_to.postal_code = AAZStrArg(
            options=["postal-code"],
            help="Postal code.",
            nullable=True,
        )
        sold_to.region = AAZStrArg(
            options=["region"],
            help="Address region.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.BillingProfilesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.BillingProfilesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class BillingProfilesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountName", self.ctx.args.billing_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "billingProfileName", self.ctx.args.billing_profile_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_billing_profile_read(cls._schema_on_200)

            return cls._schema_on_200

    class BillingProfilesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountName", self.ctx.args.billing_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "billingProfileName", self.ctx.args.billing_profile_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_billing_profile_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("billTo", AAZObjectType, ".bill_to")
                properties.set_prop("currentPaymentTerm", AAZObjectType, ".current_payment_term")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("enabledAzurePlans", AAZListType, ".enabled_azure_plans")
                properties.set_prop("indirectRelationshipInfo", AAZObjectType, ".indirect_relationship_info")
                properties.set_prop("invoiceEmailOptIn", AAZBoolType, ".invoice_email_opt_in")
                properties.set_prop("invoiceRecipients", AAZListType, ".invoice_recipients")
                properties.set_prop("poNumber", AAZStrType, ".po_number")
                properties.set_prop("shipTo", AAZObjectType, ".ship_to")
                properties.set_prop("soldTo", AAZObjectType, ".sold_to")
                properties.set_prop("tags", AAZDictType, ".tags")

            bill_to = _builder.get(".properties.billTo")
            if bill_to is not None:
                bill_to.set_prop("addressLine1", AAZStrType, ".address_line1", typ_kwargs={"flags": {"required": True}})
                bill_to.set_prop("addressLine2", AAZStrType, ".address_line2")
                bill_to.set_prop("addressLine3", AAZStrType, ".address_line3")
                bill_to.set_prop("city", AAZStrType, ".city")
                bill_to.set_prop("companyName", AAZStrType, ".company_name")
                bill_to.set_prop("country", AAZStrType, ".country", typ_kwargs={"flags": {"required": True}})
                bill_to.set_prop("district", AAZStrType, ".district")
                bill_to.set_prop("email", AAZStrType, ".email")
                bill_to.set_prop("firstName", AAZStrType, ".first_name")
                bill_to.set_prop("isValidAddress", AAZBoolType, ".is_valid_address")
                bill_to.set_prop("lastName", AAZStrType, ".last_name")
                bill_to.set_prop("middleName", AAZStrType, ".middle_name")
                bill_to.set_prop("phoneNumber", AAZStrType, ".phone_number")
                bill_to.set_prop("postalCode", AAZStrType, ".postal_code")
                bill_to.set_prop("region", AAZStrType, ".region")

            current_payment_term = _builder.get(".properties.currentPaymentTerm")
            if current_payment_term is not None:
                current_payment_term.set_prop("endDate", AAZStrType, ".end_date")
                current_payment_term.set_prop("startDate", AAZStrType, ".start_date")
                current_payment_term.set_prop("term", AAZStrType, ".term")

            enabled_azure_plans = _builder.get(".properties.enabledAzurePlans")
            if enabled_azure_plans is not None:
                enabled_azure_plans.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.enabledAzurePlans[]")
            if _elements is not None:
                _elements.set_prop("productId", AAZStrType, ".product_id")
                _elements.set_prop("skuDescription", AAZStrType, ".sku_description")
                _elements.set_prop("skuId", AAZStrType, ".sku_id")

            indirect_relationship_info = _builder.get(".properties.indirectRelationshipInfo")
            if indirect_relationship_info is not None:
                indirect_relationship_info.set_prop("billingAccountName", AAZStrType, ".billing_account_name")
                indirect_relationship_info.set_prop("billingProfileName", AAZStrType, ".billing_profile_name")
                indirect_relationship_info.set_prop("displayName", AAZStrType, ".display_name")

            invoice_recipients = _builder.get(".properties.invoiceRecipients")
            if invoice_recipients is not None:
                invoice_recipients.set_elements(AAZStrType, ".")

            ship_to = _builder.get(".properties.shipTo")
            if ship_to is not None:
                ship_to.set_prop("addressLine1", AAZStrType, ".address_line1", typ_kwargs={"flags": {"required": True}})
                ship_to.set_prop("addressLine2", AAZStrType, ".address_line2")
                ship_to.set_prop("addressLine3", AAZStrType, ".address_line3")
                ship_to.set_prop("city", AAZStrType, ".city")
                ship_to.set_prop("companyName", AAZStrType, ".company_name")
                ship_to.set_prop("country", AAZStrType, ".country", typ_kwargs={"flags": {"required": True}})
                ship_to.set_prop("district", AAZStrType, ".district")
                ship_to.set_prop("email", AAZStrType, ".email")
                ship_to.set_prop("firstName", AAZStrType, ".first_name")
                ship_to.set_prop("isValidAddress", AAZBoolType, ".is_valid_address")
                ship_to.set_prop("lastName", AAZStrType, ".last_name")
                ship_to.set_prop("middleName", AAZStrType, ".middle_name")
                ship_to.set_prop("phoneNumber", AAZStrType, ".phone_number")
                ship_to.set_prop("postalCode", AAZStrType, ".postal_code")
                ship_to.set_prop("region", AAZStrType, ".region")

            sold_to = _builder.get(".properties.soldTo")
            if sold_to is not None:
                sold_to.set_prop("addressLine1", AAZStrType, ".address_line1", typ_kwargs={"flags": {"required": True}})
                sold_to.set_prop("addressLine2", AAZStrType, ".address_line2")
                sold_to.set_prop("addressLine3", AAZStrType, ".address_line3")
                sold_to.set_prop("city", AAZStrType, ".city")
                sold_to.set_prop("companyName", AAZStrType, ".company_name")
                sold_to.set_prop("country", AAZStrType, ".country", typ_kwargs={"flags": {"required": True}})
                sold_to.set_prop("district", AAZStrType, ".district")
                sold_to.set_prop("email", AAZStrType, ".email")
                sold_to.set_prop("firstName", AAZStrType, ".first_name")
                sold_to.set_prop("isValidAddress", AAZBoolType, ".is_valid_address")
                sold_to.set_prop("lastName", AAZStrType, ".last_name")
                sold_to.set_prop("middleName", AAZStrType, ".middle_name")
                sold_to.set_prop("phoneNumber", AAZStrType, ".phone_number")
                sold_to.set_prop("postalCode", AAZStrType, ".postal_code")
                sold_to.set_prop("region", AAZStrType, ".region")

            tags = _builder.get(".properties.tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_billing_profile_read = None

    @classmethod
    def _build_schema_billing_profile_read(cls, _schema):
        if cls._schema_billing_profile_read is not None:
            _schema.id = cls._schema_billing_profile_read.id
            _schema.name = cls._schema_billing_profile_read.name
            _schema.properties = cls._schema_billing_profile_read.properties
            _schema.system_data = cls._schema_billing_profile_read.system_data
            _schema.tags = cls._schema_billing_profile_read.tags
            _schema.type = cls._schema_billing_profile_read.type
            return

        cls._schema_billing_profile_read = _schema_billing_profile_read = AAZObjectType()

        billing_profile_read = _schema_billing_profile_read
        billing_profile_read.id = AAZStrType(
            flags={"read_only": True},
        )
        billing_profile_read.name = AAZStrType(
            flags={"read_only": True},
        )
        billing_profile_read.properties = AAZObjectType()
        billing_profile_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        billing_profile_read.tags = AAZDictType()
        billing_profile_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_billing_profile_read.properties
        properties.bill_to = AAZObjectType(
            serialized_name="billTo",
        )
        properties.billing_relationship_type = AAZStrType(
            serialized_name="billingRelationshipType",
            flags={"read_only": True},
        )
        properties.currency = AAZStrType(
            flags={"read_only": True},
        )
        properties.current_payment_term = AAZObjectType(
            serialized_name="currentPaymentTerm",
        )
        properties.display_name = AAZStrType(
            serialized_name="displayName",
        )
        properties.enabled_azure_plans = AAZListType(
            serialized_name="enabledAzurePlans",
        )
        properties.has_read_access = AAZBoolType(
            serialized_name="hasReadAccess",
            flags={"read_only": True},
        )
        properties.indirect_relationship_info = AAZObjectType(
            serialized_name="indirectRelationshipInfo",
        )
        properties.invoice_day = AAZIntType(
            serialized_name="invoiceDay",
            flags={"read_only": True},
        )
        properties.invoice_email_opt_in = AAZBoolType(
            serialized_name="invoiceEmailOptIn",
        )
        properties.invoice_recipients = AAZListType(
            serialized_name="invoiceRecipients",
        )
        properties.other_payment_terms = AAZListType(
            serialized_name="otherPaymentTerms",
            flags={"read_only": True},
        )
        properties.po_number = AAZStrType(
            serialized_name="poNumber",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.ship_to = AAZObjectType(
            serialized_name="shipTo",
        )
        properties.sold_to = AAZObjectType(
            serialized_name="soldTo",
        )
        properties.spending_limit = AAZStrType(
            serialized_name="spendingLimit",
            flags={"read_only": True},
        )
        properties.spending_limit_details = AAZListType(
            serialized_name="spendingLimitDetails",
            flags={"read_only": True},
        )
        properties.status = AAZStrType(
            flags={"read_only": True},
        )
        properties.status_reason_code = AAZStrType(
            serialized_name="statusReasonCode",
            flags={"read_only": True},
        )
        properties.system_id = AAZStrType(
            serialized_name="systemId",
            flags={"read_only": True},
        )
        properties.tags = AAZDictType()
        properties.target_clouds = AAZListType(
            serialized_name="targetClouds",
            flags={"read_only": True},
        )

        bill_to = _schema_billing_profile_read.properties.bill_to
        bill_to.address_line1 = AAZStrType(
            serialized_name="addressLine1",
            flags={"required": True},
        )
        bill_to.address_line2 = AAZStrType(
            serialized_name="addressLine2",
        )
        bill_to.address_line3 = AAZStrType(
            serialized_name="addressLine3",
        )
        bill_to.city = AAZStrType()
        bill_to.company_name = AAZStrType(
            serialized_name="companyName",
        )
        bill_to.country = AAZStrType(
            flags={"required": True},
        )
        bill_to.district = AAZStrType()
        bill_to.email = AAZStrType()
        bill_to.first_name = AAZStrType(
            serialized_name="firstName",
        )
        bill_to.is_valid_address = AAZBoolType(
            serialized_name="isValidAddress",
        )
        bill_to.last_name = AAZStrType(
            serialized_name="lastName",
        )
        bill_to.middle_name = AAZStrType(
            serialized_name="middleName",
        )
        bill_to.phone_number = AAZStrType(
            serialized_name="phoneNumber",
        )
        bill_to.postal_code = AAZStrType(
            serialized_name="postalCode",
        )
        bill_to.region = AAZStrType()

        current_payment_term = _schema_billing_profile_read.properties.current_payment_term
        current_payment_term.end_date = AAZStrType(
            serialized_name="endDate",
        )
        current_payment_term.is_default = AAZBoolType(
            serialized_name="isDefault",
            flags={"read_only": True},
        )
        current_payment_term.start_date = AAZStrType(
            serialized_name="startDate",
        )
        current_payment_term.term = AAZStrType()

        enabled_azure_plans = _schema_billing_profile_read.properties.enabled_azure_plans
        enabled_azure_plans.Element = AAZObjectType()

        _element = _schema_billing_profile_read.properties.enabled_azure_plans.Element
        _element.product_id = AAZStrType(
            serialized_name="productId",
        )
        _element.sku_description = AAZStrType(
            serialized_name="skuDescription",
        )
        _element.sku_id = AAZStrType(
            serialized_name="skuId",
        )

        indirect_relationship_info = _schema_billing_profile_read.properties.indirect_relationship_info
        indirect_relationship_info.billing_account_name = AAZStrType(
            serialized_name="billingAccountName",
        )
        indirect_relationship_info.billing_profile_name = AAZStrType(
            serialized_name="billingProfileName",
        )
        indirect_relationship_info.display_name = AAZStrType(
            serialized_name="displayName",
        )

        invoice_recipients = _schema_billing_profile_read.properties.invoice_recipients
        invoice_recipients.Element = AAZStrType()

        other_payment_terms = _schema_billing_profile_read.properties.other_payment_terms
        other_payment_terms.Element = AAZObjectType()

        _element = _schema_billing_profile_read.properties.other_payment_terms.Element
        _element.end_date = AAZStrType(
            serialized_name="endDate",
        )
        _element.is_default = AAZBoolType(
            serialized_name="isDefault",
            flags={"read_only": True},
        )
        _element.start_date = AAZStrType(
            serialized_name="startDate",
        )
        _element.term = AAZStrType()

        ship_to = _schema_billing_profile_read.properties.ship_to
        ship_to.address_line1 = AAZStrType(
            serialized_name="addressLine1",
            flags={"required": True},
        )
        ship_to.address_line2 = AAZStrType(
            serialized_name="addressLine2",
        )
        ship_to.address_line3 = AAZStrType(
            serialized_name="addressLine3",
        )
        ship_to.city = AAZStrType()
        ship_to.company_name = AAZStrType(
            serialized_name="companyName",
        )
        ship_to.country = AAZStrType(
            flags={"required": True},
        )
        ship_to.district = AAZStrType()
        ship_to.email = AAZStrType()
        ship_to.first_name = AAZStrType(
            serialized_name="firstName",
        )
        ship_to.is_valid_address = AAZBoolType(
            serialized_name="isValidAddress",
        )
        ship_to.last_name = AAZStrType(
            serialized_name="lastName",
        )
        ship_to.middle_name = AAZStrType(
            serialized_name="middleName",
        )
        ship_to.phone_number = AAZStrType(
            serialized_name="phoneNumber",
        )
        ship_to.postal_code = AAZStrType(
            serialized_name="postalCode",
        )
        ship_to.region = AAZStrType()

        sold_to = _schema_billing_profile_read.properties.sold_to
        sold_to.address_line1 = AAZStrType(
            serialized_name="addressLine1",
            flags={"required": True},
        )
        sold_to.address_line2 = AAZStrType(
            serialized_name="addressLine2",
        )
        sold_to.address_line3 = AAZStrType(
            serialized_name="addressLine3",
        )
        sold_to.city = AAZStrType()
        sold_to.company_name = AAZStrType(
            serialized_name="companyName",
        )
        sold_to.country = AAZStrType(
            flags={"required": True},
        )
        sold_to.district = AAZStrType()
        sold_to.email = AAZStrType()
        sold_to.first_name = AAZStrType(
            serialized_name="firstName",
        )
        sold_to.is_valid_address = AAZBoolType(
            serialized_name="isValidAddress",
        )
        sold_to.last_name = AAZStrType(
            serialized_name="lastName",
        )
        sold_to.middle_name = AAZStrType(
            serialized_name="middleName",
        )
        sold_to.phone_number = AAZStrType(
            serialized_name="phoneNumber",
        )
        sold_to.postal_code = AAZStrType(
            serialized_name="postalCode",
        )
        sold_to.region = AAZStrType()

        spending_limit_details = _schema_billing_profile_read.properties.spending_limit_details
        spending_limit_details.Element = AAZObjectType()

        _element = _schema_billing_profile_read.properties.spending_limit_details.Element
        _element.amount = AAZFloatType()
        _element.currency = AAZStrType()
        _element.end_date = AAZStrType(
            serialized_name="endDate",
        )
        _element.start_date = AAZStrType(
            serialized_name="startDate",
        )
        _element.status = AAZStrType()
        _element.type = AAZStrType()

        tags = _schema_billing_profile_read.properties.tags
        tags.Element = AAZStrType()

        target_clouds = _schema_billing_profile_read.properties.target_clouds
        target_clouds.Element = AAZStrType()

        system_data = _schema_billing_profile_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_billing_profile_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_billing_profile_read.id
        _schema.name = cls._schema_billing_profile_read.name
        _schema.properties = cls._schema_billing_profile_read.properties
        _schema.system_data = cls._schema_billing_profile_read.system_data
        _schema.tags = cls._schema_billing_profile_read.tags
        _schema.type = cls._schema_billing_profile_read.type


__all__ = ["Update"]
