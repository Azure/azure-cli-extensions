# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "billing billing-property update",
)
class Update(AAZCommand):
    """Update the billing property of a subscription. Currently, cost center can be updated for billing accounts with agreement type Microsoft Customer Agreement and subscription service usage address can be updated for billing accounts with agreement type Microsoft Online Service Program.
    """

    _aaz_info = {
        "version": "2024-04-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.billing/billingproperty/default", "2024-04-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Dictionary of metadata associated with the resource. It may not be populated for all resource types. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.cost_center = AAZStrArg(
            options=["--cost-center"],
            arg_group="Properties",
            help="The cost center applied to the subscription. Available for agreement type Microsoft Customer Agreement and Microsoft Partner Agreement. This property can be updated via patch.",
        )
        _args_schema.enrollment_details = AAZObjectArg(
            options=["--enrollment-details"],
            arg_group="Properties",
            help="The enrollment details for the subscription. Available for billing accounts with agreement type Enterprise Agreement.",
        )
        _args_schema.subscription_service_usage_address = AAZObjectArg(
            options=["--subscription-service-usage-address"],
            arg_group="Properties",
            help="The address of the individual or organization where service subscription is being used. Available for agreement type Microsoft Online Services Program. This property can be updated via patch.",
        )

        enrollment_details = cls._args_schema.enrollment_details
        enrollment_details.department_display_name = AAZStrArg(
            options=["department-display-name"],
            help="The name of the department",
        )
        enrollment_details.department_id = AAZStrArg(
            options=["department-id"],
            help="The ID that uniquely identifies the department.",
        )
        enrollment_details.enrollment_account_display_name = AAZStrArg(
            options=["enrollment-account-display-name"],
            help="The name of the enrollment account.",
        )
        enrollment_details.enrollment_account_id = AAZStrArg(
            options=["enrollment-account-id"],
            help="The ID that uniquely identifies an enrollment account.",
        )
        enrollment_details.enrollment_account_status = AAZStrArg(
            options=["enrollment-account-status"],
            help="The status of the enrollment account.",
        )

        subscription_service_usage_address = cls._args_schema.subscription_service_usage_address
        subscription_service_usage_address.address_line1 = AAZStrArg(
            options=["address-line1"],
            help="Address line 1.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        subscription_service_usage_address.address_line2 = AAZStrArg(
            options=["address-line2"],
            help="Address line 2.",
        )
        subscription_service_usage_address.address_line3 = AAZStrArg(
            options=["address-line3"],
            help="Address line 3.",
        )
        subscription_service_usage_address.city = AAZStrArg(
            options=["city"],
            help="Address city.",
        )
        subscription_service_usage_address.company_name = AAZStrArg(
            options=["company-name"],
            help="Company name. Optional for MCA Individual (Pay-as-you-go).",
        )
        subscription_service_usage_address.country = AAZStrArg(
            options=["country"],
            help="Country code uses ISO 3166-1 Alpha-2 format.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        subscription_service_usage_address.district = AAZStrArg(
            options=["district"],
            help="Address district.",
        )
        subscription_service_usage_address.email = AAZStrArg(
            options=["email"],
            help="Email address.",
        )
        subscription_service_usage_address.first_name = AAZStrArg(
            options=["first-name"],
            help="First name. Optional for MCA Enterprise.",
        )
        subscription_service_usage_address.is_valid_address = AAZBoolArg(
            options=["is-valid-address"],
            help="Indicates if the address is incomplete.",
        )
        subscription_service_usage_address.last_name = AAZStrArg(
            options=["last-name"],
            help="Last name. Optional for MCA Enterprise.",
        )
        subscription_service_usage_address.middle_name = AAZStrArg(
            options=["middle-name"],
            help="Middle name.",
        )
        subscription_service_usage_address.phone_number = AAZStrArg(
            options=["phone-number"],
            help="Phone number.",
        )
        subscription_service_usage_address.postal_code = AAZStrArg(
            options=["postal-code"],
            help="Postal code.",
        )
        subscription_service_usage_address.region = AAZStrArg(
            options=["region"],
            help="Address region.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.BillingPropertyUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class BillingPropertyUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingProperty/default",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("costCenter", AAZStrType, ".cost_center")
                properties.set_prop("enrollmentDetails", AAZObjectType, ".enrollment_details")
                properties.set_prop("subscriptionServiceUsageAddress", AAZObjectType, ".subscription_service_usage_address")

            enrollment_details = _builder.get(".properties.enrollmentDetails")
            if enrollment_details is not None:
                enrollment_details.set_prop("departmentDisplayName", AAZStrType, ".department_display_name")
                enrollment_details.set_prop("departmentId", AAZStrType, ".department_id")
                enrollment_details.set_prop("enrollmentAccountDisplayName", AAZStrType, ".enrollment_account_display_name")
                enrollment_details.set_prop("enrollmentAccountId", AAZStrType, ".enrollment_account_id")
                enrollment_details.set_prop("enrollmentAccountStatus", AAZStrType, ".enrollment_account_status")

            subscription_service_usage_address = _builder.get(".properties.subscriptionServiceUsageAddress")
            if subscription_service_usage_address is not None:
                subscription_service_usage_address.set_prop("addressLine1", AAZStrType, ".address_line1", typ_kwargs={"flags": {"required": True}})
                subscription_service_usage_address.set_prop("addressLine2", AAZStrType, ".address_line2")
                subscription_service_usage_address.set_prop("addressLine3", AAZStrType, ".address_line3")
                subscription_service_usage_address.set_prop("city", AAZStrType, ".city")
                subscription_service_usage_address.set_prop("companyName", AAZStrType, ".company_name")
                subscription_service_usage_address.set_prop("country", AAZStrType, ".country", typ_kwargs={"flags": {"required": True}})
                subscription_service_usage_address.set_prop("district", AAZStrType, ".district")
                subscription_service_usage_address.set_prop("email", AAZStrType, ".email")
                subscription_service_usage_address.set_prop("firstName", AAZStrType, ".first_name")
                subscription_service_usage_address.set_prop("isValidAddress", AAZBoolType, ".is_valid_address")
                subscription_service_usage_address.set_prop("lastName", AAZStrType, ".last_name")
                subscription_service_usage_address.set_prop("middleName", AAZStrType, ".middle_name")
                subscription_service_usage_address.set_prop("phoneNumber", AAZStrType, ".phone_number")
                subscription_service_usage_address.set_prop("postalCode", AAZStrType, ".postal_code")
                subscription_service_usage_address.set_prop("region", AAZStrType, ".region")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.account_admin_notification_email_address = AAZStrType(
                serialized_name="accountAdminNotificationEmailAddress",
                flags={"read_only": True},
            )
            properties.billing_account_agreement_type = AAZStrType(
                serialized_name="billingAccountAgreementType",
                flags={"read_only": True},
            )
            properties.billing_account_display_name = AAZStrType(
                serialized_name="billingAccountDisplayName",
                flags={"read_only": True},
            )
            properties.billing_account_id = AAZStrType(
                serialized_name="billingAccountId",
                flags={"read_only": True},
            )
            properties.billing_account_sold_to_country = AAZStrType(
                serialized_name="billingAccountSoldToCountry",
                flags={"read_only": True},
            )
            properties.billing_account_status = AAZStrType(
                serialized_name="billingAccountStatus",
                flags={"read_only": True},
            )
            properties.billing_account_status_reason_code = AAZStrType(
                serialized_name="billingAccountStatusReasonCode",
                flags={"read_only": True},
            )
            properties.billing_account_sub_type = AAZStrType(
                serialized_name="billingAccountSubType",
                flags={"read_only": True},
            )
            properties.billing_account_type = AAZStrType(
                serialized_name="billingAccountType",
                flags={"read_only": True},
            )
            properties.billing_currency = AAZStrType(
                serialized_name="billingCurrency",
                flags={"read_only": True},
            )
            properties.billing_profile_display_name = AAZStrType(
                serialized_name="billingProfileDisplayName",
                flags={"read_only": True},
            )
            properties.billing_profile_id = AAZStrType(
                serialized_name="billingProfileId",
                flags={"read_only": True},
            )
            properties.billing_profile_payment_method_family = AAZStrType(
                serialized_name="billingProfilePaymentMethodFamily",
                flags={"read_only": True},
            )
            properties.billing_profile_payment_method_type = AAZStrType(
                serialized_name="billingProfilePaymentMethodType",
                flags={"read_only": True},
            )
            properties.billing_profile_spending_limit = AAZStrType(
                serialized_name="billingProfileSpendingLimit",
                flags={"read_only": True},
            )
            properties.billing_profile_spending_limit_details = AAZListType(
                serialized_name="billingProfileSpendingLimitDetails",
                flags={"read_only": True},
            )
            properties.billing_profile_status = AAZStrType(
                serialized_name="billingProfileStatus",
                flags={"read_only": True},
            )
            properties.billing_profile_status_reason_code = AAZStrType(
                serialized_name="billingProfileStatusReasonCode",
                flags={"read_only": True},
            )
            properties.billing_tenant_id = AAZStrType(
                serialized_name="billingTenantId",
                flags={"read_only": True},
            )
            properties.cost_center = AAZStrType(
                serialized_name="costCenter",
            )
            properties.customer_display_name = AAZStrType(
                serialized_name="customerDisplayName",
                flags={"read_only": True},
            )
            properties.customer_id = AAZStrType(
                serialized_name="customerId",
                flags={"read_only": True},
            )
            properties.customer_status = AAZStrType(
                serialized_name="customerStatus",
                flags={"read_only": True},
            )
            properties.enrollment_details = AAZObjectType(
                serialized_name="enrollmentDetails",
            )
            properties.invoice_section_display_name = AAZStrType(
                serialized_name="invoiceSectionDisplayName",
                flags={"read_only": True},
            )
            properties.invoice_section_id = AAZStrType(
                serialized_name="invoiceSectionId",
                flags={"read_only": True},
            )
            properties.invoice_section_status = AAZStrType(
                serialized_name="invoiceSectionStatus",
                flags={"read_only": True},
            )
            properties.invoice_section_status_reason_code = AAZStrType(
                serialized_name="invoiceSectionStatusReasonCode",
                flags={"read_only": True},
            )
            properties.is_account_admin = AAZBoolType(
                serialized_name="isAccountAdmin",
                flags={"read_only": True},
            )
            properties.is_transitioned_billing_account = AAZBoolType(
                serialized_name="isTransitionedBillingAccount",
                flags={"read_only": True},
            )
            properties.product_id = AAZStrType(
                serialized_name="productId",
                flags={"read_only": True},
            )
            properties.product_name = AAZStrType(
                serialized_name="productName",
                flags={"read_only": True},
            )
            properties.sku_description = AAZStrType(
                serialized_name="skuDescription",
                flags={"read_only": True},
            )
            properties.sku_id = AAZStrType(
                serialized_name="skuId",
                flags={"read_only": True},
            )
            properties.subscription_billing_status = AAZStrType(
                serialized_name="subscriptionBillingStatus",
                flags={"read_only": True},
            )
            properties.subscription_billing_status_details = AAZListType(
                serialized_name="subscriptionBillingStatusDetails",
                flags={"read_only": True},
            )
            properties.subscription_billing_type = AAZStrType(
                serialized_name="subscriptionBillingType",
                flags={"read_only": True},
            )
            properties.subscription_service_usage_address = AAZObjectType(
                serialized_name="subscriptionServiceUsageAddress",
            )
            properties.subscription_workload_type = AAZStrType(
                serialized_name="subscriptionWorkloadType",
                flags={"read_only": True},
            )

            billing_profile_spending_limit_details = cls._schema_on_200.properties.billing_profile_spending_limit_details
            billing_profile_spending_limit_details.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.billing_profile_spending_limit_details.Element
            _element.amount = AAZFloatType()
            _element.currency = AAZStrType()
            _element.end_date = AAZStrType(
                serialized_name="endDate",
            )
            _element.start_date = AAZStrType(
                serialized_name="startDate",
            )
            _element.status = AAZStrType()
            _element.type = AAZStrType()

            enrollment_details = cls._schema_on_200.properties.enrollment_details
            enrollment_details.department_display_name = AAZStrType(
                serialized_name="departmentDisplayName",
            )
            enrollment_details.department_id = AAZStrType(
                serialized_name="departmentId",
            )
            enrollment_details.enrollment_account_display_name = AAZStrType(
                serialized_name="enrollmentAccountDisplayName",
            )
            enrollment_details.enrollment_account_id = AAZStrType(
                serialized_name="enrollmentAccountId",
            )
            enrollment_details.enrollment_account_status = AAZStrType(
                serialized_name="enrollmentAccountStatus",
            )

            subscription_billing_status_details = cls._schema_on_200.properties.subscription_billing_status_details
            subscription_billing_status_details.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.subscription_billing_status_details.Element
            _element.effective_date = AAZStrType(
                serialized_name="effectiveDate",
                flags={"read_only": True},
            )
            _element.reason = AAZStrType(
                flags={"read_only": True},
            )

            subscription_service_usage_address = cls._schema_on_200.properties.subscription_service_usage_address
            subscription_service_usage_address.address_line1 = AAZStrType(
                serialized_name="addressLine1",
                flags={"required": True},
            )
            subscription_service_usage_address.address_line2 = AAZStrType(
                serialized_name="addressLine2",
            )
            subscription_service_usage_address.address_line3 = AAZStrType(
                serialized_name="addressLine3",
            )
            subscription_service_usage_address.city = AAZStrType()
            subscription_service_usage_address.company_name = AAZStrType(
                serialized_name="companyName",
            )
            subscription_service_usage_address.country = AAZStrType(
                flags={"required": True},
            )
            subscription_service_usage_address.district = AAZStrType()
            subscription_service_usage_address.email = AAZStrType()
            subscription_service_usage_address.first_name = AAZStrType(
                serialized_name="firstName",
            )
            subscription_service_usage_address.is_valid_address = AAZBoolType(
                serialized_name="isValidAddress",
            )
            subscription_service_usage_address.last_name = AAZStrType(
                serialized_name="lastName",
            )
            subscription_service_usage_address.middle_name = AAZStrType(
                serialized_name="middleName",
            )
            subscription_service_usage_address.phone_number = AAZStrType(
                serialized_name="phoneNumber",
            )
            subscription_service_usage_address.postal_code = AAZStrType(
                serialized_name="postalCode",
            )
            subscription_service_usage_address.region = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _UpdateHelper:
    """Helper class for Update"""


__all__ = ["Update"]
