# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "billing address validate",
)
class Validate(AAZCommand):
    """Validates an address. Use the operation to validate an address before using it as soldTo or a billTo address.

    :example: AddressValidateValid
        az billing address validate --address-line1 1 Test --city bellevue --country us --postal-code 12345 --region wa
    """

    _aaz_info = {
        "version": "2024-04-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billing/validateaddress", "2024-04-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.address_line1 = AAZStrArg(
            options=["--address-line1"],
            arg_group="Parameters",
            help="Address line 1.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        _args_schema.address_line2 = AAZStrArg(
            options=["--address-line2"],
            arg_group="Parameters",
            help="Address line 2.",
        )
        _args_schema.address_line3 = AAZStrArg(
            options=["--address-line3"],
            arg_group="Parameters",
            help="Address line 3.",
        )
        _args_schema.city = AAZStrArg(
            options=["--city"],
            arg_group="Parameters",
            help="Address city.",
        )
        _args_schema.company_name = AAZStrArg(
            options=["--company-name"],
            arg_group="Parameters",
            help="Company name. Optional for MCA Individual (Pay-as-you-go).",
        )
        _args_schema.country = AAZStrArg(
            options=["--country"],
            arg_group="Parameters",
            help="Country code uses ISO 3166-1 Alpha-2 format.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        _args_schema.district = AAZStrArg(
            options=["--district"],
            arg_group="Parameters",
            help="Address district.",
        )
        _args_schema.email = AAZStrArg(
            options=["--email"],
            arg_group="Parameters",
            help="Email address.",
        )
        _args_schema.first_name = AAZStrArg(
            options=["--first-name"],
            arg_group="Parameters",
            help="First name. Optional for MCA Enterprise.",
        )
        _args_schema.is_valid_address = AAZBoolArg(
            options=["--is-valid-address"],
            arg_group="Parameters",
            help="Indicates if the address is incomplete.",
        )
        _args_schema.last_name = AAZStrArg(
            options=["--last-name"],
            arg_group="Parameters",
            help="Last name. Optional for MCA Enterprise.",
        )
        _args_schema.middle_name = AAZStrArg(
            options=["--middle-name"],
            arg_group="Parameters",
            help="Middle name.",
        )
        _args_schema.phone_number = AAZStrArg(
            options=["--phone-number"],
            arg_group="Parameters",
            help="Phone number.",
        )
        _args_schema.postal_code = AAZStrArg(
            options=["--postal-code"],
            arg_group="Parameters",
            help="Postal code.",
        )
        _args_schema.region = AAZStrArg(
            options=["--region"],
            arg_group="Parameters",
            help="Address region.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.AddressValidate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class AddressValidate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/validateAddress",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("addressLine1", AAZStrType, ".address_line1", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("addressLine2", AAZStrType, ".address_line2")
            _builder.set_prop("addressLine3", AAZStrType, ".address_line3")
            _builder.set_prop("city", AAZStrType, ".city")
            _builder.set_prop("companyName", AAZStrType, ".company_name")
            _builder.set_prop("country", AAZStrType, ".country", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("district", AAZStrType, ".district")
            _builder.set_prop("email", AAZStrType, ".email")
            _builder.set_prop("firstName", AAZStrType, ".first_name")
            _builder.set_prop("isValidAddress", AAZBoolType, ".is_valid_address")
            _builder.set_prop("lastName", AAZStrType, ".last_name")
            _builder.set_prop("middleName", AAZStrType, ".middle_name")
            _builder.set_prop("phoneNumber", AAZStrType, ".phone_number")
            _builder.set_prop("postalCode", AAZStrType, ".postal_code")
            _builder.set_prop("region", AAZStrType, ".region")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.status = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.suggested_addresses = AAZListType(
                serialized_name="suggestedAddresses",
                flags={"read_only": True},
            )
            _schema_on_200.validation_message = AAZStrType(
                serialized_name="validationMessage",
                flags={"read_only": True},
            )

            suggested_addresses = cls._schema_on_200.suggested_addresses
            suggested_addresses.Element = AAZObjectType()

            _element = cls._schema_on_200.suggested_addresses.Element
            _element.address_line1 = AAZStrType(
                serialized_name="addressLine1",
                flags={"required": True},
            )
            _element.address_line2 = AAZStrType(
                serialized_name="addressLine2",
            )
            _element.address_line3 = AAZStrType(
                serialized_name="addressLine3",
            )
            _element.city = AAZStrType()
            _element.company_name = AAZStrType(
                serialized_name="companyName",
            )
            _element.country = AAZStrType(
                flags={"required": True},
            )
            _element.district = AAZStrType()
            _element.email = AAZStrType()
            _element.first_name = AAZStrType(
                serialized_name="firstName",
            )
            _element.is_valid_address = AAZBoolType(
                serialized_name="isValidAddress",
            )
            _element.last_name = AAZStrType(
                serialized_name="lastName",
            )
            _element.middle_name = AAZStrType(
                serialized_name="middleName",
            )
            _element.phone_number = AAZStrType(
                serialized_name="phoneNumber",
            )
            _element.postal_code = AAZStrType(
                serialized_name="postalCode",
            )
            _element.region = AAZStrType()

            return cls._schema_on_200


class _ValidateHelper:
    """Helper class for Validate"""


__all__ = ["Validate"]
