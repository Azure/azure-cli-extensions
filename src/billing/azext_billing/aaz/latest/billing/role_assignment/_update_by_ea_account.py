# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "billing role-assignment update-by-ea-account",
)
class UpdateByEaAccount(AAZCommand):
    """Update a billing role assignment. The operation is supported only for billing accounts with agreement type Enterprise Agreement.
    """

    _aaz_info = {
        "version": "2024-04-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billing/billingaccounts/{}/billingroleassignments/{}", "2024-04-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.billing_account_name = AAZStrArg(
            options=["--billing-account-name"],
            help="The ID that uniquely identifies a billing account.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([0-9]+|([Pp][Cc][Nn]\\.[A-Za-z0-9]+)|[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}(:[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}_[0-9]{4}(-[0-9]{2}){2})?)$",
            ),
        )
        _args_schema.billing_role_assignment_name = AAZStrArg(
            options=["--billing-role-assignment-name"],
            help="The ID that uniquely identifies a role assignment.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-fA-F0-9]{8}[-]?([a-fA-F0-9]{4}[-]?){3}[a-fA-F0-9]{12}(_[a-fA-F0-9]{8}[-]?([a-fA-F0-9]{4}[-]?){3}[a-fA-F0-9]{12})?$",
            ),
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Dictionary of metadata associated with the resource. It may not be populated for all resource types. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.principal_id = AAZStrArg(
            options=["--principal-id"],
            arg_group="Properties",
            help="The object id of the user to whom the role was assigned.",
            nullable=True,
        )
        _args_schema.principal_puid = AAZStrArg(
            options=["--principal-puid"],
            arg_group="Properties",
            help="The principal PUID of the user to whom the role was assigned.",
            nullable=True,
        )
        _args_schema.principal_tenant_id = AAZStrArg(
            options=["--principal-tenant-id"],
            arg_group="Properties",
            help="The principal tenant id of the user to whom the role was assigned.",
            nullable=True,
        )
        _args_schema.role_definition_id = AAZStrArg(
            options=["--role-definition-id"],
            arg_group="Properties",
            help="The ID of the role definition.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        _args_schema.scope = AAZStrArg(
            options=["--scope"],
            arg_group="Properties",
            help="The scope at which the role was assigned.",
            nullable=True,
        )
        _args_schema.user_authentication_type = AAZStrArg(
            options=["--user-authentication-type"],
            arg_group="Properties",
            help="The authentication type of the user, whether Organization or MSA, of the user to whom the role was assigned. This is supported only for billing accounts with agreement type Enterprise Agreement.",
            nullable=True,
        )
        _args_schema.user_email_address = AAZStrArg(
            options=["--user-email-address"],
            arg_group="Properties",
            help="The email address of the user to whom the role was assigned. This is supported only for billing accounts with agreement type Enterprise Agreement.",
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.BillingRoleAssignmentsGetByBillingAccount(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.BillingRoleAssignmentsCreateOrUpdateByBillingAccount(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class BillingRoleAssignmentsGetByBillingAccount(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments/{billingRoleAssignmentName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountName", self.ctx.args.billing_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "billingRoleAssignmentName", self.ctx.args.billing_role_assignment_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateByEaAccountHelper._build_schema_billing_role_assignment_read(cls._schema_on_200)

            return cls._schema_on_200

    class BillingRoleAssignmentsCreateOrUpdateByBillingAccount(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments/{billingRoleAssignmentName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountName", self.ctx.args.billing_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "billingRoleAssignmentName", self.ctx.args.billing_role_assignment_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateByEaAccountHelper._build_schema_billing_role_assignment_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("principalId", AAZStrType, ".principal_id")
                properties.set_prop("principalPuid", AAZStrType, ".principal_puid")
                properties.set_prop("principalTenantId", AAZStrType, ".principal_tenant_id")
                properties.set_prop("roleDefinitionId", AAZStrType, ".role_definition_id", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("scope", AAZStrType, ".scope")
                properties.set_prop("userAuthenticationType", AAZStrType, ".user_authentication_type")
                properties.set_prop("userEmailAddress", AAZStrType, ".user_email_address")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value


class _UpdateByEaAccountHelper:
    """Helper class for UpdateByEaAccount"""

    _schema_billing_role_assignment_read = None

    @classmethod
    def _build_schema_billing_role_assignment_read(cls, _schema):
        if cls._schema_billing_role_assignment_read is not None:
            _schema.id = cls._schema_billing_role_assignment_read.id
            _schema.name = cls._schema_billing_role_assignment_read.name
            _schema.properties = cls._schema_billing_role_assignment_read.properties
            _schema.system_data = cls._schema_billing_role_assignment_read.system_data
            _schema.tags = cls._schema_billing_role_assignment_read.tags
            _schema.type = cls._schema_billing_role_assignment_read.type
            return

        cls._schema_billing_role_assignment_read = _schema_billing_role_assignment_read = AAZObjectType()

        billing_role_assignment_read = _schema_billing_role_assignment_read
        billing_role_assignment_read.id = AAZStrType(
            flags={"read_only": True},
        )
        billing_role_assignment_read.name = AAZStrType(
            flags={"read_only": True},
        )
        billing_role_assignment_read.properties = AAZObjectType()
        billing_role_assignment_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        billing_role_assignment_read.tags = AAZDictType()
        billing_role_assignment_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_billing_role_assignment_read.properties
        properties.billing_account_display_name = AAZStrType(
            serialized_name="billingAccountDisplayName",
            flags={"read_only": True},
        )
        properties.billing_account_id = AAZStrType(
            serialized_name="billingAccountId",
            flags={"read_only": True},
        )
        properties.billing_profile_display_name = AAZStrType(
            serialized_name="billingProfileDisplayName",
            flags={"read_only": True},
        )
        properties.billing_profile_id = AAZStrType(
            serialized_name="billingProfileId",
            flags={"read_only": True},
        )
        properties.billing_request_id = AAZStrType(
            serialized_name="billingRequestId",
            flags={"read_only": True},
        )
        properties.created_by_principal_id = AAZStrType(
            serialized_name="createdByPrincipalId",
            flags={"read_only": True},
        )
        properties.created_by_principal_puid = AAZStrType(
            serialized_name="createdByPrincipalPuid",
            flags={"read_only": True},
        )
        properties.created_by_principal_tenant_id = AAZStrType(
            serialized_name="createdByPrincipalTenantId",
            flags={"read_only": True},
        )
        properties.created_by_user_email_address = AAZStrType(
            serialized_name="createdByUserEmailAddress",
            flags={"read_only": True},
        )
        properties.created_on = AAZStrType(
            serialized_name="createdOn",
            flags={"read_only": True},
        )
        properties.customer_display_name = AAZStrType(
            serialized_name="customerDisplayName",
            flags={"read_only": True},
        )
        properties.customer_id = AAZStrType(
            serialized_name="customerId",
            flags={"read_only": True},
        )
        properties.invoice_section_display_name = AAZStrType(
            serialized_name="invoiceSectionDisplayName",
            flags={"read_only": True},
        )
        properties.invoice_section_id = AAZStrType(
            serialized_name="invoiceSectionId",
            flags={"read_only": True},
        )
        properties.modified_by_principal_id = AAZStrType(
            serialized_name="modifiedByPrincipalId",
            flags={"read_only": True},
        )
        properties.modified_by_principal_puid = AAZStrType(
            serialized_name="modifiedByPrincipalPuid",
            flags={"read_only": True},
        )
        properties.modified_by_principal_tenant_id = AAZStrType(
            serialized_name="modifiedByPrincipalTenantId",
            flags={"read_only": True},
        )
        properties.modified_by_user_email_address = AAZStrType(
            serialized_name="modifiedByUserEmailAddress",
            flags={"read_only": True},
        )
        properties.modified_on = AAZStrType(
            serialized_name="modifiedOn",
            flags={"read_only": True},
        )
        properties.principal_display_name = AAZStrType(
            serialized_name="principalDisplayName",
            flags={"read_only": True},
        )
        properties.principal_id = AAZStrType(
            serialized_name="principalId",
        )
        properties.principal_puid = AAZStrType(
            serialized_name="principalPuid",
        )
        properties.principal_tenant_id = AAZStrType(
            serialized_name="principalTenantId",
        )
        properties.principal_tenant_name = AAZStrType(
            serialized_name="principalTenantName",
            flags={"read_only": True},
        )
        properties.principal_type = AAZStrType(
            serialized_name="principalType",
            flags={"read_only": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.role_definition_id = AAZStrType(
            serialized_name="roleDefinitionId",
            flags={"required": True},
        )
        properties.scope = AAZStrType()
        properties.user_authentication_type = AAZStrType(
            serialized_name="userAuthenticationType",
        )
        properties.user_email_address = AAZStrType(
            serialized_name="userEmailAddress",
        )

        system_data = _schema_billing_role_assignment_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_billing_role_assignment_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_billing_role_assignment_read.id
        _schema.name = cls._schema_billing_role_assignment_read.name
        _schema.properties = cls._schema_billing_role_assignment_read.properties
        _schema.system_data = cls._schema_billing_role_assignment_read.system_data
        _schema.tags = cls._schema_billing_role_assignment_read.tags
        _schema.type = cls._schema_billing_role_assignment_read.type


__all__ = ["UpdateByEaAccount"]
