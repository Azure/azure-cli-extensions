# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "billing policy create-or-update-by-billing-account",
)
class CreateOrUpdateByBillingAccount(AAZCommand):
    """Create the policies for a billing account of Enterprise Agreement type.

    :example: PoliciesPutByBillingAccount
        az billing policy create-or-update-by-billing-account --billing-account-name 1234567 --enterprise-agreement-policies "{authentication-type:OrganizationalAccountOnly}" --marketplace-purchases AllAllowed --reservation-purchases Allowed --savings-plan-purchases NotAllowed
    """

    _aaz_info = {
        "version": "2024-04-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billing/billingaccounts/{}/policies/default", "2024-04-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.billing_account_name = AAZStrArg(
            options=["--billing-account-name"],
            help="The ID that uniquely identifies a billing account.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([0-9]+|([Pp][Cc][Nn]\\.[A-Za-z0-9]+)|[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}(:[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}_[0-9]{4}(-[0-9]{2}){2})?)$",
            ),
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Dictionary of metadata associated with the resource. It may not be populated for all resource types. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.enterprise_agreement_policies = AAZObjectArg(
            options=["--enterprise-agreement-policies"],
            arg_group="Properties",
            help="The policies for Enterprise Agreement enrollments.",
        )
        _args_schema.marketplace_purchases = AAZStrArg(
            options=["--marketplace-purchases"],
            arg_group="Properties",
            help="The policy that controls whether Azure marketplace purchases are allowed.",
            enum={"AllAllowed": "AllAllowed", "Disabled": "Disabled", "NotAllowed": "NotAllowed", "OnlyFreeAllowed": "OnlyFreeAllowed", "Other": "Other"},
        )
        _args_schema.policies = AAZListArg(
            options=["--policies"],
            arg_group="Properties",
            help="List of all policies defined at the billing scope.",
        )
        _args_schema.reservation_purchases = AAZStrArg(
            options=["--reservation-purchases"],
            arg_group="Properties",
            help="The policy that controls whether Azure reservation purchases are allowed.",
            enum={"Allowed": "Allowed", "Disabled": "Disabled", "NotAllowed": "NotAllowed", "Other": "Other"},
        )
        _args_schema.savings_plan_purchases = AAZStrArg(
            options=["--savings-plan-purchases"],
            arg_group="Properties",
            help="The policy that controls whether users with Azure savings plan purchase are allowed.",
            enum={"Allowed": "Allowed", "Disabled": "Disabled", "NotAllowed": "NotAllowed", "Other": "Other"},
        )

        enterprise_agreement_policies = cls._args_schema.enterprise_agreement_policies
        enterprise_agreement_policies.account_owner_view_charges = AAZStrArg(
            options=["account-owner-view-charges"],
            help="The policy that controls whether account owner can view charges.",
            enum={"Allowed": "Allowed", "Disabled": "Disabled", "NotAllowed": "NotAllowed", "Other": "Other"},
        )
        enterprise_agreement_policies.authentication_type = AAZStrArg(
            options=["authentication-type"],
            help="The state showing the enrollment auth level.",
            enum={"MicrosoftAccountOnly": "MicrosoftAccountOnly", "MixedAccount": "MixedAccount", "OrganizationalAccountCrossTenant": "OrganizationalAccountCrossTenant", "OrganizationalAccountOnly": "OrganizationalAccountOnly", "Other": "Other"},
        )
        enterprise_agreement_policies.department_admin_view_charges = AAZStrArg(
            options=["department-admin-view-charges"],
            help="The policy that controls whether department admin can view charges.",
            enum={"Allowed": "Allowed", "Disabled": "Disabled", "NotAllowed": "NotAllowed", "Other": "Other"},
        )

        policies = cls._args_schema.policies
        policies.Element = AAZObjectArg()

        _element = cls._args_schema.policies.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the policy.",
        )
        _element.policy_type = AAZStrArg(
            options=["policy-type"],
            help="The type of the policy.",
            enum={"Other": "Other", "SystemControlled": "SystemControlled", "UserControlled": "UserControlled"},
        )
        _element.scope = AAZStrArg(
            options=["scope"],
            help="The scope at which the policy is defined.",
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="The value of the policy.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.PoliciesCreateOrUpdateByBillingAccount(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class PoliciesCreateOrUpdateByBillingAccount(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/policies/default",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountName", self.ctx.args.billing_account_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("enterpriseAgreementPolicies", AAZObjectType, ".enterprise_agreement_policies")
                properties.set_prop("marketplacePurchases", AAZStrType, ".marketplace_purchases")
                properties.set_prop("policies", AAZListType, ".policies")
                properties.set_prop("reservationPurchases", AAZStrType, ".reservation_purchases")
                properties.set_prop("savingsPlanPurchases", AAZStrType, ".savings_plan_purchases")

            enterprise_agreement_policies = _builder.get(".properties.enterpriseAgreementPolicies")
            if enterprise_agreement_policies is not None:
                enterprise_agreement_policies.set_prop("accountOwnerViewCharges", AAZStrType, ".account_owner_view_charges")
                enterprise_agreement_policies.set_prop("authenticationType", AAZStrType, ".authentication_type")
                enterprise_agreement_policies.set_prop("departmentAdminViewCharges", AAZStrType, ".department_admin_view_charges")

            policies = _builder.get(".properties.policies")
            if policies is not None:
                policies.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.policies[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("policyType", AAZStrType, ".policy_type")
                _elements.set_prop("scope", AAZStrType, ".scope")
                _elements.set_prop("value", AAZStrType, ".value")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.enterprise_agreement_policies = AAZObjectType(
                serialized_name="enterpriseAgreementPolicies",
            )
            properties.marketplace_purchases = AAZStrType(
                serialized_name="marketplacePurchases",
            )
            properties.policies = AAZListType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.reservation_purchases = AAZStrType(
                serialized_name="reservationPurchases",
            )
            properties.savings_plan_purchases = AAZStrType(
                serialized_name="savingsPlanPurchases",
            )

            enterprise_agreement_policies = cls._schema_on_200_201.properties.enterprise_agreement_policies
            enterprise_agreement_policies.account_owner_view_charges = AAZStrType(
                serialized_name="accountOwnerViewCharges",
            )
            enterprise_agreement_policies.authentication_type = AAZStrType(
                serialized_name="authenticationType",
            )
            enterprise_agreement_policies.department_admin_view_charges = AAZStrType(
                serialized_name="departmentAdminViewCharges",
            )

            policies = cls._schema_on_200_201.properties.policies
            policies.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.policies.Element
            _element.name = AAZStrType()
            _element.policy_type = AAZStrType(
                serialized_name="policyType",
            )
            _element.scope = AAZStrType()
            _element.value = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateOrUpdateByBillingAccountHelper:
    """Helper class for CreateOrUpdateByBillingAccount"""


__all__ = ["CreateOrUpdateByBillingAccount"]
