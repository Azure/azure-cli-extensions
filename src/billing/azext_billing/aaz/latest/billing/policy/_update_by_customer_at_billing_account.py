# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "billing policy update-by-customer-at-billing-account",
)
class UpdateByCustomerAtBillingAccount(AAZCommand):
    """Update the policies for a customer at billing account scope. This operation is supported only for billing accounts with agreement type Microsoft Partner Agreement.
    """

    _aaz_info = {
        "version": "2024-04-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billing/billingaccounts/{}/customers/{}/policies/default", "2024-04-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.billing_account_name = AAZStrArg(
            options=["--billing-account-name"],
            help="The ID that uniquely identifies a billing account.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([0-9]+|([Pp][Cc][Nn]\\.[A-Za-z0-9]+)|[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}(:[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}_[0-9]{4}(-[0-9]{2}){2})?)$",
            ),
        )
        _args_schema.customer_name = AAZStrArg(
            options=["--customer-name"],
            help="The ID that uniquely identifies a customer.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-_]{1,128}$",
            ),
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Dictionary of metadata associated with the resource. It may not be populated for all resource types. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.policies = AAZListArg(
            options=["--policies"],
            arg_group="Properties",
            help="List of all policies defined at the billing scope.",
            nullable=True,
        )
        _args_schema.view_charges = AAZStrArg(
            options=["--view-charges"],
            arg_group="Properties",
            help="The policy that controls whether the users in customer's organization can view charges at pay-as-you-go prices.",
            enum={"Allowed": "Allowed", "NotAllowed": "NotAllowed", "Other": "Other"},
        )

        policies = cls._args_schema.policies
        policies.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.policies.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the policy.",
            nullable=True,
        )
        _element.policy_type = AAZStrArg(
            options=["policy-type"],
            help="The type of the policy.",
            nullable=True,
            enum={"Other": "Other", "SystemControlled": "SystemControlled", "UserControlled": "UserControlled"},
        )
        _element.scope = AAZStrArg(
            options=["scope"],
            help="The scope at which the policy is defined.",
            nullable=True,
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="The value of the policy.",
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.PoliciesGetByCustomerAtBillingAccount(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.PoliciesCreateOrUpdateByCustomerAtBillingAccount(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class PoliciesGetByCustomerAtBillingAccount(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/policies/default",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountName", self.ctx.args.billing_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "customerName", self.ctx.args.customer_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateByCustomerAtBillingAccountHelper._build_schema_customer_policy_read(cls._schema_on_200)

            return cls._schema_on_200

    class PoliciesCreateOrUpdateByCustomerAtBillingAccount(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/policies/default",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountName", self.ctx.args.billing_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "customerName", self.ctx.args.customer_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateByCustomerAtBillingAccountHelper._build_schema_customer_policy_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("policies", AAZListType, ".policies")
                properties.set_prop("viewCharges", AAZStrType, ".view_charges", typ_kwargs={"flags": {"required": True}})

            policies = _builder.get(".properties.policies")
            if policies is not None:
                policies.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.policies[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("policyType", AAZStrType, ".policy_type")
                _elements.set_prop("scope", AAZStrType, ".scope")
                _elements.set_prop("value", AAZStrType, ".value")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value


class _UpdateByCustomerAtBillingAccountHelper:
    """Helper class for UpdateByCustomerAtBillingAccount"""

    _schema_customer_policy_read = None

    @classmethod
    def _build_schema_customer_policy_read(cls, _schema):
        if cls._schema_customer_policy_read is not None:
            _schema.id = cls._schema_customer_policy_read.id
            _schema.name = cls._schema_customer_policy_read.name
            _schema.properties = cls._schema_customer_policy_read.properties
            _schema.system_data = cls._schema_customer_policy_read.system_data
            _schema.tags = cls._schema_customer_policy_read.tags
            _schema.type = cls._schema_customer_policy_read.type
            return

        cls._schema_customer_policy_read = _schema_customer_policy_read = AAZObjectType()

        customer_policy_read = _schema_customer_policy_read
        customer_policy_read.id = AAZStrType(
            flags={"read_only": True},
        )
        customer_policy_read.name = AAZStrType(
            flags={"read_only": True},
        )
        customer_policy_read.properties = AAZObjectType()
        customer_policy_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        customer_policy_read.tags = AAZDictType()
        customer_policy_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_customer_policy_read.properties
        properties.policies = AAZListType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.view_charges = AAZStrType(
            serialized_name="viewCharges",
            flags={"required": True},
        )

        policies = _schema_customer_policy_read.properties.policies
        policies.Element = AAZObjectType()

        _element = _schema_customer_policy_read.properties.policies.Element
        _element.name = AAZStrType()
        _element.policy_type = AAZStrType(
            serialized_name="policyType",
        )
        _element.scope = AAZStrType()
        _element.value = AAZStrType()

        system_data = _schema_customer_policy_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_customer_policy_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_customer_policy_read.id
        _schema.name = cls._schema_customer_policy_read.name
        _schema.properties = cls._schema_customer_policy_read.properties
        _schema.system_data = cls._schema_customer_policy_read.system_data
        _schema.tags = cls._schema_customer_policy_read.tags
        _schema.type = cls._schema_customer_policy_read.type


__all__ = ["UpdateByCustomerAtBillingAccount"]
