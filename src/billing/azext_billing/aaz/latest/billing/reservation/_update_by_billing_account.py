# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "billing reservation update-by-billing-account",
)
class UpdateByBillingAccount(AAZCommand):
    """Update reservation by billing account.
    """

    _aaz_info = {
        "version": "2024-04-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billing/billingaccounts/{}/reservationorders/{}/reservations/{}", "2024-04-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.billing_account_name = AAZStrArg(
            options=["--billing-account-name"],
            help="The ID that uniquely identifies a billing account.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([0-9]+|([Pp][Cc][Nn]\\.[A-Za-z0-9]+)|[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}(:[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}_[0-9]{4}(-[0-9]{2}){2})?)$",
            ),
        )
        _args_schema.reservation_id = AAZStrArg(
            options=["--reservation-id"],
            help="Id of the reservation item",
            required=True,
        )
        _args_schema.reservation_order_id = AAZStrArg(
            options=["--reservation-order-id"],
            help="Order Id of the reservation",
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Body",
            help="Tags for this reservation",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.applied_scope_properties = AAZObjectArg(
            options=["--applied-scope-properties"],
            arg_group="Properties",
            help="Properties specific to applied scope type. Not required if not applicable. Required and need to provide tenantId and managementGroupId if AppliedScopeType is ManagementGroup",
        )
        cls._build_args_reservation_applied_scope_properties_update(_args_schema.applied_scope_properties)
        _args_schema.applied_scope_type = AAZStrArg(
            options=["--applied-scope-type"],
            arg_group="Properties",
            help="Type of the Applied Scope.",
            enum={"ManagementGroup": "ManagementGroup", "Shared": "Shared", "Single": "Single"},
        )
        _args_schema.display_name = AAZStrArg(
            options=["--display-name"],
            arg_group="Properties",
            help="Display name of the reservation",
        )
        _args_schema.instance_flexibility = AAZStrArg(
            options=["--instance-flexibility"],
            arg_group="Properties",
            help="Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
            enum={"Off": "Off", "On": "On"},
        )
        _args_schema.renew = AAZBoolArg(
            options=["--renew"],
            arg_group="Properties",
            help="Setting this to true will automatically purchase a new reservation on the expiration date time.",
            default=False,
        )
        _args_schema.review_date_time = AAZDateTimeArg(
            options=["--review-date-time"],
            arg_group="Properties",
            help="This is the date-time when the Azure hybrid benefit needs to be reviewed.",
        )

        # define Arg Group "RenewProperties"

        _args_schema = cls._args_schema
        _args_schema.purchase_properties = AAZObjectArg(
            options=["--purchase-properties"],
            arg_group="RenewProperties",
            help="The request for reservation purchase",
        )

        purchase_properties = cls._args_schema.purchase_properties
        purchase_properties.applied_scope_properties = AAZObjectArg(
            options=["applied-scope-properties"],
        )
        cls._build_args_reservation_applied_scope_properties_update(purchase_properties.applied_scope_properties)
        purchase_properties.applied_scope_type = AAZStrArg(
            options=["applied-scope-type"],
            help="Type of the Applied Scope.",
            enum={"ManagementGroup": "ManagementGroup", "Shared": "Shared", "Single": "Single"},
        )
        purchase_properties.applied_scopes = AAZListArg(
            options=["applied-scopes"],
            help="List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
        )
        purchase_properties.billing_plan = AAZStrArg(
            options=["billing-plan"],
            help="Represent the billing plans.",
            enum={"Monthly": "Monthly", "Upfront": "Upfront"},
        )
        purchase_properties.display_name = AAZStrArg(
            options=["display-name"],
            help="Friendly name of the reservation",
        )
        purchase_properties.quantity = AAZIntArg(
            options=["quantity"],
            help="Quantity of the skus that are part of the reservation. Must be greater than zero.",
        )
        purchase_properties.renew = AAZBoolArg(
            options=["renew"],
            help="Setting this to true will automatically purchase a new reservation on the expiration date time.",
            default=False,
        )
        purchase_properties.instance_flexibility = AAZStrArg(
            options=["instance-flexibility"],
            help="Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
            enum={"Off": "Off", "On": "On"},
        )
        purchase_properties.review_date_time = AAZDateTimeArg(
            options=["review-date-time"],
            help="This is the date-time when the Azure hybrid benefit needs to be reviewed.",
        )
        purchase_properties.sku = AAZObjectArg(
            options=["sku"],
            help="The name of sku",
        )

        applied_scopes = cls._args_schema.purchase_properties.applied_scopes
        applied_scopes.Element = AAZStrArg()

        sku = cls._args_schema.purchase_properties.sku
        sku.name = AAZStrArg(
            options=["name"],
        )
        return cls._args_schema

    _args_reservation_applied_scope_properties_update = None

    @classmethod
    def _build_args_reservation_applied_scope_properties_update(cls, _schema):
        if cls._args_reservation_applied_scope_properties_update is not None:
            _schema.display_name = cls._args_reservation_applied_scope_properties_update.display_name
            _schema.management_group_id = cls._args_reservation_applied_scope_properties_update.management_group_id
            _schema.resource_group_id = cls._args_reservation_applied_scope_properties_update.resource_group_id
            _schema.subscription_id = cls._args_reservation_applied_scope_properties_update.subscription_id
            _schema.tenant_id = cls._args_reservation_applied_scope_properties_update.tenant_id
            return

        cls._args_reservation_applied_scope_properties_update = AAZObjectArg()

        reservation_applied_scope_properties_update = cls._args_reservation_applied_scope_properties_update
        reservation_applied_scope_properties_update.display_name = AAZStrArg(
            options=["display-name"],
            help="Display name",
        )
        reservation_applied_scope_properties_update.management_group_id = AAZStrArg(
            options=["management-group-id"],
            help="Fully-qualified identifier of the management group where the benefit must be applied.",
        )
        reservation_applied_scope_properties_update.resource_group_id = AAZStrArg(
            options=["resource-group-id"],
            help="Fully-qualified identifier of the resource group.",
        )
        reservation_applied_scope_properties_update.subscription_id = AAZStrArg(
            options=["subscription-id"],
            help="Fully-qualified identifier of the subscription.",
        )
        reservation_applied_scope_properties_update.tenant_id = AAZStrArg(
            options=["tenant-id"],
            help="Tenant ID where the reservation should apply benefit.",
        )

        _schema.display_name = cls._args_reservation_applied_scope_properties_update.display_name
        _schema.management_group_id = cls._args_reservation_applied_scope_properties_update.management_group_id
        _schema.resource_group_id = cls._args_reservation_applied_scope_properties_update.resource_group_id
        _schema.subscription_id = cls._args_reservation_applied_scope_properties_update.subscription_id
        _schema.tenant_id = cls._args_reservation_applied_scope_properties_update.tenant_id

    def _execute_operations(self):
        self.pre_operations()
        yield self.ReservationsUpdateByBillingAccount(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ReservationsUpdateByBillingAccount(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/reservationOrders/{reservationOrderId}/reservations/{reservationId}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountName", self.ctx.args.billing_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "reservationId", self.ctx.args.reservation_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "reservationOrderId", self.ctx.args.reservation_order_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                _UpdateByBillingAccountHelper._build_schema_reservation_applied_scope_properties_update(properties.set_prop("appliedScopeProperties", AAZObjectType, ".applied_scope_properties"))
                properties.set_prop("appliedScopeType", AAZStrType, ".applied_scope_type")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("instanceFlexibility", AAZStrType, ".instance_flexibility")
                properties.set_prop("renew", AAZBoolType, ".renew")
                properties.set_prop("renewProperties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
                properties.set_prop("reviewDateTime", AAZStrType, ".review_date_time")

            renew_properties = _builder.get(".properties.renewProperties")
            if renew_properties is not None:
                renew_properties.set_prop("purchaseProperties", AAZObjectType, ".purchase_properties")

            purchase_properties = _builder.get(".properties.renewProperties.purchaseProperties")
            if purchase_properties is not None:
                purchase_properties.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
                purchase_properties.set_prop("sku", AAZObjectType, ".sku")

            properties = _builder.get(".properties.renewProperties.purchaseProperties.properties")
            if properties is not None:
                _UpdateByBillingAccountHelper._build_schema_reservation_applied_scope_properties_update(properties.set_prop("appliedScopeProperties", AAZObjectType, ".applied_scope_properties"))
                properties.set_prop("appliedScopeType", AAZStrType, ".applied_scope_type")
                properties.set_prop("appliedScopes", AAZListType, ".applied_scopes")
                properties.set_prop("billingPlan", AAZStrType, ".billing_plan")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("quantity", AAZIntType, ".quantity")
                properties.set_prop("renew", AAZBoolType, ".renew")
                properties.set_prop("reservedResourceProperties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
                properties.set_prop("reviewDateTime", AAZStrType, ".review_date_time")

            applied_scopes = _builder.get(".properties.renewProperties.purchaseProperties.properties.appliedScopes")
            if applied_scopes is not None:
                applied_scopes.set_elements(AAZStrType, ".")

            reserved_resource_properties = _builder.get(".properties.renewProperties.purchaseProperties.properties.reservedResourceProperties")
            if reserved_resource_properties is not None:
                reserved_resource_properties.set_prop("instanceFlexibility", AAZStrType, ".instance_flexibility")

            sku = _builder.get(".properties.renewProperties.purchaseProperties.sku")
            if sku is not None:
                sku.set_prop("name", AAZStrType, ".name")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.etag = AAZIntType()
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType()
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.sku = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.applied_scope_properties = AAZObjectType(
                serialized_name="appliedScopeProperties",
            )
            _UpdateByBillingAccountHelper._build_schema_reservation_applied_scope_properties_read(properties.applied_scope_properties)
            properties.applied_scope_type = AAZStrType(
                serialized_name="appliedScopeType",
                flags={"read_only": True},
            )
            properties.applied_scopes = AAZListType(
                serialized_name="appliedScopes",
            )
            properties.archived = AAZBoolType()
            properties.benefit_start_time = AAZStrType(
                serialized_name="benefitStartTime",
            )
            properties.billing_plan = AAZStrType(
                serialized_name="billingPlan",
            )
            properties.billing_scope_id = AAZStrType(
                serialized_name="billingScopeId",
                flags={"read_only": True},
            )
            properties.capabilities = AAZStrType()
            properties.display_name = AAZStrType(
                serialized_name="displayName",
                flags={"read_only": True},
            )
            properties.display_provisioning_state = AAZStrType(
                serialized_name="displayProvisioningState",
                flags={"read_only": True},
            )
            properties.effective_date_time = AAZStrType(
                serialized_name="effectiveDateTime",
                flags={"read_only": True},
            )
            properties.expiry_date = AAZStrType(
                serialized_name="expiryDate",
                flags={"read_only": True},
            )
            properties.expiry_date_time = AAZStrType(
                serialized_name="expiryDateTime",
            )
            properties.extended_status_info = AAZObjectType(
                serialized_name="extendedStatusInfo",
            )
            properties.instance_flexibility = AAZStrType(
                serialized_name="instanceFlexibility",
            )
            properties.last_updated_date_time = AAZStrType(
                serialized_name="lastUpdatedDateTime",
                flags={"read_only": True},
            )
            properties.merge_properties = AAZObjectType(
                serialized_name="mergeProperties",
            )
            properties.product_code = AAZStrType(
                serialized_name="productCode",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.provisioning_sub_state = AAZStrType(
                serialized_name="provisioningSubState",
                flags={"read_only": True},
            )
            properties.purchase_date = AAZStrType(
                serialized_name="purchaseDate",
            )
            properties.purchase_date_time = AAZStrType(
                serialized_name="purchaseDateTime",
            )
            properties.quantity = AAZFloatType(
                flags={"read_only": True},
            )
            properties.renew = AAZBoolType(
                flags={"read_only": True},
            )
            properties.renew_destination = AAZStrType(
                serialized_name="renewDestination",
            )
            properties.renew_properties = AAZObjectType(
                serialized_name="renewProperties",
            )
            properties.renew_source = AAZStrType(
                serialized_name="renewSource",
                flags={"read_only": True},
            )
            properties.reserved_resource_type = AAZStrType(
                serialized_name="reservedResourceType",
                flags={"read_only": True},
            )
            properties.review_date_time = AAZStrType(
                serialized_name="reviewDateTime",
            )
            properties.sku_description = AAZStrType(
                serialized_name="skuDescription",
                flags={"read_only": True},
            )
            properties.split_properties = AAZObjectType(
                serialized_name="splitProperties",
            )
            properties.swap_properties = AAZObjectType(
                serialized_name="swapProperties",
            )
            properties.term = AAZStrType(
                flags={"read_only": True},
            )
            properties.user_friendly_applied_scope_type = AAZStrType(
                serialized_name="userFriendlyAppliedScopeType",
                flags={"read_only": True},
            )
            properties.user_friendly_renew_state = AAZStrType(
                serialized_name="userFriendlyRenewState",
                flags={"read_only": True},
            )
            properties.utilization = AAZObjectType(
                flags={"client_flatten": True, "read_only": True},
            )

            applied_scopes = cls._schema_on_200.properties.applied_scopes
            applied_scopes.Element = AAZStrType(
                flags={"read_only": True},
            )

            extended_status_info = cls._schema_on_200.properties.extended_status_info
            extended_status_info.message = AAZStrType()
            extended_status_info.properties = AAZObjectType()
            extended_status_info.status_code = AAZStrType(
                serialized_name="statusCode",
            )

            properties = cls._schema_on_200.properties.extended_status_info.properties
            properties.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
            )

            merge_properties = cls._schema_on_200.properties.merge_properties
            merge_properties.merge_destination = AAZStrType(
                serialized_name="mergeDestination",
            )
            merge_properties.merge_sources = AAZListType(
                serialized_name="mergeSources",
            )

            merge_sources = cls._schema_on_200.properties.merge_properties.merge_sources
            merge_sources.Element = AAZStrType()

            renew_properties = cls._schema_on_200.properties.renew_properties
            renew_properties.billing_currency_total = AAZObjectType(
                serialized_name="billingCurrencyTotal",
            )
            _UpdateByBillingAccountHelper._build_schema_price_read(renew_properties.billing_currency_total)
            renew_properties.pricing_currency_total = AAZObjectType(
                serialized_name="pricingCurrencyTotal",
            )
            _UpdateByBillingAccountHelper._build_schema_price_read(renew_properties.pricing_currency_total)
            renew_properties.purchase_properties = AAZObjectType(
                serialized_name="purchaseProperties",
            )

            purchase_properties = cls._schema_on_200.properties.renew_properties.purchase_properties
            purchase_properties.location = AAZStrType()
            purchase_properties.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            purchase_properties.sku = AAZObjectType()

            properties = cls._schema_on_200.properties.renew_properties.purchase_properties.properties
            properties.applied_scope_properties = AAZObjectType(
                serialized_name="appliedScopeProperties",
            )
            _UpdateByBillingAccountHelper._build_schema_reservation_applied_scope_properties_read(properties.applied_scope_properties)
            properties.applied_scope_type = AAZStrType(
                serialized_name="appliedScopeType",
            )
            properties.applied_scopes = AAZListType(
                serialized_name="appliedScopes",
            )
            properties.billing_plan = AAZStrType(
                serialized_name="billingPlan",
            )
            properties.billing_scope_id = AAZStrType(
                serialized_name="billingScopeId",
                flags={"read_only": True},
            )
            properties.display_name = AAZStrType(
                serialized_name="displayName",
            )
            properties.quantity = AAZIntType()
            properties.renew = AAZBoolType()
            properties.reserved_resource_properties = AAZObjectType(
                serialized_name="reservedResourceProperties",
                flags={"client_flatten": True},
            )
            properties.reserved_resource_type = AAZStrType(
                serialized_name="reservedResourceType",
                flags={"read_only": True},
            )
            properties.review_date_time = AAZStrType(
                serialized_name="reviewDateTime",
            )
            properties.term = AAZStrType(
                flags={"read_only": True},
            )

            applied_scopes = cls._schema_on_200.properties.renew_properties.purchase_properties.properties.applied_scopes
            applied_scopes.Element = AAZStrType()

            reserved_resource_properties = cls._schema_on_200.properties.renew_properties.purchase_properties.properties.reserved_resource_properties
            reserved_resource_properties.instance_flexibility = AAZStrType(
                serialized_name="instanceFlexibility",
            )

            sku = cls._schema_on_200.properties.renew_properties.purchase_properties.sku
            sku.name = AAZStrType()

            split_properties = cls._schema_on_200.properties.split_properties
            split_properties.split_destinations = AAZListType(
                serialized_name="splitDestinations",
            )
            split_properties.split_source = AAZStrType(
                serialized_name="splitSource",
            )

            split_destinations = cls._schema_on_200.properties.split_properties.split_destinations
            split_destinations.Element = AAZStrType()

            swap_properties = cls._schema_on_200.properties.swap_properties
            swap_properties.swap_destination = AAZStrType(
                serialized_name="swapDestination",
            )
            swap_properties.swap_source = AAZStrType(
                serialized_name="swapSource",
            )

            utilization = cls._schema_on_200.properties.utilization
            utilization.aggregates = AAZListType()
            utilization.trend = AAZStrType(
                flags={"read_only": True},
            )

            aggregates = cls._schema_on_200.properties.utilization.aggregates
            aggregates.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.utilization.aggregates.Element
            _element.grain = AAZFloatType(
                flags={"read_only": True},
            )
            _element.grain_unit = AAZStrType(
                serialized_name="grainUnit",
                flags={"read_only": True},
            )
            _element.value = AAZFloatType(
                flags={"read_only": True},
            )
            _element.value_unit = AAZStrType(
                serialized_name="valueUnit",
                flags={"read_only": True},
            )

            sku = cls._schema_on_200.sku
            sku.name = AAZStrType(
                flags={"read_only": True},
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _UpdateByBillingAccountHelper:
    """Helper class for UpdateByBillingAccount"""

    @classmethod
    def _build_schema_reservation_applied_scope_properties_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("displayName", AAZStrType, ".display_name")
        _builder.set_prop("managementGroupId", AAZStrType, ".management_group_id")
        _builder.set_prop("resourceGroupId", AAZStrType, ".resource_group_id")
        _builder.set_prop("subscriptionId", AAZStrType, ".subscription_id")
        _builder.set_prop("tenantId", AAZStrType, ".tenant_id")

    _schema_price_read = None

    @classmethod
    def _build_schema_price_read(cls, _schema):
        if cls._schema_price_read is not None:
            _schema.amount = cls._schema_price_read.amount
            _schema.currency_code = cls._schema_price_read.currency_code
            return

        cls._schema_price_read = _schema_price_read = AAZObjectType()

        price_read = _schema_price_read
        price_read.amount = AAZFloatType()
        price_read.currency_code = AAZStrType(
            serialized_name="currencyCode",
        )

        _schema.amount = cls._schema_price_read.amount
        _schema.currency_code = cls._schema_price_read.currency_code

    _schema_reservation_applied_scope_properties_read = None

    @classmethod
    def _build_schema_reservation_applied_scope_properties_read(cls, _schema):
        if cls._schema_reservation_applied_scope_properties_read is not None:
            _schema.display_name = cls._schema_reservation_applied_scope_properties_read.display_name
            _schema.management_group_id = cls._schema_reservation_applied_scope_properties_read.management_group_id
            _schema.resource_group_id = cls._schema_reservation_applied_scope_properties_read.resource_group_id
            _schema.subscription_id = cls._schema_reservation_applied_scope_properties_read.subscription_id
            _schema.tenant_id = cls._schema_reservation_applied_scope_properties_read.tenant_id
            return

        cls._schema_reservation_applied_scope_properties_read = _schema_reservation_applied_scope_properties_read = AAZObjectType()

        reservation_applied_scope_properties_read = _schema_reservation_applied_scope_properties_read
        reservation_applied_scope_properties_read.display_name = AAZStrType(
            serialized_name="displayName",
        )
        reservation_applied_scope_properties_read.management_group_id = AAZStrType(
            serialized_name="managementGroupId",
        )
        reservation_applied_scope_properties_read.resource_group_id = AAZStrType(
            serialized_name="resourceGroupId",
        )
        reservation_applied_scope_properties_read.subscription_id = AAZStrType(
            serialized_name="subscriptionId",
        )
        reservation_applied_scope_properties_read.tenant_id = AAZStrType(
            serialized_name="tenantId",
        )

        _schema.display_name = cls._schema_reservation_applied_scope_properties_read.display_name
        _schema.management_group_id = cls._schema_reservation_applied_scope_properties_read.management_group_id
        _schema.resource_group_id = cls._schema_reservation_applied_scope_properties_read.resource_group_id
        _schema.subscription_id = cls._schema_reservation_applied_scope_properties_read.subscription_id
        _schema.tenant_id = cls._schema_reservation_applied_scope_properties_read.tenant_id


__all__ = ["UpdateByBillingAccount"]
