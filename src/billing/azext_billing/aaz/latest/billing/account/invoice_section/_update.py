# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "billing account invoice-section update",
)
class Update(AAZCommand):
    """Update operation to update a InvoiceSection.
    """

    _aaz_info = {
        "version": "2018-11-01-preview",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billing/billingaccounts/{}/invoicesections/{}", "2018-11-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.billing_account_name = AAZStrArg(
            options=["--billing-account-name"],
            help="Billing Account Id.",
            required=True,
        )
        _args_schema.invoice_section_name = AAZStrArg(
            options=["--invoice-section-name"],
            help="InvoiceSection Id.",
            required=True,
        )
        _args_schema.parameters = AAZObjectArg(
            options=["--parameters"],
            help="An InvoiceSection resource.",
        )

        parameters = cls._args_schema.parameters
        parameters.billing_profiles = AAZListArg(
            options=["billing-profiles"],
            nullable=True,
        )
        parameters.display_name = AAZStrArg(
            options=["display-name"],
            nullable=True,
        )

        billing_profiles = cls._args_schema.parameters.billing_profiles
        billing_profiles.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.parameters.billing_profiles.Element
        _element.address = AAZObjectArg(
            options=["address"],
            nullable=True,
        )
        _element.display_name = AAZStrArg(
            options=["display-name"],
            nullable=True,
        )
        _element.enabled_azure_sk_us = AAZListArg(
            options=["enabled-azure-sk-us"],
            nullable=True,
        )
        _element.invoice_sections = AAZListArg(
            options=["invoice-sections"],
            nullable=True,
        )
        _element.po_number = AAZStrArg(
            options=["po-number"],
            nullable=True,
        )

        address = cls._args_schema.parameters.billing_profiles.Element.address
        address.address_line1 = AAZStrArg(
            options=["address-line1"],
            nullable=True,
        )
        address.address_line2 = AAZStrArg(
            options=["address-line2"],
            nullable=True,
        )
        address.address_line3 = AAZStrArg(
            options=["address-line3"],
            nullable=True,
        )
        address.city = AAZStrArg(
            options=["city"],
            nullable=True,
        )
        address.company_name = AAZStrArg(
            options=["company-name"],
            nullable=True,
        )
        address.country = AAZStrArg(
            options=["country"],
            nullable=True,
        )
        address.first_name = AAZStrArg(
            options=["first-name"],
            nullable=True,
        )
        address.last_name = AAZStrArg(
            options=["last-name"],
            nullable=True,
        )
        address.postal_code = AAZStrArg(
            options=["postal-code"],
            nullable=True,
        )
        address.region = AAZStrArg(
            options=["region"],
            nullable=True,
        )

        enabled_azure_sk_us = cls._args_schema.parameters.billing_profiles.Element.enabled_azure_sk_us
        enabled_azure_sk_us.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.parameters.billing_profiles.Element.enabled_azure_sk_us.Element
        _element.sku_id = AAZStrArg(
            options=["sku-id"],
            nullable=True,
        )

        invoice_sections = cls._args_schema.parameters.billing_profiles.Element.invoice_sections
        invoice_sections.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_invoice_section_update(invoice_sections.Element)
        return cls._args_schema

    _args_invoice_section_update = None

    @classmethod
    def _build_args_invoice_section_update(cls, _schema):
        if cls._args_invoice_section_update is not None:
            _schema.billing_profiles = cls._args_invoice_section_update.billing_profiles
            _schema.display_name = cls._args_invoice_section_update.display_name
            return

        cls._args_invoice_section_update = AAZObjectArg(
            nullable=True,
        )

        invoice_section_update = cls._args_invoice_section_update
        invoice_section_update.billing_profiles = AAZListArg(
            options=["billing-profiles"],
            nullable=True,
        )
        invoice_section_update.display_name = AAZStrArg(
            options=["display-name"],
            nullable=True,
        )

        billing_profiles = cls._args_invoice_section_update.billing_profiles
        billing_profiles.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_invoice_section_update.billing_profiles.Element
        _element.address = AAZObjectArg(
            options=["address"],
            nullable=True,
        )
        _element.display_name = AAZStrArg(
            options=["display-name"],
            nullable=True,
        )
        _element.enabled_azure_sk_us = AAZListArg(
            options=["enabled-azure-sk-us"],
            nullable=True,
        )
        _element.invoice_sections = AAZListArg(
            options=["invoice-sections"],
            nullable=True,
        )
        _element.po_number = AAZStrArg(
            options=["po-number"],
            nullable=True,
        )

        address = cls._args_invoice_section_update.billing_profiles.Element.address
        address.address_line1 = AAZStrArg(
            options=["address-line1"],
            nullable=True,
        )
        address.address_line2 = AAZStrArg(
            options=["address-line2"],
            nullable=True,
        )
        address.address_line3 = AAZStrArg(
            options=["address-line3"],
            nullable=True,
        )
        address.city = AAZStrArg(
            options=["city"],
            nullable=True,
        )
        address.company_name = AAZStrArg(
            options=["company-name"],
            nullable=True,
        )
        address.country = AAZStrArg(
            options=["country"],
            nullable=True,
        )
        address.first_name = AAZStrArg(
            options=["first-name"],
            nullable=True,
        )
        address.last_name = AAZStrArg(
            options=["last-name"],
            nullable=True,
        )
        address.postal_code = AAZStrArg(
            options=["postal-code"],
            nullable=True,
        )
        address.region = AAZStrArg(
            options=["region"],
            nullable=True,
        )

        enabled_azure_sk_us = cls._args_invoice_section_update.billing_profiles.Element.enabled_azure_sk_us
        enabled_azure_sk_us.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_invoice_section_update.billing_profiles.Element.enabled_azure_sk_us.Element
        _element.sku_id = AAZStrArg(
            options=["sku-id"],
            nullable=True,
        )

        invoice_sections = cls._args_invoice_section_update.billing_profiles.Element.invoice_sections
        invoice_sections.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_invoice_section_update(invoice_sections.Element)

        _schema.billing_profiles = cls._args_invoice_section_update.billing_profiles
        _schema.display_name = cls._args_invoice_section_update.display_name

    def _execute_operations(self):
        self.pre_operations()
        self.InvoiceSectionsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.InvoiceSectionsUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class InvoiceSectionsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountName", self.ctx.args.billing_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "invoiceSectionName", self.ctx.args.invoice_section_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-11-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_invoice_section_read(cls._schema_on_200)

            return cls._schema_on_200

    class InvoiceSectionsUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountName", self.ctx.args.billing_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "invoiceSectionName", self.ctx.args.invoice_section_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-11-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_invoice_section_read(cls._schema_on_200)

            return cls._schema_on_200

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args.parameters,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("billingProfiles", AAZListType, ".billing_profiles")
                properties.set_prop("displayName", AAZStrType, ".display_name")

            billing_profiles = _builder.get(".properties.billingProfiles")
            if billing_profiles is not None:
                billing_profiles.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.billingProfiles[]")
            if _elements is not None:
                _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties.billingProfiles[].properties")
            if properties is not None:
                properties.set_prop("address", AAZObjectType, ".address")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("enabledAzureSKUs", AAZListType, ".enabled_azure_sk_us")
                properties.set_prop("invoiceSections", AAZListType, ".invoice_sections")
                properties.set_prop("poNumber", AAZStrType, ".po_number")

            address = _builder.get(".properties.billingProfiles[].properties.address")
            if address is not None:
                address.set_prop("addressLine1", AAZStrType, ".address_line1")
                address.set_prop("addressLine2", AAZStrType, ".address_line2")
                address.set_prop("addressLine3", AAZStrType, ".address_line3")
                address.set_prop("city", AAZStrType, ".city")
                address.set_prop("companyName", AAZStrType, ".company_name")
                address.set_prop("country", AAZStrType, ".country")
                address.set_prop("firstName", AAZStrType, ".first_name")
                address.set_prop("lastName", AAZStrType, ".last_name")
                address.set_prop("postalCode", AAZStrType, ".postal_code")
                address.set_prop("region", AAZStrType, ".region")

            enabled_azure_sk_us = _builder.get(".properties.billingProfiles[].properties.enabledAzureSKUs")
            if enabled_azure_sk_us is not None:
                enabled_azure_sk_us.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.billingProfiles[].properties.enabledAzureSKUs[]")
            if _elements is not None:
                _elements.set_prop("skuId", AAZStrType, ".sku_id")

            invoice_sections = _builder.get(".properties.billingProfiles[].properties.invoiceSections")
            if invoice_sections is not None:
                _UpdateHelper._build_schema_invoice_section_update(invoice_sections.set_elements(AAZObjectType, "."))

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_invoice_section_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("billingProfiles", AAZListType, ".billing_profiles")
            properties.set_prop("displayName", AAZStrType, ".display_name")

        billing_profiles = _builder.get(".properties.billingProfiles")
        if billing_profiles is not None:
            billing_profiles.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.billingProfiles[]")
        if _elements is not None:
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.billingProfiles[].properties")
        if properties is not None:
            properties.set_prop("address", AAZObjectType, ".address")
            properties.set_prop("displayName", AAZStrType, ".display_name")
            properties.set_prop("enabledAzureSKUs", AAZListType, ".enabled_azure_sk_us")
            properties.set_prop("invoiceSections", AAZListType, ".invoice_sections")
            properties.set_prop("poNumber", AAZStrType, ".po_number")

        address = _builder.get(".properties.billingProfiles[].properties.address")
        if address is not None:
            address.set_prop("addressLine1", AAZStrType, ".address_line1")
            address.set_prop("addressLine2", AAZStrType, ".address_line2")
            address.set_prop("addressLine3", AAZStrType, ".address_line3")
            address.set_prop("city", AAZStrType, ".city")
            address.set_prop("companyName", AAZStrType, ".company_name")
            address.set_prop("country", AAZStrType, ".country")
            address.set_prop("firstName", AAZStrType, ".first_name")
            address.set_prop("lastName", AAZStrType, ".last_name")
            address.set_prop("postalCode", AAZStrType, ".postal_code")
            address.set_prop("region", AAZStrType, ".region")

        enabled_azure_sk_us = _builder.get(".properties.billingProfiles[].properties.enabledAzureSKUs")
        if enabled_azure_sk_us is not None:
            enabled_azure_sk_us.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.billingProfiles[].properties.enabledAzureSKUs[]")
        if _elements is not None:
            _elements.set_prop("skuId", AAZStrType, ".sku_id")

        invoice_sections = _builder.get(".properties.billingProfiles[].properties.invoiceSections")
        if invoice_sections is not None:
            cls._build_schema_invoice_section_update(invoice_sections.set_elements(AAZObjectType, "."))

    _schema_invoice_section_read = None

    @classmethod
    def _build_schema_invoice_section_read(cls, _schema):
        if cls._schema_invoice_section_read is not None:
            _schema.id = cls._schema_invoice_section_read.id
            _schema.name = cls._schema_invoice_section_read.name
            _schema.properties = cls._schema_invoice_section_read.properties
            _schema.type = cls._schema_invoice_section_read.type
            return

        cls._schema_invoice_section_read = _schema_invoice_section_read = AAZObjectType()

        invoice_section_read = _schema_invoice_section_read
        invoice_section_read.id = AAZStrType(
            flags={"read_only": True},
        )
        invoice_section_read.name = AAZStrType(
            flags={"read_only": True},
        )
        invoice_section_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        invoice_section_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_invoice_section_read.properties
        properties.billing_profiles = AAZListType(
            serialized_name="billingProfiles",
        )
        properties.display_name = AAZStrType(
            serialized_name="displayName",
        )

        billing_profiles = _schema_invoice_section_read.properties.billing_profiles
        billing_profiles.Element = AAZObjectType()

        _element = _schema_invoice_section_read.properties.billing_profiles.Element
        _element.id = AAZStrType(
            flags={"read_only": True},
        )
        _element.name = AAZStrType(
            flags={"read_only": True},
        )
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_invoice_section_read.properties.billing_profiles.Element.properties
        properties.address = AAZObjectType()
        properties.currency = AAZStrType(
            flags={"read_only": True},
        )
        properties.display_name = AAZStrType(
            serialized_name="displayName",
        )
        properties.enabled_azure_sk_us = AAZListType(
            serialized_name="enabledAzureSKUs",
        )
        properties.invoice_day = AAZIntType(
            serialized_name="invoiceDay",
            flags={"read_only": True},
        )
        properties.invoice_email_opt_in = AAZBoolType(
            serialized_name="invoiceEmailOptIn",
            flags={"read_only": True},
        )
        properties.invoice_sections = AAZListType(
            serialized_name="invoiceSections",
        )
        properties.is_classic = AAZBoolType(
            serialized_name="isClassic",
            flags={"read_only": True},
        )
        properties.po_number = AAZStrType(
            serialized_name="poNumber",
        )

        address = _schema_invoice_section_read.properties.billing_profiles.Element.properties.address
        address.address_line1 = AAZStrType(
            serialized_name="addressLine1",
        )
        address.address_line2 = AAZStrType(
            serialized_name="addressLine2",
        )
        address.address_line3 = AAZStrType(
            serialized_name="addressLine3",
        )
        address.city = AAZStrType()
        address.company_name = AAZStrType(
            serialized_name="companyName",
        )
        address.country = AAZStrType()
        address.first_name = AAZStrType(
            serialized_name="firstName",
        )
        address.last_name = AAZStrType(
            serialized_name="lastName",
        )
        address.postal_code = AAZStrType(
            serialized_name="postalCode",
        )
        address.region = AAZStrType()

        enabled_azure_sk_us = _schema_invoice_section_read.properties.billing_profiles.Element.properties.enabled_azure_sk_us
        enabled_azure_sk_us.Element = AAZObjectType()

        _element = _schema_invoice_section_read.properties.billing_profiles.Element.properties.enabled_azure_sk_us.Element
        _element.sku_description = AAZStrType(
            serialized_name="skuDescription",
            flags={"read_only": True},
        )
        _element.sku_id = AAZStrType(
            serialized_name="skuId",
        )

        invoice_sections = _schema_invoice_section_read.properties.billing_profiles.Element.properties.invoice_sections
        invoice_sections.Element = AAZObjectType()
        cls._build_schema_invoice_section_read(invoice_sections.Element)

        _schema.id = cls._schema_invoice_section_read.id
        _schema.name = cls._schema_invoice_section_read.name
        _schema.properties = cls._schema_invoice_section_read.properties
        _schema.type = cls._schema_invoice_section_read.type


__all__ = ["Update"]
