# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "billing account add-payment-term",
)
class AddPaymentTerm(AAZCommand):
    """Adds payment terms to all the billing profiles under the billing account. Currently, payment terms can be added only on billing accounts that have Agreement Type as 'Microsoft Customer Agreement' and AccountType as 'Enterprise'. This action needs pre-authorization and only Field Sellers are authorized to add the payment terms and is not a self-serve action.

    :example: PaymentTermsAdd
        az billing account add-payment-term --billing-account-name 00000000-0000-0000-0000-000000000000:00000000-0000-0000-0000-000000000000_2019-05-31 --parameters "[{term:net10,start-date:'2023-01-05T22:39:34.2606750Z',end-date:'2023-01-25T22:39:34.2606750Z'}]"
    """

    _aaz_info = {
        "version": "2024-04-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billing/billingaccounts/{}/addpaymentterms", "2024-04-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.billing_account_name = AAZStrArg(
            options=["--billing-account-name"],
            help="The ID that uniquely identifies a billing account.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([0-9]+|([Pp][Cc][Nn]\\.[A-Za-z0-9]+)|[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}(:[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}_[0-9]{4}(-[0-9]{2}){2})?)$",
            ),
        )
        _args_schema.parameters = AAZListArg(
            options=["--parameters"],
            required=True,
        )

        parameters = cls._args_schema.parameters
        parameters.Element = AAZObjectArg()

        _element = cls._args_schema.parameters.Element
        _element.end_date = AAZDateTimeArg(
            options=["end-date"],
            help="The date on when the defined 'Payment Term' will end and is always in UTC.",
        )
        _element.start_date = AAZDateTimeArg(
            options=["start-date"],
            help="The date on when the defined 'Payment Term' will be effective from and is always in UTC.",
        )
        _element.term = AAZStrArg(
            options=["term"],
            help="Represents duration in netXX format. Always in days.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.BillingAccountsAddPaymentTerms(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class BillingAccountsAddPaymentTerms(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/addPaymentTerms",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountName", self.ctx.args.billing_account_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args.parameters,
                typ=AAZListType,
                typ_kwargs={"flags": {"required": True}}
            )
            _builder.set_elements(AAZObjectType, ".")

            _elements = _builder.get("[]")
            if _elements is not None:
                _elements.set_prop("endDate", AAZStrType, ".end_date")
                _elements.set_prop("startDate", AAZStrType, ".start_date")
                _elements.set_prop("term", AAZStrType, ".term")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.account_status = AAZStrType(
                serialized_name="accountStatus",
                flags={"read_only": True},
            )
            properties.account_status_reason_code = AAZStrType(
                serialized_name="accountStatusReasonCode",
                flags={"read_only": True},
            )
            properties.account_sub_type = AAZStrType(
                serialized_name="accountSubType",
                flags={"read_only": True},
            )
            properties.account_type = AAZStrType(
                serialized_name="accountType",
                flags={"read_only": True},
            )
            properties.agreement_type = AAZStrType(
                serialized_name="agreementType",
                flags={"read_only": True},
            )
            properties.billing_relationship_types = AAZListType(
                serialized_name="billingRelationshipTypes",
                flags={"read_only": True},
            )
            properties.display_name = AAZStrType(
                serialized_name="displayName",
            )
            properties.enrollment_details = AAZObjectType(
                serialized_name="enrollmentDetails",
            )
            properties.has_no_billing_profiles = AAZBoolType(
                serialized_name="hasNoBillingProfiles",
            )
            properties.has_read_access = AAZBoolType(
                serialized_name="hasReadAccess",
            )
            properties.notification_email_address = AAZStrType(
                serialized_name="notificationEmailAddress",
            )
            properties.primary_billing_tenant_id = AAZStrType(
                serialized_name="primaryBillingTenantId",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.qualifications = AAZListType(
                flags={"read_only": True},
            )
            properties.registration_number = AAZObjectType(
                serialized_name="registrationNumber",
            )
            properties.sold_to = AAZObjectType(
                serialized_name="soldTo",
            )
            properties.tax_ids = AAZListType(
                serialized_name="taxIds",
            )

            billing_relationship_types = cls._schema_on_200.properties.billing_relationship_types
            billing_relationship_types.Element = AAZStrType()

            enrollment_details = cls._schema_on_200.properties.enrollment_details
            enrollment_details.billing_cycle = AAZStrType(
                serialized_name="billingCycle",
                flags={"read_only": True},
            )
            enrollment_details.channel = AAZStrType(
                flags={"read_only": True},
            )
            enrollment_details.cloud = AAZStrType(
                flags={"read_only": True},
            )
            enrollment_details.country_code = AAZStrType(
                serialized_name="countryCode",
                flags={"read_only": True},
            )
            enrollment_details.currency = AAZStrType(
                flags={"read_only": True},
            )
            enrollment_details.end_date = AAZStrType(
                serialized_name="endDate",
            )
            enrollment_details.extended_term_option = AAZStrType(
                serialized_name="extendedTermOption",
                flags={"read_only": True},
            )
            enrollment_details.indirect_relationship_info = AAZObjectType(
                serialized_name="indirectRelationshipInfo",
            )
            enrollment_details.invoice_recipient = AAZStrType(
                serialized_name="invoiceRecipient",
                flags={"read_only": True},
            )
            enrollment_details.language = AAZStrType(
                flags={"read_only": True},
            )
            enrollment_details.markup_status = AAZStrType(
                serialized_name="markupStatus",
                flags={"read_only": True},
            )
            enrollment_details.po_number = AAZStrType(
                serialized_name="poNumber",
            )
            enrollment_details.start_date = AAZStrType(
                serialized_name="startDate",
            )
            enrollment_details.support_coverage = AAZStrType(
                serialized_name="supportCoverage",
                flags={"read_only": True},
            )
            enrollment_details.support_level = AAZStrType(
                serialized_name="supportLevel",
                flags={"read_only": True},
            )

            indirect_relationship_info = cls._schema_on_200.properties.enrollment_details.indirect_relationship_info
            indirect_relationship_info.billing_account_name = AAZStrType(
                serialized_name="billingAccountName",
            )
            indirect_relationship_info.billing_profile_name = AAZStrType(
                serialized_name="billingProfileName",
            )
            indirect_relationship_info.display_name = AAZStrType(
                serialized_name="displayName",
            )

            qualifications = cls._schema_on_200.properties.qualifications
            qualifications.Element = AAZStrType()

            registration_number = cls._schema_on_200.properties.registration_number
            registration_number.id = AAZStrType()
            registration_number.required = AAZBoolType(
                flags={"read_only": True},
            )
            registration_number.type = AAZListType(
                flags={"read_only": True},
            )

            type = cls._schema_on_200.properties.registration_number.type
            type.Element = AAZStrType()

            sold_to = cls._schema_on_200.properties.sold_to
            sold_to.address_line1 = AAZStrType(
                serialized_name="addressLine1",
                flags={"required": True},
            )
            sold_to.address_line2 = AAZStrType(
                serialized_name="addressLine2",
            )
            sold_to.address_line3 = AAZStrType(
                serialized_name="addressLine3",
            )
            sold_to.city = AAZStrType()
            sold_to.company_name = AAZStrType(
                serialized_name="companyName",
            )
            sold_to.country = AAZStrType(
                flags={"required": True},
            )
            sold_to.district = AAZStrType()
            sold_to.email = AAZStrType()
            sold_to.first_name = AAZStrType(
                serialized_name="firstName",
            )
            sold_to.is_valid_address = AAZBoolType(
                serialized_name="isValidAddress",
            )
            sold_to.last_name = AAZStrType(
                serialized_name="lastName",
            )
            sold_to.middle_name = AAZStrType(
                serialized_name="middleName",
            )
            sold_to.phone_number = AAZStrType(
                serialized_name="phoneNumber",
            )
            sold_to.postal_code = AAZStrType(
                serialized_name="postalCode",
            )
            sold_to.region = AAZStrType()

            tax_ids = cls._schema_on_200.properties.tax_ids
            tax_ids.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.tax_ids.Element
            _element.country = AAZStrType()
            _element.id = AAZStrType()
            _element.scope = AAZStrType()
            _element.status = AAZStrType()
            _element.type = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _AddPaymentTermHelper:
    """Helper class for AddPaymentTerm"""


__all__ = ["AddPaymentTerm"]
