# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "billing account update",
)
class Update(AAZCommand):
    """Update the properties of a billing account. Currently, displayName and address can be updated for billing accounts with agreement type Microsoft Customer Agreement. Currently address and notification email address can be updated for billing accounts with agreement type Microsoft Online Services Agreement. Currently, purchase order number can be edited for billing accounts with agreement type Enterprise Agreement.
    """

    _aaz_info = {
        "version": "2024-04-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billing/billingaccounts/{}", "2024-04-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.billing_account_name = AAZStrArg(
            options=["--billing-account-name"],
            help="The ID that uniquely identifies a billing account.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([0-9]+|([Pp][Cc][Nn]\\.[A-Za-z0-9]+)|[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}(:[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}_[0-9]{4}(-[0-9]{2}){2})?)$",
            ),
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Dictionary of metadata associated with the resource. It may not be populated for all resource types. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \\ ? /",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.display_name = AAZStrArg(
            options=["--display-name"],
            arg_group="Properties",
            help="The billing account name.",
        )
        _args_schema.enrollment_details = AAZObjectArg(
            options=["--enrollment-details"],
            arg_group="Properties",
            help="The properties of an enrollment.",
        )
        _args_schema.has_no_billing_profiles = AAZBoolArg(
            options=["--has-no-billing-profiles"],
            arg_group="Properties",
            help="Indicates whether or not the billing account has any billing profiles.",
        )
        _args_schema.has_read_access = AAZBoolArg(
            options=["--has-read-access"],
            arg_group="Properties",
            help="Indicates whether user has read access to the billing account.",
        )
        _args_schema.notification_email_address = AAZStrArg(
            options=["--notification-email-address"],
            arg_group="Properties",
            help="Notification email address for legacy account. Available for agreement type Microsoft Online Services Program.",
        )
        _args_schema.primary_billing_tenant_id = AAZStrArg(
            options=["--primary-billing-tenant-id"],
            arg_group="Properties",
            help="The tenant that was used to set up the billing account. By default, only users from this tenant can get role assignments on the billing account and all purchases are provisioned in this tenant.",
        )
        _args_schema.registration_number = AAZObjectArg(
            options=["--registration-number"],
            arg_group="Properties",
            help="Describes the registration number of the organization linked with the billing account.",
        )
        _args_schema.sold_to = AAZObjectArg(
            options=["--sold-to"],
            arg_group="Properties",
            help="The address of the individual or organization that is responsible for the billing account.",
        )
        _args_schema.tax_ids = AAZListArg(
            options=["--tax-ids"],
            arg_group="Properties",
            help="A list of tax identifiers for the billing account.",
        )

        enrollment_details = cls._args_schema.enrollment_details
        enrollment_details.end_date = AAZDateTimeArg(
            options=["end-date"],
            help="The end date of the enrollment.",
        )
        enrollment_details.indirect_relationship_info = AAZObjectArg(
            options=["indirect-relationship-info"],
            help="The properties of an enrollment which are applicable only for indirect enrollments.",
        )
        enrollment_details.po_number = AAZStrArg(
            options=["po-number"],
            help="The purchase order number of the enrollment.",
        )
        enrollment_details.start_date = AAZDateTimeArg(
            options=["start-date"],
            help="The start date of the enrollment.",
        )

        indirect_relationship_info = cls._args_schema.enrollment_details.indirect_relationship_info
        indirect_relationship_info.billing_account_name = AAZStrArg(
            options=["billing-account-name"],
            help="The billing account name of the partner or the customer for an indirect motion.",
        )
        indirect_relationship_info.billing_profile_name = AAZStrArg(
            options=["billing-profile-name"],
            help="The billing profile name of the partner or the customer for an indirect motion.",
        )
        indirect_relationship_info.display_name = AAZStrArg(
            options=["display-name"],
            help="The display name of the partner or customer for an indirect motion.",
        )

        registration_number = cls._args_schema.registration_number
        registration_number.id = AAZStrArg(
            options=["id"],
            help="The unique identification number of the organization linked with the billing account.",
        )

        sold_to = cls._args_schema.sold_to
        sold_to.address_line1 = AAZStrArg(
            options=["address-line1"],
            help="Address line 1.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        sold_to.address_line2 = AAZStrArg(
            options=["address-line2"],
            help="Address line 2.",
        )
        sold_to.address_line3 = AAZStrArg(
            options=["address-line3"],
            help="Address line 3.",
        )
        sold_to.city = AAZStrArg(
            options=["city"],
            help="Address city.",
        )
        sold_to.company_name = AAZStrArg(
            options=["company-name"],
            help="Company name. Optional for MCA Individual (Pay-as-you-go).",
        )
        sold_to.country = AAZStrArg(
            options=["country"],
            help="Country code uses ISO 3166-1 Alpha-2 format.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        sold_to.district = AAZStrArg(
            options=["district"],
            help="Address district.",
        )
        sold_to.email = AAZStrArg(
            options=["email"],
            help="Email address.",
        )
        sold_to.first_name = AAZStrArg(
            options=["first-name"],
            help="First name. Optional for MCA Enterprise.",
        )
        sold_to.is_valid_address = AAZBoolArg(
            options=["is-valid-address"],
            help="Indicates if the address is incomplete.",
        )
        sold_to.last_name = AAZStrArg(
            options=["last-name"],
            help="Last name. Optional for MCA Enterprise.",
        )
        sold_to.middle_name = AAZStrArg(
            options=["middle-name"],
            help="Middle name.",
        )
        sold_to.phone_number = AAZStrArg(
            options=["phone-number"],
            help="Phone number.",
        )
        sold_to.postal_code = AAZStrArg(
            options=["postal-code"],
            help="Postal code.",
        )
        sold_to.region = AAZStrArg(
            options=["region"],
            help="Address region.",
        )

        tax_ids = cls._args_schema.tax_ids
        tax_ids.Element = AAZObjectArg()

        _element = cls._args_schema.tax_ids.Element
        _element.country = AAZStrArg(
            options=["country"],
            help="The country of the tax identifier.",
        )
        _element.id = AAZStrArg(
            options=["id"],
            help="The id of the tax identifier.",
        )
        _element.scope = AAZStrArg(
            options=["scope"],
            help="The scope of the tax identifier.",
        )
        _element.status = AAZStrArg(
            options=["status"],
            help="The status of the tax identifier.",
            enum={"Invalid": "Invalid", "Other": "Other", "Valid": "Valid"},
        )
        _element.type = AAZStrArg(
            options=["type"],
            help="The type of the tax identifier.",
            enum={"BrazilCcmId": "BrazilCcmId", "BrazilCnpjId": "BrazilCnpjId", "BrazilCpfId": "BrazilCpfId", "CanadianFederalExempt": "CanadianFederalExempt", "CanadianProvinceExempt": "CanadianProvinceExempt", "ExternalTaxation": "ExternalTaxation", "IndiaFederalServiceTaxId": "IndiaFederalServiceTaxId", "IndiaFederalTanId": "IndiaFederalTanId", "IndiaPanId": "IndiaPanId", "IndiaStateCstId": "IndiaStateCstId", "IndiaStateGstINId": "IndiaStateGstINId", "IndiaStateVatId": "IndiaStateVatId", "IntlExempt": "IntlExempt", "LoveCode": "LoveCode", "MobileBarCode": "MobileBarCode", "NationalIdentificationNumber": "NationalIdentificationNumber", "Other": "Other", "PublicSectorId": "PublicSectorId", "USExempt": "USExempt", "VatId": "VatId"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.BillingAccountsUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class BillingAccountsUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountName", self.ctx.args.billing_account_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("enrollmentDetails", AAZObjectType, ".enrollment_details")
                properties.set_prop("hasNoBillingProfiles", AAZBoolType, ".has_no_billing_profiles")
                properties.set_prop("hasReadAccess", AAZBoolType, ".has_read_access")
                properties.set_prop("notificationEmailAddress", AAZStrType, ".notification_email_address")
                properties.set_prop("primaryBillingTenantId", AAZStrType, ".primary_billing_tenant_id")
                properties.set_prop("registrationNumber", AAZObjectType, ".registration_number")
                properties.set_prop("soldTo", AAZObjectType, ".sold_to")
                properties.set_prop("taxIds", AAZListType, ".tax_ids")

            enrollment_details = _builder.get(".properties.enrollmentDetails")
            if enrollment_details is not None:
                enrollment_details.set_prop("endDate", AAZStrType, ".end_date")
                enrollment_details.set_prop("indirectRelationshipInfo", AAZObjectType, ".indirect_relationship_info")
                enrollment_details.set_prop("poNumber", AAZStrType, ".po_number")
                enrollment_details.set_prop("startDate", AAZStrType, ".start_date")

            indirect_relationship_info = _builder.get(".properties.enrollmentDetails.indirectRelationshipInfo")
            if indirect_relationship_info is not None:
                indirect_relationship_info.set_prop("billingAccountName", AAZStrType, ".billing_account_name")
                indirect_relationship_info.set_prop("billingProfileName", AAZStrType, ".billing_profile_name")
                indirect_relationship_info.set_prop("displayName", AAZStrType, ".display_name")

            registration_number = _builder.get(".properties.registrationNumber")
            if registration_number is not None:
                registration_number.set_prop("id", AAZStrType, ".id")

            sold_to = _builder.get(".properties.soldTo")
            if sold_to is not None:
                sold_to.set_prop("addressLine1", AAZStrType, ".address_line1", typ_kwargs={"flags": {"required": True}})
                sold_to.set_prop("addressLine2", AAZStrType, ".address_line2")
                sold_to.set_prop("addressLine3", AAZStrType, ".address_line3")
                sold_to.set_prop("city", AAZStrType, ".city")
                sold_to.set_prop("companyName", AAZStrType, ".company_name")
                sold_to.set_prop("country", AAZStrType, ".country", typ_kwargs={"flags": {"required": True}})
                sold_to.set_prop("district", AAZStrType, ".district")
                sold_to.set_prop("email", AAZStrType, ".email")
                sold_to.set_prop("firstName", AAZStrType, ".first_name")
                sold_to.set_prop("isValidAddress", AAZBoolType, ".is_valid_address")
                sold_to.set_prop("lastName", AAZStrType, ".last_name")
                sold_to.set_prop("middleName", AAZStrType, ".middle_name")
                sold_to.set_prop("phoneNumber", AAZStrType, ".phone_number")
                sold_to.set_prop("postalCode", AAZStrType, ".postal_code")
                sold_to.set_prop("region", AAZStrType, ".region")

            tax_ids = _builder.get(".properties.taxIds")
            if tax_ids is not None:
                tax_ids.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.taxIds[]")
            if _elements is not None:
                _elements.set_prop("country", AAZStrType, ".country")
                _elements.set_prop("id", AAZStrType, ".id")
                _elements.set_prop("scope", AAZStrType, ".scope")
                _elements.set_prop("status", AAZStrType, ".status")
                _elements.set_prop("type", AAZStrType, ".type")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.account_status = AAZStrType(
                serialized_name="accountStatus",
                flags={"read_only": True},
            )
            properties.account_status_reason_code = AAZStrType(
                serialized_name="accountStatusReasonCode",
                flags={"read_only": True},
            )
            properties.account_sub_type = AAZStrType(
                serialized_name="accountSubType",
                flags={"read_only": True},
            )
            properties.account_type = AAZStrType(
                serialized_name="accountType",
                flags={"read_only": True},
            )
            properties.agreement_type = AAZStrType(
                serialized_name="agreementType",
                flags={"read_only": True},
            )
            properties.billing_relationship_types = AAZListType(
                serialized_name="billingRelationshipTypes",
                flags={"read_only": True},
            )
            properties.display_name = AAZStrType(
                serialized_name="displayName",
            )
            properties.enrollment_details = AAZObjectType(
                serialized_name="enrollmentDetails",
            )
            properties.has_no_billing_profiles = AAZBoolType(
                serialized_name="hasNoBillingProfiles",
            )
            properties.has_read_access = AAZBoolType(
                serialized_name="hasReadAccess",
            )
            properties.notification_email_address = AAZStrType(
                serialized_name="notificationEmailAddress",
            )
            properties.primary_billing_tenant_id = AAZStrType(
                serialized_name="primaryBillingTenantId",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.qualifications = AAZListType(
                flags={"read_only": True},
            )
            properties.registration_number = AAZObjectType(
                serialized_name="registrationNumber",
            )
            properties.sold_to = AAZObjectType(
                serialized_name="soldTo",
            )
            properties.tax_ids = AAZListType(
                serialized_name="taxIds",
            )

            billing_relationship_types = cls._schema_on_200.properties.billing_relationship_types
            billing_relationship_types.Element = AAZStrType()

            enrollment_details = cls._schema_on_200.properties.enrollment_details
            enrollment_details.billing_cycle = AAZStrType(
                serialized_name="billingCycle",
                flags={"read_only": True},
            )
            enrollment_details.channel = AAZStrType(
                flags={"read_only": True},
            )
            enrollment_details.cloud = AAZStrType(
                flags={"read_only": True},
            )
            enrollment_details.country_code = AAZStrType(
                serialized_name="countryCode",
                flags={"read_only": True},
            )
            enrollment_details.currency = AAZStrType(
                flags={"read_only": True},
            )
            enrollment_details.end_date = AAZStrType(
                serialized_name="endDate",
            )
            enrollment_details.extended_term_option = AAZStrType(
                serialized_name="extendedTermOption",
                flags={"read_only": True},
            )
            enrollment_details.indirect_relationship_info = AAZObjectType(
                serialized_name="indirectRelationshipInfo",
            )
            enrollment_details.invoice_recipient = AAZStrType(
                serialized_name="invoiceRecipient",
                flags={"read_only": True},
            )
            enrollment_details.language = AAZStrType(
                flags={"read_only": True},
            )
            enrollment_details.markup_status = AAZStrType(
                serialized_name="markupStatus",
                flags={"read_only": True},
            )
            enrollment_details.po_number = AAZStrType(
                serialized_name="poNumber",
            )
            enrollment_details.start_date = AAZStrType(
                serialized_name="startDate",
            )
            enrollment_details.support_coverage = AAZStrType(
                serialized_name="supportCoverage",
                flags={"read_only": True},
            )
            enrollment_details.support_level = AAZStrType(
                serialized_name="supportLevel",
                flags={"read_only": True},
            )

            indirect_relationship_info = cls._schema_on_200.properties.enrollment_details.indirect_relationship_info
            indirect_relationship_info.billing_account_name = AAZStrType(
                serialized_name="billingAccountName",
            )
            indirect_relationship_info.billing_profile_name = AAZStrType(
                serialized_name="billingProfileName",
            )
            indirect_relationship_info.display_name = AAZStrType(
                serialized_name="displayName",
            )

            qualifications = cls._schema_on_200.properties.qualifications
            qualifications.Element = AAZStrType()

            registration_number = cls._schema_on_200.properties.registration_number
            registration_number.id = AAZStrType()
            registration_number.required = AAZBoolType(
                flags={"read_only": True},
            )
            registration_number.type = AAZListType(
                flags={"read_only": True},
            )

            type = cls._schema_on_200.properties.registration_number.type
            type.Element = AAZStrType()

            sold_to = cls._schema_on_200.properties.sold_to
            sold_to.address_line1 = AAZStrType(
                serialized_name="addressLine1",
                flags={"required": True},
            )
            sold_to.address_line2 = AAZStrType(
                serialized_name="addressLine2",
            )
            sold_to.address_line3 = AAZStrType(
                serialized_name="addressLine3",
            )
            sold_to.city = AAZStrType()
            sold_to.company_name = AAZStrType(
                serialized_name="companyName",
            )
            sold_to.country = AAZStrType(
                flags={"required": True},
            )
            sold_to.district = AAZStrType()
            sold_to.email = AAZStrType()
            sold_to.first_name = AAZStrType(
                serialized_name="firstName",
            )
            sold_to.is_valid_address = AAZBoolType(
                serialized_name="isValidAddress",
            )
            sold_to.last_name = AAZStrType(
                serialized_name="lastName",
            )
            sold_to.middle_name = AAZStrType(
                serialized_name="middleName",
            )
            sold_to.phone_number = AAZStrType(
                serialized_name="phoneNumber",
            )
            sold_to.postal_code = AAZStrType(
                serialized_name="postalCode",
            )
            sold_to.region = AAZStrType()

            tax_ids = cls._schema_on_200.properties.tax_ids
            tax_ids.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.tax_ids.Element
            _element.country = AAZStrType()
            _element.id = AAZStrType()
            _element.scope = AAZStrType()
            _element.status = AAZStrType()
            _element.type = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _UpdateHelper:
    """Helper class for Update"""


__all__ = ["Update"]
