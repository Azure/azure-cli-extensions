# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "billing account list",
)
class List(AAZCommand):
    """List the billing accounts that a user has access to.

    :example: BillingAccountsList
        az billing account list
    """

    _aaz_info = {
        "version": "2024-04-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billing/billingaccounts", "2024-04-01"],
        ]
    }

    AZ_SUPPORT_PAGINATION = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.expand = AAZStrArg(
            options=["--expand"],
            help="Expand is allowed for SoldTo and EnrollmentDetails/PONumber.",
        )
        _args_schema.filter = AAZStrArg(
            options=["--filter"],
            help="The filter query option allows clients to filter a collection of resources that are addressed by a request URL.",
        )
        _args_schema.include_all = AAZBoolArg(
            options=["--include-all"],
            help="When true, results will include Billing Accounts that the user does not have a direct role assignment on if the user has one of the following AAD roles: Global Administrator, Global Reader, Billing Administrator.",
            default=False,
        )
        _args_schema.include_all_without_billing_profiles = AAZBoolArg(
            options=["--include-all-without-billing-profiles"],
            help="When true, results will include Billing Accounts that are not fully created if the user has one of the following AAD roles: Global Administrator, Global Reader, Billing Administrator.",
            default=False,
        )
        _args_schema.include_deleted = AAZBoolArg(
            options=["--include-deleted"],
            help="When true, results will include any billing accounts in a deleted state.",
            default=False,
        )
        _args_schema.include_pending_agreement = AAZBoolArg(
            options=["--include-pending-agreement"],
            help="Includes billing accounts with agreement pending signature that the user has access to.",
            default=False,
        )
        _args_schema.include_resellee = AAZBoolArg(
            options=["--include-resellee"],
            help="Includes the customer's billing account of Microsoft Partner Agreement that the user has access to.",
            default=False,
        )
        _args_schema.legal_owner_oid = AAZStrArg(
            options=["--legal-owner-oid"],
            help="Must be combined with legalOwnerTID, results will only include Billing Accounts for whom is legally responsible for the Billing Accounts. Optional.",
        )
        _args_schema.legal_owner_tid = AAZStrArg(
            options=["--legal-owner-tid"],
            help="Must be combined with legalOwnerOID, results will only include Billing Accounts for whom is legally responsible for the Billing Accounts. Optional.",
        )
        _args_schema.search = AAZStrArg(
            options=["--search"],
            help="The search query option allows clients to request items within a collection matching a free-text search expression. search is only supported for string fields.",
        )
        _args_schema.skip = AAZIntArg(
            options=["--skip"],
            help="The skip query option requests the number of items in the queried collection that are to be skipped and not included in the result.",
        )
        _args_schema.top = AAZIntArg(
            options=["--top"],
            help="The top query option requests the number of items in the queried collection to be included in the result. The maximum supported value for top is 50.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.BillingAccountsList(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class BillingAccountsList(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "expand", self.ctx.args.expand,
                ),
                **self.serialize_query_param(
                    "filter", self.ctx.args.filter,
                ),
                **self.serialize_query_param(
                    "includeAll", self.ctx.args.include_all,
                ),
                **self.serialize_query_param(
                    "includeAllWithoutBillingProfiles", self.ctx.args.include_all_without_billing_profiles,
                ),
                **self.serialize_query_param(
                    "includeDeleted", self.ctx.args.include_deleted,
                ),
                **self.serialize_query_param(
                    "includePendingAgreement", self.ctx.args.include_pending_agreement,
                ),
                **self.serialize_query_param(
                    "includeResellee", self.ctx.args.include_resellee,
                ),
                **self.serialize_query_param(
                    "legalOwnerOID", self.ctx.args.legal_owner_oid,
                ),
                **self.serialize_query_param(
                    "legalOwnerTID", self.ctx.args.legal_owner_tid,
                ),
                **self.serialize_query_param(
                    "search", self.ctx.args.search,
                ),
                **self.serialize_query_param(
                    "skip", self.ctx.args.skip,
                ),
                **self.serialize_query_param(
                    "top", self.ctx.args.top,
                ),
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
                flags={"read_only": True},
            )
            _schema_on_200.value = AAZListType(
                flags={"read_only": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType()
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _element.tags = AAZDictType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.account_status = AAZStrType(
                serialized_name="accountStatus",
                flags={"read_only": True},
            )
            properties.account_status_reason_code = AAZStrType(
                serialized_name="accountStatusReasonCode",
                flags={"read_only": True},
            )
            properties.account_sub_type = AAZStrType(
                serialized_name="accountSubType",
                flags={"read_only": True},
            )
            properties.account_type = AAZStrType(
                serialized_name="accountType",
                flags={"read_only": True},
            )
            properties.agreement_type = AAZStrType(
                serialized_name="agreementType",
                flags={"read_only": True},
            )
            properties.billing_relationship_types = AAZListType(
                serialized_name="billingRelationshipTypes",
                flags={"read_only": True},
            )
            properties.display_name = AAZStrType(
                serialized_name="displayName",
            )
            properties.enrollment_details = AAZObjectType(
                serialized_name="enrollmentDetails",
            )
            properties.has_no_billing_profiles = AAZBoolType(
                serialized_name="hasNoBillingProfiles",
            )
            properties.has_read_access = AAZBoolType(
                serialized_name="hasReadAccess",
            )
            properties.notification_email_address = AAZStrType(
                serialized_name="notificationEmailAddress",
            )
            properties.primary_billing_tenant_id = AAZStrType(
                serialized_name="primaryBillingTenantId",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.qualifications = AAZListType(
                flags={"read_only": True},
            )
            properties.registration_number = AAZObjectType(
                serialized_name="registrationNumber",
            )
            properties.sold_to = AAZObjectType(
                serialized_name="soldTo",
            )
            properties.tax_ids = AAZListType(
                serialized_name="taxIds",
            )

            billing_relationship_types = cls._schema_on_200.value.Element.properties.billing_relationship_types
            billing_relationship_types.Element = AAZStrType()

            enrollment_details = cls._schema_on_200.value.Element.properties.enrollment_details
            enrollment_details.billing_cycle = AAZStrType(
                serialized_name="billingCycle",
                flags={"read_only": True},
            )
            enrollment_details.channel = AAZStrType(
                flags={"read_only": True},
            )
            enrollment_details.cloud = AAZStrType(
                flags={"read_only": True},
            )
            enrollment_details.country_code = AAZStrType(
                serialized_name="countryCode",
                flags={"read_only": True},
            )
            enrollment_details.currency = AAZStrType(
                flags={"read_only": True},
            )
            enrollment_details.end_date = AAZStrType(
                serialized_name="endDate",
            )
            enrollment_details.extended_term_option = AAZStrType(
                serialized_name="extendedTermOption",
                flags={"read_only": True},
            )
            enrollment_details.indirect_relationship_info = AAZObjectType(
                serialized_name="indirectRelationshipInfo",
            )
            enrollment_details.invoice_recipient = AAZStrType(
                serialized_name="invoiceRecipient",
                flags={"read_only": True},
            )
            enrollment_details.language = AAZStrType(
                flags={"read_only": True},
            )
            enrollment_details.markup_status = AAZStrType(
                serialized_name="markupStatus",
                flags={"read_only": True},
            )
            enrollment_details.po_number = AAZStrType(
                serialized_name="poNumber",
            )
            enrollment_details.start_date = AAZStrType(
                serialized_name="startDate",
            )
            enrollment_details.support_coverage = AAZStrType(
                serialized_name="supportCoverage",
                flags={"read_only": True},
            )
            enrollment_details.support_level = AAZStrType(
                serialized_name="supportLevel",
                flags={"read_only": True},
            )

            indirect_relationship_info = cls._schema_on_200.value.Element.properties.enrollment_details.indirect_relationship_info
            indirect_relationship_info.billing_account_name = AAZStrType(
                serialized_name="billingAccountName",
            )
            indirect_relationship_info.billing_profile_name = AAZStrType(
                serialized_name="billingProfileName",
            )
            indirect_relationship_info.display_name = AAZStrType(
                serialized_name="displayName",
            )

            qualifications = cls._schema_on_200.value.Element.properties.qualifications
            qualifications.Element = AAZStrType()

            registration_number = cls._schema_on_200.value.Element.properties.registration_number
            registration_number.id = AAZStrType()
            registration_number.required = AAZBoolType(
                flags={"read_only": True},
            )
            registration_number.type = AAZListType(
                flags={"read_only": True},
            )

            type = cls._schema_on_200.value.Element.properties.registration_number.type
            type.Element = AAZStrType()

            sold_to = cls._schema_on_200.value.Element.properties.sold_to
            sold_to.address_line1 = AAZStrType(
                serialized_name="addressLine1",
                flags={"required": True},
            )
            sold_to.address_line2 = AAZStrType(
                serialized_name="addressLine2",
            )
            sold_to.address_line3 = AAZStrType(
                serialized_name="addressLine3",
            )
            sold_to.city = AAZStrType()
            sold_to.company_name = AAZStrType(
                serialized_name="companyName",
            )
            sold_to.country = AAZStrType(
                flags={"required": True},
            )
            sold_to.district = AAZStrType()
            sold_to.email = AAZStrType()
            sold_to.first_name = AAZStrType(
                serialized_name="firstName",
            )
            sold_to.is_valid_address = AAZBoolType(
                serialized_name="isValidAddress",
            )
            sold_to.last_name = AAZStrType(
                serialized_name="lastName",
            )
            sold_to.middle_name = AAZStrType(
                serialized_name="middleName",
            )
            sold_to.phone_number = AAZStrType(
                serialized_name="phoneNumber",
            )
            sold_to.postal_code = AAZStrType(
                serialized_name="postalCode",
            )
            sold_to.region = AAZStrType()

            tax_ids = cls._schema_on_200.value.Element.properties.tax_ids
            tax_ids.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.tax_ids.Element
            _element.country = AAZStrType()
            _element.id = AAZStrType()
            _element.scope = AAZStrType()
            _element.status = AAZStrType()
            _element.type = AAZStrType()

            system_data = cls._schema_on_200.value.Element.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.value.Element.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""


__all__ = ["List"]
