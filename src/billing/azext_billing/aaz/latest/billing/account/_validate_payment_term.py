# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "billing account validate-payment-term",
)
class ValidatePaymentTerm(AAZCommand):
    """Validates payment terms on a billing account with agreement type 'Microsoft Customer Agreement' and account type 'Enterprise'.

    :example: PaymentTermInvalid
        az billing account validate-payment-term --billing-account-name 00000000-0000-0000-0000-000000000000:00000000-0000-0000-0000-000000000000_2019-05-31 --parameters "[{term:net10,start-date:'2023-02-05T22:39:34.2606750Z',end-date:'2023-01-25T22:39:34.2606750Z'}]"
    """

    _aaz_info = {
        "version": "2024-04-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billing/billingaccounts/{}/validatepaymentterms", "2024-04-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.billing_account_name = AAZStrArg(
            options=["--billing-account-name"],
            help="The ID that uniquely identifies a billing account.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([0-9]+|([Pp][Cc][Nn]\\.[A-Za-z0-9]+)|[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}(:[0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12}_[0-9]{4}(-[0-9]{2}){2})?)$",
            ),
        )
        _args_schema.parameters = AAZListArg(
            options=["--parameters"],
            required=True,
        )

        parameters = cls._args_schema.parameters
        parameters.Element = AAZObjectArg()

        _element = cls._args_schema.parameters.Element
        _element.end_date = AAZDateTimeArg(
            options=["end-date"],
            help="The date on when the defined 'Payment Term' will end and is always in UTC.",
        )
        _element.start_date = AAZDateTimeArg(
            options=["start-date"],
            help="The date on when the defined 'Payment Term' will be effective from and is always in UTC.",
        )
        _element.term = AAZStrArg(
            options=["term"],
            help="Represents duration in netXX format. Always in days.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.BillingAccountsValidatePaymentTerms(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class BillingAccountsValidatePaymentTerms(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/validatePaymentTerms",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountName", self.ctx.args.billing_account_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args.parameters,
                typ=AAZListType,
                typ_kwargs={"flags": {"required": True}}
            )
            _builder.set_elements(AAZObjectType, ".")

            _elements = _builder.get("[]")
            if _elements is not None:
                _elements.set_prop("endDate", AAZStrType, ".end_date")
                _elements.set_prop("startDate", AAZStrType, ".start_date")
                _elements.set_prop("term", AAZStrType, ".term")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.eligibility_details = AAZListType(
                serialized_name="eligibilityDetails",
            )
            _schema_on_200.eligibility_status = AAZStrType(
                serialized_name="eligibilityStatus",
            )

            eligibility_details = cls._schema_on_200.eligibility_details
            eligibility_details.Element = AAZObjectType()

            _element = cls._schema_on_200.eligibility_details.Element
            _element.code = AAZStrType()
            _element.message = AAZStrType()

            return cls._schema_on_200


class _ValidatePaymentTermHelper:
    """Helper class for ValidatePaymentTerm"""


__all__ = ["ValidatePaymentTerm"]
