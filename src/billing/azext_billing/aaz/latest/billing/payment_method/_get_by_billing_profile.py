# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "billing payment-method get-by-billing-profile",
)
class GetByBillingProfile(AAZCommand):
    """Get a payment method linked with a billing profile. The operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.

    :example: PaymentMethodsGetByBillingProfile
        az billing payment-method get-by-billing-profile --billing-account-name 00000000-0000-0000-0000-000000000032:00000000-0000-0000-0000-000000000099_2019-05-31 --billing-profile-name ABC1-A1CD-AB1-BP1 --payment-method-name ABCDABCDABC0
    """

    _aaz_info = {
        "version": "2024-04-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billing/billingaccounts/{}/billingprofiles/{}/paymentmethodlinks/{}", "2024-04-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.billing_account_name = AAZStrArg(
            options=["--billing-account-name"],
            help="The ID that uniquely identifies a billing account.",
            required=True,
        )
        _args_schema.billing_profile_name = AAZStrArg(
            options=["--billing-profile-name"],
            help="The ID that uniquely identifies a billing profile.",
            required=True,
        )
        _args_schema.payment_method_name = AAZStrArg(
            options=["--payment-method-name"],
            help="The ID that uniquely identifies a payment method.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.PaymentMethodsGetByBillingProfile(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class PaymentMethodsGetByBillingProfile(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/paymentMethodLinks/{paymentMethodName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountName", self.ctx.args.billing_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "billingProfileName", self.ctx.args.billing_profile_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "paymentMethodName", self.ctx.args.payment_method_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.account_holder_name = AAZStrType(
                serialized_name="accountHolderName",
                flags={"read_only": True},
            )
            properties.display_name = AAZStrType(
                serialized_name="displayName",
                flags={"read_only": True},
            )
            properties.expiration = AAZStrType(
                flags={"read_only": True},
            )
            properties.family = AAZStrType(
                flags={"read_only": True},
            )
            properties.last_four_digits = AAZStrType(
                serialized_name="lastFourDigits",
                flags={"read_only": True},
            )
            properties.logos = AAZListType(
                flags={"read_only": True},
            )
            properties.payment_method = AAZObjectType(
                serialized_name="paymentMethod",
            )
            properties.payment_method_id = AAZStrType(
                serialized_name="paymentMethodId",
            )
            properties.payment_method_type = AAZStrType(
                serialized_name="paymentMethodType",
                flags={"read_only": True},
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )

            logos = cls._schema_on_200.properties.logos
            logos.Element = AAZObjectType()
            _GetByBillingProfileHelper._build_schema_payment_method_logo_read(logos.Element)

            payment_method = cls._schema_on_200.properties.payment_method
            payment_method.account_holder_name = AAZStrType(
                serialized_name="accountHolderName",
                flags={"read_only": True},
            )
            payment_method.display_name = AAZStrType(
                serialized_name="displayName",
                flags={"read_only": True},
            )
            payment_method.expiration = AAZStrType(
                flags={"read_only": True},
            )
            payment_method.family = AAZStrType()
            payment_method.id = AAZStrType(
                flags={"read_only": True},
            )
            payment_method.last_four_digits = AAZStrType(
                serialized_name="lastFourDigits",
                flags={"read_only": True},
            )
            payment_method.logos = AAZListType()
            payment_method.payment_method_type = AAZStrType(
                serialized_name="paymentMethodType",
                flags={"read_only": True},
            )
            payment_method.status = AAZStrType()

            logos = cls._schema_on_200.properties.payment_method.logos
            logos.Element = AAZObjectType()
            _GetByBillingProfileHelper._build_schema_payment_method_logo_read(logos.Element)

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _GetByBillingProfileHelper:
    """Helper class for GetByBillingProfile"""

    _schema_payment_method_logo_read = None

    @classmethod
    def _build_schema_payment_method_logo_read(cls, _schema):
        if cls._schema_payment_method_logo_read is not None:
            _schema.mime_type = cls._schema_payment_method_logo_read.mime_type
            _schema.url = cls._schema_payment_method_logo_read.url
            return

        cls._schema_payment_method_logo_read = _schema_payment_method_logo_read = AAZObjectType()

        payment_method_logo_read = _schema_payment_method_logo_read
        payment_method_logo_read.mime_type = AAZStrType(
            serialized_name="mimeType",
            flags={"read_only": True},
        )
        payment_method_logo_read.url = AAZStrType(
            flags={"read_only": True},
        )

        _schema.mime_type = cls._schema_payment_method_logo_read.mime_type
        _schema.url = cls._schema_payment_method_logo_read.url


__all__ = ["GetByBillingProfile"]
